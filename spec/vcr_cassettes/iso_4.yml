---
http_interactions:
- request:
    method: post
    uri: https://jcl49wv5ar-dsn.algolia.net/1/indexes/all_en/query
    body:
      encoding: UTF-8
      string: '{"query":"ISO 4","hitsPerPage":100,"filters":"category:standard"}'
    headers:
      User-Agent:
      - Algolia for Ruby (2.3.2), Ruby (3.2.0)
      X-Algolia-Api-Key:
      - dd1b9e1ab383f4d4817d29cd5e96d3f0
      X-Algolia-Application-Id:
      - JCL49WV5AR
      Content-Type:
      - application/json; charset=utf-8
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      Connection:
      - keep-alive
      Keep-Alive:
      - '30'
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx
      Date:
      - Sat, 14 Oct 2023 18:04:37 GMT
      Content-Type:
      - application/json; charset=UTF-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      X-Alg-Pt:
      - '13'
      Accept-Encoding:
      - deflate, gzip
      Cache-Control:
      - no-store
      Access-Control-Allow-Origin:
      - "*"
      Timing-Allow-Origin:
      - "*"
      X-Content-Type-Options:
      - nosniff
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      Content-Disposition:
      - inline; filename=a.txt
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        eyJoaXRzIjpbeyJjYXRlZ29yeSI6InN0YW5kYXJkIiwicGF0aCI6Ii9zaXRlcy9pc29vcmcvY29udGVudHMvZGF0YS9zdGFuZGFyZC8wOC81OC84NTgxNyIsInV1aWQiOiI1ODg4N2MwZi05MjRkLTQ2MGQtODAwOC0yOWFjNzcyYjUwMWMiLCJ0aXRsZSI6IklTTyA0NDkxLTE6MjAyMyBNZXRhbGxpYyBwb3dkZXJzIOKAlCBEZXRlcm1pbmF0aW9uIG9mIG94eWdlbiBjb250ZW50IGJ5IHJlZHVjdGlvbiBtZXRob2RzIOKAlCBQYXJ0IDE6IEdlbmVyYWwgZ3VpZGVsaW5lcyIsInN0YXR1cyI6IlB1Ymxpc2hlZCIsInllYXIiOjIwMjMsIm9yZGVyIjoxMSwidGV4dCI6IlRoaXMgZG9jdW1lbnQgaXMgdGhlIGZpcnN0IHBhcnQgb2YgYSBzZXJpZXMgb2Ygc3RhbmRhcmRzIGRlYWxpbmcgd2l0aCB0aGUgZGV0ZXJtaW5hdGlvbiBvZiBveHlnZW4gY29udGVudCBpbiBtZXRhbGxpYyBwb3dkZXJzIGJ5IHJlZHVjdGlvbiBtZXRob2RzLiBJdCBzcGVjaWZpZXMgZ2VuZXJhbCBndWlkYW5jZSB0byB0aGVzZSBtZXRob2RzIGFuZCBnaXZlcyBzb21lIHJlY29tbWVuZGF0aW9ucyBmb3IgdGhlIGNvcnJlY3QgaW50ZXJwcmV0YXRpb24gb2YgdGhlIHJlc3VsdHMgb2J0YWluZWQuIFRoZSB0ZXN0IG1ldGhvZHMgYXJlIGFwcGxpY2FibGUgZ2VuZXJhbGx5IHRvIGFsbCBwb3dkZXJzIG9mIG1ldGFscywgYWxsb3lzLCBjYXJiaWRlcyBhbmQgbWl4dHVyZXMgdGhlcmVvZi4gVGhlIGNvbnN0aXR1ZW50cyBvZiB0aGUgcG93ZGVyIHNoYWxsIGJlIG5vbi12b2xhdGlsZSB1bmRlciB0aGUgY29uZGl0aW9ucyBvZiB0ZXN0LiBUaGUgcG93ZGVyIHNoYWxsIGJlIGZyZWUgb2YgbHVicmljYW50IG9yIG9yZ2FuaWMgYmluZGVyLiBIb3dldmVyLCB0aGVyZSBleGlzdCBjZXJ0YWluIGxpbWl0YXRpb25zIHdoaWNoIGRlcGVuZCB1cG9uIHRoZSBuYXR1cmUgb2YgdGhlIGFuYWx5c2VkIG1ldGFsLiBUaGVzZSBsaW1pdGF0aW9ucyBhcmUgZGlzY3Vzc2VkIGluIEMgbGF1c2UgwqAgNCAuICIsIm9iamVjdElEIjoiODU4MTdfMCIsIl9oaWdobGlnaHRSZXN1bHQiOnsidGl0bGUiOnsidmFsdWUiOiI8ZW0+SVNPPC9lbT4gPGVtPjQ8L2VtPjQ5MS0xOjIwMjMgTWV0YWxsaWMgcG93ZGVycyDigJQgRGV0ZXJtaW5hdGlvbiBvZiBveHlnZW4gY29udGVudCBieSByZWR1Y3Rpb24gbWV0aG9kcyDigJQgUGFydCAxOiBHZW5lcmFsIGd1aWRlbGluZXMiLCJtYXRjaExldmVsIjoiZnVsbCIsImZ1bGx5SGlnaGxpZ2h0ZWQiOmZhbHNlLCJtYXRjaGVkV29yZHMiOlsiaXNvIiwiNCJdfSwidGV4dCI6eyJ2YWx1ZSI6IlRoaXMgZG9jdW1lbnQgaXMgdGhlIGZpcnN0IHBhcnQgb2YgYSBzZXJpZXMgb2Ygc3RhbmRhcmRzIGRlYWxpbmcgd2l0aCB0aGUgZGV0ZXJtaW5hdGlvbiBvZiBveHlnZW4gY29udGVudCBpbiBtZXRhbGxpYyBwb3dkZXJzIGJ5IHJlZHVjdGlvbiBtZXRob2RzLiBJdCBzcGVjaWZpZXMgZ2VuZXJhbCBndWlkYW5jZSB0byB0aGVzZSBtZXRob2RzIGFuZCBnaXZlcyBzb21lIHJlY29tbWVuZGF0aW9ucyBmb3IgdGhlIGNvcnJlY3QgaW50ZXJwcmV0YXRpb24gb2YgdGhlIHJlc3VsdHMgb2J0YWluZWQuIFRoZSB0ZXN0IG1ldGhvZHMgYXJlIGFwcGxpY2FibGUgZ2VuZXJhbGx5IHRvIGFsbCBwb3dkZXJzIG9mIG1ldGFscywgYWxsb3lzLCBjYXJiaWRlcyBhbmQgbWl4dHVyZXMgdGhlcmVvZi4gVGhlIGNvbnN0aXR1ZW50cyBvZiB0aGUgcG93ZGVyIHNoYWxsIGJlIG5vbi12b2xhdGlsZSB1bmRlciB0aGUgY29uZGl0aW9ucyBvZiB0ZXN0LiBUaGUgcG93ZGVyIHNoYWxsIGJlIGZyZWUgb2YgbHVicmljYW50IG9yIG9yZ2FuaWMgYmluZGVyLiBIb3dldmVyLCB0aGVyZSBleGlzdCBjZXJ0YWluIGxpbWl0YXRpb25zIHdoaWNoIGRlcGVuZCB1cG9uIHRoZSBuYXR1cmUgb2YgdGhlIGFuYWx5c2VkIG1ldGFsLiBUaGVzZSBsaW1pdGF0aW9ucyBhcmUgZGlzY3Vzc2VkIGluIEMgbGF1c2UgwqAgPGVtPjQ8L2VtPiAuICIsIm1hdGNoTGV2ZWwiOiJwYXJ0aWFsIiwiZnVsbHlIaWdobGlnaHRlZCI6ZmFsc2UsIm1hdGNoZWRXb3JkcyI6WyI0Il19fX0seyJjYXRlZ29yeSI6InN0YW5kYXJkIiwicGF0aCI6Ii9zaXRlcy9pc29vcmcvY29udGVudHMvZGF0YS9zdGFuZGFyZC8wOC81NC84NTQ3MyIsInV1aWQiOiIxMzVmMTMwOS00N2E1LTQyNzEtYTQ5NS01NTBjNmExOGI3YTciLCJ0aXRsZSI6IklTTyA0MjY2LTQ6MjAyMyBQZXRyb2xldW0gYW5kIGxpcXVpZCBwZXRyb2xldW0gcHJvZHVjdHMg4oCUIE1lYXN1cmVtZW50IG9mIGxldmVsIGFuZCB0ZW1wZXJhdHVyZSBpbiBzdG9yYWdlIHRhbmtzIGJ5IGF1dG9tYXRpYyBtZXRob2RzIOKAlCBQYXJ0IDQ6IE1lYXN1cmVtZW50IG9mIHRlbXBlcmF0dXJlIGluIGF0bW9zcGhlcmljIHRhbmtzIiwic3RhdHVzIjoiUHVibGlzaGVkIiwieWVhciI6MjAyMywib3JkZXIiOjExLCJ0ZXh0IjoiVGhpcyBkb2N1bWVudCBnaXZlcyByZXF1aXJlbWVudHMgYW5kIGd1aWRhbmNlIG9uIHRoZSBzZWxlY3Rpb24sIGFjY3VyYWN5LCBpbnN0YWxsYXRpb24sIGNvbW1pc3Npb25pbmcsIGNhbGlicmF0aW9uIGFuZCB2ZXJpZmljYXRpb24gb2YgYXV0b21hdGljIHRhbmsgdGhlcm1vbWV0ZXJzIChBVFRzKSBpbiBmaXNjYWwvY3VzdG9keSB0cmFuc2ZlciBhcHBsaWNhdGlvbnMuIFRoZSBBVFQgaXMgdXNlZCBmb3IgbWVhc3VyaW5nIHRoZSB0ZW1wZXJhdHVyZSBvZiBwZXRyb2xldW0gYW5kIGxpcXVpZCBwZXRyb2xldW0gcHJvZHVjdHMgaGF2aW5nIGEgUmVpZCB2YXBvdXIgcHJlc3N1cmUgbGVzcyB0aGFuIDEwMMKga1BhLCBzdG9yZWQgaW4gYXRtb3NwaGVyaWMgc3RvcmFnZSB0YW5rcy4gVGhpcyBkb2N1bWVudCBpcyBub3QgYXBwbGljYWJsZSB0byB0aGUgbWVhc3VyZW1lbnQgb2YgdGVtcGVyYXR1cmUgaW4gY2F2ZXJucyBvciBpbiByZWZyaWdlcmF0ZWQgc3RvcmFnZSB0YW5rcy4gIiwib2JqZWN0SUQiOiI4NTQ3M18wIiwiX2hpZ2hsaWdodFJlc3VsdCI6eyJ0aXRsZSI6eyJ2YWx1ZSI6IjxlbT5JU088L2VtPiA8ZW0+NDwvZW0+MjY2LTxlbT40PC9lbT46MjAyMyBQZXRyb2xldW0gYW5kIGxpcXVpZCBwZXRyb2xldW0gcHJvZHVjdHMg4oCUIE1lYXN1cmVtZW50IG9mIGxldmVsIGFuZCB0ZW1wZXJhdHVyZSBpbiBzdG9yYWdlIHRhbmtzIGJ5IGF1dG9tYXRpYyBtZXRob2RzIOKAlCBQYXJ0IDxlbT40PC9lbT46IE1lYXN1cmVtZW50IG9mIHRlbXBlcmF0dXJlIGluIGF0bW9zcGhlcmljIHRhbmtzIiwibWF0Y2hMZXZlbCI6ImZ1bGwiLCJmdWxseUhpZ2hsaWdodGVkIjpmYWxzZSwibWF0Y2hlZFdvcmRzIjpbImlzbyIsIjQiXX0sInRleHQiOnsidmFsdWUiOiJUaGlzIGRvY3VtZW50IGdpdmVzIHJlcXVpcmVtZW50cyBhbmQgZ3VpZGFuY2Ugb24gdGhlIHNlbGVjdGlvbiwgYWNjdXJhY3ksIGluc3RhbGxhdGlvbiwgY29tbWlzc2lvbmluZywgY2FsaWJyYXRpb24gYW5kIHZlcmlmaWNhdGlvbiBvZiBhdXRvbWF0aWMgdGFuayB0aGVybW9tZXRlcnMgKEFUVHMpIGluIGZpc2NhbC9jdXN0b2R5IHRyYW5zZmVyIGFwcGxpY2F0aW9ucy4gVGhlIEFUVCBpcyB1c2VkIGZvciBtZWFzdXJpbmcgdGhlIHRlbXBlcmF0dXJlIG9mIHBldHJvbGV1bSBhbmQgbGlxdWlkIHBldHJvbGV1bSBwcm9kdWN0cyBoYXZpbmcgYSBSZWlkIHZhcG91ciBwcmVzc3VyZSBsZXNzIHRoYW4gMTAwwqBrUGEsIHN0b3JlZCBpbiBhdG1vc3BoZXJpYyBzdG9yYWdlIHRhbmtzLiBUaGlzIGRvY3VtZW50IGlzIG5vdCBhcHBsaWNhYmxlIHRvIHRoZSBtZWFzdXJlbWVudCBvZiB0ZW1wZXJhdHVyZSBpbiBjYXZlcm5zIG9yIGluIHJlZnJpZ2VyYXRlZCBzdG9yYWdlIHRhbmtzLiAiLCJtYXRjaExldmVsIjoibm9uZSIsIm1hdGNoZWRXb3JkcyI6W119fX0seyJjYXRlZ29yeSI6InN0YW5kYXJkIiwicGF0aCI6Ii9zaXRlcy9pc29vcmcvY29udGVudHMvZGF0YS9zdGFuZGFyZC8wOC8wMy84MDM3NiIsInV1aWQiOiJhZjYzZTI2NC0zZmMwLTQyMGQtYWZkMS03N2YxNjk1YjMwMDYiLCJ0aXRsZSI6IklTTyA0OTI6MjAyMyBSb2xsaW5nIGJlYXJpbmdzIOKAlCBSYWRpYWwgYmVhcmluZ3Mg4oCUIEdlb21ldHJpY2FsIHByb2R1Y3Qgc3BlY2lmaWNhdGlvbnMgKEdQUykgYW5kIHRvbGVyYW5jZSB2YWx1ZXMiLCJzdGF0dXMiOiJQdWJsaXNoZWQiLCJ5ZWFyIjoyMDIzLCJvcmRlciI6MTEsInRleHQiOiJUaGlzIGRvY3VtZW50IHNwZWNpZmllcyBkaW1lbnNpb25hbCBhbmQgZ2VvbWV0cmljYWwgY2hhcmFjdGVyaXN0aWNzLCBkZXZpYXRpb24gbGltaXRzIGZyb20gbm9taW5hbCBzaXplcywgYW5kIHRvbGVyYW5jZSB2YWx1ZXMgdG8gZGVmaW5lIHRoZSBpbnRlcmZhY2UgKGV4Y2VwdCBjaGFtZmVycykgb2YgcmFkaWFsIHJvbGxpbmcgYmVhcmluZ3MuIE5vbWluYWwgYm91bmRhcnkgZGltZW5zaW9ucyBhcmUgZGVmaW5lZCBpbiBJU08gMTUgLCBJU08gMzU1IFsgMiBdIGFuZCBJU08gODQ0MyBbIDQgXSAuIFRoaXMgZG9jdW1lbnQgZG9lcyBub3QgYXBwbHkgdG8gY2VydGFpbiByYWRpYWwgYmVhcmluZ3Mgb2YgcGFydGljdWxhciB0eXBlcyAoZS5nLiBuZWVkbGUgcm9sbGVyIGJlYXJpbmdzKSBvciBmb3IgcGFydGljdWxhciBmaWVsZHMgb2YgYXBwbGljYXRpb24gKGUuZy4gYWlyZnJhbWUgYmVhcmluZ3MpLiBUb2xlcmFuY2VzIGZvciBzdWNoIGJlYXJpbmdzIGFyZSBnaXZlbiBpbiB0aGUgcmVsZXZhbnQgSW50ZXJuYXRpb25hbCBTdGFuZGFyZHMuIENoYW1mZXIgZGltZW5zaW9uIGxpbWl0cyBhcmUgZ2l2ZW4gaW4gSVNPIDU4MiBbIDMgXSAuICIsIm9iamVjdElEIjoiODAzNzZfMCIsIl9oaWdobGlnaHRSZXN1bHQiOnsidGl0bGUiOnsidmFsdWUiOiI8ZW0+SVNPPC9lbT4gPGVtPjQ8L2VtPjkyOjIwMjMgUm9sbGluZyBiZWFyaW5ncyDigJQgUmFkaWFsIGJlYXJpbmdzIOKAlCBHZW9tZXRyaWNhbCBwcm9kdWN0IHNwZWNpZmljYXRpb25zIChHUFMpIGFuZCB0b2xlcmFuY2UgdmFsdWVzIiwibWF0Y2hMZXZlbCI6ImZ1bGwiLCJmdWxseUhpZ2hsaWdodGVkIjpmYWxzZSwibWF0Y2hlZFdvcmRzIjpbImlzbyIsIjQiXX0sInRleHQiOnsidmFsdWUiOiJUaGlzIGRvY3VtZW50IHNwZWNpZmllcyBkaW1lbnNpb25hbCBhbmQgZ2VvbWV0cmljYWwgY2hhcmFjdGVyaXN0aWNzLCBkZXZpYXRpb24gbGltaXRzIGZyb20gbm9taW5hbCBzaXplcywgYW5kIHRvbGVyYW5jZSB2YWx1ZXMgdG8gZGVmaW5lIHRoZSBpbnRlcmZhY2UgKGV4Y2VwdCBjaGFtZmVycykgb2YgcmFkaWFsIHJvbGxpbmcgYmVhcmluZ3MuIE5vbWluYWwgYm91bmRhcnkgZGltZW5zaW9ucyBhcmUgZGVmaW5lZCBpbiA8ZW0+SVNPPC9lbT4gMTUgLCA8ZW0+SVNPPC9lbT4gMzU1IFsgMiBdIGFuZCA8ZW0+SVNPPC9lbT4gODQ0MyBbIDxlbT40PC9lbT4gXSAuIFRoaXMgZG9jdW1lbnQgZG9lcyBub3QgYXBwbHkgdG8gY2VydGFpbiByYWRpYWwgYmVhcmluZ3Mgb2YgcGFydGljdWxhciB0eXBlcyAoZS5nLiBuZWVkbGUgcm9sbGVyIGJlYXJpbmdzKSBvciBmb3IgcGFydGljdWxhciBmaWVsZHMgb2YgYXBwbGljYXRpb24gKGUuZy4gYWlyZnJhbWUgYmVhcmluZ3MpLiBUb2xlcmFuY2VzIGZvciBzdWNoIGJlYXJpbmdzIGFyZSBnaXZlbiBpbiB0aGUgcmVsZXZhbnQgSW50ZXJuYXRpb25hbCBTdGFuZGFyZHMuIENoYW1mZXIgZGltZW5zaW9uIGxpbWl0cyBhcmUgZ2l2ZW4gaW4gPGVtPklTTzwvZW0+IDU4MiBbIDMgXSAuICIsIm1hdGNoTGV2ZWwiOiJmdWxsIiwiZnVsbHlIaWdobGlnaHRlZCI6ZmFsc2UsIm1hdGNoZWRXb3JkcyI6WyJpc28iLCI0Il19fX0seyJjYXRlZ29yeSI6InN0YW5kYXJkIiwicGF0aCI6Ii9zaXRlcy9pc29vcmcvY29udGVudHMvZGF0YS9zdGFuZGFyZC8wNy85OC83OTgyNSIsInV1aWQiOiI1N2IxYmJhMS1mYWJhLTQ2ODQtYmE1OS04ZjZiY2I4MTExMmMiLCJ0aXRsZSI6IklTTyA0MjU0LTEzOjIwMjMgQWdyaWN1bHR1cmFsIG1hY2hpbmVyeSDigJQgU2FmZXR5IOKAlCBQYXJ0IDEzOiBMYXJnZSByb3RhcnkgbW93ZXJzIiwic3RhdHVzIjoiUHVibGlzaGVkIiwieWVhciI6MjAyMywib3JkZXIiOjExLCJ0ZXh0IjoiVGhpcyBkb2N1bWVudCwgd2hlbiB1c2VkIHRvZ2V0aGVyIHdpdGggSVNPIDQyNTQgLSAxICwgc3BlY2lmaWVzIHRoZSBzYWZldHkgcmVxdWlyZW1lbnRzIGFuZCB0aGVpciB2ZXJpZmljYXRpb24gZm9yIHRoZSBkZXNpZ24gYW5kIGNvbnN0cnVjdGlvbiBvZiB0b3dlZCwgc2VtaS1tb3VudGVkLCBvciBtb3VudGVkIGxhcmdlIHJvdGFyeSBtb3dlcnMgd2l0aCBzaW5nbGUgb3IgbXVsdGlwbGUgY3V0dGluZyBlbGVtZW50cyB3aGljaCBoYXZlIGEgY3V0dGluZyBlbGVtZW50IHRpcCBjaXJjbGUgb2YgMcKgMDAwwqBtbSBvciBncmVhdGVyIGZvciBhbnkgc2luZ2xlIGN1dHRpbmcgLSBlbGVtZW50IGFzc2VtYmx5LCBtb3VudGVkIG9uIGEgcHJvcGVsbGluZyB0cmFjdG9yIG9yIG1hY2hpbmUsIGludGVuZGVkIGZvciBhZ3JpY3VsdHVyYWwgbW93aW5nIGVxdWlwbWVudCBhbmQgZGVzaWduZWQgZm9yIHNocmVkZGluZyBjcm9wIHJlc2lkdWUsIGdyYXNzIGFuZCBzbWFsbCBicnVzaCBieSBpbXBhY3QuIEl0IGRlc2NyaWJlcyBtZXRob2RzIGZvciB0aGUgZWxpbWluYXRpb24gb3IgcmVkdWN0aW9uIG9mIGhhemFyZHMgYXJpc2luZyBmcm9tIHRoZSBpbnRlbmRlZCB1c2UgYW5kIHJlYXNvbmFibHkgZm9yZXNlZWFibGUgbWlzdXNlIG9mIHRoZXNlIG1hY2hpbmVzIGJ5IG9uZSBwZXJzb24gKHRoZSBvcGVyYXRvcikgaW4gdGhlIGNvdXJzZSBvZiBub3JtYWwgb3BlcmF0aW9uIGFuZCBzZXJ2aWNlLiBJbiBhZGRpdGlvbiwgaXQgc3BlY2lmaWVzIHRoZSB0eXBlIG9mIGluZm9ybWF0aW9uIG9uIHNhZmUgd29ya2luZyBwcmFjdGljZXMgdG8gYmUgcHJvdmlkZWQgYnkgdGhlIG1hbnVmYWN0dXJlci4gTk9URcKgMSDCoMKgwqAgV2hlbiB1c2VkIG91dHNpZGUgb2YgYWdyaWN1bHR1cmUsIGFkZGl0aW9uYWwgcmVxdWlyZW1lbnRzIG5vdCBzcGVjaWZpZWQgaW4gdGhpcyBkb2N1bWVudCBjYW4gYmUgYXBwbGljYWJsZS4gVGhpcyBkb2N1bWVudCBpcyBub3QgYXBwbGljYWJsZSB0bzog4oCUIMKgwqDCoCByb3RhcnkgZGlzYyBtb3dlcnMsIHJvdGFyeSBkcnVtIG1vd2VycywgYW5kIGZsYWlsIG1vd2VycyBkZXNpZ25lZCBmb3IgZm9yYWdlIGNyb3AgaGFydmVzdGluZyBhcyBjb3ZlcmVkIGJ5IElTTyA0MjU0IC0gMTIgOyDigJQgwqDCoMKgIGFybS10eXBlIGxhcmdlIHJvdGFyeSBtb3dlcnM7IOKAlCDCoMKgwqAgcGVkZXN0cmlhbi1jb250cm9sbGVkIG1vdG9yIG1vd2Vyczsg4oCUIMKgwqDCoCBsYXduIG1vd2VycyBjb3ZlcmVkIGJ5IHRoZSBJU08gNTM5NSBzZXJpZXMgLiBXaGVuIHJlcXVpcmVtZW50cyBvZiB0aGlzIGRvY3VtZW50IGFyZSBkaWZmZXJlbnQgZnJvbSB0aG9zZSB3aGljaCBhcmUgc3RhdGVkIGluIElTTyA0MjU0IC0gMSAsIHRoZSByZXF1aXJlbWVudHMgb2YgdGhpcyBkb2N1bWVudCB0YWtlIHByZWNlZGVuY2Ugb3ZlciB0aGUgcHJvdmlzaW9ucyBvZiBJU08gNDI1NCAtIDEgZm9yIG1hY2hpbmVzIHRoYXQgaGF2ZSBiZWVuIGRlc2lnbmVkIGFuZCBidWlsdCBhY2NvcmRpbmcgdG8gdGhlIHByb3Zpc2lvbnMgb2YgdGhpcyBkb2N1bWVudC4gVGhpcyBkb2N1bWVudCBpcyBhbHNvIG5vdCBhcHBsaWNhYmxlIHRvIGVudmlyb25tZW50YWwgaGF6YXJkcywgcm9hZCBzYWZldHksIGVsZWN0cm9tYWduZXRpYyBjb21wYXRpYmlsaXR5LCB2aWJyYXRpb24gYW5kIGhhemFyZHMgcmVsYXRlZCB0byBtb3ZpbmcgcGFydHMgZm9yIHBvd2VyIHRyYW5zbWlzc2lvbi4gSXQgaXMgYWxzbyBub3QgYXBwbGljYWJsZSB0byBoYXphcmRzIHJlbGF0ZWQgdG8gbWFpbnRlbmFuY2Ugb3IgcmVwYWlycyB0byBiZSBjYXJyaWVkIG91dCBieSBwcm9mZXNzaW9uYWwgc2VydmljZSBwZXJzb25uZWwuIFRoaXMgZG9jdW1lbnQsIHRha2VuIHRvZ2V0aGVyIHdpdGggSVNPIDQyNTQgLSAxICwgZGVhbHMgd2l0aCBhbGwgdGhlIHNpZ25pZmljYW50IGhhemFyZHMsIGhhemFyZG91cyBzaXR1YXRpb25zIGFuZCBldmVudHMgcmVsZXZhbnQgdG8gbGFyZ2Ugcm90YXJ5IG1vd2VycyB1c2VkIGFzIGludGVuZGVkIGFuZCB1bmRlciB0aGUgY29uZGl0aW9ucyBmb3Jlc2VlbiBieSB0aGUgbWFudWZhY3R1cmVyLiAoQSBsaXN0IG9mIHNpZ25pZmljYW50IGhhemFyZHMgaXMgcHJvdmlkZWQgaW4gQW5uZXjCoEEgLikgTk9URcKgMiDCoMKgwqAgRXhhbXBsZSBpbGx1c3RyYXRpb25zIG9mIHR3byBtb3dlcnMgKGEgcmlnaWQtZGVjayBsYXJnZSByb3RhcnkgbW93ZXIgYW5kIGEgdHJhaWwtdHlwZSBtdWx0aS1zZWN0aW9uLCBmb2xkYWJsZS13aW5nIGxhcmdlIHJvdGFyeSBtb3dlcikgZGVhbHQgd2l0aCBpbiB0aGlzIGRvY3VtZW50IGFyZSBzaG93biBpbiBBbm5leMKgQyAsIEMuMSAuIE5PVEXCoDMgwqDCoMKgIEV4YW1wbGUgaWxsdXN0cmF0aW9ucyBvZiBtb3dlcnMgbm90IGRlYWx0IHdpdGggaW4gdGhpcyBkb2N1bWVudCBhcmUgc2hvd24gaW4gQW5uZXjCoEMgLCBDLjIgLiBOT1RFwqA0IMKgwqDCoCBJU08gMTQ5ODIgc3BlY2lmaWVzIHRlc3QgbWV0aG9kcyBhbmQgYWNjZXB0YW5jZSBjcml0ZXJpYSBmb3IgZXZhbHVhdGluZyB0aGUgZWxlY3Ryb21hZ25ldGljIGNvbXBhdGliaWxpdHkgb2YgYWxsIGtpbmRzIG9mIG1vYmlsZSBhZ3JpY3VsdHVyYWwgbWFjaGluZXJ5LiBUaGlzIGRvY3VtZW50IGlzIG5vdCBhcHBsaWNhYmxlIHRvIGxhcmdlIHJvdGFyeSBtb3dlcnMgd2hpY2ggYXJlIG1hbnVmYWN0dXJlZCBiZWZvcmUgdGhlIGRhdGUgb2YgcHVibGljYXRpb24uICIsIm9iamVjdElEIjoiNzk4MjVfMCIsIl9oaWdobGlnaHRSZXN1bHQiOnsidGl0bGUiOnsidmFsdWUiOiI8ZW0+SVNPPC9lbT4gPGVtPjQ8L2VtPjI1NC0xMzoyMDIzIEFncmljdWx0dXJhbCBtYWNoaW5lcnkg4oCUIFNhZmV0eSDigJQgUGFydCAxMzogTGFyZ2Ugcm90YXJ5IG1vd2VycyIsIm1hdGNoTGV2ZWwiOiJmdWxsIiwiZnVsbHlIaWdobGlnaHRlZCI6ZmFsc2UsIm1hdGNoZWRXb3JkcyI6WyJpc28iLCI0Il19LCJ0ZXh0Ijp7InZhbHVlIjoiVGhpcyBkb2N1bWVudCwgd2hlbiB1c2VkIHRvZ2V0aGVyIHdpdGggPGVtPklTTzwvZW0+IDxlbT40PC9lbT4yNTQgLSAxICwgc3BlY2lmaWVzIHRoZSBzYWZldHkgcmVxdWlyZW1lbnRzIGFuZCB0aGVpciB2ZXJpZmljYXRpb24gZm9yIHRoZSBkZXNpZ24gYW5kIGNvbnN0cnVjdGlvbiBvZiB0b3dlZCwgc2VtaS1tb3VudGVkLCBvciBtb3VudGVkIGxhcmdlIHJvdGFyeSBtb3dlcnMgd2l0aCBzaW5nbGUgb3IgbXVsdGlwbGUgY3V0dGluZyBlbGVtZW50cyB3aGljaCBoYXZlIGEgY3V0dGluZyBlbGVtZW50IHRpcCBjaXJjbGUgb2YgMcKgMDAwwqBtbSBvciBncmVhdGVyIGZvciBhbnkgc2luZ2xlIGN1dHRpbmcgLSBlbGVtZW50IGFzc2VtYmx5LCBtb3VudGVkIG9uIGEgcHJvcGVsbGluZyB0cmFjdG9yIG9yIG1hY2hpbmUsIGludGVuZGVkIGZvciBhZ3JpY3VsdHVyYWwgbW93aW5nIGVxdWlwbWVudCBhbmQgZGVzaWduZWQgZm9yIHNocmVkZGluZyBjcm9wIHJlc2lkdWUsIGdyYXNzIGFuZCBzbWFsbCBicnVzaCBieSBpbXBhY3QuIEl0IGRlc2NyaWJlcyBtZXRob2RzIGZvciB0aGUgZWxpbWluYXRpb24gb3IgcmVkdWN0aW9uIG9mIGhhemFyZHMgYXJpc2luZyBmcm9tIHRoZSBpbnRlbmRlZCB1c2UgYW5kIHJlYXNvbmFibHkgZm9yZXNlZWFibGUgbWlzdXNlIG9mIHRoZXNlIG1hY2hpbmVzIGJ5IG9uZSBwZXJzb24gKHRoZSBvcGVyYXRvcikgaW4gdGhlIGNvdXJzZSBvZiBub3JtYWwgb3BlcmF0aW9uIGFuZCBzZXJ2aWNlLiBJbiBhZGRpdGlvbiwgaXQgc3BlY2lmaWVzIHRoZSB0eXBlIG9mIGluZm9ybWF0aW9uIG9uIHNhZmUgd29ya2luZyBwcmFjdGljZXMgdG8gYmUgcHJvdmlkZWQgYnkgdGhlIG1hbnVmYWN0dXJlci4gTk9URcKgMSDCoMKgwqAgV2hlbiB1c2VkIG91dHNpZGUgb2YgYWdyaWN1bHR1cmUsIGFkZGl0aW9uYWwgcmVxdWlyZW1lbnRzIG5vdCBzcGVjaWZpZWQgaW4gdGhpcyBkb2N1bWVudCBjYW4gYmUgYXBwbGljYWJsZS4gVGhpcyBkb2N1bWVudCBpcyBub3QgYXBwbGljYWJsZSB0bzog4oCUIMKgwqDCoCByb3RhcnkgZGlzYyBtb3dlcnMsIHJvdGFyeSBkcnVtIG1vd2VycywgYW5kIGZsYWlsIG1vd2VycyBkZXNpZ25lZCBmb3IgZm9yYWdlIGNyb3AgaGFydmVzdGluZyBhcyBjb3ZlcmVkIGJ5IDxlbT5JU088L2VtPiA8ZW0+NDwvZW0+MjU0IC0gMTIgOyDigJQgwqDCoMKgIGFybS10eXBlIGxhcmdlIHJvdGFyeSBtb3dlcnM7IOKAlCDCoMKgwqAgcGVkZXN0cmlhbi1jb250cm9sbGVkIG1vdG9yIG1vd2Vyczsg4oCUIMKgwqDCoCBsYXduIG1vd2VycyBjb3ZlcmVkIGJ5IHRoZSA8ZW0+SVNPPC9lbT4gNTM5NSBzZXJpZXMgLiBXaGVuIHJlcXVpcmVtZW50cyBvZiB0aGlzIGRvY3VtZW50IGFyZSBkaWZmZXJlbnQgZnJvbSB0aG9zZSB3aGljaCBhcmUgc3RhdGVkIGluIDxlbT5JU088L2VtPiA8ZW0+NDwvZW0+MjU0IC0gMSAsIHRoZSByZXF1aXJlbWVudHMgb2YgdGhpcyBkb2N1bWVudCB0YWtlIHByZWNlZGVuY2Ugb3ZlciB0aGUgcHJvdmlzaW9ucyBvZiA8ZW0+SVNPPC9lbT4gPGVtPjQ8L2VtPjI1NCAtIDEgZm9yIG1hY2hpbmVzIHRoYXQgaGF2ZSBiZWVuIGRlc2lnbmVkIGFuZCBidWlsdCBhY2NvcmRpbmcgdG8gdGhlIHByb3Zpc2lvbnMgb2YgdGhpcyBkb2N1bWVudC4gVGhpcyBkb2N1bWVudCBpcyBhbHNvIG5vdCBhcHBsaWNhYmxlIHRvIGVudmlyb25tZW50YWwgaGF6YXJkcywgcm9hZCBzYWZldHksIGVsZWN0cm9tYWduZXRpYyBjb21wYXRpYmlsaXR5LCB2aWJyYXRpb24gYW5kIGhhemFyZHMgcmVsYXRlZCB0byBtb3ZpbmcgcGFydHMgZm9yIHBvd2VyIHRyYW5zbWlzc2lvbi4gSXQgaXMgYWxzbyBub3QgYXBwbGljYWJsZSB0byBoYXphcmRzIHJlbGF0ZWQgdG8gbWFpbnRlbmFuY2Ugb3IgcmVwYWlycyB0byBiZSBjYXJyaWVkIG91dCBieSBwcm9mZXNzaW9uYWwgc2VydmljZSBwZXJzb25uZWwuIFRoaXMgZG9jdW1lbnQsIHRha2VuIHRvZ2V0aGVyIHdpdGggPGVtPklTTzwvZW0+IDxlbT40PC9lbT4yNTQgLSAxICwgZGVhbHMgd2l0aCBhbGwgdGhlIHNpZ25pZmljYW50IGhhemFyZHMsIGhhemFyZG91cyBzaXR1YXRpb25zIGFuZCBldmVudHMgcmVsZXZhbnQgdG8gbGFyZ2Ugcm90YXJ5IG1vd2VycyB1c2VkIGFzIGludGVuZGVkIGFuZCB1bmRlciB0aGUgY29uZGl0aW9ucyBmb3Jlc2VlbiBieSB0aGUgbWFudWZhY3R1cmVyLiAoQSBsaXN0IG9mIHNpZ25pZmljYW50IGhhemFyZHMgaXMgcHJvdmlkZWQgaW4gQW5uZXjCoEEgLikgTk9URcKgMiDCoMKgwqAgRXhhbXBsZSBpbGx1c3RyYXRpb25zIG9mIHR3byBtb3dlcnMgKGEgcmlnaWQtZGVjayBsYXJnZSByb3RhcnkgbW93ZXIgYW5kIGEgdHJhaWwtdHlwZSBtdWx0aS1zZWN0aW9uLCBmb2xkYWJsZS13aW5nIGxhcmdlIHJvdGFyeSBtb3dlcikgZGVhbHQgd2l0aCBpbiB0aGlzIGRvY3VtZW50IGFyZSBzaG93biBpbiBBbm5leMKgQyAsIEMuMSAuIE5PVEXCoDMgwqDCoMKgIEV4YW1wbGUgaWxsdXN0cmF0aW9ucyBvZiBtb3dlcnMgbm90IGRlYWx0IHdpdGggaW4gdGhpcyBkb2N1bWVudCBhcmUgc2hvd24gaW4gQW5uZXjCoEMgLCBDLjIgLiBOT1RFwqA8ZW0+NDwvZW0+IMKgwqDCoCA8ZW0+SVNPPC9lbT4gMTQ5ODIgc3BlY2lmaWVzIHRlc3QgbWV0aG9kcyBhbmQgYWNjZXB0YW5jZSBjcml0ZXJpYSBmb3IgZXZhbHVhdGluZyB0aGUgZWxlY3Ryb21hZ25ldGljIGNvbXBhdGliaWxpdHkgb2YgYWxsIGtpbmRzIG9mIG1vYmlsZSBhZ3JpY3VsdHVyYWwgbWFjaGluZXJ5LiBUaGlzIGRvY3VtZW50IGlzIG5vdCBhcHBsaWNhYmxlIHRvIGxhcmdlIHJvdGFyeSBtb3dlcnMgd2hpY2ggYXJlIG1hbnVmYWN0dXJlZCBiZWZvcmUgdGhlIGRhdGUgb2YgcHVibGljYXRpb24uICIsIm1hdGNoTGV2ZWwiOiJmdWxsIiwiZnVsbHlIaWdobGlnaHRlZCI6ZmFsc2UsIm1hdGNoZWRXb3JkcyI6WyJpc28iLCI0Il19fX0seyJjYXRlZ29yeSI6InN0YW5kYXJkIiwicGF0aCI6Ii9zaXRlcy9pc29vcmcvY29udGVudHMvZGF0YS9zdGFuZGFyZC8wNy84MC83ODA3OSIsInV1aWQiOiJiNTQ1MTc5MC04ZjAyLTQ5NWMtODcwMS0xZTI0MjQ1MTZlMGMiLCJ0aXRsZSI6IklTTyA0MjEwLTQ6MjAyMyBDeWNsZXMg4oCUIFNhZmV0eSByZXF1aXJlbWVudHMgZm9yIGJpY3ljbGVzIOKAlCBQYXJ0IDQ6IEJyYWtpbmcgdGVzdCBtZXRob2RzIiwic3RhdHVzIjoiUHVibGlzaGVkIiwieWVhciI6MjAyMywib3JkZXIiOjExLCJ0ZXh0IjoiVGhpcyBkb2N1bWVudCBzcGVjaWZpZXMgdGhlIGJyYWtpbmcgdGVzdCBtZXRob2RzIGZvciBJU08gwqAgNDIxMCDigJEgMiAuICIsIm9iamVjdElEIjoiNzgwNzlfMCIsIl9oaWdobGlnaHRSZXN1bHQiOnsidGl0bGUiOnsidmFsdWUiOiI8ZW0+SVNPPC9lbT4gPGVtPjQ8L2VtPjIxMC08ZW0+NDwvZW0+OjIwMjMgQ3ljbGVzIOKAlCBTYWZldHkgcmVxdWlyZW1lbnRzIGZvciBiaWN5Y2xlcyDigJQgUGFydCA8ZW0+NDwvZW0+OiBCcmFraW5nIHRlc3QgbWV0aG9kcyIsIm1hdGNoTGV2ZWwiOiJmdWxsIiwiZnVsbHlIaWdobGlnaHRlZCI6ZmFsc2UsIm1hdGNoZWRXb3JkcyI6WyJpc28iLCI0Il19LCJ0ZXh0Ijp7InZhbHVlIjoiVGhpcyBkb2N1bWVudCBzcGVjaWZpZXMgdGhlIGJyYWtpbmcgdGVzdCBtZXRob2RzIGZvciA8ZW0+SVNPPC9lbT4gwqAgPGVtPjQ8L2VtPjIxMCDigJEgMiAuICIsIm1hdGNoTGV2ZWwiOiJmdWxsIiwiZnVsbHlIaWdobGlnaHRlZCI6ZmFsc2UsIm1hdGNoZWRXb3JkcyI6WyJpc28iLCI0Il19fX0seyJjYXRlZ29yeSI6InN0YW5kYXJkIiwicGF0aCI6Ii9zaXRlcy9pc29vcmcvY29udGVudHMvZGF0YS9zdGFuZGFyZC8wNy80OS83NDk3NCIsInV1aWQiOiIyZWQ2NjhkZS03MjIyLTRhMmItYTQ0ZC04MjVkNmI2ZTk4ZmUiLCJ0aXRsZSI6IklTTyA0OC05OjIwMTggUnViYmVyLCB2dWxjYW5pemVkIG9yIHRoZXJtb3BsYXN0aWMg4oCUIERldGVybWluYXRpb24gb2YgaGFyZG5lc3Mg4oCUIFBhcnQgOTogQ2FsaWJyYXRpb24gYW5kIHZlcmlmaWNhdGlvbiBvZiBoYXJkbmVzcyB0ZXN0ZXJzIiwic3RhdHVzIjoiUHVibGlzaGVkIiwieWVhciI6MjAyMywib3JkZXIiOjExLCJ0ZXh0IjoiVGhpcyBkb2N1bWVudCBzcGVjaWZpZXMgcHJvY2VkdXJlcyBmb3IgdGhlIGNhbGlicmF0aW9uIGFuZCB2ZXJpZmljYXRpb24gb2YgZHVyb21ldGVycyBvZiB0eXBlcyBBLCBELCBBTyBhbmQgQU0gKHNlZSBJU08gNDgtNCksIElSSEQgcG9ja2V0IG1ldGVycyAoc2VlIElTTyA0OC01KSwgSVJIRCBkZWFkLWxvYWQgaW5zdHJ1bWVudHMgKHNlZSBJU08gNDgtMikgYW5kIGRlYWQtbG9hZCBpbnN0cnVtZW50cyB1c2luZyB0aGUgdmVyeSBsb3cgcnViYmVyIGhhcmRuZXNzIHNjYWxlIChzZWUgSVNPIDQ4LTMpLiAiLCJvYmplY3RJRCI6Ijc0OTc0XzAiLCJfaGlnaGxpZ2h0UmVzdWx0Ijp7InRpdGxlIjp7InZhbHVlIjoiPGVtPklTTzwvZW0+IDxlbT40PC9lbT44LTk6MjAxOCBSdWJiZXIsIHZ1bGNhbml6ZWQgb3IgdGhlcm1vcGxhc3RpYyDigJQgRGV0ZXJtaW5hdGlvbiBvZiBoYXJkbmVzcyDigJQgUGFydCA5OiBDYWxpYnJhdGlvbiBhbmQgdmVyaWZpY2F0aW9uIG9mIGhhcmRuZXNzIHRlc3RlcnMiLCJtYXRjaExldmVsIjoiZnVsbCIsImZ1bGx5SGlnaGxpZ2h0ZWQiOmZhbHNlLCJtYXRjaGVkV29yZHMiOlsiaXNvIiwiNCJdfSwidGV4dCI6eyJ2YWx1ZSI6IlRoaXMgZG9jdW1lbnQgc3BlY2lmaWVzIHByb2NlZHVyZXMgZm9yIHRoZSBjYWxpYnJhdGlvbiBhbmQgdmVyaWZpY2F0aW9uIG9mIGR1cm9tZXRlcnMgb2YgdHlwZXMgQSwgRCwgQU8gYW5kIEFNIChzZWUgPGVtPklTTzwvZW0+IDxlbT40PC9lbT44LTxlbT40PC9lbT4pLCBJUkhEIHBvY2tldCBtZXRlcnMgKHNlZSA8ZW0+SVNPPC9lbT4gPGVtPjQ8L2VtPjgtNSksIElSSEQgZGVhZC1sb2FkIGluc3RydW1lbnRzIChzZWUgPGVtPklTTzwvZW0+IDxlbT40PC9lbT44LTIpIGFuZCBkZWFkLWxvYWQgaW5zdHJ1bWVudHMgdXNpbmcgdGhlIHZlcnkgbG93IHJ1YmJlciBoYXJkbmVzcyBzY2FsZSAoc2VlIDxlbT5JU088L2VtPiA8ZW0+NDwvZW0+OC0zKS4gIiwibWF0Y2hMZXZlbCI6ImZ1bGwiLCJmdWxseUhpZ2hsaWdodGVkIjpmYWxzZSwibWF0Y2hlZFdvcmRzIjpbImlzbyIsIjQiXX19fSx7ImNhdGVnb3J5Ijoic3RhbmRhcmQiLCJwYXRoIjoiL3NpdGVzL2lzb29yZy9jb250ZW50cy9kYXRhL3N0YW5kYXJkLzA3LzQ5Lzc0OTcyIiwidXVpZCI6ImFhNGNiZGI1LTAyYzItNDI0MS1iOTA5LTk3ZTM4OGE4Y2VhZSIsInRpdGxlIjoiSVNPIDQ4LTc6MjAxOCBSdWJiZXIsIHZ1bGNhbml6ZWQgb3IgdGhlcm1vcGxhc3RpYyDigJQgRGV0ZXJtaW5hdGlvbiBvZiBoYXJkbmVzcyDigJQgUGFydCA3OiBBcHBhcmVudCBoYXJkbmVzcyBvZiBydWJiZXItY292ZXJlZCByb2xsZXJzIGJ5IFNob3JlLXR5cGUgZHVyb21ldGVyIG1ldGhvZCIsInN0YXR1cyI6IlB1Ymxpc2hlZCIsInllYXIiOjIwMjMsIm9yZGVyIjoxMSwidGV4dCI6IlRoaXMgZG9jdW1lbnQgc3BlY2lmaWVzIGEgbWV0aG9kIGZvciB0aGUgZGV0ZXJtaW5hdGlvbiBvZiB0aGUgYXBwYXJlbnQgaGFyZG5lc3Mgb2YgdnVsY2FuaXplZC0gb3IgdGhlcm1vcGxhc3RpYy1ydWJiZXIgcm9sbGVyIGNvdmVycywgZXhwcmVzc2VkIGluIFNob3JlIGhhcmRuZXNzLCBmb3IgbWVhc3VyZW1lbnQgd2hlcmUgb25seSBtZWRpdW0gcHJlY2lzaW9uIGlzIHJlcXVpcmVkLiBUaGUgbWV0aG9kIGFuZCBhcHBhcmF0dXMgdXNlZCBhcmUgZXNzZW50aWFsbHkgdGhvc2UgZGVzY3JpYmVkIGluIElTTyA0OC00LCB0aGUgbWVhc3VyZW1lbnRzIGluIHRoaXMgY2FzZSBiZWluZyBtYWRlIG9uIHRoZSBjdXJ2ZWQgc3VyZmFjZSBvZiB0aGUgY29uZGl0aW9uZWQgcnViYmVyLWNvdmVyZWQgcm9sbGVyIHJhdGhlciB0aGFuIG9uIGEgZmxhdCB0ZXN0IHBpZWNlLiBTaG9yZSB0eXBlIEEgYW5kIHR5cGUgRCBpbnN0cnVtZW50cyBhcmUgc3BlY2lmaWVkLCB0aGUgbGF0dGVyIGJlaW5nIHVzZWQgZm9yIG1lYXN1cmVtZW50cyBvbiByb2xsZXJzIG9mIGhpZ2ggaGFyZG5lc3MuIE5PVEUgICAgICAgV2l0aCBzb21lIHJvbGxlcnMsIHRoZXJlIGNhbiBiZSBzaWduaWZpY2FudCB2YXJpYXRpb24gaW4gdGhlIHRoaWNrbmVzcyBvZiB0aGUgcnViYmVyIG92ZXIgdGhlIHN1cmZhY2Ugb2YgdGhlIHJvbGxlciwgd2hpY2ggY291bGQgYWZmZWN0IHRoZSBtZWFzdXJlZCBhcHBhcmVudCBoYXJkbmVzcy4gIiwib2JqZWN0SUQiOiI3NDk3Ml8wIiwiX2hpZ2hsaWdodFJlc3VsdCI6eyJ0aXRsZSI6eyJ2YWx1ZSI6IjxlbT5JU088L2VtPiA8ZW0+NDwvZW0+OC03OjIwMTggUnViYmVyLCB2dWxjYW5pemVkIG9yIHRoZXJtb3BsYXN0aWMg4oCUIERldGVybWluYXRpb24gb2YgaGFyZG5lc3Mg4oCUIFBhcnQgNzogQXBwYXJlbnQgaGFyZG5lc3Mgb2YgcnViYmVyLWNvdmVyZWQgcm9sbGVycyBieSBTaG9yZS10eXBlIGR1cm9tZXRlciBtZXRob2QiLCJtYXRjaExldmVsIjoiZnVsbCIsImZ1bGx5SGlnaGxpZ2h0ZWQiOmZhbHNlLCJtYXRjaGVkV29yZHMiOlsiaXNvIiwiNCJdfSwidGV4dCI6eyJ2YWx1ZSI6IlRoaXMgZG9jdW1lbnQgc3BlY2lmaWVzIGEgbWV0aG9kIGZvciB0aGUgZGV0ZXJtaW5hdGlvbiBvZiB0aGUgYXBwYXJlbnQgaGFyZG5lc3Mgb2YgdnVsY2FuaXplZC0gb3IgdGhlcm1vcGxhc3RpYy1ydWJiZXIgcm9sbGVyIGNvdmVycywgZXhwcmVzc2VkIGluIFNob3JlIGhhcmRuZXNzLCBmb3IgbWVhc3VyZW1lbnQgd2hlcmUgb25seSBtZWRpdW0gcHJlY2lzaW9uIGlzIHJlcXVpcmVkLiBUaGUgbWV0aG9kIGFuZCBhcHBhcmF0dXMgdXNlZCBhcmUgZXNzZW50aWFsbHkgdGhvc2UgZGVzY3JpYmVkIGluIDxlbT5JU088L2VtPiA8ZW0+NDwvZW0+OC08ZW0+NDwvZW0+LCB0aGUgbWVhc3VyZW1lbnRzIGluIHRoaXMgY2FzZSBiZWluZyBtYWRlIG9uIHRoZSBjdXJ2ZWQgc3VyZmFjZSBvZiB0aGUgY29uZGl0aW9uZWQgcnViYmVyLWNvdmVyZWQgcm9sbGVyIHJhdGhlciB0aGFuIG9uIGEgZmxhdCB0ZXN0IHBpZWNlLiBTaG9yZSB0eXBlIEEgYW5kIHR5cGUgRCBpbnN0cnVtZW50cyBhcmUgc3BlY2lmaWVkLCB0aGUgbGF0dGVyIGJlaW5nIHVzZWQgZm9yIG1lYXN1cmVtZW50cyBvbiByb2xsZXJzIG9mIGhpZ2ggaGFyZG5lc3MuIE5PVEUgICAgICAgV2l0aCBzb21lIHJvbGxlcnMsIHRoZXJlIGNhbiBiZSBzaWduaWZpY2FudCB2YXJpYXRpb24gaW4gdGhlIHRoaWNrbmVzcyBvZiB0aGUgcnViYmVyIG92ZXIgdGhlIHN1cmZhY2Ugb2YgdGhlIHJvbGxlciwgd2hpY2ggY291bGQgYWZmZWN0IHRoZSBtZWFzdXJlZCBhcHBhcmVudCBoYXJkbmVzcy4gIiwibWF0Y2hMZXZlbCI6ImZ1bGwiLCJmdWxseUhpZ2hsaWdodGVkIjpmYWxzZSwibWF0Y2hlZFdvcmRzIjpbImlzbyIsIjQiXX19fSx7ImNhdGVnb3J5Ijoic3RhbmRhcmQiLCJwYXRoIjoiL3NpdGVzL2lzb29yZy9jb250ZW50cy9kYXRhL3N0YW5kYXJkLzA3LzQ5Lzc0OTY5IiwidXVpZCI6IjhhZTkyZjJkLThkZTQtNGU2NS1iY2Q4LWM3Y2FlYjRhNDJlMyIsInRpdGxlIjoiSVNPIDQ4LTQ6MjAxOCBSdWJiZXIsIHZ1bGNhbml6ZWQgb3IgdGhlcm1vcGxhc3RpYyDigJQgRGV0ZXJtaW5hdGlvbiBvZiBoYXJkbmVzcyDigJQgUGFydCA0OiBJbmRlbnRhdGlvbiBoYXJkbmVzcyBieSBkdXJvbWV0ZXIgbWV0aG9kIChTaG9yZSBoYXJkbmVzcykiLCJzdGF0dXMiOiJQdWJsaXNoZWQiLCJ5ZWFyIjoyMDIzLCJvcmRlciI6MTEsInRleHQiOiJUaGlzIGRvY3VtZW50IHNwZWNpZmllcyBhIG1ldGhvZCBmb3IgZGV0ZXJtaW5pbmcgdGhlIGluZGVudGF0aW9uIGhhcmRuZXNzIChTaG9yZSBoYXJkbmVzcykgb2YgdnVsY2FuaXplZCBvciB0aGVybW9wbGFzdGljIHJ1YmJlciB1c2luZyBkdXJvbWV0ZXJzIHdpdGggdGhlIGZvbGxvd2luZyBzY2FsZXM6IOKAlCAgICAgICAgICB0aGUgQSBzY2FsZSBmb3IgcnViYmVycyBpbiB0aGUgbm9ybWFsLWhhcmRuZXNzIHJhbmdlOyDigJQgICAgICAgICAgdGhlIEQgc2NhbGUgZm9yIHJ1YmJlcnMgaW4gdGhlIGhpZ2gtaGFyZG5lc3MgcmFuZ2U7IOKAlCAgICAgICAgICB0aGUgQU8gc2NhbGUgZm9yIHJ1YmJlcnMgaW4gdGhlIGxvdy1oYXJkbmVzcyByYW5nZSBhbmQgZm9yIGNlbGx1bGFyIHJ1YmJlcnM7IOKAlCAgICAgICAgICB0aGUgQU0gc2NhbGUgZm9yIHRoaW4gcnViYmVyIHRlc3QgcGllY2VzIGluIHRoZSBub3JtYWwtaGFyZG5lc3MgcmFuZ2UuICIsIm9iamVjdElEIjoiNzQ5NjlfMCIsIl9oaWdobGlnaHRSZXN1bHQiOnsidGl0bGUiOnsidmFsdWUiOiI8ZW0+SVNPPC9lbT4gPGVtPjQ8L2VtPjgtPGVtPjQ8L2VtPjoyMDE4IFJ1YmJlciwgdnVsY2FuaXplZCBvciB0aGVybW9wbGFzdGljIOKAlCBEZXRlcm1pbmF0aW9uIG9mIGhhcmRuZXNzIOKAlCBQYXJ0IDxlbT40PC9lbT46IEluZGVudGF0aW9uIGhhcmRuZXNzIGJ5IGR1cm9tZXRlciBtZXRob2QgKFNob3JlIGhhcmRuZXNzKSIsIm1hdGNoTGV2ZWwiOiJmdWxsIiwiZnVsbHlIaWdobGlnaHRlZCI6ZmFsc2UsIm1hdGNoZWRXb3JkcyI6WyJpc28iLCI0Il19LCJ0ZXh0Ijp7InZhbHVlIjoiVGhpcyBkb2N1bWVudCBzcGVjaWZpZXMgYSBtZXRob2QgZm9yIGRldGVybWluaW5nIHRoZSBpbmRlbnRhdGlvbiBoYXJkbmVzcyAoU2hvcmUgaGFyZG5lc3MpIG9mIHZ1bGNhbml6ZWQgb3IgdGhlcm1vcGxhc3RpYyBydWJiZXIgdXNpbmcgZHVyb21ldGVycyB3aXRoIHRoZSBmb2xsb3dpbmcgc2NhbGVzOiDigJQgICAgICAgICAgdGhlIEEgc2NhbGUgZm9yIHJ1YmJlcnMgaW4gdGhlIG5vcm1hbC1oYXJkbmVzcyByYW5nZTsg4oCUICAgICAgICAgIHRoZSBEIHNjYWxlIGZvciBydWJiZXJzIGluIHRoZSBoaWdoLWhhcmRuZXNzIHJhbmdlOyDigJQgICAgICAgICAgdGhlIEFPIHNjYWxlIGZvciBydWJiZXJzIGluIHRoZSBsb3ctaGFyZG5lc3MgcmFuZ2UgYW5kIGZvciBjZWxsdWxhciBydWJiZXJzOyDigJQgICAgICAgICAgdGhlIEFNIHNjYWxlIGZvciB0aGluIHJ1YmJlciB0ZXN0IHBpZWNlcyBpbiB0aGUgbm9ybWFsLWhhcmRuZXNzIHJhbmdlLiAiLCJtYXRjaExldmVsIjoibm9uZSIsIm1hdGNoZWRXb3JkcyI6W119fX0seyJjYXRlZ29yeSI6InN0YW5kYXJkIiwicGF0aCI6Ii9zaXRlcy9pc29vcmcvY29udGVudHMvZGF0YS9zdGFuZGFyZC8wNy8yOC83Mjg1NyIsInV1aWQiOiJhMDQ4YzIxZi1lMWFjLTQ2YzQtYTIxZC1kZGUzYjNiMjVhZGIiLCJ0aXRsZSI6IklTTyA0NDkyOjIwMTcgTWV0YWxsaWMgcG93ZGVycywgZXhjbHVkaW5nIHBvd2RlcnMgZm9yIGhhcmRtZXRhbHMg4oCUIERldGVybWluYXRpb24gb2YgZGltZW5zaW9uYWwgY2hhbmdlcyBhc3NvY2lhdGVkIHdpdGggY29tcGFjdGluZyBhbmQgc2ludGVyaW5nIiwic3RhdHVzIjoiUHVibGlzaGVkIiwieWVhciI6MjAyMywib3JkZXIiOjExLCJ0ZXh0IjoiSVNPIDQ0OTIgc3BlY2lmaWVzIGEgbWV0aG9kIGJ5IHdoaWNoIHRoZSBkaW1lbnNpb25hbCBjaGFuZ2VzIGFzc29jaWF0ZWQgd2l0aCBjb21wYWN0aW5nIGFuZCBzaW50ZXJpbmcgb2YgbWV0YWxsaWMgcG93ZGVycyBhcmUgY29tcGFyZWQgd2l0aCB0aG9zZSBvZiBhIHJlZmVyZW5jZSBwb3dkZXIgd2hlbiBwcm9jZXNzZWQgdW5kZXIgc2ltaWxhciBjb25kaXRpb25zIChzZWUgQ2xhdXNlIDQpLiBUaGUgbWV0aG9kIGFwcGxpZXMgdG8gdGhlIGRldGVybWluYXRpb24gb2YgdGhyZWUgdHlwZXMgb2YgZGltZW5zaW9uYWwgY2hhbmdlcyBpbnZvbHZlZCB3aXRoIHRoZSBwcm9jZXNzaW5nIG9mIG1ldGFsbGljIHBvd2RlcnMsIGV4Y2x1ZGluZyBwb3dkZXJzIGZvciBoYXJkbWV0YWxzLiAiLCJvYmplY3RJRCI6IjcyODU3XzAiLCJfaGlnaGxpZ2h0UmVzdWx0Ijp7InRpdGxlIjp7InZhbHVlIjoiPGVtPklTTzwvZW0+IDxlbT40PC9lbT40OTI6MjAxNyBNZXRhbGxpYyBwb3dkZXJzLCBleGNsdWRpbmcgcG93ZGVycyBmb3IgaGFyZG1ldGFscyDigJQgRGV0ZXJtaW5hdGlvbiBvZiBkaW1lbnNpb25hbCBjaGFuZ2VzIGFzc29jaWF0ZWQgd2l0aCBjb21wYWN0aW5nIGFuZCBzaW50ZXJpbmciLCJtYXRjaExldmVsIjoiZnVsbCIsImZ1bGx5SGlnaGxpZ2h0ZWQiOmZhbHNlLCJtYXRjaGVkV29yZHMiOlsiaXNvIiwiNCJdfSwidGV4dCI6eyJ2YWx1ZSI6IjxlbT5JU088L2VtPiA8ZW0+NDwvZW0+NDkyIHNwZWNpZmllcyBhIG1ldGhvZCBieSB3aGljaCB0aGUgZGltZW5zaW9uYWwgY2hhbmdlcyBhc3NvY2lhdGVkIHdpdGggY29tcGFjdGluZyBhbmQgc2ludGVyaW5nIG9mIG1ldGFsbGljIHBvd2RlcnMgYXJlIGNvbXBhcmVkIHdpdGggdGhvc2Ugb2YgYSByZWZlcmVuY2UgcG93ZGVyIHdoZW4gcHJvY2Vzc2VkIHVuZGVyIHNpbWlsYXIgY29uZGl0aW9ucyAoc2VlIENsYXVzZSA8ZW0+NDwvZW0+KS4gVGhlIG1ldGhvZCBhcHBsaWVzIHRvIHRoZSBkZXRlcm1pbmF0aW9uIG9mIHRocmVlIHR5cGVzIG9mIGRpbWVuc2lvbmFsIGNoYW5nZXMgaW52b2x2ZWQgd2l0aCB0aGUgcHJvY2Vzc2luZyBvZiBtZXRhbGxpYyBwb3dkZXJzLCBleGNsdWRpbmcgcG93ZGVycyBmb3IgaGFyZG1ldGFscy4gIiwibWF0Y2hMZXZlbCI6ImZ1bGwiLCJmdWxseUhpZ2hsaWdodGVkIjpmYWxzZSwibWF0Y2hlZFdvcmRzIjpbImlzbyIsIjQiXX19fSx7ImNhdGVnb3J5Ijoic3RhbmRhcmQiLCJwYXRoIjoiL3NpdGVzL2lzb29yZy9jb250ZW50cy9kYXRhL3N0YW5kYXJkLzA3LzI3LzcyNzg5IiwidXVpZCI6IjhjZWI0Zjg0LTlhN2UtNGUwNC1iY2FhLTE5ZTNhMTQ1ZWM1ZCIsInRpdGxlIjoiSVNPIDQ2NjYtNDoyMDE4IFJ1YmJlciwgdnVsY2FuaXplZCDigJQgRGV0ZXJtaW5hdGlvbiBvZiB0ZW1wZXJhdHVyZSByaXNlIGFuZCByZXNpc3RhbmNlIHRvIGZhdGlndWUgaW4gZmxleG9tZXRlciB0ZXN0aW5nIOKAlCBQYXJ0IDQ6IENvbnN0YW50LXN0cmVzcyBmbGV4b21ldGVyIiwic3RhdHVzIjoiUHVibGlzaGVkIiwieWVhciI6MjAyMywib3JkZXIiOjExLCJ0ZXh0IjoiVGhpcyBkb2N1bWVudCBzcGVjaWZpZXMgYSBjb25zdGFudC1zdHJlc3MgZmxleG9tZXRlciB0ZXN0IGZvciB0aGUgZGV0ZXJtaW5hdGlvbiBvZiB0aGUgdGVtcGVyYXR1cmUgcmlzZSBhbmQgcmVzaXN0YW5jZSB0byBmYXRpZ3VlIG9mIHZ1bGNhbml6ZWQgcnViYmVycy4gTWFueSBydWJiZXIgcHJvZHVjdHMsIHN1Y2ggYXMgdHlyZXMgYW5kIGJlbHRzLCBhcmUgdGVzdGVkIGJ5IHN1YmplY3RpbmcgdGhlbSB0byBhbiBvc2NpbGxhdGluZyBsb2FkIHdpdGggYSBjb25zdGFudCBwZWFrIHN0cmVzcyBhbXBsaXR1ZGUuIEluIG9yZGVyIHRvIG9idGFpbiBnb29kIGNvcnJlbGF0aW9uIGJldHdlZW4gYWNjZWxlcmF0ZWQgdGVzdHMgYW5kIGluLXNlcnZpY2UgZXhwb3N1cmUgb2YgdGhlc2UgcHJvZHVjdHMsIHRoaXMgZG9jdW1lbnQgZ2l2ZXMgaW5zdHJ1Y3Rpb25zIGZvciBjYXJyeWluZyBvdXQgbWVhc3VyZW1lbnRzIHVuZGVyIHN1Y2ggY29uZGl0aW9ucy4gVGhpcyBtZXRob2QgaXMgbm90IGFwcGxpY2FibGUgZm9yIHJ1YmJlciBoYXZpbmcgYSBoYXJkbmVzcyBncmVhdGVyIHRoYW4gODUgSVJIRC4gIiwib2JqZWN0SUQiOiI3Mjc4OV8wIiwiX2hpZ2hsaWdodFJlc3VsdCI6eyJ0aXRsZSI6eyJ2YWx1ZSI6IjxlbT5JU088L2VtPiA8ZW0+NDwvZW0+NjY2LTxlbT40PC9lbT46MjAxOCBSdWJiZXIsIHZ1bGNhbml6ZWQg4oCUIERldGVybWluYXRpb24gb2YgdGVtcGVyYXR1cmUgcmlzZSBhbmQgcmVzaXN0YW5jZSB0byBmYXRpZ3VlIGluIGZsZXhvbWV0ZXIgdGVzdGluZyDigJQgUGFydCA8ZW0+NDwvZW0+OiBDb25zdGFudC1zdHJlc3MgZmxleG9tZXRlciIsIm1hdGNoTGV2ZWwiOiJmdWxsIiwiZnVsbHlIaWdobGlnaHRlZCI6ZmFsc2UsIm1hdGNoZWRXb3JkcyI6WyJpc28iLCI0Il19LCJ0ZXh0Ijp7InZhbHVlIjoiVGhpcyBkb2N1bWVudCBzcGVjaWZpZXMgYSBjb25zdGFudC1zdHJlc3MgZmxleG9tZXRlciB0ZXN0IGZvciB0aGUgZGV0ZXJtaW5hdGlvbiBvZiB0aGUgdGVtcGVyYXR1cmUgcmlzZSBhbmQgcmVzaXN0YW5jZSB0byBmYXRpZ3VlIG9mIHZ1bGNhbml6ZWQgcnViYmVycy4gTWFueSBydWJiZXIgcHJvZHVjdHMsIHN1Y2ggYXMgdHlyZXMgYW5kIGJlbHRzLCBhcmUgdGVzdGVkIGJ5IHN1YmplY3RpbmcgdGhlbSB0byBhbiBvc2NpbGxhdGluZyBsb2FkIHdpdGggYSBjb25zdGFudCBwZWFrIHN0cmVzcyBhbXBsaXR1ZGUuIEluIG9yZGVyIHRvIG9idGFpbiBnb29kIGNvcnJlbGF0aW9uIGJldHdlZW4gYWNjZWxlcmF0ZWQgdGVzdHMgYW5kIGluLXNlcnZpY2UgZXhwb3N1cmUgb2YgdGhlc2UgcHJvZHVjdHMsIHRoaXMgZG9jdW1lbnQgZ2l2ZXMgaW5zdHJ1Y3Rpb25zIGZvciBjYXJyeWluZyBvdXQgbWVhc3VyZW1lbnRzIHVuZGVyIHN1Y2ggY29uZGl0aW9ucy4gVGhpcyBtZXRob2QgaXMgbm90IGFwcGxpY2FibGUgZm9yIHJ1YmJlciBoYXZpbmcgYSBoYXJkbmVzcyBncmVhdGVyIHRoYW4gODUgSVJIRC4gIiwibWF0Y2hMZXZlbCI6Im5vbmUiLCJtYXRjaGVkV29yZHMiOltdfX19LHsiY2F0ZWdvcnkiOiJzdGFuZGFyZCIsInBhdGgiOiIvc2l0ZXMvaXNvb3JnL2NvbnRlbnRzL2RhdGEvc3RhbmRhcmQvMDcvMjcvNzI3NjQiLCJ1dWlkIjoiYzJhMmJkYmEtMGYxZS00OGQzLTg2MzQtMDM3OWQ2OGVlMDAyIiwidGl0bGUiOiJJU08gNDI2NDoyMDE4IFBldHJvbGV1bSBwcm9kdWN0cyDigJQgQ2FsY3VsYXRpb24gb2YgY2V0YW5lIGluZGV4IG9mIG1pZGRsZS1kaXN0aWxsYXRlIGZ1ZWxzIGJ5IHRoZSBmb3VyIHZhcmlhYmxlIGVxdWF0aW9uIiwic3RhdHVzIjoiUHVibGlzaGVkIiwieWVhciI6MjAyMywib3JkZXIiOjExLCJ0ZXh0IjoiVGhpcyBkb2N1bWVudCBzcGVjaWZpZXMgYSBwcm9jZWR1cmUgZm9yIHRoZSBjYWxjdWxhdGlvbiBvZiB0aGUgY2V0YW5lIGluZGV4IG9mIG1pZGRsZS1kaXN0aWxsYXRlIGZ1ZWxzIGZyb20gcGV0cm9sZXVtLWRlcml2ZWQgc291cmNlcy4gVGhlIGNhbGN1bGF0ZWQgdmFsdWUgaXMgdGVybWVkIHRoZSBcImNldGFuZSBpbmRleCBieSBmb3VyLXZhcmlhYmxlIGVxdWF0aW9uXCIuIFRocm91Z2hvdXQgdGhlIHJlbWFpbmluZyB0ZXh0IG9mIHRoaXMgZG9jdW1lbnQsIHRoZSB0ZXJtIFwiY2V0YW5lIGluZGV4XCIgaW1wbGllcyBjZXRhbmUgaW5kZXggYnkgZm91ci12YXJpYWJsZSBlcXVhdGlvbi4gVGhpcyBkb2N1bWVudCBpcyBhcHBsaWNhYmxlIHRvIGZ1ZWxzIGNvbnRhaW5pbmcgbm9uLXBldHJvbGV1bSBkZXJpdmF0aXZlcyBmcm9tIHRhciBzYW5kIGFuZCBvaWwgc2hhbGUuIEl0IGlzIG5vdCBhcHBsaWNhYmxlIHRvIHB1cmUgaHlkcm9jYXJib25zLCBub3IgdG8gZGlzdGlsbGF0ZSBmdWVscyBkZXJpdmVkIGZyb20gY29hbC4gQ2V0YW5lIGluZGV4IGNhbGN1bGF0aW9ucyBkbyBub3QgdGFrZSBpbnRvIGFjY291bnQgdGhlIGVmZmVjdHMgZnJvbSBhZGRpdGl2ZXMgdXNlZCB0byBlbmhhbmNlIHRoZSBDZXRhbmUgbnVtYmVyLiBOT1RFIDEgICAgVGhpcyBkb2N1bWVudCB3YXMgb3JpZ2luYWxseSBkZXZlbG9wZWQgdXNpbmcgYSBtYXRyaXggb2YgZnVlbHMsIHNvbWUgb2Ygd2hpY2ggY29udGFpbiBub24tcGV0cm9sZXVtIGRlcml2YXRpdmVzIGZyb20gdGFyIHNhbmRzIGFuZCBvaWwgc2hhbGUuIE5PVEUgMiAgICBUaGUgY2V0YW5lIGluZGV4IGlzIG5vdCBhbiBhbHRlcm5hdGl2ZSB3YXkgdG8gZXhwcmVzcyB0aGUgY2V0YW5lIG51bWJlcjsgaXQgaXMgYSBzdXBwbGVtZW50YXJ5IHRvb2wsIHRvIGJlIHVzZWQgd2l0aCBkdWUgcmVnYXJkIGZvciBpdHMgbGltaXRhdGlvbnMuIE5PVEUgMyAgICBUaGUgY2V0YW5lIGluZGV4IGlzIHVzZWQgdG8gZXN0aW1hdGUgdGhlIGNldGFuZSBudW1iZXIgb2YgZGllc2VsIGZ1ZWwgd2hlbiBhIHRlc3QgZW5naW5lIGlzIG5vdCBhdmFpbGFibGUgdG8gZGV0ZXJtaW5lIHRoaXMgcHJvcGVydHkgZGlyZWN0bHksIG9yIHdoZW4gaW5zdWZmaWNpZW50IHNhbXBsZSBpcyBhdmFpbGFibGUgZm9yIGFuIGVuZ2luZSByYXRpbmcuIFRoZSBtb3N0IHN1aXRhYmxlIHJhbmdlIG9mIGZ1ZWwgcHJvcGVydGllcyBmb3IgYXBwbGljYXRpb24gb2YgdGhpcyBkb2N1bWVudCBpcyBhcyBmb2xsb3dzOiBGdWVsIHByb3BlcnR5IFJhbmdlIENldGFuZSAgIG51bWJlciAzMiw1ICAgICB0byA1Niw1IERlbnNpdHkgICBhdCAxNSDCsEMsIGtnL20gMyA4MDUsMCB0byA4OTUsMCAxMCAlICAgKCBWL1YgKSBkaXN0aWxsYXRpb24gcmVjb3ZlcnkgdGVtcGVyYXR1cmUsIMKwQyAxNzEgdG8gMjU5IDUwICUgICAoIFYvViApIGRpc3RpbGxhdGlvbiByZWNvdmVyeSB0ZW1wZXJhdHVyZSwgwrBDIDIxMiB0byAzMDggOTAgJSAgICggVi9WICkgZGlzdGlsbGF0aW9uIHJlY292ZXJ5IHRlbXBlcmF0dXJlLCDCsEMgMjUxIHRvIDM2MyBXaXRoaW4gdGhlIHJhbmdlIG9mIGNldGFuZSBudW1iZXIgKDMyLDUgdG8gNTYsNSksIHRoZSBleHBlY3RlZCBlcnJvciBvZiB0aGUgcHJlZGljdGlvbiB2aWEgdGhlIGNldGFuZSBpbmRleCBlcXVhdGlvbiB3aWxsIGJlIGxlc3MgdGhhbiDCsTIgY2V0YW5lIG51bWJlcnMgZm9yIDY1ICUgb2YgdGhlIGRpc3RpbGxhdGUgZnVlbHMgZXhhbWluZWQuIEVycm9ycyBjYW4gYmUgZ3JlYXRlciBmb3IgZnVlbHMgd2hvc2UgcHJvcGVydGllcyBmYWxsIG91dHNpZGUgdGhpcyByYW5nZSBvZiBhcHBsaWNhdGlvbi4gQXMgYSBjb25zZXF1ZW5jZSBvZiBzYW1wbGUtc3BlY2lmaWMgYmlhc2VzIG9ic2VydmVkLCB0aGUgZXhwZWN0ZWQgZXJyb3IgY2FuIGJlIGdyZWF0ZXIgZXZlbiB3aGVuIHRoZSBmdWVsJ3MgcHJvcGVydGllcyBmYWxsIGluc2lkZSB0aGUgcmVjb21tZW5kZWQgcmFuZ2Ugb2YgYXBwbGljYXRpb24uIFRoZXJlZm9yZSwgdXNlcnMgY2FuIGFzc2VzcyB0aGUgcmVxdWlyZWQgZGVncmVlIG9mIHByZWRpY3Rpb24gYWdyZWVtZW50IHRvIGRldGVybWluZSB0aGUgZml0bmVzcy1mb3ItdXNlIG9mIHRoZSBwcmVkaWN0aW9uLiBOT1RFIDQgICAgU2FtcGxlIHNwZWNpZmljIGJpYXNlcyB3ZXJlIG9ic2VydmVkIGZvciBkaXN0aWxsYXRlIGZ1ZWxzIGNvbnRhaW5pbmcgRkFNRSAoZmF0dHkgYWNpZCBtZXRoeWwgZXN0ZXIpLiAiLCJvYmplY3RJRCI6IjcyNzY0XzAiLCJfaGlnaGxpZ2h0UmVzdWx0Ijp7InRpdGxlIjp7InZhbHVlIjoiPGVtPklTTzwvZW0+IDxlbT40PC9lbT4yNjQ6MjAxOCBQZXRyb2xldW0gcHJvZHVjdHMg4oCUIENhbGN1bGF0aW9uIG9mIGNldGFuZSBpbmRleCBvZiBtaWRkbGUtZGlzdGlsbGF0ZSBmdWVscyBieSB0aGUgZm91ciB2YXJpYWJsZSBlcXVhdGlvbiIsIm1hdGNoTGV2ZWwiOiJmdWxsIiwiZnVsbHlIaWdobGlnaHRlZCI6ZmFsc2UsIm1hdGNoZWRXb3JkcyI6WyJpc28iLCI0Il19LCJ0ZXh0Ijp7InZhbHVlIjoiVGhpcyBkb2N1bWVudCBzcGVjaWZpZXMgYSBwcm9jZWR1cmUgZm9yIHRoZSBjYWxjdWxhdGlvbiBvZiB0aGUgY2V0YW5lIGluZGV4IG9mIG1pZGRsZS1kaXN0aWxsYXRlIGZ1ZWxzIGZyb20gcGV0cm9sZXVtLWRlcml2ZWQgc291cmNlcy4gVGhlIGNhbGN1bGF0ZWQgdmFsdWUgaXMgdGVybWVkIHRoZSBcImNldGFuZSBpbmRleCBieSBmb3VyLXZhcmlhYmxlIGVxdWF0aW9uXCIuIFRocm91Z2hvdXQgdGhlIHJlbWFpbmluZyB0ZXh0IG9mIHRoaXMgZG9jdW1lbnQsIHRoZSB0ZXJtIFwiY2V0YW5lIGluZGV4XCIgaW1wbGllcyBjZXRhbmUgaW5kZXggYnkgZm91ci12YXJpYWJsZSBlcXVhdGlvbi4gVGhpcyBkb2N1bWVudCBpcyBhcHBsaWNhYmxlIHRvIGZ1ZWxzIGNvbnRhaW5pbmcgbm9uLXBldHJvbGV1bSBkZXJpdmF0aXZlcyBmcm9tIHRhciBzYW5kIGFuZCBvaWwgc2hhbGUuIEl0IGlzIG5vdCBhcHBsaWNhYmxlIHRvIHB1cmUgaHlkcm9jYXJib25zLCBub3IgdG8gZGlzdGlsbGF0ZSBmdWVscyBkZXJpdmVkIGZyb20gY29hbC4gQ2V0YW5lIGluZGV4IGNhbGN1bGF0aW9ucyBkbyBub3QgdGFrZSBpbnRvIGFjY291bnQgdGhlIGVmZmVjdHMgZnJvbSBhZGRpdGl2ZXMgdXNlZCB0byBlbmhhbmNlIHRoZSBDZXRhbmUgbnVtYmVyLiBOT1RFIDEgICAgVGhpcyBkb2N1bWVudCB3YXMgb3JpZ2luYWxseSBkZXZlbG9wZWQgdXNpbmcgYSBtYXRyaXggb2YgZnVlbHMsIHNvbWUgb2Ygd2hpY2ggY29udGFpbiBub24tcGV0cm9sZXVtIGRlcml2YXRpdmVzIGZyb20gdGFyIHNhbmRzIGFuZCBvaWwgc2hhbGUuIE5PVEUgMiAgICBUaGUgY2V0YW5lIGluZGV4IGlzIG5vdCBhbiBhbHRlcm5hdGl2ZSB3YXkgdG8gZXhwcmVzcyB0aGUgY2V0YW5lIG51bWJlcjsgaXQgaXMgYSBzdXBwbGVtZW50YXJ5IHRvb2wsIHRvIGJlIHVzZWQgd2l0aCBkdWUgcmVnYXJkIGZvciBpdHMgbGltaXRhdGlvbnMuIE5PVEUgMyAgICBUaGUgY2V0YW5lIGluZGV4IGlzIHVzZWQgdG8gZXN0aW1hdGUgdGhlIGNldGFuZSBudW1iZXIgb2YgZGllc2VsIGZ1ZWwgd2hlbiBhIHRlc3QgZW5naW5lIGlzIG5vdCBhdmFpbGFibGUgdG8gZGV0ZXJtaW5lIHRoaXMgcHJvcGVydHkgZGlyZWN0bHksIG9yIHdoZW4gaW5zdWZmaWNpZW50IHNhbXBsZSBpcyBhdmFpbGFibGUgZm9yIGFuIGVuZ2luZSByYXRpbmcuIFRoZSBtb3N0IHN1aXRhYmxlIHJhbmdlIG9mIGZ1ZWwgcHJvcGVydGllcyBmb3IgYXBwbGljYXRpb24gb2YgdGhpcyBkb2N1bWVudCBpcyBhcyBmb2xsb3dzOiBGdWVsIHByb3BlcnR5IFJhbmdlIENldGFuZSAgIG51bWJlciAzMiw1ICAgICB0byA1Niw1IERlbnNpdHkgICBhdCAxNSDCsEMsIGtnL20gMyA4MDUsMCB0byA4OTUsMCAxMCAlICAgKCBWL1YgKSBkaXN0aWxsYXRpb24gcmVjb3ZlcnkgdGVtcGVyYXR1cmUsIMKwQyAxNzEgdG8gMjU5IDUwICUgICAoIFYvViApIGRpc3RpbGxhdGlvbiByZWNvdmVyeSB0ZW1wZXJhdHVyZSwgwrBDIDIxMiB0byAzMDggOTAgJSAgICggVi9WICkgZGlzdGlsbGF0aW9uIHJlY292ZXJ5IHRlbXBlcmF0dXJlLCDCsEMgMjUxIHRvIDM2MyBXaXRoaW4gdGhlIHJhbmdlIG9mIGNldGFuZSBudW1iZXIgKDMyLDUgdG8gNTYsNSksIHRoZSBleHBlY3RlZCBlcnJvciBvZiB0aGUgcHJlZGljdGlvbiB2aWEgdGhlIGNldGFuZSBpbmRleCBlcXVhdGlvbiB3aWxsIGJlIGxlc3MgdGhhbiDCsTIgY2V0YW5lIG51bWJlcnMgZm9yIDY1ICUgb2YgdGhlIGRpc3RpbGxhdGUgZnVlbHMgZXhhbWluZWQuIEVycm9ycyBjYW4gYmUgZ3JlYXRlciBmb3IgZnVlbHMgd2hvc2UgcHJvcGVydGllcyBmYWxsIG91dHNpZGUgdGhpcyByYW5nZSBvZiBhcHBsaWNhdGlvbi4gQXMgYSBjb25zZXF1ZW5jZSBvZiBzYW1wbGUtc3BlY2lmaWMgYmlhc2VzIG9ic2VydmVkLCB0aGUgZXhwZWN0ZWQgZXJyb3IgY2FuIGJlIGdyZWF0ZXIgZXZlbiB3aGVuIHRoZSBmdWVsJ3MgcHJvcGVydGllcyBmYWxsIGluc2lkZSB0aGUgcmVjb21tZW5kZWQgcmFuZ2Ugb2YgYXBwbGljYXRpb24uIFRoZXJlZm9yZSwgdXNlcnMgY2FuIGFzc2VzcyB0aGUgcmVxdWlyZWQgZGVncmVlIG9mIHByZWRpY3Rpb24gYWdyZWVtZW50IHRvIGRldGVybWluZSB0aGUgZml0bmVzcy1mb3ItdXNlIG9mIHRoZSBwcmVkaWN0aW9uLiBOT1RFIDxlbT40PC9lbT4gICAgU2FtcGxlIHNwZWNpZmljIGJpYXNlcyB3ZXJlIG9ic2VydmVkIGZvciBkaXN0aWxsYXRlIGZ1ZWxzIGNvbnRhaW5pbmcgRkFNRSAoZmF0dHkgYWNpZCBtZXRoeWwgZXN0ZXIpLiAiLCJtYXRjaExldmVsIjoicGFydGlhbCIsImZ1bGx5SGlnaGxpZ2h0ZWQiOmZhbHNlLCJtYXRjaGVkV29yZHMiOlsiNCJdfX19LHsiY2F0ZWdvcnkiOiJzdGFuZGFyZCIsInBhdGgiOiIvc2l0ZXMvaXNvb3JnL2NvbnRlbnRzL2RhdGEvc3RhbmRhcmQvMDcvMDYvNzA2NDYiLCJ1dWlkIjoiNTE1M2E4ZDctZDRkMC00MjZjLWE4NTUtZjM3MTUxZTU1YWNjIiwidGl0bGUiOiJJU08gNDk1NzoyMDE4IFRvb2wgc3RlZWxzIiwic3RhdHVzIjoiUHVibGlzaGVkIiwieWVhciI6MjAyMywib3JkZXIiOjExLCJ0ZXh0IjoiVGhpcyBkb2N1bWVudCBzcGVjaWZpZXMgcmVxdWlyZW1lbnRzIGZvciB0aGUgZm9sbG93aW5nIGdyYWRlcyBvZiB3cm91Z2h0IHRvb2wgc3RlZWxzOiBhKSAgICBub24tYWxsb3kgY29sZC13b3JrIHRvb2wgc3RlZWxzOyBiKSAgICBhbGxveSBjb2xkLXdvcmsgdG9vbCBzdGVlbHM7IGMpICAgIGFsbG95IGhvdC13b3JrIHRvb2wgc3RlZWxzOyBkKSAgICBoaWdoLXNwZWVkIHRvb2wgc3RlZWxzLiBJZiBub3Qgc3RhdGVkIG90aGVyd2lzZSwgdGhpcyBkb2N1bWVudCBhcHBsaWVzIHRvIGFsbCB0eXBlcyBvZiBob3Qtcm9sbGVkLCBmb3JnZWQsIGNvbGQtZHJhd24gb3IgY29sZC1yb2xsZWQgcHJvZHVjdHMgb3IgcHJvZHVjdHMgcHJvZHVjZWQgYnkgcG93ZGVyIG1ldGFsbHVyZ3ksIHdoaWNoIGFyZSBzdXBwbGllZCBpbiBvbmUgb2YgdGhlIHN1cmZhY2UgYW5kIGhlYXQtdHJlYXRtZW50IGNvbmRpdGlvbnMgZ2l2ZW4gaW4gNi4yIGFuZCBUYWJsZSAxLiBOT1RFICAgICAgIFRhYmxlcyAyLCA0LCA2IGFuZCA4IGNvdmVyIG9ubHkgdGhvc2Ugc3RlZWxzIHdoaWNoIGhhdmUgZ2FpbmVkIGNlcnRhaW4gaW50ZXJuYXRpb25hbCBpbXBvcnRhbmNlLCB3aGljaCBkb2VzIG5vdCBtZWFuLCBob3dldmVyLCB0aGF0IHRoZXkgYXJlIGF2YWlsYWJsZSBpbiBhbGwgaW5kdXN0cmlhbCBjb3VudHJpZXMuIEluIGFkZGl0aW9uLCBhIG51bWJlciBvZiBvdGhlciBzdGVlbHMgZm9yIHRvb2xzIGFyZSBzcGVjaWZpZWQgaW4gcmVnaW9uYWwsIG5hdGlvbmFsIG9yIGNvbXBhbnkgc3RhbmRhcmRzLiBXaGVyZSB0aGUgaGVhdCByZXNpc3RhbmNlIG9mIHRoZSB0b29scyBpcyBvZiBwYXJ0aWN1bGFyIGltcG9ydGFuY2UsIGFzIGZvciBleGFtcGxlIGluIHRoZSBjYXNlIG9mIHRvb2xzIGZvciBob3QgZm9ybWluZyBnbGFzcywgdGhlIG1hdGVyaWFsIHNlbGVjdGlvbiBpcyBiYXNlZCBvbiBJU08gNDk1NS4gIiwib2JqZWN0SUQiOiI3MDY0Nl8wIiwiX2hpZ2hsaWdodFJlc3VsdCI6eyJ0aXRsZSI6eyJ2YWx1ZSI6IjxlbT5JU088L2VtPiA8ZW0+NDwvZW0+OTU3OjIwMTggVG9vbCBzdGVlbHMiLCJtYXRjaExldmVsIjoiZnVsbCIsImZ1bGx5SGlnaGxpZ2h0ZWQiOmZhbHNlLCJtYXRjaGVkV29yZHMiOlsiaXNvIiwiNCJdfSwidGV4dCI6eyJ2YWx1ZSI6IlRoaXMgZG9jdW1lbnQgc3BlY2lmaWVzIHJlcXVpcmVtZW50cyBmb3IgdGhlIGZvbGxvd2luZyBncmFkZXMgb2Ygd3JvdWdodCB0b29sIHN0ZWVsczogYSkgICAgbm9uLWFsbG95IGNvbGQtd29yayB0b29sIHN0ZWVsczsgYikgICAgYWxsb3kgY29sZC13b3JrIHRvb2wgc3RlZWxzOyBjKSAgICBhbGxveSBob3Qtd29yayB0b29sIHN0ZWVsczsgZCkgICAgaGlnaC1zcGVlZCB0b29sIHN0ZWVscy4gSWYgbm90IHN0YXRlZCBvdGhlcndpc2UsIHRoaXMgZG9jdW1lbnQgYXBwbGllcyB0byBhbGwgdHlwZXMgb2YgaG90LXJvbGxlZCwgZm9yZ2VkLCBjb2xkLWRyYXduIG9yIGNvbGQtcm9sbGVkIHByb2R1Y3RzIG9yIHByb2R1Y3RzIHByb2R1Y2VkIGJ5IHBvd2RlciBtZXRhbGx1cmd5LCB3aGljaCBhcmUgc3VwcGxpZWQgaW4gb25lIG9mIHRoZSBzdXJmYWNlIGFuZCBoZWF0LXRyZWF0bWVudCBjb25kaXRpb25zIGdpdmVuIGluIDYuMiBhbmQgVGFibGUgMS4gTk9URSAgICAgICBUYWJsZXMgMiwgPGVtPjQ8L2VtPiwgNiBhbmQgOCBjb3ZlciBvbmx5IHRob3NlIHN0ZWVscyB3aGljaCBoYXZlIGdhaW5lZCBjZXJ0YWluIGludGVybmF0aW9uYWwgaW1wb3J0YW5jZSwgd2hpY2ggZG9lcyBub3QgbWVhbiwgaG93ZXZlciwgdGhhdCB0aGV5IGFyZSBhdmFpbGFibGUgaW4gYWxsIGluZHVzdHJpYWwgY291bnRyaWVzLiBJbiBhZGRpdGlvbiwgYSBudW1iZXIgb2Ygb3RoZXIgc3RlZWxzIGZvciB0b29scyBhcmUgc3BlY2lmaWVkIGluIHJlZ2lvbmFsLCBuYXRpb25hbCBvciBjb21wYW55IHN0YW5kYXJkcy4gV2hlcmUgdGhlIGhlYXQgcmVzaXN0YW5jZSBvZiB0aGUgdG9vbHMgaXMgb2YgcGFydGljdWxhciBpbXBvcnRhbmNlLCBhcyBmb3IgZXhhbXBsZSBpbiB0aGUgY2FzZSBvZiB0b29scyBmb3IgaG90IGZvcm1pbmcgZ2xhc3MsIHRoZSBtYXRlcmlhbCBzZWxlY3Rpb24gaXMgYmFzZWQgb24gPGVtPklTTzwvZW0+IDxlbT40PC9lbT45NTUuICIsIm1hdGNoTGV2ZWwiOiJmdWxsIiwiZnVsbHlIaWdobGlnaHRlZCI6ZmFsc2UsIm1hdGNoZWRXb3JkcyI6WyJpc28iLCI0Il19fX0seyJjYXRlZ29yeSI6InN0YW5kYXJkIiwicGF0aCI6Ii9zaXRlcy9pc29vcmcvY29udGVudHMvZGF0YS9zdGFuZGFyZC8wNi81Mi82NTIzNiIsInV1aWQiOiJjNGQwZTljMy04M2FlLTQ4MjMtYTM1ZC1jYzNiZjhiOTM2YjAiLCJ0aXRsZSI6IklTTyA0MjU5LTE6MjAxNyBQZXRyb2xldW0gYW5kIHJlbGF0ZWQgcHJvZHVjdHMg4oCUIFByZWNpc2lvbiBvZiBtZWFzdXJlbWVudCBtZXRob2RzIGFuZCByZXN1bHRzIOKAlCBQYXJ0IDE6IERldGVybWluYXRpb24gb2YgcHJlY2lzaW9uIGRhdGEgaW4gcmVsYXRpb24gdG8gbWV0aG9kcyBvZiB0ZXN0Iiwic3RhdHVzIjoiUHVibGlzaGVkIiwieWVhciI6MjAyMywib3JkZXIiOjExLCJ0ZXh0IjoiSVNPIDQyNTktMToyMDE3IHNwZWNpZmllcyB0aGUgbWV0aG9kb2xvZ3kgZm9yIHRoZSBkZXNpZ24gb2YgYW4gSW50ZXJsYWJvcmF0b3J5IFN0dWR5IChJTFMpIGFuZCBjYWxjdWxhdGlvbiBvZiBwcmVjaXNpb24gZXN0aW1hdGVzIG9mIGEgdGVzdCBtZXRob2Qgc3BlY2lmaWVkIGJ5IHRoZSBzdHVkeS4gSW4gcGFydGljdWxhciwgaXQgZGVmaW5lcyB0aGUgcmVsZXZhbnQgc3RhdGlzdGljYWwgdGVybXMgKENsYXVzZSAzKSwgdGhlIHByb2NlZHVyZXMgdG8gYmUgYWRvcHRlZCBpbiB0aGUgcGxhbm5pbmcgb2YgSUxTIHRvIGRldGVybWluZSB0aGUgcHJlY2lzaW9uIG9mIGEgdGVzdCBtZXRob2QgKENsYXVzZSA0KSwgYW5kIHRoZSBtZXRob2Qgb2YgY2FsY3VsYXRpbmcgdGhlIHByZWNpc2lvbiBmcm9tIHRoZSByZXN1bHRzIG9mIHN1Y2ggYSBzdHVkeSAoQ2xhdXNlcyA1IGFuZCA2KS4gVGhlIHByb2NlZHVyZXMgaW4gSVNPIDQyNTktMToyMDE3IGhhdmUgYmVlbiBkZXNpZ25lZCBzcGVjaWZpY2FsbHkgZm9yIHBldHJvbGV1bSBhbmQgcGV0cm9sZXVtIHJlbGF0ZWQgcHJvZHVjdHMsIHdoaWNoIGFyZSBub3JtYWxseSBjb25zaWRlcmVkIGFzIGhvbW9nZW5lb3VzLiBIb3dldmVyLCB0aGUgcHJvY2VkdXJlcyBkZXNjcmliZWQgaW4gSVNPIDQyNTktMToyMDE3IGNhbiBhbHNvIGJlIGFwcGxpZWQgdG8gb3RoZXIgdHlwZXMgb2YgaG9tb2dlbmVvdXMgcHJvZHVjdHMuIENhcmVmdWwgaW52ZXN0aWdhdGlvbnMgYXJlIG5lY2Vzc2FyeSBiZWZvcmUgYXBwbHlpbmcgSVNPIDQyNTktMToyMDE3IHRvIHByb2R1Y3RzIGZvciB3aGljaCB0aGUgYXNzdW1wdGlvbiBvZiBob21vZ2VuZWl0eSBjYW4gYmUgcXVlc3Rpb25lZC4gIiwib2JqZWN0SUQiOiI2NTIzNl8wIiwiX2hpZ2hsaWdodFJlc3VsdCI6eyJ0aXRsZSI6eyJ2YWx1ZSI6IjxlbT5JU088L2VtPiA8ZW0+NDwvZW0+MjU5LTE6MjAxNyBQZXRyb2xldW0gYW5kIHJlbGF0ZWQgcHJvZHVjdHMg4oCUIFByZWNpc2lvbiBvZiBtZWFzdXJlbWVudCBtZXRob2RzIGFuZCByZXN1bHRzIOKAlCBQYXJ0IDE6IERldGVybWluYXRpb24gb2YgcHJlY2lzaW9uIGRhdGEgaW4gcmVsYXRpb24gdG8gbWV0aG9kcyBvZiB0ZXN0IiwibWF0Y2hMZXZlbCI6ImZ1bGwiLCJmdWxseUhpZ2hsaWdodGVkIjpmYWxzZSwibWF0Y2hlZFdvcmRzIjpbImlzbyIsIjQiXX0sInRleHQiOnsidmFsdWUiOiI8ZW0+SVNPPC9lbT4gPGVtPjQ8L2VtPjI1OS0xOjIwMTcgc3BlY2lmaWVzIHRoZSBtZXRob2RvbG9neSBmb3IgdGhlIGRlc2lnbiBvZiBhbiBJbnRlcmxhYm9yYXRvcnkgU3R1ZHkgKElMUykgYW5kIGNhbGN1bGF0aW9uIG9mIHByZWNpc2lvbiBlc3RpbWF0ZXMgb2YgYSB0ZXN0IG1ldGhvZCBzcGVjaWZpZWQgYnkgdGhlIHN0dWR5LiBJbiBwYXJ0aWN1bGFyLCBpdCBkZWZpbmVzIHRoZSByZWxldmFudCBzdGF0aXN0aWNhbCB0ZXJtcyAoQ2xhdXNlIDMpLCB0aGUgcHJvY2VkdXJlcyB0byBiZSBhZG9wdGVkIGluIHRoZSBwbGFubmluZyBvZiBJTFMgdG8gZGV0ZXJtaW5lIHRoZSBwcmVjaXNpb24gb2YgYSB0ZXN0IG1ldGhvZCAoQ2xhdXNlIDxlbT40PC9lbT4pLCBhbmQgdGhlIG1ldGhvZCBvZiBjYWxjdWxhdGluZyB0aGUgcHJlY2lzaW9uIGZyb20gdGhlIHJlc3VsdHMgb2Ygc3VjaCBhIHN0dWR5IChDbGF1c2VzIDUgYW5kIDYpLiBUaGUgcHJvY2VkdXJlcyBpbiA8ZW0+SVNPPC9lbT4gPGVtPjQ8L2VtPjI1OS0xOjIwMTcgaGF2ZSBiZWVuIGRlc2lnbmVkIHNwZWNpZmljYWxseSBmb3IgcGV0cm9sZXVtIGFuZCBwZXRyb2xldW0gcmVsYXRlZCBwcm9kdWN0cywgd2hpY2ggYXJlIG5vcm1hbGx5IGNvbnNpZGVyZWQgYXMgaG9tb2dlbmVvdXMuIEhvd2V2ZXIsIHRoZSBwcm9jZWR1cmVzIGRlc2NyaWJlZCBpbiA8ZW0+SVNPPC9lbT4gPGVtPjQ8L2VtPjI1OS0xOjIwMTcgY2FuIGFsc28gYmUgYXBwbGllZCB0byBvdGhlciB0eXBlcyBvZiBob21vZ2VuZW91cyBwcm9kdWN0cy4gQ2FyZWZ1bCBpbnZlc3RpZ2F0aW9ucyBhcmUgbmVjZXNzYXJ5IGJlZm9yZSBhcHBseWluZyA8ZW0+SVNPPC9lbT4gPGVtPjQ8L2VtPjI1OS0xOjIwMTcgdG8gcHJvZHVjdHMgZm9yIHdoaWNoIHRoZSBhc3N1bXB0aW9uIG9mIGhvbW9nZW5laXR5IGNhbiBiZSBxdWVzdGlvbmVkLiAiLCJtYXRjaExldmVsIjoiZnVsbCIsImZ1bGx5SGlnaGxpZ2h0ZWQiOmZhbHNlLCJtYXRjaGVkV29yZHMiOlsiaXNvIiwiNCJdfX19LHsiY2F0ZWdvcnkiOiJzdGFuZGFyZCIsInBhdGgiOiIvc2l0ZXMvaXNvb3JnL2NvbnRlbnRzL2RhdGEvc3RhbmRhcmQvMDYvNDgvNjQ4NzkiLCJ1dWlkIjoiNGU5MmFjODAtODE4OC00YjY4LThlMjQtMGM4Yjk1NDhmMGViIiwidGl0bGUiOiJJU08gNDI1NC04OjIwMTggQWdyaWN1bHR1cmFsIG1hY2hpbmVyeSDigJQgU2FmZXR5IOKAlCBQYXJ0IDg6IFNvbGlkIGZlcnRpbGl6ZXIgZGlzdHJpYnV0b3JzIiwic3RhdHVzIjoiUHVibGlzaGVkIiwieWVhciI6MjAyMywib3JkZXIiOjExLCJ0ZXh0IjoiSVNPIDQyNTQtODoyMDE4LCBpbnRlbmRlZCB0byBiZSB1c2VkIHRvZ2V0aGVyIHdpdGggSVNPIDQyNTTigJExLCBzcGVjaWZpZXMgdGhlIHNhZmV0eSByZXF1aXJlbWVudHMgYW5kIHRoZWlyIHZlcmlmaWNhdGlvbiBmb3IgdGhlIGRlc2lnbiBhbmQgY29uc3RydWN0aW9uIG9mIG1vdW50ZWQsIHNlbWktbW91bnRlZCwgdHJhaWxlZCBvciBzZWxmLXByb3BlbGxlZCBmZXJ0aWxpemVyIGRpc3RyaWJ1dG9ycyBmb3Igc29saWQgZmVydGlsaXplciBhcHBsaWNhdGlvbiBpbiBhZ3JpY3VsdHVyZSBhbmQgdG8gYmUgdXNlZCBieSBvbmUgb3BlcmF0b3Igb25seSwgZS5nLiBmdWxsIHdpZHRoIHNvbGlkIGZlcnRpbGl6ZXIgZGlzdHJpYnV0b3JzLCBzb2xpZCBmZXJ0aWxpemVyIGJyb2FkY2FzdGVycywgZGlzdHJpYnV0b3JzIHdpdGggb3NjaWxsYXRpbmcgdHViZSBhbmQgbGluZS1kaXN0cmlidXRvcnMsIGFzIHdlbGwgYXMgc29saWQgZmVydGlsaXplciBkaXN0cmlidXRvcnMgZHJpdmVuIGJ5IGFuIGF1eGlsaWFyeSBlbmdpbmUuIEluIGFkZGl0aW9uLCBpdCBzcGVjaWZpZXMgdGhlIHR5cGUgb2YgaW5mb3JtYXRpb24gb24gc2FmZSB3b3JraW5nIHByYWN0aWNlcyAoaW5jbHVkaW5nIHJlc2lkdWFsIHJpc2tzKSB0byBiZSBwcm92aWRlZCBieSB0aGUgbWFudWZhY3R1cmVyLiBJU08gNDI1NC04OjIwMTggZGVhbHMgd2l0aCBhbGwgdGhlIHNpZ25pZmljYW50IGhhemFyZHMgKGFzIGxpc3RlZCBpbiBBbm5leCBBKSwgaGF6YXJkb3VzIHNpdHVhdGlvbnMgYW5kIGV2ZW50cyByZWxldmFudCB0byBzb2xpZCBmZXJ0aWxpemVyIGRpc3RyaWJ1dG9ycywgd2hlbiB0aGV5IGFyZSB1c2VkIGFzIGludGVuZGVkIGFuZCB1bmRlciB0aGUgY29uZGl0aW9ucyBmb3Jlc2VlYWJsZSBieSB0aGUgbWFudWZhY3R1cmVyIChzZWUgQ2xhdXNlIDQpLCBleGNlcHRpbmcgdGhlIGhhemFyZHMgYXJpc2luZyBmcm9tOiAtICAgICAgaW5hZGVxdWF0ZSBsaWdodGluZyBvZiB3b3JraW5nIGFyZWE7IC0gICAgICBpbmFkZXF1YXRlIHZpc2liaWxpdHkgZnJvbSBkcml2ZXJzL29wZXJhdG9ycyBwb3NpdGlvbjsgLSAgICAgIGluYWRlcXVhdGUgc2VhdGluZzsgLSAgICAgIHRyYXZlbGxpbmcgZnVuY3Rpb25zIChkcml2ZSwgYnJha2luZyBldGMuKTsgLSAgICAgIHJvbGxpbmcgb3ZlcjsgLSAgICAgIGVxdWlwbWVudCBmb3IgbG9hZGluZyBmZXJ0aWxpemVyIGludG8gdGhlIG1hY2hpbmU7IC0gICAgICBhbiBhdXhpbGlhcnkgZW5naW5lOyAtICAgICAgbW92aW5nIHBhcnRzIGZvciBwb3dlciB0cmFuc21pc3Npb24gZXhjZXB0IGZvciBzdHJlbmd0aCByZXF1aXJlbWVudHMgZm9yIGd1YXJkcy4gSVNPIDQyNTQtODoyMDE4IGlzIG5laXRoZXIgYXBwbGljYWJsZSB0byBtYWludGVuYW5jZSBvciByZXBhaXJzIGNhcnJpZWQgb3V0IGJ5IHByb2Zlc3Npb25hbCBzZXJ2aWNlIHBlcnNvbm5lbCBub3IgdG8gZW52aXJvbm1lbnRhbCBoYXphcmRzIChleGNlcHQgbm9pc2UpLiBJU08gNDI1NC04OjIwMTggaXMgbm90IGFwcGxpY2FibGUgdG8gdGhlIGZvbGxvd2luZzogLSAgICAgIGNvbWJpbmVkIHNlZWQgYW5kIGZlcnRpbGl6ZXIgZHJpbGxzIHdoaWNoIGNyZWF0ZSBhIHNvaWwgdHJlbmNoIGFuZCBkZXBvc2l0IGZlcnRpbGl6ZXIgaW4gc2FpZCB0cmVuY2g7IC0gICAgICBtYWNoaW5lcyBmb3IgZGlzdHJpYnV0aW5nIGdyYW51bGF0ZWQgcGVzdGljaWRlczsgLSAgICAgIHBlZGVzdHJpYW4gY29udHJvbGxlZCBkaXN0cmlidXRvcnM7IC0gICAgICBrbmFwc2FjayBkaXN0cmlidXRvcnMuIElTTyA0MjU0LTg6MjAxOCBpcyBub3QgYXBwbGljYWJsZSB0byBzb2xpZCBmZXJ0aWxpemVyIGRpc3RyaWJ1dG9ycyB3aGljaCBhcmUgbWFudWZhY3R1cmVkIGJlZm9yZSB0aGUgZGF0ZSBvZiBpdHMgcHVibGljYXRpb24uIFdoZW4gcmVxdWlyZW1lbnRzIG9mIHRoaXMgZG9jdW1lbnQgYXJlIGRpZmZlcmVudCBmcm9tIHRob3NlIHdoaWNoIGFyZSBzdGF0ZWQgaW4gSVNPIDQyNTTigJExLCB0aGUgcmVxdWlyZW1lbnRzIG9mIHRoaXMgZG9jdW1lbnQgdGFrZSBwcmVjZWRlbmNlIG92ZXIgdGhlIHJlcXVpcmVtZW50cyBvZiBJU08gNDI1NOKAkTEgZm9yIG1hY2hpbmVzIHRoYXQgaGF2ZSBiZWVuIGRlc2lnbmVkIGFuZCBidWlsdCBhY2NvcmRpbmcgdG8gdGhlIHByb3Zpc2lvbnMgb2YgdGhpcyBkb2N1bWVudC4gIiwib2JqZWN0SUQiOiI2NDg3OV8wIiwiX2hpZ2hsaWdodFJlc3VsdCI6eyJ0aXRsZSI6eyJ2YWx1ZSI6IjxlbT5JU088L2VtPiA8ZW0+NDwvZW0+MjU0LTg6MjAxOCBBZ3JpY3VsdHVyYWwgbWFjaGluZXJ5IOKAlCBTYWZldHkg4oCUIFBhcnQgODogU29saWQgZmVydGlsaXplciBkaXN0cmlidXRvcnMiLCJtYXRjaExldmVsIjoiZnVsbCIsImZ1bGx5SGlnaGxpZ2h0ZWQiOmZhbHNlLCJtYXRjaGVkV29yZHMiOlsiaXNvIiwiNCJdfSwidGV4dCI6eyJ2YWx1ZSI6IjxlbT5JU088L2VtPiA8ZW0+NDwvZW0+MjU0LTg6MjAxOCwgaW50ZW5kZWQgdG8gYmUgdXNlZCB0b2dldGhlciB3aXRoIDxlbT5JU088L2VtPiA8ZW0+NDwvZW0+MjU04oCRMSwgc3BlY2lmaWVzIHRoZSBzYWZldHkgcmVxdWlyZW1lbnRzIGFuZCB0aGVpciB2ZXJpZmljYXRpb24gZm9yIHRoZSBkZXNpZ24gYW5kIGNvbnN0cnVjdGlvbiBvZiBtb3VudGVkLCBzZW1pLW1vdW50ZWQsIHRyYWlsZWQgb3Igc2VsZi1wcm9wZWxsZWQgZmVydGlsaXplciBkaXN0cmlidXRvcnMgZm9yIHNvbGlkIGZlcnRpbGl6ZXIgYXBwbGljYXRpb24gaW4gYWdyaWN1bHR1cmUgYW5kIHRvIGJlIHVzZWQgYnkgb25lIG9wZXJhdG9yIG9ubHksIGUuZy4gZnVsbCB3aWR0aCBzb2xpZCBmZXJ0aWxpemVyIGRpc3RyaWJ1dG9ycywgc29saWQgZmVydGlsaXplciBicm9hZGNhc3RlcnMsIGRpc3RyaWJ1dG9ycyB3aXRoIG9zY2lsbGF0aW5nIHR1YmUgYW5kIGxpbmUtZGlzdHJpYnV0b3JzLCBhcyB3ZWxsIGFzIHNvbGlkIGZlcnRpbGl6ZXIgZGlzdHJpYnV0b3JzIGRyaXZlbiBieSBhbiBhdXhpbGlhcnkgZW5naW5lLiBJbiBhZGRpdGlvbiwgaXQgc3BlY2lmaWVzIHRoZSB0eXBlIG9mIGluZm9ybWF0aW9uIG9uIHNhZmUgd29ya2luZyBwcmFjdGljZXMgKGluY2x1ZGluZyByZXNpZHVhbCByaXNrcykgdG8gYmUgcHJvdmlkZWQgYnkgdGhlIG1hbnVmYWN0dXJlci4gPGVtPklTTzwvZW0+IDxlbT40PC9lbT4yNTQtODoyMDE4IGRlYWxzIHdpdGggYWxsIHRoZSBzaWduaWZpY2FudCBoYXphcmRzIChhcyBsaXN0ZWQgaW4gQW5uZXggQSksIGhhemFyZG91cyBzaXR1YXRpb25zIGFuZCBldmVudHMgcmVsZXZhbnQgdG8gc29saWQgZmVydGlsaXplciBkaXN0cmlidXRvcnMsIHdoZW4gdGhleSBhcmUgdXNlZCBhcyBpbnRlbmRlZCBhbmQgdW5kZXIgdGhlIGNvbmRpdGlvbnMgZm9yZXNlZWFibGUgYnkgdGhlIG1hbnVmYWN0dXJlciAoc2VlIENsYXVzZSA8ZW0+NDwvZW0+KSwgZXhjZXB0aW5nIHRoZSBoYXphcmRzIGFyaXNpbmcgZnJvbTogLSAgICAgIGluYWRlcXVhdGUgbGlnaHRpbmcgb2Ygd29ya2luZyBhcmVhOyAtICAgICAgaW5hZGVxdWF0ZSB2aXNpYmlsaXR5IGZyb20gZHJpdmVycy9vcGVyYXRvcnMgcG9zaXRpb247IC0gICAgICBpbmFkZXF1YXRlIHNlYXRpbmc7IC0gICAgICB0cmF2ZWxsaW5nIGZ1bmN0aW9ucyAoZHJpdmUsIGJyYWtpbmcgZXRjLik7IC0gICAgICByb2xsaW5nIG92ZXI7IC0gICAgICBlcXVpcG1lbnQgZm9yIGxvYWRpbmcgZmVydGlsaXplciBpbnRvIHRoZSBtYWNoaW5lOyAtICAgICAgYW4gYXV4aWxpYXJ5IGVuZ2luZTsgLSAgICAgIG1vdmluZyBwYXJ0cyBmb3IgcG93ZXIgdHJhbnNtaXNzaW9uIGV4Y2VwdCBmb3Igc3RyZW5ndGggcmVxdWlyZW1lbnRzIGZvciBndWFyZHMuIDxlbT5JU088L2VtPiA8ZW0+NDwvZW0+MjU0LTg6MjAxOCBpcyBuZWl0aGVyIGFwcGxpY2FibGUgdG8gbWFpbnRlbmFuY2Ugb3IgcmVwYWlycyBjYXJyaWVkIG91dCBieSBwcm9mZXNzaW9uYWwgc2VydmljZSBwZXJzb25uZWwgbm9yIHRvIGVudmlyb25tZW50YWwgaGF6YXJkcyAoZXhjZXB0IG5vaXNlKS4gPGVtPklTTzwvZW0+IDxlbT40PC9lbT4yNTQtODoyMDE4IGlzIG5vdCBhcHBsaWNhYmxlIHRvIHRoZSBmb2xsb3dpbmc6IC0gICAgICBjb21iaW5lZCBzZWVkIGFuZCBmZXJ0aWxpemVyIGRyaWxscyB3aGljaCBjcmVhdGUgYSBzb2lsIHRyZW5jaCBhbmQgZGVwb3NpdCBmZXJ0aWxpemVyIGluIHNhaWQgdHJlbmNoOyAtICAgICAgbWFjaGluZXMgZm9yIGRpc3RyaWJ1dGluZyBncmFudWxhdGVkIHBlc3RpY2lkZXM7IC0gICAgICBwZWRlc3RyaWFuIGNvbnRyb2xsZWQgZGlzdHJpYnV0b3JzOyAtICAgICAga25hcHNhY2sgZGlzdHJpYnV0b3JzLiA8ZW0+SVNPPC9lbT4gPGVtPjQ8L2VtPjI1NC04OjIwMTggaXMgbm90IGFwcGxpY2FibGUgdG8gc29saWQgZmVydGlsaXplciBkaXN0cmlidXRvcnMgd2hpY2ggYXJlIG1hbnVmYWN0dXJlZCBiZWZvcmUgdGhlIGRhdGUgb2YgaXRzIHB1YmxpY2F0aW9uLiBXaGVuIHJlcXVpcmVtZW50cyBvZiB0aGlzIGRvY3VtZW50IGFyZSBkaWZmZXJlbnQgZnJvbSB0aG9zZSB3aGljaCBhcmUgc3RhdGVkIGluIDxlbT5JU088L2VtPiA8ZW0+NDwvZW0+MjU04oCRMSwgdGhlIHJlcXVpcmVtZW50cyBvZiB0aGlzIGRvY3VtZW50IHRha2UgcHJlY2VkZW5jZSBvdmVyIHRoZSByZXF1aXJlbWVudHMgb2YgPGVtPklTTzwvZW0+IDxlbT40PC9lbT4yNTTigJExIGZvciBtYWNoaW5lcyB0aGF0IGhhdmUgYmVlbiBkZXNpZ25lZCBhbmQgYnVpbHQgYWNjb3JkaW5nIHRvIHRoZSBwcm92aXNpb25zIG9mIHRoaXMgZG9jdW1lbnQuICIsIm1hdGNoTGV2ZWwiOiJmdWxsIiwiZnVsbHlIaWdobGlnaHRlZCI6ZmFsc2UsIm1hdGNoZWRXb3JkcyI6WyJpc28iLCI0Il19fX0seyJjYXRlZ29yeSI6InN0YW5kYXJkIiwicGF0aCI6Ii9zaXRlcy9pc29vcmcvY29udGVudHMvZGF0YS9zdGFuZGFyZC8wNi80OC82NDg3OCIsInV1aWQiOiI5NGI1MmI3OS1mNWI4LTQ2ZDctODZhOC1iOGQwMmE3OTMzMzciLCJ0aXRsZSI6IklTTyA0MjU0LTU6MjAxOCBBZ3JpY3VsdHVyYWwgbWFjaGluZXJ5IOKAlCBTYWZldHkg4oCUIFBhcnQgNTogUG93ZXItZHJpdmVuIHNvaWwtd29ya2luZyBtYWNoaW5lcyIsInN0YXR1cyI6IlB1Ymxpc2hlZCIsInllYXIiOjIwMjMsIm9yZGVyIjoxMSwidGV4dCI6IklTTyA0MjU0LTU6MjAxOCwgaW50ZW5kZWQgdG8gYmUgdXNlZCB0b2dldGhlciB3aXRoIElTTyA0MjU04oCRMSwgc3BlY2lmaWVzIHRoZSBzYWZldHkgcmVxdWlyZW1lbnRzIGFuZCB0aGVpciB2ZXJpZmljYXRpb24gZm9yIHRoZSBkZXNpZ24gYW5kIGNvbnN0cnVjdGlvbiBvZiBtb3VudGVkLCBzZW1pLW1vdW50ZWQgYW5kIHRyYWlsZWQgcG93ZXItZHJpdmVuIHNvaWwtd29ya2luZyBtYWNoaW5lcyB1c2VkIGluIGFncmljdWx0dXJlLiBJbiBhZGRpdGlvbiwgaXQgc3BlY2lmaWVzIHRoZSB0eXBlIG9mIGluZm9ybWF0aW9uIG9uIHNhZmUgd29ya2luZyBwcmFjdGljZXMgKGluY2x1ZGluZyByZXNpZHVhbCByaXNrcykgdG8gYmUgcHJvdmlkZWQgYnkgdGhlIG1hbnVmYWN0dXJlci4gSVNPIDQyNTQtNToyMDE4IGRlYWxzIHdpdGggc2lnbmlmaWNhbnQgaGF6YXJkcyAoYXMgbGlzdGVkIGluIEFubmV4IEEpLCBoYXphcmRvdXMgc2l0dWF0aW9ucyBhbmQgZXZlbnRzIHJlbGV2YW50IHRvIHBvd2VyLWRyaXZlbiBzb2lsLXdvcmtpbmcgbWFjaGluZXMgdXNlZCBhcyBpbnRlbmRlZCBhbmQgdW5kZXIgdGhlIGNvbmRpdGlvbnMgZm9yZXNlZWFibGUgYnkgdGhlIG1hbnVmYWN0dXJlciAoc2VlIENsYXVzZSA0KS4gSVNPIDQyNTQtNToyMDE4IGlzIG5vdCBhcHBsaWNhYmxlIHRvIC0gICAgICBzcGFkaW5nIG1hY2hpbmVzLCBhbmQgLSAgICAgIG1hY2hpbmVzIGZpdHRlZCB3aXRoIGEgcmV0cmFjdGFibGUgZGV2aWNlIG1ha2luZyB0aGVtIGNhcGFibGUgb2Ygd29ya2luZyBiZXR3ZWVuIHR3byBzdWNjZXNzaXZlIHBsYW50cyBpbiB0aGUgc2FtZSByb3cuIElTTyA0MjU0LTU6MjAxOCBpcyBub3QgYXBwbGljYWJsZSB0byBlbnZpcm9ubWVudGFsIGhhemFyZHMuIEl0IGlzIG5vdCBhcHBsaWNhYmxlIHRvIGhhemFyZHMgcmVsYXRlZCB0byBtb3ZpbmcgcGFydHMgZm9yIHBvd2VyIHRyYW5zbWlzc2lvbiAoZXhjZXB0IGZvciBzdHJlbmd0aCByZXF1aXJlbWVudHMgZm9yIGd1YXJkcyBhbmQgYmFycmllcnMpIG9yIHRvIG1haW50ZW5hbmNlIG9yIHJlcGFpcnMgY2FycmllZCBvdXQgYnkgcHJvZmVzc2lvbmFsIHNlcnZpY2UgcGVyc29ubmVsLiBOT1RFIDEgICAgU3BlY2lmaWMgcmVxdWlyZW1lbnRzIHJlbGF0ZWQgdG8gcm9hZCB0cmFmZmljIHJlZ3VsYXRpb25zIGFyZSBub3QgdGFrZW4gaW50byBhY2NvdW50IGluIHRoaXMgZG9jdW1lbnQuIE5PVEUgMiAgICBWaWJyYXRpb25zIGFyZSBub3QgcmVnYXJkZWQgYXMgYSBzaWduaWZpY2FudCBoYXphcmQgaW4gdGhlIGNhc2Ugb2YgbW91bnRlZCwgc2VtaS1tb3VudGVkIG9yIHRyYWlsZWQgbWFjaGluZXMuIElTTyA0MjU0LTU6MjAxOCBpcyBub3QgYXBwbGljYWJsZSB0byBwb3dlci1kcml2ZW4gc29pbC13b3JraW5nIG1hY2hpbmVzIHdoaWNoIGFyZSBtYW51ZmFjdHVyZWQgYmVmb3JlIHRoZSBkYXRlIG9mIGl0cyBwdWJsaWNhdGlvbi4gV2hlbiByZXF1aXJlbWVudHMgb2YgdGhpcyBkb2N1bWVudCBhcmUgZGlmZmVyZW50IGZyb20gdGhvc2Ugd2hpY2ggYXJlIHN0YXRlZCBpbiBJU08gNDI1NOKAkTEsIHRoZSByZXF1aXJlbWVudHMgb2YgdGhpcyBkb2N1bWVudCB0YWtlIHByZWNlZGVuY2Ugb3ZlciB0aGUgcmVxdWlyZW1lbnRzIG9mIElTTyA0MjU04oCRMSBmb3IgbWFjaGluZXMgdGhhdCBoYXZlIGJlZW4gZGVzaWduZWQgYW5kIGJ1aWx0IGFjY29yZGluZyB0byB0aGUgcHJvdmlzaW9ucyBvZiB0aGlzIGRvY3VtZW50LiAiLCJvYmplY3RJRCI6IjY0ODc4XzAiLCJfaGlnaGxpZ2h0UmVzdWx0Ijp7InRpdGxlIjp7InZhbHVlIjoiPGVtPklTTzwvZW0+IDxlbT40PC9lbT4yNTQtNToyMDE4IEFncmljdWx0dXJhbCBtYWNoaW5lcnkg4oCUIFNhZmV0eSDigJQgUGFydCA1OiBQb3dlci1kcml2ZW4gc29pbC13b3JraW5nIG1hY2hpbmVzIiwibWF0Y2hMZXZlbCI6ImZ1bGwiLCJmdWxseUhpZ2hsaWdodGVkIjpmYWxzZSwibWF0Y2hlZFdvcmRzIjpbImlzbyIsIjQiXX0sInRleHQiOnsidmFsdWUiOiI8ZW0+SVNPPC9lbT4gPGVtPjQ8L2VtPjI1NC01OjIwMTgsIGludGVuZGVkIHRvIGJlIHVzZWQgdG9nZXRoZXIgd2l0aCA8ZW0+SVNPPC9lbT4gPGVtPjQ8L2VtPjI1NOKAkTEsIHNwZWNpZmllcyB0aGUgc2FmZXR5IHJlcXVpcmVtZW50cyBhbmQgdGhlaXIgdmVyaWZpY2F0aW9uIGZvciB0aGUgZGVzaWduIGFuZCBjb25zdHJ1Y3Rpb24gb2YgbW91bnRlZCwgc2VtaS1tb3VudGVkIGFuZCB0cmFpbGVkIHBvd2VyLWRyaXZlbiBzb2lsLXdvcmtpbmcgbWFjaGluZXMgdXNlZCBpbiBhZ3JpY3VsdHVyZS4gSW4gYWRkaXRpb24sIGl0IHNwZWNpZmllcyB0aGUgdHlwZSBvZiBpbmZvcm1hdGlvbiBvbiBzYWZlIHdvcmtpbmcgcHJhY3RpY2VzIChpbmNsdWRpbmcgcmVzaWR1YWwgcmlza3MpIHRvIGJlIHByb3ZpZGVkIGJ5IHRoZSBtYW51ZmFjdHVyZXIuIDxlbT5JU088L2VtPiA8ZW0+NDwvZW0+MjU0LTU6MjAxOCBkZWFscyB3aXRoIHNpZ25pZmljYW50IGhhemFyZHMgKGFzIGxpc3RlZCBpbiBBbm5leCBBKSwgaGF6YXJkb3VzIHNpdHVhdGlvbnMgYW5kIGV2ZW50cyByZWxldmFudCB0byBwb3dlci1kcml2ZW4gc29pbC13b3JraW5nIG1hY2hpbmVzIHVzZWQgYXMgaW50ZW5kZWQgYW5kIHVuZGVyIHRoZSBjb25kaXRpb25zIGZvcmVzZWVhYmxlIGJ5IHRoZSBtYW51ZmFjdHVyZXIgKHNlZSBDbGF1c2UgPGVtPjQ8L2VtPikuIDxlbT5JU088L2VtPiA8ZW0+NDwvZW0+MjU0LTU6MjAxOCBpcyBub3QgYXBwbGljYWJsZSB0byAtICAgICAgc3BhZGluZyBtYWNoaW5lcywgYW5kIC0gICAgICBtYWNoaW5lcyBmaXR0ZWQgd2l0aCBhIHJldHJhY3RhYmxlIGRldmljZSBtYWtpbmcgdGhlbSBjYXBhYmxlIG9mIHdvcmtpbmcgYmV0d2VlbiB0d28gc3VjY2Vzc2l2ZSBwbGFudHMgaW4gdGhlIHNhbWUgcm93LiA8ZW0+SVNPPC9lbT4gPGVtPjQ8L2VtPjI1NC01OjIwMTggaXMgbm90IGFwcGxpY2FibGUgdG8gZW52aXJvbm1lbnRhbCBoYXphcmRzLiBJdCBpcyBub3QgYXBwbGljYWJsZSB0byBoYXphcmRzIHJlbGF0ZWQgdG8gbW92aW5nIHBhcnRzIGZvciBwb3dlciB0cmFuc21pc3Npb24gKGV4Y2VwdCBmb3Igc3RyZW5ndGggcmVxdWlyZW1lbnRzIGZvciBndWFyZHMgYW5kIGJhcnJpZXJzKSBvciB0byBtYWludGVuYW5jZSBvciByZXBhaXJzIGNhcnJpZWQgb3V0IGJ5IHByb2Zlc3Npb25hbCBzZXJ2aWNlIHBlcnNvbm5lbC4gTk9URSAxICAgIFNwZWNpZmljIHJlcXVpcmVtZW50cyByZWxhdGVkIHRvIHJvYWQgdHJhZmZpYyByZWd1bGF0aW9ucyBhcmUgbm90IHRha2VuIGludG8gYWNjb3VudCBpbiB0aGlzIGRvY3VtZW50LiBOT1RFIDIgICAgVmlicmF0aW9ucyBhcmUgbm90IHJlZ2FyZGVkIGFzIGEgc2lnbmlmaWNhbnQgaGF6YXJkIGluIHRoZSBjYXNlIG9mIG1vdW50ZWQsIHNlbWktbW91bnRlZCBvciB0cmFpbGVkIG1hY2hpbmVzLiA8ZW0+SVNPPC9lbT4gPGVtPjQ8L2VtPjI1NC01OjIwMTggaXMgbm90IGFwcGxpY2FibGUgdG8gcG93ZXItZHJpdmVuIHNvaWwtd29ya2luZyBtYWNoaW5lcyB3aGljaCBhcmUgbWFudWZhY3R1cmVkIGJlZm9yZSB0aGUgZGF0ZSBvZiBpdHMgcHVibGljYXRpb24uIFdoZW4gcmVxdWlyZW1lbnRzIG9mIHRoaXMgZG9jdW1lbnQgYXJlIGRpZmZlcmVudCBmcm9tIHRob3NlIHdoaWNoIGFyZSBzdGF0ZWQgaW4gPGVtPklTTzwvZW0+IDxlbT40PC9lbT4yNTTigJExLCB0aGUgcmVxdWlyZW1lbnRzIG9mIHRoaXMgZG9jdW1lbnQgdGFrZSBwcmVjZWRlbmNlIG92ZXIgdGhlIHJlcXVpcmVtZW50cyBvZiA8ZW0+SVNPPC9lbT4gPGVtPjQ8L2VtPjI1NOKAkTEgZm9yIG1hY2hpbmVzIHRoYXQgaGF2ZSBiZWVuIGRlc2lnbmVkIGFuZCBidWlsdCBhY2NvcmRpbmcgdG8gdGhlIHByb3Zpc2lvbnMgb2YgdGhpcyBkb2N1bWVudC4gIiwibWF0Y2hMZXZlbCI6ImZ1bGwiLCJmdWxseUhpZ2hsaWdodGVkIjpmYWxzZSwibWF0Y2hlZFdvcmRzIjpbImlzbyIsIjQiXX19fSx7ImNhdGVnb3J5Ijoic3RhbmRhcmQiLCJwYXRoIjoiL3NpdGVzL2lzb29yZy9jb250ZW50cy9kYXRhL3N0YW5kYXJkLzA2LzM5LzYzOTg1IiwidXVpZCI6ImExOGIxYTZjLWJjNmItNDQyOS1hMjk4LTc1YWQzYWU2MjEyNCIsInRpdGxlIjoiSVNPIDQ1NDUtNDoyMDE3IE1ldGFsbGljIG1hdGVyaWFscyDigJQgS25vb3AgaGFyZG5lc3MgdGVzdCDigJQgUGFydCA0OiBUYWJsZSBvZiBoYXJkbmVzcyB2YWx1ZXMiLCJzdGF0dXMiOiJQdWJsaXNoZWQiLCJ5ZWFyIjoyMDIzLCJvcmRlciI6MTEsInRleHQiOiJJU08gNDU0NS00OjIwMTcgZ2l2ZXMgYSB0YWJsZSBmb3IgdGhlIGNhbGN1bGF0aW9uIG9mIEtub29wIGhhcmRuZXNzIHZhbHVlcyBmb3IgdXNlIGluIHRlc3RzIGNhcnJpZWQgb3V0IGluIGFjY29yZGFuY2Ugd2l0aCBJU08gNDU0NeKAkTEuICIsIm9iamVjdElEIjoiNjM5ODVfMCIsIl9oaWdobGlnaHRSZXN1bHQiOnsidGl0bGUiOnsidmFsdWUiOiI8ZW0+SVNPPC9lbT4gPGVtPjQ8L2VtPjU0NS08ZW0+NDwvZW0+OjIwMTcgTWV0YWxsaWMgbWF0ZXJpYWxzIOKAlCBLbm9vcCBoYXJkbmVzcyB0ZXN0IOKAlCBQYXJ0IDxlbT40PC9lbT46IFRhYmxlIG9mIGhhcmRuZXNzIHZhbHVlcyIsIm1hdGNoTGV2ZWwiOiJmdWxsIiwiZnVsbHlIaWdobGlnaHRlZCI6ZmFsc2UsIm1hdGNoZWRXb3JkcyI6WyJpc28iLCI0Il19LCJ0ZXh0Ijp7InZhbHVlIjoiPGVtPklTTzwvZW0+IDxlbT40PC9lbT41NDUtPGVtPjQ8L2VtPjoyMDE3IGdpdmVzIGEgdGFibGUgZm9yIHRoZSBjYWxjdWxhdGlvbiBvZiBLbm9vcCBoYXJkbmVzcyB2YWx1ZXMgZm9yIHVzZSBpbiB0ZXN0cyBjYXJyaWVkIG91dCBpbiBhY2NvcmRhbmNlIHdpdGggPGVtPklTTzwvZW0+IDxlbT40PC9lbT41NDXigJExLiAiLCJtYXRjaExldmVsIjoiZnVsbCIsImZ1bGx5SGlnaGxpZ2h0ZWQiOmZhbHNlLCJtYXRjaGVkV29yZHMiOlsiaXNvIiwiNCJdfX19LHsiY2F0ZWdvcnkiOiJzdGFuZGFyZCIsInBhdGgiOiIvc2l0ZXMvaXNvb3JnL2NvbnRlbnRzL2RhdGEvc3RhbmRhcmQvMDYvMzYvNjM2ODEiLCJ1dWlkIjoiYWFhYWI1ODgtMjBiMi00OWUzLThmZjEtZjljN2MxMmQzYWUzIiwidGl0bGUiOiJJU08gNDg5Mi00OjIwMTMgUGxhc3RpY3Mg4oCUIE1ldGhvZHMgb2YgZXhwb3N1cmUgdG8gbGFib3JhdG9yeSBsaWdodCBzb3VyY2VzIOKAlCBQYXJ0IDQ6IE9wZW4tZmxhbWUgY2FyYm9uLWFyYyBsYW1wcyIsInN0YXR1cyI6IlB1Ymxpc2hlZCIsInllYXIiOjIwMjMsIm9yZGVyIjoxMSwidGV4dCI6IklTTyA0ODkyLTQ6MjAxMyBzcGVjaWZpZXMgbWV0aG9kcyBmb3IgZXhwb3Npbmcgc3BlY2ltZW5zIHRvIG9wZW4tZmxhbWUgY2FyYm9uLWFyYyBsYW1wcyBpbiB0aGUgcHJlc2VuY2Ugb2YgbW9pc3R1cmUgdG8gcmVwcm9kdWNlIHRoZSB3ZWF0aGVyaW5nIGVmZmVjdHMgdGhhdCBvY2N1ciB3aGVuIG1hdGVyaWFscyBhcmUgZXhwb3NlZCBpbiBhY3R1YWwgZW5kLXVzZSBlbnZpcm9ubWVudHMgaW4gZGF5bGlnaHQgb3IgZGF5bGlnaHQgZmlsdGVyZWQgdGhyb3VnaCB3aW5kb3cgZ2xhc3MuICIsIm9iamVjdElEIjoiNjM2ODFfMCIsIl9oaWdobGlnaHRSZXN1bHQiOnsidGl0bGUiOnsidmFsdWUiOiI8ZW0+SVNPPC9lbT4gPGVtPjQ8L2VtPjg5Mi08ZW0+NDwvZW0+OjIwMTMgUGxhc3RpY3Mg4oCUIE1ldGhvZHMgb2YgZXhwb3N1cmUgdG8gbGFib3JhdG9yeSBsaWdodCBzb3VyY2VzIOKAlCBQYXJ0IDxlbT40PC9lbT46IE9wZW4tZmxhbWUgY2FyYm9uLWFyYyBsYW1wcyIsIm1hdGNoTGV2ZWwiOiJmdWxsIiwiZnVsbHlIaWdobGlnaHRlZCI6ZmFsc2UsIm1hdGNoZWRXb3JkcyI6WyJpc28iLCI0Il19LCJ0ZXh0Ijp7InZhbHVlIjoiPGVtPklTTzwvZW0+IDxlbT40PC9lbT44OTItPGVtPjQ8L2VtPjoyMDEzIHNwZWNpZmllcyBtZXRob2RzIGZvciBleHBvc2luZyBzcGVjaW1lbnMgdG8gb3Blbi1mbGFtZSBjYXJib24tYXJjIGxhbXBzIGluIHRoZSBwcmVzZW5jZSBvZiBtb2lzdHVyZSB0byByZXByb2R1Y2UgdGhlIHdlYXRoZXJpbmcgZWZmZWN0cyB0aGF0IG9jY3VyIHdoZW4gbWF0ZXJpYWxzIGFyZSBleHBvc2VkIGluIGFjdHVhbCBlbmQtdXNlIGVudmlyb25tZW50cyBpbiBkYXlsaWdodCBvciBkYXlsaWdodCBmaWx0ZXJlZCB0aHJvdWdoIHdpbmRvdyBnbGFzcy4gIiwibWF0Y2hMZXZlbCI6ImZ1bGwiLCJmdWxseUhpZ2hsaWdodGVkIjpmYWxzZSwibWF0Y2hlZFdvcmRzIjpbImlzbyIsIjQiXX19fSx7ImNhdGVnb3J5Ijoic3RhbmRhcmQiLCJwYXRoIjoiL3NpdGVzL2lzb29yZy9jb250ZW50cy9kYXRhL3N0YW5kYXJkLzA2LzEwLzYxMDQzIiwidXVpZCI6ImIzYWMxMjU4LWQyNmUtNDUxYi04MDQzLWJlODUyOGYxYTM0OCIsInRpdGxlIjoiSVNPIDQxOTU6MjAxMiBDb252ZXlvciBiZWx0cyB3aXRoIGhlYXQtcmVzaXN0YW50IHJ1YmJlciBjb3ZlcnMg4oCUIEhlYXQgcmVzaXN0YW5jZSBvZiBjb3ZlcnMg4oCUIFJlcXVpcmVtZW50cyBhbmQgdGVzdCBtZXRob2RzIiwic3RhdHVzIjoiUHVibGlzaGVkIiwieWVhciI6MjAyMywib3JkZXIiOjExLCJ0ZXh0IjoiSVNPIDQxOTU6MjAxMiBzcGVjaWZpZXMgcmVxdWlyZW1lbnRzIGFuZCB0ZXN0IG1ldGhvZHMgZm9yIHRoZSByZWxhdGl2ZSBsZXZlbCBvZiBoZWF0IHJlc2lzdGFuY2Ugb2YgY29udmV5b3IgYmVsdCBjb3ZlcnMgbWFkZSBvZiBydWJiZXIuIEl0IGdpdmVzIHRoZSBwZXJtaXNzaWJsZSB2YXJpYXRpb25zIG9mIGhhcmRuZXNzLCBlbG9uZ2F0aW9uIGF0IGJyZWFrIGFuZCB0ZW5zaWxlIHN0cmVuZ3RoIGFmdGVyIGV4cG9zdXJlIHRvIGhlYXQuIEl0IGlzIGFwcGxpY2FibGUgb25seSB0byB0aG9zZSBjb252ZXlvciBiZWx0cyBoYXZpbmcgYSBjb3ZlciB0aGlja25lc3MgZ3JlYXRlciB0aGFuIG9yIGVxdWFsIHRvIDQgbW0uIEl0IGlzIG5vdCBzdWl0YWJsZSBvciB2YWxpZCBmb3IgbGlnaHQgY29udmV5b3IgYmVsdHMgYXMgZGVzY3JpYmVkIGluIElTTyAyMTE4My0xLiAiLCJvYmplY3RJRCI6IjYxMDQzXzAiLCJfaGlnaGxpZ2h0UmVzdWx0Ijp7InRpdGxlIjp7InZhbHVlIjoiPGVtPklTTzwvZW0+IDxlbT40PC9lbT4xOTU6MjAxMiBDb252ZXlvciBiZWx0cyB3aXRoIGhlYXQtcmVzaXN0YW50IHJ1YmJlciBjb3ZlcnMg4oCUIEhlYXQgcmVzaXN0YW5jZSBvZiBjb3ZlcnMg4oCUIFJlcXVpcmVtZW50cyBhbmQgdGVzdCBtZXRob2RzIiwibWF0Y2hMZXZlbCI6ImZ1bGwiLCJmdWxseUhpZ2hsaWdodGVkIjpmYWxzZSwibWF0Y2hlZFdvcmRzIjpbImlzbyIsIjQiXX0sInRleHQiOnsidmFsdWUiOiI8ZW0+SVNPPC9lbT4gPGVtPjQ8L2VtPjE5NToyMDEyIHNwZWNpZmllcyByZXF1aXJlbWVudHMgYW5kIHRlc3QgbWV0aG9kcyBmb3IgdGhlIHJlbGF0aXZlIGxldmVsIG9mIGhlYXQgcmVzaXN0YW5jZSBvZiBjb252ZXlvciBiZWx0IGNvdmVycyBtYWRlIG9mIHJ1YmJlci4gSXQgZ2l2ZXMgdGhlIHBlcm1pc3NpYmxlIHZhcmlhdGlvbnMgb2YgaGFyZG5lc3MsIGVsb25nYXRpb24gYXQgYnJlYWsgYW5kIHRlbnNpbGUgc3RyZW5ndGggYWZ0ZXIgZXhwb3N1cmUgdG8gaGVhdC4gSXQgaXMgYXBwbGljYWJsZSBvbmx5IHRvIHRob3NlIGNvbnZleW9yIGJlbHRzIGhhdmluZyBhIGNvdmVyIHRoaWNrbmVzcyBncmVhdGVyIHRoYW4gb3IgZXF1YWwgdG8gPGVtPjQ8L2VtPiBtbS4gSXQgaXMgbm90IHN1aXRhYmxlIG9yIHZhbGlkIGZvciBsaWdodCBjb252ZXlvciBiZWx0cyBhcyBkZXNjcmliZWQgaW4gPGVtPklTTzwvZW0+IDIxMTgzLTEuICIsIm1hdGNoTGV2ZWwiOiJmdWxsIiwiZnVsbHlIaWdobGlnaHRlZCI6ZmFsc2UsIm1hdGNoZWRXb3JkcyI6WyJpc28iLCI0Il19fX0seyJjYXRlZ29yeSI6InN0YW5kYXJkIiwicGF0aCI6Ii9zaXRlcy9pc29vcmcvY29udGVudHMvZGF0YS9zdGFuZGFyZC8wNS8yMS81MjE1MSIsInV1aWQiOiI1M2E1NWVjOC00NDYzLTRkYjktYTUzYi1hMzc2ZTQ5Mjc2MzkiLCJ0aXRsZSI6IklTTyA0NDA0LTE6MjAxMiBQZXRyb2xldW0gYW5kIHJlbGF0ZWQgcHJvZHVjdHMg4oCUIERldGVybWluYXRpb24gb2YgdGhlIGNvcnJvc2lvbiByZXNpc3RhbmNlIG9mIGZpcmUtcmVzaXN0YW50IGh5ZHJhdWxpYyBmbHVpZHMg4oCUIFBhcnQgMTogV2F0ZXItY29udGFpbmluZyBmbHVpZHMiLCJzdGF0dXMiOiJQdWJsaXNoZWQiLCJ5ZWFyIjoyMDIzLCJvcmRlciI6MTEsInRleHQiOiJJU08gNDQwNC0xOjIwMTIgc3BlY2lmaWVzIGEgdGVzdCBtZXRob2QgdG8gZGV0ZXJtaW5lIHRoZSBpbmZsdWVuY2Ugb24gbWV0YWxzIG9mIGZpcmUtcmVzaXN0YW50IGZsdWlkcyBpbiBjYXRlZ29yaWVzIEhGQSwgSEZCIGFuZCBIRkMsIGFzIGNsYXNzaWZpZWQgaW4gSVNPIDY3NDMtNC4gSVNPIDQ0MDQtMToyMDEyIGV2YWx1YXRlcyB0aGUgY29ycm9zaW9uIHByb3RlY3Rpb24gcHJvdmlkZWQgYnkgdGhlc2UgZmx1aWRzIHRvd2FyZHMgbWV0YWwgY29tcG9uZW50cyB1c2VkIGluIGh5ZHJhdWxpYyBzeXN0ZW1zIGFuZCBpbnN0YWxsYXRpb25zLiAiLCJvYmplY3RJRCI6IjUyMTUxXzAiLCJfaGlnaGxpZ2h0UmVzdWx0Ijp7InRpdGxlIjp7InZhbHVlIjoiPGVtPklTTzwvZW0+IDxlbT40PC9lbT40MDQtMToyMDEyIFBldHJvbGV1bSBhbmQgcmVsYXRlZCBwcm9kdWN0cyDigJQgRGV0ZXJtaW5hdGlvbiBvZiB0aGUgY29ycm9zaW9uIHJlc2lzdGFuY2Ugb2YgZmlyZS1yZXNpc3RhbnQgaHlkcmF1bGljIGZsdWlkcyDigJQgUGFydCAxOiBXYXRlci1jb250YWluaW5nIGZsdWlkcyIsIm1hdGNoTGV2ZWwiOiJmdWxsIiwiZnVsbHlIaWdobGlnaHRlZCI6ZmFsc2UsIm1hdGNoZWRXb3JkcyI6WyJpc28iLCI0Il19LCJ0ZXh0Ijp7InZhbHVlIjoiPGVtPklTTzwvZW0+IDxlbT40PC9lbT40MDQtMToyMDEyIHNwZWNpZmllcyBhIHRlc3QgbWV0aG9kIHRvIGRldGVybWluZSB0aGUgaW5mbHVlbmNlIG9uIG1ldGFscyBvZiBmaXJlLXJlc2lzdGFudCBmbHVpZHMgaW4gY2F0ZWdvcmllcyBIRkEsIEhGQiBhbmQgSEZDLCBhcyBjbGFzc2lmaWVkIGluIDxlbT5JU088L2VtPiA2NzQzLTxlbT40PC9lbT4uIDxlbT5JU088L2VtPiA8ZW0+NDwvZW0+NDA0LTE6MjAxMiBldmFsdWF0ZXMgdGhlIGNvcnJvc2lvbiBwcm90ZWN0aW9uIHByb3ZpZGVkIGJ5IHRoZXNlIGZsdWlkcyB0b3dhcmRzIG1ldGFsIGNvbXBvbmVudHMgdXNlZCBpbiBoeWRyYXVsaWMgc3lzdGVtcyBhbmQgaW5zdGFsbGF0aW9ucy4gIiwibWF0Y2hMZXZlbCI6ImZ1bGwiLCJmdWxseUhpZ2hsaWdodGVkIjpmYWxzZSwibWF0Y2hlZFdvcmRzIjpbImlzbyIsIjQiXX19fSx7ImNhdGVnb3J5Ijoic3RhbmRhcmQiLCJwYXRoIjoiL3NpdGVzL2lzb29yZy9jb250ZW50cy9kYXRhL3N0YW5kYXJkLzA0LzMzLzQzMzUzIiwidXVpZCI6IjY4ODMwYTI5LWIwZGYtNDQ3My1hMmIxLTc2MTU1ODIxZDk3NCIsInRpdGxlIjoiSVNPIDQxNDEtNDoyMDA5IFJvYWQgdmVoaWNsZXMg4oCUIE11bHRpLWNvcmUgY29ubmVjdGluZyBjYWJsZXMg4oCUIFBhcnQgNDogVGVzdCBtZXRob2RzIGFuZCByZXF1aXJlbWVudHMgZm9yIGNvaWxlZCBjYWJsZSBhc3NlbWJsaWVzIiwic3RhdHVzIjoiUHVibGlzaGVkIiwieWVhciI6MjAyMywib3JkZXIiOjExLCJ0ZXh0IjoiSVNPIDQxNDEtNDoyMDA5IHNwZWNpZmllcyB0ZXN0IG1ldGhvZCBhbmQgcGVyZm9ybWFuY2UgcmVxdWlyZW1lbnRzIGZvciBlbGVjdHJpY2FsIGNvaWxlZCBjYWJsZSBhc3NlbWJsaWVzIGZvciB0aGUgY29ubmVjdGlvbiBvZiB0b3dpbmcgYW5kIHRvd2VkIHJvYWQgdmVoaWNsZXMgZXF1aXBwZWQgd2l0aCBub21pbmFsIDEyIFYgb3IgMjQgViBzeXN0ZW1zLiAiLCJvYmplY3RJRCI6IjQzMzUzXzAiLCJfaGlnaGxpZ2h0UmVzdWx0Ijp7InRpdGxlIjp7InZhbHVlIjoiPGVtPklTTzwvZW0+IDxlbT40PC9lbT4xNDEtPGVtPjQ8L2VtPjoyMDA5IFJvYWQgdmVoaWNsZXMg4oCUIE11bHRpLWNvcmUgY29ubmVjdGluZyBjYWJsZXMg4oCUIFBhcnQgPGVtPjQ8L2VtPjogVGVzdCBtZXRob2RzIGFuZCByZXF1aXJlbWVudHMgZm9yIGNvaWxlZCBjYWJsZSBhc3NlbWJsaWVzIiwibWF0Y2hMZXZlbCI6ImZ1bGwiLCJmdWxseUhpZ2hsaWdodGVkIjpmYWxzZSwibWF0Y2hlZFdvcmRzIjpbImlzbyIsIjQiXX0sInRleHQiOnsidmFsdWUiOiI8ZW0+SVNPPC9lbT4gPGVtPjQ8L2VtPjE0MS08ZW0+NDwvZW0+OjIwMDkgc3BlY2lmaWVzIHRlc3QgbWV0aG9kIGFuZCBwZXJmb3JtYW5jZSByZXF1aXJlbWVudHMgZm9yIGVsZWN0cmljYWwgY29pbGVkIGNhYmxlIGFzc2VtYmxpZXMgZm9yIHRoZSBjb25uZWN0aW9uIG9mIHRvd2luZyBhbmQgdG93ZWQgcm9hZCB2ZWhpY2xlcyBlcXVpcHBlZCB3aXRoIG5vbWluYWwgMTIgViBvciAyNCBWIHN5c3RlbXMuICIsIm1hdGNoTGV2ZWwiOiJmdWxsIiwiZnVsbHlIaWdobGlnaHRlZCI6ZmFsc2UsIm1hdGNoZWRXb3JkcyI6WyJpc28iLCI0Il19fX0seyJjYXRlZ29yeSI6InN0YW5kYXJkIiwicGF0aCI6Ii9zaXRlcy9pc29vcmcvY29udGVudHMvZGF0YS9zdGFuZGFyZC8wMS8wNy8xMDc0MiIsInV1aWQiOiJlYjcxZWE2Yy1jYzdhLTRiNmUtODAwNS1mYzA2ZGY5NGExMzIiLCJ0aXRsZSI6IklTTyA0NzU3OjE5ODMgQ3Jvc3MgcmVjZXNzZXMgZm9yIHNjcmV3cyIsInN0YXR1cyI6IlB1Ymxpc2hlZCIsInllYXIiOjIwMjMsIm9yZGVyIjoxMSwidGV4dCI6IkRlZmluZXMgdGhlIHR5cGUgSCBhbmQgdHlwZSBaOyBkaW1lbnNpb25zIGFyZSBpbGx1c3RyYXRlZCBieSBmaWd1cmVzOyB0YWJ1bGF0ZXMgZ2F1Z2UgZGltZW5zaW9ucyBmcm9tIE5vLiAwIHVwIHRvIGFuZCBpbmNsdWRpbmcgTm8uIDQ7IGluY2x1ZGVzIGEgbWV0aG9kIG9mIHBlbmV0cmF0aW9uIGdhdWdpbmcgZm9yIGJvdGggdHlwZXMuICIsIm9iamVjdElEIjoiMTA3NDJfMCIsIl9oaWdobGlnaHRSZXN1bHQiOnsidGl0bGUiOnsidmFsdWUiOiI8ZW0+SVNPPC9lbT4gPGVtPjQ8L2VtPjc1NzoxOTgzIENyb3NzIHJlY2Vzc2VzIGZvciBzY3Jld3MiLCJtYXRjaExldmVsIjoiZnVsbCIsImZ1bGx5SGlnaGxpZ2h0ZWQiOmZhbHNlLCJtYXRjaGVkV29yZHMiOlsiaXNvIiwiNCJdfSwidGV4dCI6eyJ2YWx1ZSI6IkRlZmluZXMgdGhlIHR5cGUgSCBhbmQgdHlwZSBaOyBkaW1lbnNpb25zIGFyZSBpbGx1c3RyYXRlZCBieSBmaWd1cmVzOyB0YWJ1bGF0ZXMgZ2F1Z2UgZGltZW5zaW9ucyBmcm9tIE5vLiAwIHVwIHRvIGFuZCBpbmNsdWRpbmcgTm8uIDxlbT40PC9lbT47IGluY2x1ZGVzIGEgbWV0aG9kIG9mIHBlbmV0cmF0aW9uIGdhdWdpbmcgZm9yIGJvdGggdHlwZXMuICIsIm1hdGNoTGV2ZWwiOiJwYXJ0aWFsIiwiZnVsbHlIaWdobGlnaHRlZCI6ZmFsc2UsIm1hdGNoZWRXb3JkcyI6WyI0Il19fX0seyJjYXRlZ29yeSI6InN0YW5kYXJkIiwicGF0aCI6Ii9zaXRlcy9pc29vcmcvY29udGVudHMvZGF0YS9zdGFuZGFyZC8wMS8wMS8xMDE1NCIsInV1aWQiOiI5MmE3NzU2ZS0yMWFkLTRjMWEtYmFlZC03NmMzZGFiMDFmZTkiLCJ0aXRsZSI6IklTTyA0MzAxLTQ6MTk4OSBDcmFuZXMgYW5kIHJlbGF0ZWQgZXF1aXBtZW50IOKAlCBDbGFzc2lmaWNhdGlvbiDigJQgUGFydCA0OiBKaWIgY3JhbmVzIiwic3RhdHVzIjoiUHVibGlzaGVkIiwieWVhciI6MjAyMywib3JkZXIiOjExLCJ0ZXh0IjoiRXN0YWJsaXNoZXMgY2xhc3NpZmljYXRpb25zIGZvciBqaWIgY3JhbmVzLCBiYXNlZCBvbiB0aGUgbnVtYmVyIG9mIG9wZXJhdGluZyBjeWNsZXMgdG8gYmUgY2FycmllZCBvdXQgZHVyaW5nIHRoZSBleHBlY3RlZCBsaWZlIG9mIHRoZSBjcmFuZSBhbmQgYSBsb2FkIHNwZWN0cnVtIGZhY3RvciB3aGljaCByZXByZXNlbnRzIHRoZSBub21pbmFsIHN0YXRlIG9mIGxvYWRpbmcuIFNob3VsZCBiZSByZWFkIGluIGNvbmp1bmN0aW9uIHdpdGggSVNPIDQzMDYtMS4gIiwib2JqZWN0SUQiOiIxMDE1NF8wIiwiX2hpZ2hsaWdodFJlc3VsdCI6eyJ0aXRsZSI6eyJ2YWx1ZSI6IjxlbT5JU088L2VtPiA8ZW0+NDwvZW0+MzAxLTxlbT40PC9lbT46MTk4OSBDcmFuZXMgYW5kIHJlbGF0ZWQgZXF1aXBtZW50IOKAlCBDbGFzc2lmaWNhdGlvbiDigJQgUGFydCA8ZW0+NDwvZW0+OiBKaWIgY3JhbmVzIiwibWF0Y2hMZXZlbCI6ImZ1bGwiLCJmdWxseUhpZ2hsaWdodGVkIjpmYWxzZSwibWF0Y2hlZFdvcmRzIjpbImlzbyIsIjQiXX0sInRleHQiOnsidmFsdWUiOiJFc3RhYmxpc2hlcyBjbGFzc2lmaWNhdGlvbnMgZm9yIGppYiBjcmFuZXMsIGJhc2VkIG9uIHRoZSBudW1iZXIgb2Ygb3BlcmF0aW5nIGN5Y2xlcyB0byBiZSBjYXJyaWVkIG91dCBkdXJpbmcgdGhlIGV4cGVjdGVkIGxpZmUgb2YgdGhlIGNyYW5lIGFuZCBhIGxvYWQgc3BlY3RydW0gZmFjdG9yIHdoaWNoIHJlcHJlc2VudHMgdGhlIG5vbWluYWwgc3RhdGUgb2YgbG9hZGluZy4gU2hvdWxkIGJlIHJlYWQgaW4gY29uanVuY3Rpb24gd2l0aCA8ZW0+SVNPPC9lbT4gPGVtPjQ8L2VtPjMwNi0xLiAiLCJtYXRjaExldmVsIjoiZnVsbCIsImZ1bGx5SGlnaGxpZ2h0ZWQiOmZhbHNlLCJtYXRjaGVkV29yZHMiOlsiaXNvIiwiNCJdfX19LHsiY2F0ZWdvcnkiOiJzdGFuZGFyZCIsInBhdGgiOiIvc2l0ZXMvaXNvb3JnL2NvbnRlbnRzL2RhdGEvc3RhbmRhcmQvMDEvMDAvMTAwMDkiLCJ1dWlkIjoiZTNhNTNlYTUtOTRjZS00NmJkLThlNzAtZmM3YjJjYWM1NzJhIiwidGl0bGUiOiJJU08gNDIxMS00OjE5ODggRnVybml0dXJlIOKAlCBUZXN0cyBmb3Igc3VyZmFjZXMg4oCUIFBhcnQgNDogQXNzZXNzbWVudCBvZiByZXNpc3RhbmNlIHRvIGltcGFjdCIsInN0YXR1cyI6IlB1Ymxpc2hlZCIsInllYXIiOjIwMjMsIm9yZGVyIjoxMSwidGV4dCI6IlRoZSBzcGVjaWZpZWQgbWV0aG9kIGlzIHN1aXRhYmxlIGZvciB1c2UgZWl0aGVyIGFzIGEgbWVhbnMgb2YgY29tcGFyaW5nIGRpZmZlcmVudCBmaW5pc2hpbmcgc3lzdGVtcyBvciBhcyBhIHF1YWxpdHkgY29udHJvbCB0ZXN0IHRvIGVuc3VyZSB0aGF0IGEgc3BlY2lmaWVkIHBlcmZvcm1hbmNlIGxldmVsIGlzIGFjaGlldmVkIG9yIG1haW50YWluZWQuIFRoZSB0ZXN0cyBhcmUgY2FycmllZCBvdXQgb24gcGFuZWxzIG9mIHRoZSBzYW1lIG1hdGVyaWFscyBhbmQgZmluaXNoZWQgaW4gdGhlIGlkZW50aWNhbCBtYW5uZXIgYXMgdGhlIGZpbmlzaGVkIGZ1cm5pdHVyZSBvZiBhIHNpemUgc3VmZmljaWVudCB0byBtZWV0IHRoZSByZXF1aXJlbWVudHMgb2YgdGhlIHRlc3QuIFRoZSBkZWdyZWUgb2YgZGFtYWdlIHRvIHRoZSB0ZXN0IGFyZWEgaXMgYXNzZXNzZWQgYnkgcmVmZXJlbmNlIHRvIGEgZGVzY3JpcHRpdmUgbnVtZXJpY2FsIHJhdGluZyBjb2RlLiAiLCJvYmplY3RJRCI6IjEwMDA5XzAiLCJfaGlnaGxpZ2h0UmVzdWx0Ijp7InRpdGxlIjp7InZhbHVlIjoiPGVtPklTTzwvZW0+IDxlbT40PC9lbT4yMTEtPGVtPjQ8L2VtPjoxOTg4IEZ1cm5pdHVyZSDigJQgVGVzdHMgZm9yIHN1cmZhY2VzIOKAlCBQYXJ0IDxlbT40PC9lbT46IEFzc2Vzc21lbnQgb2YgcmVzaXN0YW5jZSB0byBpbXBhY3QiLCJtYXRjaExldmVsIjoiZnVsbCIsImZ1bGx5SGlnaGxpZ2h0ZWQiOmZhbHNlLCJtYXRjaGVkV29yZHMiOlsiaXNvIiwiNCJdfSwidGV4dCI6eyJ2YWx1ZSI6IlRoZSBzcGVjaWZpZWQgbWV0aG9kIGlzIHN1aXRhYmxlIGZvciB1c2UgZWl0aGVyIGFzIGEgbWVhbnMgb2YgY29tcGFyaW5nIGRpZmZlcmVudCBmaW5pc2hpbmcgc3lzdGVtcyBvciBhcyBhIHF1YWxpdHkgY29udHJvbCB0ZXN0IHRvIGVuc3VyZSB0aGF0IGEgc3BlY2lmaWVkIHBlcmZvcm1hbmNlIGxldmVsIGlzIGFjaGlldmVkIG9yIG1haW50YWluZWQuIFRoZSB0ZXN0cyBhcmUgY2FycmllZCBvdXQgb24gcGFuZWxzIG9mIHRoZSBzYW1lIG1hdGVyaWFscyBhbmQgZmluaXNoZWQgaW4gdGhlIGlkZW50aWNhbCBtYW5uZXIgYXMgdGhlIGZpbmlzaGVkIGZ1cm5pdHVyZSBvZiBhIHNpemUgc3VmZmljaWVudCB0byBtZWV0IHRoZSByZXF1aXJlbWVudHMgb2YgdGhlIHRlc3QuIFRoZSBkZWdyZWUgb2YgZGFtYWdlIHRvIHRoZSB0ZXN0IGFyZWEgaXMgYXNzZXNzZWQgYnkgcmVmZXJlbmNlIHRvIGEgZGVzY3JpcHRpdmUgbnVtZXJpY2FsIHJhdGluZyBjb2RlLiAiLCJtYXRjaExldmVsIjoibm9uZSIsIm1hdGNoZWRXb3JkcyI6W119fX0seyJjYXRlZ29yeSI6InN0YW5kYXJkIiwicGF0aCI6Ii9zaXRlcy9pc29vcmcvY29udGVudHMvZGF0YS9zdGFuZGFyZC8wOC8yMy84MjMwMCIsInV1aWQiOiJkNWVlNzcyNS04MDcwLTQ3YmEtOTA5YS02NmNhYWRmMGViZWQiLCJ0aXRsZSI6IklTTyA0NDM3LTQ6MjAyMiBQbGFzdGljcyBwaXBpbmcgc3lzdGVtcyBmb3IgdGhlIHN1cHBseSBvZiBnYXNlb3VzIGZ1ZWxzIOKAlCBQb2x5ZXRoeWxlbmUgKFBFKSDigJQgUGFydCA0OiBWYWx2ZXMiLCJzdGF0dXMiOiJQdWJsaXNoZWQiLCJ5ZWFyIjoyMDIyLCJvcmRlciI6MTEsInRleHQiOiJUaGlzIGRvY3VtZW50IHNwZWNpZmllcyB0aGUgY2hhcmFjdGVyaXN0aWNzIG9mIHZhbHZlcyBtYWRlIGZyb20gcG9seWV0aHlsZW5lIChQRSkgZm9yIHBpcGluZyBzeXN0ZW1zIGluIHRoZSBmaWVsZCBvZiB0aGUgc3VwcGx5IG9mIGdhc2VvdXMgZnVlbHMuIEl0IGlzIGFwcGxpY2FibGUgdG8gdW5pZGlyZWN0aW9uYWwgYW5kIGJpLWRpcmVjdGlvbmFsIGlzb2xhdGluZyB2YWx2ZXMgd2l0aCBzcGlnb3QgZW5kcyBvciBlbGVjdHJvZnVzaW9uIHNvY2tldHMgaW50ZW5kZWQgdG8gYmUgZnVzZWQgd2l0aCBQRSBwaXBlcyBvciBmaXR0aW5ncyBjb25mb3JtaW5nIHRvIElTT8KgNDQzN+KIkjIgYW5kIElTT8KgNDQzN+KAkTMgcmVzcGVjdGl2ZWx5LiBWYWx2ZXMgbWFkZSBmcm9tIG1hdGVyaWFscyBvdGhlciB0aGFuIFBFLCBkZXNpZ25lZCBmb3IgdGhlIHN1cHBseSBvZiBnYXNlb3VzIGZ1ZWxzIGNvbmZvcm1pbmcgdG8gdGhlIHJlbGV2YW50IHN0YW5kYXJkcyBjYW4gYmUgdXNlZCBpbiBQRSBwaXBpbmcgc3lzdGVtcyBhY2NvcmRpbmcgdG8gSVNPwqA0NDM3IHNlcmllcywgcHJvdmlkZWQgdGhhdCB0aGV5IGhhdmUgUEUgY29ubmVjdGlvbnMgZm9yIGJ1dHQgZnVzaW9uIG9yIGVsZWN0cm9mdXNpb24gZW5kcywgaW5jbHVkaW5nIGludGVncmF0ZWQgbWF0ZXJpYWwgdHJhbnNpdGlvbiBqb2ludHMsIGNvbmZvcm1pbmcgdG8gSVNPwqA0NDM3LTMuIEl0IGFsc28gc3BlY2lmaWVzIHRoZSB0ZXN0IHBhcmFtZXRlcnMgZm9yIHRoZSB0ZXN0IG1ldGhvZHMgcmVmZXJyZWQgdG8gaW4gdGhpcyBkb2N1bWVudC4gSW4gY29uanVuY3Rpb24gd2l0aCBwYXJ0cyAxLCAyLCAzIGFuZCA1IG9mIHRoZSBJU0/CoDQ0Mzcgc2VyaWVzLCB0aGlzIGRvY3VtZW50IGlzIGFwcGxpY2FibGUgdG8gUEUgdmFsdmVzLCB0aGVpciBqb2ludHMgYW5kIHRvIGpvaW50cyB3aXRoIGNvbXBvbmVudHMgb2YgUEUgYW5kIG90aGVyIG1hdGVyaWFscyBpbnRlbmRlZCB0byBiZSB1c2VkIHVuZGVyIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczogYSkgYSBtYXhpbXVtIG9wZXJhdGluZyBwcmVzc3VyZSAoTU9QKSB1cCB0byBhbmQgaW5jbHVkaW5nIDEwwqBiYXJbMV0gYXQgYSByZWZlcmVuY2UgdGVtcGVyYXR1cmUgb2YgMjDCoMKwQyBmb3IgZGVzaWduIHB1cnBvc2VzOyBOT1RFwqAxIEZvciB0aGUgcHVycG9zZSBvZiB0aGlzIGRvY3VtZW50IGFuZCB0aGUgcmVmZXJlbmNlcyB0byBJU0/CoDgyMzMsIE1PUCBpcyBjb25zaWRlcmVkIHRvIGJlIG5vbWluYWwgcHJlc3N1cmUuIGIpIGFuIG9wZXJhdGluZyB0ZW1wZXJhdHVyZSBiZXR3ZWVuIOKIkjIwwqDCsEMgdG8gNDDCoMKwQy4gTk9URcKgMsKgwqDCoCBGb3Igb3BlcmF0aW5nIHRlbXBlcmF0dXJlcyBiZXR3ZWVuIDIwwqDCsEMgYW5kIDQwwqDCsEMsIGRlcmF0aW5nIGNvZWZmaWNpZW50cyBhcmUgZGVmaW5lZCBpbiBJU0/CoDQ0MzfigJE1LiBUaGlzIGRvY3VtZW50IGNvdmVycyB2YWx2ZSBib2RpZXMgZGVzaWduZWQgZm9yIGNvbm5lY3Rpb24gd2l0aCBwaXBlcyB3aXRoIGEgbm9taW5hbCBvdXRzaWRlIGRpYW1ldGVyIGQgbiDCoOKJpMKgNDAwwqBtbS4gwqAgWzFdIDHCoGJhcsKgPcKgMCwxwqBNUGEgPTEwIDUgUGE7IDHCoE1QYSA9IDHCoE4vbW0gMiAuICIsIm9iamVjdElEIjoiODIzMDBfMCIsIl9oaWdobGlnaHRSZXN1bHQiOnsidGl0bGUiOnsidmFsdWUiOiI8ZW0+SVNPPC9lbT4gPGVtPjQ8L2VtPjQzNy08ZW0+NDwvZW0+OjIwMjIgUGxhc3RpY3MgcGlwaW5nIHN5c3RlbXMgZm9yIHRoZSBzdXBwbHkgb2YgZ2FzZW91cyBmdWVscyDigJQgUG9seWV0aHlsZW5lIChQRSkg4oCUIFBhcnQgPGVtPjQ8L2VtPjogVmFsdmVzIiwibWF0Y2hMZXZlbCI6ImZ1bGwiLCJmdWxseUhpZ2hsaWdodGVkIjpmYWxzZSwibWF0Y2hlZFdvcmRzIjpbImlzbyIsIjQiXX0sInRleHQiOnsidmFsdWUiOiJUaGlzIGRvY3VtZW50IHNwZWNpZmllcyB0aGUgY2hhcmFjdGVyaXN0aWNzIG9mIHZhbHZlcyBtYWRlIGZyb20gcG9seWV0aHlsZW5lIChQRSkgZm9yIHBpcGluZyBzeXN0ZW1zIGluIHRoZSBmaWVsZCBvZiB0aGUgc3VwcGx5IG9mIGdhc2VvdXMgZnVlbHMuIEl0IGlzIGFwcGxpY2FibGUgdG8gdW5pZGlyZWN0aW9uYWwgYW5kIGJpLWRpcmVjdGlvbmFsIGlzb2xhdGluZyB2YWx2ZXMgd2l0aCBzcGlnb3QgZW5kcyBvciBlbGVjdHJvZnVzaW9uIHNvY2tldHMgaW50ZW5kZWQgdG8gYmUgZnVzZWQgd2l0aCBQRSBwaXBlcyBvciBmaXR0aW5ncyBjb25mb3JtaW5nIHRvIDxlbT5JU088L2VtPsKgPGVtPjQ8L2VtPjQzN+KIkjIgYW5kIDxlbT5JU088L2VtPsKgPGVtPjQ8L2VtPjQzN+KAkTMgcmVzcGVjdGl2ZWx5LiBWYWx2ZXMgbWFkZSBmcm9tIG1hdGVyaWFscyBvdGhlciB0aGFuIFBFLCBkZXNpZ25lZCBmb3IgdGhlIHN1cHBseSBvZiBnYXNlb3VzIGZ1ZWxzIGNvbmZvcm1pbmcgdG8gdGhlIHJlbGV2YW50IHN0YW5kYXJkcyBjYW4gYmUgdXNlZCBpbiBQRSBwaXBpbmcgc3lzdGVtcyBhY2NvcmRpbmcgdG8gPGVtPklTTzwvZW0+wqA8ZW0+NDwvZW0+NDM3IHNlcmllcywgcHJvdmlkZWQgdGhhdCB0aGV5IGhhdmUgUEUgY29ubmVjdGlvbnMgZm9yIGJ1dHQgZnVzaW9uIG9yIGVsZWN0cm9mdXNpb24gZW5kcywgaW5jbHVkaW5nIGludGVncmF0ZWQgbWF0ZXJpYWwgdHJhbnNpdGlvbiBqb2ludHMsIGNvbmZvcm1pbmcgdG8gPGVtPklTTzwvZW0+wqA8ZW0+NDwvZW0+NDM3LTMuIEl0IGFsc28gc3BlY2lmaWVzIHRoZSB0ZXN0IHBhcmFtZXRlcnMgZm9yIHRoZSB0ZXN0IG1ldGhvZHMgcmVmZXJyZWQgdG8gaW4gdGhpcyBkb2N1bWVudC4gSW4gY29uanVuY3Rpb24gd2l0aCBwYXJ0cyAxLCAyLCAzIGFuZCA1IG9mIHRoZSA8ZW0+SVNPPC9lbT7CoDxlbT40PC9lbT40Mzcgc2VyaWVzLCB0aGlzIGRvY3VtZW50IGlzIGFwcGxpY2FibGUgdG8gUEUgdmFsdmVzLCB0aGVpciBqb2ludHMgYW5kIHRvIGpvaW50cyB3aXRoIGNvbXBvbmVudHMgb2YgUEUgYW5kIG90aGVyIG1hdGVyaWFscyBpbnRlbmRlZCB0byBiZSB1c2VkIHVuZGVyIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczogYSkgYSBtYXhpbXVtIG9wZXJhdGluZyBwcmVzc3VyZSAoTU9QKSB1cCB0byBhbmQgaW5jbHVkaW5nIDEwwqBiYXJbMV0gYXQgYSByZWZlcmVuY2UgdGVtcGVyYXR1cmUgb2YgMjDCoMKwQyBmb3IgZGVzaWduIHB1cnBvc2VzOyBOT1RFwqAxIEZvciB0aGUgcHVycG9zZSBvZiB0aGlzIGRvY3VtZW50IGFuZCB0aGUgcmVmZXJlbmNlcyB0byA8ZW0+SVNPPC9lbT7CoDgyMzMsIE1PUCBpcyBjb25zaWRlcmVkIHRvIGJlIG5vbWluYWwgcHJlc3N1cmUuIGIpIGFuIG9wZXJhdGluZyB0ZW1wZXJhdHVyZSBiZXR3ZWVuIOKIkjIwwqDCsEMgdG8gPGVtPjQ8L2VtPjDCoMKwQy4gTk9URcKgMsKgwqDCoCBGb3Igb3BlcmF0aW5nIHRlbXBlcmF0dXJlcyBiZXR3ZWVuIDIwwqDCsEMgYW5kIDxlbT40PC9lbT4wwqDCsEMsIGRlcmF0aW5nIGNvZWZmaWNpZW50cyBhcmUgZGVmaW5lZCBpbiA8ZW0+SVNPPC9lbT7CoDxlbT40PC9lbT40MzfigJE1LiBUaGlzIGRvY3VtZW50IGNvdmVycyB2YWx2ZSBib2RpZXMgZGVzaWduZWQgZm9yIGNvbm5lY3Rpb24gd2l0aCBwaXBlcyB3aXRoIGEgbm9taW5hbCBvdXRzaWRlIGRpYW1ldGVyIGQgbiDCoOKJpMKgPGVtPjQ8L2VtPjAwwqBtbS4gwqAgWzFdIDHCoGJhcsKgPcKgMCwxwqBNUGEgPTEwIDUgUGE7IDHCoE1QYSA9IDHCoE4vbW0gMiAuICIsIm1hdGNoTGV2ZWwiOiJmdWxsIiwiZnVsbHlIaWdobGlnaHRlZCI6ZmFsc2UsIm1hdGNoZWRXb3JkcyI6WyJpc28iLCI0Il19fX0seyJjYXRlZ29yeSI6InN0YW5kYXJkIiwicGF0aCI6Ii9zaXRlcy9pc29vcmcvY29udGVudHMvZGF0YS9zdGFuZGFyZC8wNy85OS83OTk3MCIsInV1aWQiOiJjMDdlN2MxNy0zNzdlLTQyMDYtOTM3ZC00Yjc2OWM4NmFiZjAiLCJ0aXRsZSI6IklTTyA0NDQzOjIwMjIgQ3J5b2xpdGUgcHJpbWFyaWx5IHVzZWQgZm9yIHRoZSBwcm9kdWN0aW9uIG9mIGFsdW1pbml1bSDigJQgRGV0ZXJtaW5hdGlvbiBvZiBlbGVtZW50cyDigJQgV2F2ZWxlbmd0aC1kaXNwZXJzaXZlIFgtcmF5IGZsdW9yZXNjZW5jZSBzcGVjdHJvbWV0cmljIG1ldGhvZCB1c2luZyBwcmVzc2VkIHBvd2RlciB0YWJsZXRzIiwic3RhdHVzIjoiUHVibGlzaGVkIiwieWVhciI6MjAyMiwib3JkZXIiOjExLCJ0ZXh0IjoiVGhpcyBkb2N1bWVudCBzcGVjaWZpZXMgYSB3YXZlbGVuZ3RoLWRpc3BlcnNpdmUgWC1yYXkgZmx1b3Jlc2NlbmNlIHNwZWN0cm9tZXRyaWMgKFhSRikgbWV0aG9kIGZvciB0aGUgZGV0ZXJtaW5hdGlvbiBvZiBjcnlvbGl0ZSAoTmEgMyBBbEYgNiApIGZyb20gdGhlIGNvbnRlbnQgb2YgZmx1b3JpbmUgdG8gdGhlIGNvbnRlbnQgb2YgdHJhY2UgZWxlbWVudHMuIFRoZSBjYWxpYnJhdGlvbiByZWZlcmVuY2UgbWF0ZXJpYWxzIGFyZSBub3Qgc3BlY2lmaWVkIGluIHRoaXMgbWV0aG9kLiBUaGUgbWV0aG9kIGlzIGFwcGxpY2FibGUgdG8gY3J5b2xpdGUsIHdoaWNoIGlzIHByaW1hcmlseSB1c2VkIGZvciB0aGUgcHJvZHVjdGlvbiBvZiBhbHVtaW5pdW0uIEFubmV4wqBBIHByb3ZpZGVzIGNvbnZlcnNpb24gZmFjdG9ycyBmb3IgY29udmVydGluZyBlbGVtZW50cyB0byBjb21wb3VuZHMuIFRoZSB2YWxpZGl0eSBhbmQgcHJlY2lzaW9uIG9mIHRlc3QgcmVzdWx0cyBmb3IgY29uY2VudHJhdGlvbnMgb3V0c2lkZSB0aGVzZSByYW5nZXMgaGFzIG5vdCBiZWVuIGRldGVybWluZWQuIFRoZSBjb25jZW50cmF0aW9uIHJhbmdlIG9mIGZsdW9yaW5lIChnaXZlbiBhcyBGKSBpcyBmcm9tIDUxMMKgZy9rZyB0byA1NjDCoGcva2cuIFRoZSBjb25jZW50cmF0aW9uIHJhbmdlIG9mIGFsdW1pbml1bSAoZ2l2ZW4gYXMgQWwpIGlzIGZyb20gMTIwwqBnL2tnIHRvIDE1MMKgZy9rZy4gVGhlIGNvbmNlbnRyYXRpb24gcmFuZ2Ugb2Ygc29kaXVtIChnaXZlbiBhcyBOYSkgaXMgZnJvbSAyNzDCoGcva2cgdG8gMzMwwqBnL2tnLiBUaGUgY29uY2VudHJhdGlvbiByYW5nZSBvZiBzaWxpY29uIChnaXZlbiBhcyBTaU8gMiApIGlzIGZyb20gdGhlIGxvd2VzdCBsaW1pdCBvZiBkZXRlY3Rpb24gKExMRCkgdG8gNCwwwqBnL2tnLiBUaGUgY29uY2VudHJhdGlvbiByYW5nZSBvZiBpcm9uIChnaXZlbiBhcyBGZSAyIE8gMyApIGlzIGZyb20gTExEIHRvIDAsMzfCoGcva2cuIFRoZSBjb25jZW50cmF0aW9uIHJhbmdlIG9mIHN1bGZ1ciAoZ2l2ZW4gYXMgU08gNCApIGlzIGZyb20gTExEIHRvIDUsMMKgZy9rZy4gVGhlIGNvbmNlbnRyYXRpb24gcmFuZ2Ugb2YgcGhvc3Bob3J1cyAoZ2l2ZW4gYXMgUCAyIE8gNSApIGlzIGZyb20gTExEIHRvIDAsNDDCoGcva2cuIFRoZSBjb25jZW50cmF0aW9uIHJhbmdlIG9mIGNhbGNpdW0gKGdpdmVuIGFzIENhTykgaXMgZnJvbSBMTEQgdG8gMCw4MMKgZy9rZy4gIiwib2JqZWN0SUQiOiI3OTk3MF8wIiwiX2hpZ2hsaWdodFJlc3VsdCI6eyJ0aXRsZSI6eyJ2YWx1ZSI6IjxlbT5JU088L2VtPiA8ZW0+NDwvZW0+NDQzOjIwMjIgQ3J5b2xpdGUgcHJpbWFyaWx5IHVzZWQgZm9yIHRoZSBwcm9kdWN0aW9uIG9mIGFsdW1pbml1bSDigJQgRGV0ZXJtaW5hdGlvbiBvZiBlbGVtZW50cyDigJQgV2F2ZWxlbmd0aC1kaXNwZXJzaXZlIFgtcmF5IGZsdW9yZXNjZW5jZSBzcGVjdHJvbWV0cmljIG1ldGhvZCB1c2luZyBwcmVzc2VkIHBvd2RlciB0YWJsZXRzIiwibWF0Y2hMZXZlbCI6ImZ1bGwiLCJmdWxseUhpZ2hsaWdodGVkIjpmYWxzZSwibWF0Y2hlZFdvcmRzIjpbImlzbyIsIjQiXX0sInRleHQiOnsidmFsdWUiOiJUaGlzIGRvY3VtZW50IHNwZWNpZmllcyBhIHdhdmVsZW5ndGgtZGlzcGVyc2l2ZSBYLXJheSBmbHVvcmVzY2VuY2Ugc3BlY3Ryb21ldHJpYyAoWFJGKSBtZXRob2QgZm9yIHRoZSBkZXRlcm1pbmF0aW9uIG9mIGNyeW9saXRlIChOYSAzIEFsRiA2ICkgZnJvbSB0aGUgY29udGVudCBvZiBmbHVvcmluZSB0byB0aGUgY29udGVudCBvZiB0cmFjZSBlbGVtZW50cy4gVGhlIGNhbGlicmF0aW9uIHJlZmVyZW5jZSBtYXRlcmlhbHMgYXJlIG5vdCBzcGVjaWZpZWQgaW4gdGhpcyBtZXRob2QuIFRoZSBtZXRob2QgaXMgYXBwbGljYWJsZSB0byBjcnlvbGl0ZSwgd2hpY2ggaXMgcHJpbWFyaWx5IHVzZWQgZm9yIHRoZSBwcm9kdWN0aW9uIG9mIGFsdW1pbml1bS4gQW5uZXjCoEEgcHJvdmlkZXMgY29udmVyc2lvbiBmYWN0b3JzIGZvciBjb252ZXJ0aW5nIGVsZW1lbnRzIHRvIGNvbXBvdW5kcy4gVGhlIHZhbGlkaXR5IGFuZCBwcmVjaXNpb24gb2YgdGVzdCByZXN1bHRzIGZvciBjb25jZW50cmF0aW9ucyBvdXRzaWRlIHRoZXNlIHJhbmdlcyBoYXMgbm90IGJlZW4gZGV0ZXJtaW5lZC4gVGhlIGNvbmNlbnRyYXRpb24gcmFuZ2Ugb2YgZmx1b3JpbmUgKGdpdmVuIGFzIEYpIGlzIGZyb20gNTEwwqBnL2tnIHRvIDU2MMKgZy9rZy4gVGhlIGNvbmNlbnRyYXRpb24gcmFuZ2Ugb2YgYWx1bWluaXVtIChnaXZlbiBhcyBBbCkgaXMgZnJvbSAxMjDCoGcva2cgdG8gMTUwwqBnL2tnLiBUaGUgY29uY2VudHJhdGlvbiByYW5nZSBvZiBzb2RpdW0gKGdpdmVuIGFzIE5hKSBpcyBmcm9tIDI3MMKgZy9rZyB0byAzMzDCoGcva2cuIFRoZSBjb25jZW50cmF0aW9uIHJhbmdlIG9mIHNpbGljb24gKGdpdmVuIGFzIFNpTyAyICkgaXMgZnJvbSB0aGUgbG93ZXN0IGxpbWl0IG9mIGRldGVjdGlvbiAoTExEKSB0byA8ZW0+NDwvZW0+LDDCoGcva2cuIFRoZSBjb25jZW50cmF0aW9uIHJhbmdlIG9mIGlyb24gKGdpdmVuIGFzIEZlIDIgTyAzICkgaXMgZnJvbSBMTEQgdG8gMCwzN8KgZy9rZy4gVGhlIGNvbmNlbnRyYXRpb24gcmFuZ2Ugb2Ygc3VsZnVyIChnaXZlbiBhcyBTTyA8ZW0+NDwvZW0+ICkgaXMgZnJvbSBMTEQgdG8gNSwwwqBnL2tnLiBUaGUgY29uY2VudHJhdGlvbiByYW5nZSBvZiBwaG9zcGhvcnVzIChnaXZlbiBhcyBQIDIgTyA1ICkgaXMgZnJvbSBMTEQgdG8gMCw8ZW0+NDwvZW0+MMKgZy9rZy4gVGhlIGNvbmNlbnRyYXRpb24gcmFuZ2Ugb2YgY2FsY2l1bSAoZ2l2ZW4gYXMgQ2FPKSBpcyBmcm9tIExMRCB0byAwLDgwwqBnL2tnLiAiLCJtYXRjaExldmVsIjoicGFydGlhbCIsImZ1bGx5SGlnaGxpZ2h0ZWQiOmZhbHNlLCJtYXRjaGVkV29yZHMiOlsiNCJdfX19LHsiY2F0ZWdvcnkiOiJzdGFuZGFyZCIsInBhdGgiOiIvc2l0ZXMvaXNvb3JnL2NvbnRlbnRzL2RhdGEvc3RhbmRhcmQvMDcvNzkvNzc5MTMiLCJ1dWlkIjoiYTNmMmQ0MDEtODI4NC00ODVhLTk5NTUtMTRhMDA5NGIxN2E1IiwidGl0bGUiOiJJU08gNDA0MjoyMDIyIEZhc3RlbmVycyDigJQgRWxlY3Ryb3BsYXRlZCBjb2F0aW5nIHN5c3RlbXMiLCJzdGF0dXMiOiJQdWJsaXNoZWQiLCJ5ZWFyIjoyMDIyLCJvcmRlciI6MTEsInRleHQiOiJUaGlzIGRvY3VtZW50IHNwZWNpZmllcyByZXF1aXJlbWVudHMgZm9yIHN0ZWVsIGZhc3RlbmVycyB3aXRoIGVsZWN0cm9wbGF0ZWQgY29hdGluZ3MgYW5kIGNvYXRpbmcgc3lzdGVtcy4gVGhlIHJlcXVpcmVtZW50cyByZWxhdGVkIHRvIGRpbWVuc2lvbmFsIHByb3BlcnRpZXMgYWxzbyBhcHBseSB0byBmYXN0ZW5lcnMgbWFkZSBvZiBjb3BwZXIgb3IgY29wcGVyIGFsbG95cy4gSXQgYWxzbyBzcGVjaWZpZXMgcmVxdWlyZW1lbnRzIGFuZCBnaXZlcyByZWNvbW1lbmRhdGlvbnMgdG8gbWluaW1pemUgdGhlIHJpc2sgb2YgaHlkcm9nZW4gZW1icml0dGxlbWVudCwgc2VlIDQuNCBhbmQgQW5uZXjCoEIuIEl0IG1haW5seSBhcHBsaWVzIHRvIGZhc3RlbmVycyB3aXRoIHppbmMgYW5kIHppbmMgYWxsb3kgY29hdGluZyBzeXN0ZW1zICh6aW5jLCB6aW5jLW5pY2tlbCwgemluYy1pcm9uKSBhbmQgY2FkbWl1bSwgcHJpbWFyaWx5IGludGVuZGVkIGZvciBjb3Jyb3Npb24gcHJvdGVjdGlvbiBhbmQgb3RoZXIgZnVuY3Rpb25hbCBwcm9wZXJ0aWVzOiDigJTCoMKgwqAgd2l0aCBvciB3aXRob3V0IGNvbnZlcnNpb24gY29hdGluZywg4oCUwqDCoMKgIHdpdGggb3Igd2l0aG91dCBzZWFsYW50LCDigJTCoMKgwqAgd2l0aCBvciB3aXRob3V0IHRvcCBjb2F0LCDigJTCoMKgwqAgd2l0aCBvciB3aXRob3V0IGx1YnJpY2FudCAoaW50ZWdyYWwgbHVicmljYW50IGFuZC9vciBzdWJzZXF1ZW50bHkgYWRkZWQgbHVicmljYW50KS4gU3BlY2lmaWNhdGlvbnMgZm9yIG90aGVyIGVsZWN0cm9wbGF0ZWQgY29hdGluZ3MgYW5kIGNvYXRpbmcgc3lzdGVtcyAodGluLCB0aW4temluYywgY29wcGVyLXRpbiwgY29wcGVyLXNpbHZlciwgY29wcGVyLCBzaWx2ZXIsIGNvcHBlci16aW5jLCBuaWNrZWwsIG5pY2tlbC1jaHJvbWl1bSwgY29wcGVyLW5pY2tlbCwgY29wcGVyLW5pY2tlbC1jaHJvbWl1bSkgYXJlIGluY2x1ZGVkIGluIHRoaXMgZG9jdW1lbnQgb25seSBmb3IgZGltZW5zaW9uYWwgcmVxdWlyZW1lbnRzIHJlbGF0ZWQgdG8gZmFzdGVuZXJzIHdpdGggSVNPwqBtZXRyaWMgdGhyZWFkcy4gVGhlIHJlcXVpcmVtZW50cyBvZiB0aGlzIGRvY3VtZW50IGZvciBlbGVjdHJvcGxhdGVkIGZhc3RlbmVycyB0YWtlIHByZWNlZGVuY2Ugb3ZlciBvdGhlciBkb2N1bWVudHPCoCBkZWFsaW5nIHdpdGggZWxlY3Ryb3BsYXRpbmcuIFRoaXMgZG9jdW1lbnQgYXBwbGllcyB0byBzdGVlbCBib2x0cywgc2NyZXdzLCBzdHVkcyBhbmQgbnV0cyB3aXRoIElTTyBtZXRyaWMgdGhyZWFkLCB0byBvdGhlciB0aHJlYWRlZCBmYXN0ZW5lcnMgYW5kIHRvIG5vbi10aHJlYWRlZCBmYXN0ZW5lcnMgc3VjaCBhcyB3YXNoZXJzLCBwaW5zLCBjbGlwcyBhbmQgcml2ZXRzLiBOT1RFwqDCoMKgwqDCoMKgIEVsZWN0cm9wbGF0aW5nIGlzIGFsc28gYXBwbGllZCB0byBzdGFpbmxlc3Mgc3RlZWwgZmFzdGVuZXJzLCBlLmcuIGZvciB0aGUgcHVycG9zZSBvZiBsdWJyaWNhdGlvbiBpbiBvcmRlciB0byBhdm9pZCBnYWxsaW5nLiBJbmZvcm1hdGlvbiBmb3IgZGVzaWduIGFuZCBhc3NlbWJseSBvZiBjb2F0ZWQgZmFzdGVuZXJzIGlzIGdpdmVuIGluIEFubmV4wqBBLiBUaGlzIGRvY3VtZW50IGRvZXMgbm90IHNwZWNpZnkgcmVxdWlyZW1lbnRzIGZvciBwcm9wZXJ0aWVzIHN1Y2ggYXMgd2VsZGFiaWxpdHkgb3IgcGFpbnRhYmlsaXR5LiAiLCJvYmplY3RJRCI6Ijc3OTEzXzAiLCJfaGlnaGxpZ2h0UmVzdWx0Ijp7InRpdGxlIjp7InZhbHVlIjoiPGVtPklTTzwvZW0+IDxlbT40PC9lbT4wNDI6MjAyMiBGYXN0ZW5lcnMg4oCUIEVsZWN0cm9wbGF0ZWQgY29hdGluZyBzeXN0ZW1zIiwibWF0Y2hMZXZlbCI6ImZ1bGwiLCJmdWxseUhpZ2hsaWdodGVkIjpmYWxzZSwibWF0Y2hlZFdvcmRzIjpbImlzbyIsIjQiXX0sInRleHQiOnsidmFsdWUiOiJUaGlzIGRvY3VtZW50IHNwZWNpZmllcyByZXF1aXJlbWVudHMgZm9yIHN0ZWVsIGZhc3RlbmVycyB3aXRoIGVsZWN0cm9wbGF0ZWQgY29hdGluZ3MgYW5kIGNvYXRpbmcgc3lzdGVtcy4gVGhlIHJlcXVpcmVtZW50cyByZWxhdGVkIHRvIGRpbWVuc2lvbmFsIHByb3BlcnRpZXMgYWxzbyBhcHBseSB0byBmYXN0ZW5lcnMgbWFkZSBvZiBjb3BwZXIgb3IgY29wcGVyIGFsbG95cy4gSXQgYWxzbyBzcGVjaWZpZXMgcmVxdWlyZW1lbnRzIGFuZCBnaXZlcyByZWNvbW1lbmRhdGlvbnMgdG8gbWluaW1pemUgdGhlIHJpc2sgb2YgaHlkcm9nZW4gZW1icml0dGxlbWVudCwgc2VlIDxlbT40PC9lbT4uPGVtPjQ8L2VtPiBhbmQgQW5uZXjCoEIuIEl0IG1haW5seSBhcHBsaWVzIHRvIGZhc3RlbmVycyB3aXRoIHppbmMgYW5kIHppbmMgYWxsb3kgY29hdGluZyBzeXN0ZW1zICh6aW5jLCB6aW5jLW5pY2tlbCwgemluYy1pcm9uKSBhbmQgY2FkbWl1bSwgcHJpbWFyaWx5IGludGVuZGVkIGZvciBjb3Jyb3Npb24gcHJvdGVjdGlvbiBhbmQgb3RoZXIgZnVuY3Rpb25hbCBwcm9wZXJ0aWVzOiDigJTCoMKgwqAgd2l0aCBvciB3aXRob3V0IGNvbnZlcnNpb24gY29hdGluZywg4oCUwqDCoMKgIHdpdGggb3Igd2l0aG91dCBzZWFsYW50LCDigJTCoMKgwqAgd2l0aCBvciB3aXRob3V0IHRvcCBjb2F0LCDigJTCoMKgwqAgd2l0aCBvciB3aXRob3V0IGx1YnJpY2FudCAoaW50ZWdyYWwgbHVicmljYW50IGFuZC9vciBzdWJzZXF1ZW50bHkgYWRkZWQgbHVicmljYW50KS4gU3BlY2lmaWNhdGlvbnMgZm9yIG90aGVyIGVsZWN0cm9wbGF0ZWQgY29hdGluZ3MgYW5kIGNvYXRpbmcgc3lzdGVtcyAodGluLCB0aW4temluYywgY29wcGVyLXRpbiwgY29wcGVyLXNpbHZlciwgY29wcGVyLCBzaWx2ZXIsIGNvcHBlci16aW5jLCBuaWNrZWwsIG5pY2tlbC1jaHJvbWl1bSwgY29wcGVyLW5pY2tlbCwgY29wcGVyLW5pY2tlbC1jaHJvbWl1bSkgYXJlIGluY2x1ZGVkIGluIHRoaXMgZG9jdW1lbnQgb25seSBmb3IgZGltZW5zaW9uYWwgcmVxdWlyZW1lbnRzIHJlbGF0ZWQgdG8gZmFzdGVuZXJzIHdpdGggPGVtPklTTzwvZW0+wqBtZXRyaWMgdGhyZWFkcy4gVGhlIHJlcXVpcmVtZW50cyBvZiB0aGlzIGRvY3VtZW50IGZvciBlbGVjdHJvcGxhdGVkIGZhc3RlbmVycyB0YWtlIHByZWNlZGVuY2Ugb3ZlciBvdGhlciBkb2N1bWVudHPCoCBkZWFsaW5nIHdpdGggZWxlY3Ryb3BsYXRpbmcuIFRoaXMgZG9jdW1lbnQgYXBwbGllcyB0byBzdGVlbCBib2x0cywgc2NyZXdzLCBzdHVkcyBhbmQgbnV0cyB3aXRoIDxlbT5JU088L2VtPiBtZXRyaWMgdGhyZWFkLCB0byBvdGhlciB0aHJlYWRlZCBmYXN0ZW5lcnMgYW5kIHRvIG5vbi10aHJlYWRlZCBmYXN0ZW5lcnMgc3VjaCBhcyB3YXNoZXJzLCBwaW5zLCBjbGlwcyBhbmQgcml2ZXRzLiBOT1RFwqDCoMKgwqDCoMKgIEVsZWN0cm9wbGF0aW5nIGlzIGFsc28gYXBwbGllZCB0byBzdGFpbmxlc3Mgc3RlZWwgZmFzdGVuZXJzLCBlLmcuIGZvciB0aGUgcHVycG9zZSBvZiBsdWJyaWNhdGlvbiBpbiBvcmRlciB0byBhdm9pZCBnYWxsaW5nLiBJbmZvcm1hdGlvbiBmb3IgZGVzaWduIGFuZCBhc3NlbWJseSBvZiBjb2F0ZWQgZmFzdGVuZXJzIGlzIGdpdmVuIGluIEFubmV4wqBBLiBUaGlzIGRvY3VtZW50IGRvZXMgbm90IHNwZWNpZnkgcmVxdWlyZW1lbnRzIGZvciBwcm9wZXJ0aWVzIHN1Y2ggYXMgd2VsZGFiaWxpdHkgb3IgcGFpbnRhYmlsaXR5LiAiLCJtYXRjaExldmVsIjoiZnVsbCIsImZ1bGx5SGlnaGxpZ2h0ZWQiOmZhbHNlLCJtYXRjaGVkV29yZHMiOlsiaXNvIiwiNCJdfX19LHsiY2F0ZWdvcnkiOiJzdGFuZGFyZCIsInBhdGgiOiIvc2l0ZXMvaXNvb3JnL2NvbnRlbnRzL2RhdGEvc3RhbmRhcmQvMDcvMjkvNzI5NjIiLCJ1dWlkIjoiMDYxYTVmMDktNjg0My00ZWMxLTgyYWItZGMxYmY5ZmY2MDhkIiwidGl0bGUiOiJJU08gNDU4Ni00OjIwMTggSGlnaC1wcmVzc3VyZSBkZWNvcmF0aXZlIGxhbWluYXRlcyAoSFBMLCBIUERMKSDigJQgU2hlZXRzIGJhc2VkIG9uIHRoZXJtb3NldHRpbmcgcmVzaW5zICh1c3VhbGx5IGNhbGxlZCBsYW1pbmF0ZXMpIOKAlCBQYXJ0IDQ6IENsYXNzaWZpY2F0aW9uIGFuZCBzcGVjaWZpY2F0aW9ucyBmb3IgY29tcGFjdCBsYW1pbmF0ZXMgb2YgdGhpY2tuZXNzIDIgbW0gYW5kIGdyZWF0ZXIiLCJzdGF0dXMiOiJQdWJsaXNoZWQiLCJ5ZWFyIjoyMDIyLCJvcmRlciI6MTEsInRleHQiOiJUaGlzIGRvY3VtZW50IHNwZWNpZmllcyBwZXJmb3JtYW5jZSByZXF1aXJlbWVudHMgZm9yIGNvbXBhY3QgbGFtaW5hdGUgKGRlZmluZWQgaW4gQ2xhdXNlIDQpIG9mIHRoaWNrbmVzcyAyIG1tIG9yIGdyZWF0ZXIgaW50ZW5kZWQgZm9yIGludGVyaW9yIHVzZS4gSVNPIDQ1ODbigJEyIHNwZWNpZmllcyB0aGUgbWV0aG9kcyBvZiB0ZXN0IHJlbGV2YW50IHRvIHRoaXMgZG9jdW1lbnQuICIsIm9iamVjdElEIjoiNzI5NjJfMCIsIl9oaWdobGlnaHRSZXN1bHQiOnsidGl0bGUiOnsidmFsdWUiOiI8ZW0+SVNPPC9lbT4gPGVtPjQ8L2VtPjU4Ni08ZW0+NDwvZW0+OjIwMTggSGlnaC1wcmVzc3VyZSBkZWNvcmF0aXZlIGxhbWluYXRlcyAoSFBMLCBIUERMKSDigJQgU2hlZXRzIGJhc2VkIG9uIHRoZXJtb3NldHRpbmcgcmVzaW5zICh1c3VhbGx5IGNhbGxlZCBsYW1pbmF0ZXMpIOKAlCBQYXJ0IDxlbT40PC9lbT46IENsYXNzaWZpY2F0aW9uIGFuZCBzcGVjaWZpY2F0aW9ucyBmb3IgY29tcGFjdCBsYW1pbmF0ZXMgb2YgdGhpY2tuZXNzIDIgbW0gYW5kIGdyZWF0ZXIiLCJtYXRjaExldmVsIjoiZnVsbCIsImZ1bGx5SGlnaGxpZ2h0ZWQiOmZhbHNlLCJtYXRjaGVkV29yZHMiOlsiaXNvIiwiNCJdfSwidGV4dCI6eyJ2YWx1ZSI6IlRoaXMgZG9jdW1lbnQgc3BlY2lmaWVzIHBlcmZvcm1hbmNlIHJlcXVpcmVtZW50cyBmb3IgY29tcGFjdCBsYW1pbmF0ZSAoZGVmaW5lZCBpbiBDbGF1c2UgPGVtPjQ8L2VtPikgb2YgdGhpY2tuZXNzIDIgbW0gb3IgZ3JlYXRlciBpbnRlbmRlZCBmb3IgaW50ZXJpb3IgdXNlLiA8ZW0+SVNPPC9lbT4gPGVtPjQ8L2VtPjU4NuKAkTIgc3BlY2lmaWVzIHRoZSBtZXRob2RzIG9mIHRlc3QgcmVsZXZhbnQgdG8gdGhpcyBkb2N1bWVudC4gIiwibWF0Y2hMZXZlbCI6ImZ1bGwiLCJmdWxseUhpZ2hsaWdodGVkIjpmYWxzZSwibWF0Y2hlZFdvcmRzIjpbImlzbyIsIjQiXX19fSx7ImNhdGVnb3J5Ijoic3RhbmRhcmQiLCJwYXRoIjoiL3NpdGVzL2lzb29yZy9jb250ZW50cy9kYXRhL3N0YW5kYXJkLzA3LzI5LzcyOTYxIiwidXVpZCI6IjA5Nzk3NWE0LTJiYzAtNDE0YS1iOGE1LWFmMjQwNjkxOTZlOCIsInRpdGxlIjoiSVNPIDQ1ODYtMzoyMDE4IEhpZ2gtcHJlc3N1cmUgZGVjb3JhdGl2ZSBsYW1pbmF0ZXMgKEhQTCwgSFBETCkg4oCUIFNoZWV0cyBiYXNlZCBvbiB0aGVybW9zZXR0aW5nIHJlc2lucyAodXN1YWxseSBjYWxsZWQgbGFtaW5hdGVzKSDigJQgUGFydCAzOiBDbGFzc2lmaWNhdGlvbiBhbmQgc3BlY2lmaWNhdGlvbnMgZm9yIGxhbWluYXRlcyBsZXNzIHRoYW4gMiBtbSB0aGljayBhbmQgaW50ZW5kZWQgZm9yIGJvbmRpbmcgdG8gc3VwcG9ydGluZyBzdWJzdHJhdGVzIiwic3RhdHVzIjoiUHVibGlzaGVkIiwieWVhciI6MjAyMiwib3JkZXIiOjExLCJ0ZXh0IjoiVGhpcyBkb2N1bWVudCBhcHBsaWVzIHRvIGhpZ2gtcHJlc3N1cmUgbGFtaW5hdGVzIChIUEwpIGxlc3MgdGhhbiAyIG1tIHRoaWNrIG5vcm1hbGx5IGludGVuZGVkIGZvciBib25kaW5nIHRvIHN1cHBvcnRpbmcgc3Vic3RyYXRlcyB0byBwcm9kdWNlIEhQTCBjb21wb3NpdGUgcGFuZWxzIGFuZCBlc3RhYmxpc2hlcyBhIGNsYXNzaWZpY2F0aW9uIHN5c3RlbSBmb3IgaGlnaC1wcmVzc3VyZSBkZWNvcmF0aXZlIGxhbWluYXRlcyBhY2NvcmRpbmcgdG8gdGhlaXIgcGVyZm9ybWFuY2UgYW5kIG1haW4gcmVjb21tZW5kZWQgZmllbGRzIG9mIGFwcGxpY2F0aW9uLCBpbmNsdWRpbmcgbWF0ZXJpYWxzIHdpdGggc3BlY2lhbCBjaGFyYWN0ZXJpc3RpY3MsIGZvciBleGFtcGxlIGZvcm1hYmlsaXR5IG9yIGRlZmluZWQgcmVhY3Rpb24gdG8gZmlyZS4gVGhpcyBkb2N1bWVudCBhbHNvIHNwZWNpZmllcyByZXF1aXJlbWVudHMgZm9yIHRoZSBwcm9wZXJ0aWVzIG9mIHRoZSB2YXJpb3VzIHR5cGVzIG9mIGxhbWluYXRlcyBjb3ZlcmVkIGJ5IHRoaXMgY2xhc3NpZmljYXRpb24gc3lzdGVtLiBJU08gNDU4NuKAkTIgc3BlY2lmaWVzIHRoZSBtZXRob2RzIG9mIHRlc3QgcmVsZXZhbnQgdG8gdGhpcyBkb2N1bWVudC4gSVNPIDQ1ODbigJE0IHRocm91Z2ggSVNPIDQ1ODbigJE4IGFyZSByZXNlcnZlZCBmb3Igb3RoZXIgdHlwZXMgb2YgSFBMIG1hdGVyaWFscy4gIiwib2JqZWN0SUQiOiI3Mjk2MV8wIiwiX2hpZ2hsaWdodFJlc3VsdCI6eyJ0aXRsZSI6eyJ2YWx1ZSI6IjxlbT5JU088L2VtPiA8ZW0+NDwvZW0+NTg2LTM6MjAxOCBIaWdoLXByZXNzdXJlIGRlY29yYXRpdmUgbGFtaW5hdGVzIChIUEwsIEhQREwpIOKAlCBTaGVldHMgYmFzZWQgb24gdGhlcm1vc2V0dGluZyByZXNpbnMgKHVzdWFsbHkgY2FsbGVkIGxhbWluYXRlcykg4oCUIFBhcnQgMzogQ2xhc3NpZmljYXRpb24gYW5kIHNwZWNpZmljYXRpb25zIGZvciBsYW1pbmF0ZXMgbGVzcyB0aGFuIDIgbW0gdGhpY2sgYW5kIGludGVuZGVkIGZvciBib25kaW5nIHRvIHN1cHBvcnRpbmcgc3Vic3RyYXRlcyIsIm1hdGNoTGV2ZWwiOiJmdWxsIiwiZnVsbHlIaWdobGlnaHRlZCI6ZmFsc2UsIm1hdGNoZWRXb3JkcyI6WyJpc28iLCI0Il19LCJ0ZXh0Ijp7InZhbHVlIjoiVGhpcyBkb2N1bWVudCBhcHBsaWVzIHRvIGhpZ2gtcHJlc3N1cmUgbGFtaW5hdGVzIChIUEwpIGxlc3MgdGhhbiAyIG1tIHRoaWNrIG5vcm1hbGx5IGludGVuZGVkIGZvciBib25kaW5nIHRvIHN1cHBvcnRpbmcgc3Vic3RyYXRlcyB0byBwcm9kdWNlIEhQTCBjb21wb3NpdGUgcGFuZWxzIGFuZCBlc3RhYmxpc2hlcyBhIGNsYXNzaWZpY2F0aW9uIHN5c3RlbSBmb3IgaGlnaC1wcmVzc3VyZSBkZWNvcmF0aXZlIGxhbWluYXRlcyBhY2NvcmRpbmcgdG8gdGhlaXIgcGVyZm9ybWFuY2UgYW5kIG1haW4gcmVjb21tZW5kZWQgZmllbGRzIG9mIGFwcGxpY2F0aW9uLCBpbmNsdWRpbmcgbWF0ZXJpYWxzIHdpdGggc3BlY2lhbCBjaGFyYWN0ZXJpc3RpY3MsIGZvciBleGFtcGxlIGZvcm1hYmlsaXR5IG9yIGRlZmluZWQgcmVhY3Rpb24gdG8gZmlyZS4gVGhpcyBkb2N1bWVudCBhbHNvIHNwZWNpZmllcyByZXF1aXJlbWVudHMgZm9yIHRoZSBwcm9wZXJ0aWVzIG9mIHRoZSB2YXJpb3VzIHR5cGVzIG9mIGxhbWluYXRlcyBjb3ZlcmVkIGJ5IHRoaXMgY2xhc3NpZmljYXRpb24gc3lzdGVtLiA8ZW0+SVNPPC9lbT4gPGVtPjQ8L2VtPjU4NuKAkTIgc3BlY2lmaWVzIHRoZSBtZXRob2RzIG9mIHRlc3QgcmVsZXZhbnQgdG8gdGhpcyBkb2N1bWVudC4gPGVtPklTTzwvZW0+IDxlbT40PC9lbT41ODbigJE8ZW0+NDwvZW0+IHRocm91Z2ggPGVtPklTTzwvZW0+IDxlbT40PC9lbT41ODbigJE4IGFyZSByZXNlcnZlZCBmb3Igb3RoZXIgdHlwZXMgb2YgSFBMIG1hdGVyaWFscy4gIiwibWF0Y2hMZXZlbCI6ImZ1bGwiLCJmdWxseUhpZ2hsaWdodGVkIjpmYWxzZSwibWF0Y2hlZFdvcmRzIjpbImlzbyIsIjQiXX19fSx7ImNhdGVnb3J5Ijoic3RhbmRhcmQiLCJwYXRoIjoiL3NpdGVzL2lzb29yZy9jb250ZW50cy9kYXRhL3N0YW5kYXJkLzA2LzkwLzY5MDgyIiwidXVpZCI6IjliMmFhOWNmLWFhNzQtNDI2Ni1hYzIxLWI2N2FhZGRlMTI1YiIsInRpdGxlIjoiSVNPIDQ3MzA6MjAxNyBFc3NlbnRpYWwgb2lsIG9mIE1lbGFsZXVjYSwgdGVycGluZW4tNC1vbCB0eXBlIChUZWEgVHJlZSBvaWwpIiwic3RhdHVzIjoiUHVibGlzaGVkIiwieWVhciI6MjAyMiwib3JkZXIiOjExLCJ0ZXh0IjoiSVNPIDQ3MzA6MjAxNyBzcGVjaWZpZXMgY2VydGFpbiBjaGFyYWN0ZXJpc3RpY3Mgb2YgdGhlIGVzc2VudGlhbCBvaWwgb2YgTWVsYWxldWNhICwgdGVycGluZW4tNC1vbCB0eXBlIChUZWEgVHJlZSBvaWwpLCBpbiBvcmRlciB0byBmYWNpbGl0YXRlIGFzc2Vzc21lbnQgb2YgaXRzIHF1YWxpdHkuICIsIm9iamVjdElEIjoiNjkwODJfMCIsIl9oaWdobGlnaHRSZXN1bHQiOnsidGl0bGUiOnsidmFsdWUiOiI8ZW0+SVNPPC9lbT4gPGVtPjQ8L2VtPjczMDoyMDE3IEVzc2VudGlhbCBvaWwgb2YgTWVsYWxldWNhLCB0ZXJwaW5lbi08ZW0+NDwvZW0+LW9sIHR5cGUgKFRlYSBUcmVlIG9pbCkiLCJtYXRjaExldmVsIjoiZnVsbCIsImZ1bGx5SGlnaGxpZ2h0ZWQiOmZhbHNlLCJtYXRjaGVkV29yZHMiOlsiaXNvIiwiNCJdfSwidGV4dCI6eyJ2YWx1ZSI6IjxlbT5JU088L2VtPiA8ZW0+NDwvZW0+NzMwOjIwMTcgc3BlY2lmaWVzIGNlcnRhaW4gY2hhcmFjdGVyaXN0aWNzIG9mIHRoZSBlc3NlbnRpYWwgb2lsIG9mIE1lbGFsZXVjYSAsIHRlcnBpbmVuLTxlbT40PC9lbT4tb2wgdHlwZSAoVGVhIFRyZWUgb2lsKSwgaW4gb3JkZXIgdG8gZmFjaWxpdGF0ZSBhc3Nlc3NtZW50IG9mIGl0cyBxdWFsaXR5LiAiLCJtYXRjaExldmVsIjoiZnVsbCIsImZ1bGx5SGlnaGxpZ2h0ZWQiOmZhbHNlLCJtYXRjaGVkV29yZHMiOlsiaXNvIiwiNCJdfX19LHsiY2F0ZWdvcnkiOiJzdGFuZGFyZCIsInBhdGgiOiIvc2l0ZXMvaXNvb3JnL2NvbnRlbnRzL2RhdGEvc3RhbmRhcmQvMDYvNDIvNjQyMDEiLCJ1dWlkIjoiYWI1NTQ1NGQtNDVjOC00YmM2LWJhMzAtOTYyMTUwMjhmNDQwIiwidGl0bGUiOiJJU08gNDIwMjoyMDE2IFJlZHVjdGlvbiBzbGVldmVzIHdpdGggZXh0ZXJuYWwgNy8yNCB0YXBlciBmb3IgdG9vbHMgd2l0aCBNb3JzZSB0YXBlciBzaGFua3MiLCJzdGF0dXMiOiJQdWJsaXNoZWQiLCJ5ZWFyIjoyMDIyLCJvcmRlciI6MTEsInRleHQiOiJJU08gNDIwMjoyMDE2IHNwZWNpZmllcyB0aGUgZGltZW5zaW9ucyBvZiByZWR1Y3Rpb24gc2xlZXZlcyB3aXRoIGV4dGVybmFsIDcvMjQgdGFwZXIgKE5vcy4gMzAsIDQwLCA0NSwgNTAgYW5kIDYwKSBmb3IgdG9vbHMgd2l0aCBNb3JzZSB0YXBlciBzaGFua3MgKE5vcy4gMSB0byA2KS4gQWxsIHRoZXNlIHNsZWV2ZXMgYWxsb3cgZHJpdmluZyBvZiB0b29scyBoYXZpbmcgTW9yc2UgdGFwZXIgc2hhbmtzIHdoaWNoIGhhdmUgYSB0ZW5vbiBhdCB0aGUgc21hbGwgZW5kIG9mIHRoZSBzaGFuazsgc29tZSBzbGVldmVzIGFsbG93IGRyaXZpbmcgb2YgdG9vbHMgaGF2aW5nIE1vcnNlIHRhcGVyIHNoYW5rcyB3aGljaCBoYXZlIGFuIGF4aWFsbHkgdGFwcGVkIGhvbGUgaW4gdGhlIHNoYW5rOiAtICAgICAgd2l0aCB0aGUgdXNlIG9mIGFuIGluY29ycG9yYXRlZCBzY3JldyBmb3Igc2xlZXZlcyAzMCDDlyAxID8gNDAgw5cgMSA/IDQwIMOXIDIgPyA0NSDDlyAxID8gNDUgw5cgMiA/IDQ1IMOXIDMgPyA1MCDDlyAyID8gNTAgw5cgMyA/IDUwIMOXIDQgPyA2MCDDlyAzID8gNjAgw5cgNCA/IDYwIMOXIDU7IC0gICAgICB3aXRoIHRoZSB1c2Ugb2YgYSBkcmF3IGJhciBmb3Igc2xlZXZlcyAzMCDDlyAxID8gMzAgw5cgMiA/IDQwIMOXIDEgPyA0MCDDlyAyID8gNDAgw5cgMyA/IDQ1IMOXIDEgPyA0NSDDlyAyID8gNDUgw5cgMyA/IDQ1IMOXIDQgPyA1MCDDlyAyID8gNTAgw5cgMyA/IDUwIMOXIDQgPyA1MCDDlyA1ID8gNjAgw5cgMyA/IDYwIMOXIDQgPyA2MCDDlyA1ID8gNjAgw5cgNi4gTW9yc2UgdGFwZXJzIGNvbmZvcm0gdG8gSVNPIDI5NiB3aGlsZSA3LzI0IHRhcGVycyBhcmUgaW4gYWNjb3JkYW5jZSB3aXRoIElTTyAyOTcuICIsIm9iamVjdElEIjoiNjQyMDFfMCIsIl9oaWdobGlnaHRSZXN1bHQiOnsidGl0bGUiOnsidmFsdWUiOiI8ZW0+SVNPPC9lbT4gPGVtPjQ8L2VtPjIwMjoyMDE2IFJlZHVjdGlvbiBzbGVldmVzIHdpdGggZXh0ZXJuYWwgNy8yNCB0YXBlciBmb3IgdG9vbHMgd2l0aCBNb3JzZSB0YXBlciBzaGFua3MiLCJtYXRjaExldmVsIjoiZnVsbCIsImZ1bGx5SGlnaGxpZ2h0ZWQiOmZhbHNlLCJtYXRjaGVkV29yZHMiOlsiaXNvIiwiNCJdfSwidGV4dCI6eyJ2YWx1ZSI6IjxlbT5JU088L2VtPiA8ZW0+NDwvZW0+MjAyOjIwMTYgc3BlY2lmaWVzIHRoZSBkaW1lbnNpb25zIG9mIHJlZHVjdGlvbiBzbGVldmVzIHdpdGggZXh0ZXJuYWwgNy8yNCB0YXBlciAoTm9zLiAzMCwgPGVtPjQ8L2VtPjAsIDxlbT40PC9lbT41LCA1MCBhbmQgNjApIGZvciB0b29scyB3aXRoIE1vcnNlIHRhcGVyIHNoYW5rcyAoTm9zLiAxIHRvIDYpLiBBbGwgdGhlc2Ugc2xlZXZlcyBhbGxvdyBkcml2aW5nIG9mIHRvb2xzIGhhdmluZyBNb3JzZSB0YXBlciBzaGFua3Mgd2hpY2ggaGF2ZSBhIHRlbm9uIGF0IHRoZSBzbWFsbCBlbmQgb2YgdGhlIHNoYW5rOyBzb21lIHNsZWV2ZXMgYWxsb3cgZHJpdmluZyBvZiB0b29scyBoYXZpbmcgTW9yc2UgdGFwZXIgc2hhbmtzIHdoaWNoIGhhdmUgYW4gYXhpYWxseSB0YXBwZWQgaG9sZSBpbiB0aGUgc2hhbms6IC0gICAgICB3aXRoIHRoZSB1c2Ugb2YgYW4gaW5jb3Jwb3JhdGVkIHNjcmV3IGZvciBzbGVldmVzIDMwIMOXIDEgPyA8ZW0+NDwvZW0+MCDDlyAxID8gPGVtPjQ8L2VtPjAgw5cgMiA/IDxlbT40PC9lbT41IMOXIDEgPyA8ZW0+NDwvZW0+NSDDlyAyID8gPGVtPjQ8L2VtPjUgw5cgMyA/IDUwIMOXIDIgPyA1MCDDlyAzID8gNTAgw5cgPGVtPjQ8L2VtPiA/IDYwIMOXIDMgPyA2MCDDlyA8ZW0+NDwvZW0+ID8gNjAgw5cgNTsgLSAgICAgIHdpdGggdGhlIHVzZSBvZiBhIGRyYXcgYmFyIGZvciBzbGVldmVzIDMwIMOXIDEgPyAzMCDDlyAyID8gPGVtPjQ8L2VtPjAgw5cgMSA/IDxlbT40PC9lbT4wIMOXIDIgPyA8ZW0+NDwvZW0+MCDDlyAzID8gPGVtPjQ8L2VtPjUgw5cgMSA/IDxlbT40PC9lbT41IMOXIDIgPyA8ZW0+NDwvZW0+NSDDlyAzID8gPGVtPjQ8L2VtPjUgw5cgPGVtPjQ8L2VtPiA/IDUwIMOXIDIgPyA1MCDDlyAzID8gNTAgw5cgPGVtPjQ8L2VtPiA/IDUwIMOXIDUgPyA2MCDDlyAzID8gNjAgw5cgPGVtPjQ8L2VtPiA/IDYwIMOXIDUgPyA2MCDDlyA2LiBNb3JzZSB0YXBlcnMgY29uZm9ybSB0byA8ZW0+SVNPPC9lbT4gMjk2IHdoaWxlIDcvMjQgdGFwZXJzIGFyZSBpbiBhY2NvcmRhbmNlIHdpdGggPGVtPklTTzwvZW0+IDI5Ny4gIiwibWF0Y2hMZXZlbCI6ImZ1bGwiLCJmdWxseUhpZ2hsaWdodGVkIjpmYWxzZSwibWF0Y2hlZFdvcmRzIjpbImlzbyIsIjQiXX19fSx7ImNhdGVnb3J5Ijoic3RhbmRhcmQiLCJwYXRoIjoiL3NpdGVzL2lzb29yZy9jb250ZW50cy9kYXRhL3N0YW5kYXJkLzA1LzkyLzU5MjY3IiwidXVpZCI6ImExMzU2MGMwLWFjZjUtNDgwZi04YzRiLWVmMWI5MmVmOGRmOCIsInRpdGxlIjoiSVNPIDQ5OTE6MjAxNSBTdGVlbCBjYXN0aW5ncyBmb3IgcHJlc3N1cmUgcHVycG9zZXMiLCJzdGF0dXMiOiJQdWJsaXNoZWQiLCJ5ZWFyIjoyMDIyLCJvcmRlciI6MTEsInRleHQiOiJJU08gNDk5MToyMDE1IGNvdmVycyBzdGVlbCBjYXN0aW5ncyBmb3IgcHJlc3N1cmUgY29udGFpbmluZyBwYXJ0cy4gSXQgaW5jbHVkZXMgbWF0ZXJpYWxzIHdoaWNoIGFyZSB1c2VkIGZvciB0aGUgbWFudWZhY3R1cmUgb2YgY29tcG9uZW50cyBzdWJqZWN0IHRvIHByZXNzdXJlIHZlc3NlbCBjb2RlcyBhbmQgY29tcG9uZW50cyBub3Qgc3ViamVjdCB0byBjb2Rlcy4gVGhpcyBJbnRlcm5hdGlvbmFsIFN0YW5kYXJkIHJlbGF0ZXMgdG8gY2FzdGluZ3MgbWFudWZhY3R1cmVkIGZyb20gdW5hbGxveWVkIGFuZCBhbGxveWVkIHN0ZWVsIGdyYWRlcyAoY2hhcmFjdGVyaXplZCBieSB0aGVpciBjaGVtaWNhbCBjb21wb3NpdGlvbiwgVGFibGUgMSwgYW5kIG1lY2hhbmljYWwgcHJvcGVydGllcywgVGFibGVzIDIsIDMsIDQgYW5kIDUpLiBOT1RFICAgICAgICAgIEFubmV4IEQgZ2l2ZXMgaW5mb3JtYXRpb24gb24gSVNPIGdyYWRlIGRlc2lnbmF0aW9uIGFuZCBhdmFpbGFibGUgVU5TIG51bWJlcnMgd2hpY2ggYXJlIHNpbWlsYXIgdG8gdGhlIElTTyBncmFkZSBkZXNpZ25hdGlvbi4gIiwib2JqZWN0SUQiOiI1OTI2N18wIiwiX2hpZ2hsaWdodFJlc3VsdCI6eyJ0aXRsZSI6eyJ2YWx1ZSI6IjxlbT5JU088L2VtPiA8ZW0+NDwvZW0+OTkxOjIwMTUgU3RlZWwgY2FzdGluZ3MgZm9yIHByZXNzdXJlIHB1cnBvc2VzIiwibWF0Y2hMZXZlbCI6ImZ1bGwiLCJmdWxseUhpZ2hsaWdodGVkIjpmYWxzZSwibWF0Y2hlZFdvcmRzIjpbImlzbyIsIjQiXX0sInRleHQiOnsidmFsdWUiOiI8ZW0+SVNPPC9lbT4gPGVtPjQ8L2VtPjk5MToyMDE1IGNvdmVycyBzdGVlbCBjYXN0aW5ncyBmb3IgcHJlc3N1cmUgY29udGFpbmluZyBwYXJ0cy4gSXQgaW5jbHVkZXMgbWF0ZXJpYWxzIHdoaWNoIGFyZSB1c2VkIGZvciB0aGUgbWFudWZhY3R1cmUgb2YgY29tcG9uZW50cyBzdWJqZWN0IHRvIHByZXNzdXJlIHZlc3NlbCBjb2RlcyBhbmQgY29tcG9uZW50cyBub3Qgc3ViamVjdCB0byBjb2Rlcy4gVGhpcyBJbnRlcm5hdGlvbmFsIFN0YW5kYXJkIHJlbGF0ZXMgdG8gY2FzdGluZ3MgbWFudWZhY3R1cmVkIGZyb20gdW5hbGxveWVkIGFuZCBhbGxveWVkIHN0ZWVsIGdyYWRlcyAoY2hhcmFjdGVyaXplZCBieSB0aGVpciBjaGVtaWNhbCBjb21wb3NpdGlvbiwgVGFibGUgMSwgYW5kIG1lY2hhbmljYWwgcHJvcGVydGllcywgVGFibGVzIDIsIDMsIDxlbT40PC9lbT4gYW5kIDUpLiBOT1RFICAgICAgICAgIEFubmV4IEQgZ2l2ZXMgaW5mb3JtYXRpb24gb24gPGVtPklTTzwvZW0+IGdyYWRlIGRlc2lnbmF0aW9uIGFuZCBhdmFpbGFibGUgVU5TIG51bWJlcnMgd2hpY2ggYXJlIHNpbWlsYXIgdG8gdGhlIDxlbT5JU088L2VtPiBncmFkZSBkZXNpZ25hdGlvbi4gIiwibWF0Y2hMZXZlbCI6ImZ1bGwiLCJmdWxseUhpZ2hsaWdodGVkIjpmYWxzZSwibWF0Y2hlZFdvcmRzIjpbImlzbyIsIjQiXX19fSx7ImNhdGVnb3J5Ijoic3RhbmRhcmQiLCJwYXRoIjoiL3NpdGVzL2lzb29yZy9jb250ZW50cy9kYXRhL3N0YW5kYXJkLzA1LzUzLzU1Mzg1IiwidXVpZCI6ImVhZWNiMjJiLTY0MDctNDMzOS1iNDZiLWM0NjFlMDM4ZDczZSIsInRpdGxlIjoiSVNPIDQwNjQtNDoyMDE0IFdhdGVyIG1ldGVycyBmb3IgY29sZCBwb3RhYmxlIHdhdGVyIGFuZCBob3Qgd2F0ZXIg4oCUIFBhcnQgNDogTm9uLW1ldHJvbG9naWNhbCByZXF1aXJlbWVudHMgbm90IGNvdmVyZWQgaW4gSVNPIDQwNjQtMSIsInN0YXR1cyI6IlB1Ymxpc2hlZCIsInllYXIiOjIwMjIsIm9yZGVyIjoxMSwidGV4dCI6IklTTyA0MDY0LTQ6MjAxNCBhcHBsaWVzIHRvIHdhdGVyIG1ldGVycyB1c2VkIHRvIG1ldGVyIHRoZSB2b2x1bWUgb2YgY29sZCBwb3RhYmxlIHdhdGVyIGFuZCBob3Qgd2F0ZXIgZmxvd2luZyB0aHJvdWdoIGEgZnVsbHkgY2hhcmdlZCwgY2xvc2VkIGNvbmR1aXQuIFRoZXNlIHdhdGVyIG1ldGVycyBpbmNvcnBvcmF0ZSBkZXZpY2VzIHdoaWNoIGluZGljYXRlIHRoZSBpbnRlZ3JhdGVkIHZvbHVtZS4gSVNPIDQwNjQtNDoyMDE0IHNwZWNpZmllcyB0ZWNobmljYWwgY2hhcmFjdGVyaXN0aWNzIGFuZCBwcmVzc3VyZSBsb3NzIHJlcXVpcmVtZW50cyBmb3IgbWV0ZXJzIGZvciBjb2xkIHBvdGFibGUgd2F0ZXIgYW5kIGhvdCB3YXRlci4gSXQgYXBwbGllcyB0byB3YXRlciBtZXRlcnMgd2hpY2ggY2FuIHdpdGhzdGFuZDogYSkgYSBtYXhpbXVtIGFkbWlzc2libGUgd29ya2luZyBwcmVzc3VyZSAoTUFQKSBlcXVhbCB0byBhdCBsZWFzdCAxIE1QYSBbMCw2IE1QYSBmb3IgbWV0ZXJzIGZvciB1c2Ugd2l0aCBwaXBlIG5vbWluYWwgZGlhbWV0ZXJzIChETnMpIOKJpTUwMCBtbV07IGIpIGEgbWF4aW11bSBhZG1pc3NpYmxlIHRlbXBlcmF0dXJlIChNQVQpIGZvciBjb2xkIHBvdGFibGUgd2F0ZXIgbWV0ZXJzIG9mIDMwIMKwQzsgYykgYSBNQVQgZm9yIGhvdCB3YXRlciBtZXRlcnMgdXAgdG8gMTgwIMKwQywgZGVwZW5kaW5nIG9uIGNsYXNzLiBJbiBhZGRpdGlvbiB0byBtZXRlcnMgYmFzZWQgb24gbWVjaGFuaWNhbCBwcmluY2lwbGVzLCBJU08gNDA2NC00OjIwMTQgYWxzbyBhcHBsaWVzIHRvIHdhdGVyIG1ldGVycyBiYXNlZCBvbiBlbGVjdHJpY2FsIG9yIGVsZWN0cm9uaWMgcHJpbmNpcGxlcywgYW5kIHRvIHdhdGVyIG1ldGVycyBiYXNlZCBvbiBtZWNoYW5pY2FsIHByaW5jaXBsZXMgaW5jb3Jwb3JhdGluZyBlbGVjdHJvbmljIGRldmljZXMsIHVzZWQgdG8gbWV0ZXIgdGhlIHZvbHVtZSBmbG93IG9mIGhvdCB3YXRlciBhbmQgY29sZCBwb3RhYmxlIHdhdGVyLiBJdCBhbHNvIGFwcGxpZXMgdG8gZWxlY3Ryb25pYyBhbmNpbGxhcnkgZGV2aWNlcy4gQXMgYSBydWxlIGFuY2lsbGFyeSBkZXZpY2VzIGFyZSBvcHRpb25hbC4gSG93ZXZlciwgbmF0aW9uYWwgb3IgaW50ZXJuYXRpb25hbCByZWd1bGF0aW9ucyBtYXkgbWFrZSBzb21lIGFuY2lsbGFyeSBkZXZpY2VzIG1hbmRhdG9yeSBpbiByZWxhdGlvbiB0byB0aGUgdXRpbGl6YXRpb24gb2YgdGhlIHdhdGVyIG1ldGVyLiAiLCJvYmplY3RJRCI6IjU1Mzg1XzAiLCJfaGlnaGxpZ2h0UmVzdWx0Ijp7InRpdGxlIjp7InZhbHVlIjoiPGVtPklTTzwvZW0+IDxlbT40PC9lbT4wNjQtPGVtPjQ8L2VtPjoyMDE0IFdhdGVyIG1ldGVycyBmb3IgY29sZCBwb3RhYmxlIHdhdGVyIGFuZCBob3Qgd2F0ZXIg4oCUIFBhcnQgPGVtPjQ8L2VtPjogTm9uLW1ldHJvbG9naWNhbCByZXF1aXJlbWVudHMgbm90IGNvdmVyZWQgaW4gPGVtPklTTzwvZW0+IDxlbT40PC9lbT4wNjQtMSIsIm1hdGNoTGV2ZWwiOiJmdWxsIiwiZnVsbHlIaWdobGlnaHRlZCI6ZmFsc2UsIm1hdGNoZWRXb3JkcyI6WyJpc28iLCI0Il19LCJ0ZXh0Ijp7InZhbHVlIjoiPGVtPklTTzwvZW0+IDxlbT40PC9lbT4wNjQtPGVtPjQ8L2VtPjoyMDE0IGFwcGxpZXMgdG8gd2F0ZXIgbWV0ZXJzIHVzZWQgdG8gbWV0ZXIgdGhlIHZvbHVtZSBvZiBjb2xkIHBvdGFibGUgd2F0ZXIgYW5kIGhvdCB3YXRlciBmbG93aW5nIHRocm91Z2ggYSBmdWxseSBjaGFyZ2VkLCBjbG9zZWQgY29uZHVpdC4gVGhlc2Ugd2F0ZXIgbWV0ZXJzIGluY29ycG9yYXRlIGRldmljZXMgd2hpY2ggaW5kaWNhdGUgdGhlIGludGVncmF0ZWQgdm9sdW1lLiA8ZW0+SVNPPC9lbT4gPGVtPjQ8L2VtPjA2NC08ZW0+NDwvZW0+OjIwMTQgc3BlY2lmaWVzIHRlY2huaWNhbCBjaGFyYWN0ZXJpc3RpY3MgYW5kIHByZXNzdXJlIGxvc3MgcmVxdWlyZW1lbnRzIGZvciBtZXRlcnMgZm9yIGNvbGQgcG90YWJsZSB3YXRlciBhbmQgaG90IHdhdGVyLiBJdCBhcHBsaWVzIHRvIHdhdGVyIG1ldGVycyB3aGljaCBjYW4gd2l0aHN0YW5kOiBhKSBhIG1heGltdW0gYWRtaXNzaWJsZSB3b3JraW5nIHByZXNzdXJlIChNQVApIGVxdWFsIHRvIGF0IGxlYXN0IDEgTVBhIFswLDYgTVBhIGZvciBtZXRlcnMgZm9yIHVzZSB3aXRoIHBpcGUgbm9taW5hbCBkaWFtZXRlcnMgKEROcykg4omlNTAwIG1tXTsgYikgYSBtYXhpbXVtIGFkbWlzc2libGUgdGVtcGVyYXR1cmUgKE1BVCkgZm9yIGNvbGQgcG90YWJsZSB3YXRlciBtZXRlcnMgb2YgMzAgwrBDOyBjKSBhIE1BVCBmb3IgaG90IHdhdGVyIG1ldGVycyB1cCB0byAxODAgwrBDLCBkZXBlbmRpbmcgb24gY2xhc3MuIEluIGFkZGl0aW9uIHRvIG1ldGVycyBiYXNlZCBvbiBtZWNoYW5pY2FsIHByaW5jaXBsZXMsIDxlbT5JU088L2VtPiA8ZW0+NDwvZW0+MDY0LTxlbT40PC9lbT46MjAxNCBhbHNvIGFwcGxpZXMgdG8gd2F0ZXIgbWV0ZXJzIGJhc2VkIG9uIGVsZWN0cmljYWwgb3IgZWxlY3Ryb25pYyBwcmluY2lwbGVzLCBhbmQgdG8gd2F0ZXIgbWV0ZXJzIGJhc2VkIG9uIG1lY2hhbmljYWwgcHJpbmNpcGxlcyBpbmNvcnBvcmF0aW5nIGVsZWN0cm9uaWMgZGV2aWNlcywgdXNlZCB0byBtZXRlciB0aGUgdm9sdW1lIGZsb3cgb2YgaG90IHdhdGVyIGFuZCBjb2xkIHBvdGFibGUgd2F0ZXIuIEl0IGFsc28gYXBwbGllcyB0byBlbGVjdHJvbmljIGFuY2lsbGFyeSBkZXZpY2VzLiBBcyBhIHJ1bGUgYW5jaWxsYXJ5IGRldmljZXMgYXJlIG9wdGlvbmFsLiBIb3dldmVyLCBuYXRpb25hbCBvciBpbnRlcm5hdGlvbmFsIHJlZ3VsYXRpb25zIG1heSBtYWtlIHNvbWUgYW5jaWxsYXJ5IGRldmljZXMgbWFuZGF0b3J5IGluIHJlbGF0aW9uIHRvIHRoZSB1dGlsaXphdGlvbiBvZiB0aGUgd2F0ZXIgbWV0ZXIuICIsIm1hdGNoTGV2ZWwiOiJmdWxsIiwiZnVsbHlIaWdobGlnaHRlZCI6ZmFsc2UsIm1hdGNoZWRXb3JkcyI6WyJpc28iLCI0Il19fX0seyJjYXRlZ29yeSI6InN0YW5kYXJkIiwicGF0aCI6Ii9zaXRlcy9pc29vcmcvY29udGVudHMvZGF0YS9zdGFuZGFyZC8wNC81Ny80NTc5NiIsInV1aWQiOiJiYzRjOWQ4MS04NDEwLTQ4ZWEtYWVjNy01OTQ4Njc1YWQyMDEiLCJ0aXRsZSI6IklTTyA0NjkxOjIwMDkgSXJvbiBvcmVzIOKAlCBEZXRlcm1pbmF0aW9uIG9mIHRpdGFuaXVtIOKAlCBEaWFudGlweXJ5bG1ldGhhbmUgc3BlY3Ryb3Bob3RvbWV0cmljIG1ldGhvZCIsInN0YXR1cyI6IlB1Ymxpc2hlZCIsInllYXIiOjIwMjIsIm9yZGVyIjoxMSwidGV4dCI6IklTTyA0NjkxOjIwMDkgc3BlY2lmaWVzIGEgc3BlY3Ryb3Bob3RvbWV0cmljIG1ldGhvZCB1c2luZyBkaWFudGlweXJ5bG1ldGhhbmUgZm9yIHRoZSBkZXRlcm1pbmF0aW9uIG9mIHRoZSBtYXNzIGZyYWN0aW9uIG9mIHRpdGFuaXVtIGluIGlyb24gb3Jlcy4gSVNPIDQ2OTE6MjAwOSBpcyBhcHBsaWNhYmxlIHRvIGEgbWFzcy1mcmFjdGlvbiByYW5nZSBvZiAwLDAyICUgdG8gNCwwICUgb2YgdGl0YW5pdW0gaW4gbmF0dXJhbCBpcm9uIG9yZXMsIGFuZCBpcm9uIG9yZSBjb25jZW50cmF0ZXMgYW5kIGFnZ2xvbWVyYXRlcyBpbmNsdWRpbmcgc2ludGVyIHByb2R1Y3RzLiAiLCJvYmplY3RJRCI6IjQ1Nzk2XzAiLCJfaGlnaGxpZ2h0UmVzdWx0Ijp7InRpdGxlIjp7InZhbHVlIjoiPGVtPklTTzwvZW0+IDxlbT40PC9lbT42OTE6MjAwOSBJcm9uIG9yZXMg4oCUIERldGVybWluYXRpb24gb2YgdGl0YW5pdW0g4oCUIERpYW50aXB5cnlsbWV0aGFuZSBzcGVjdHJvcGhvdG9tZXRyaWMgbWV0aG9kIiwibWF0Y2hMZXZlbCI6ImZ1bGwiLCJmdWxseUhpZ2hsaWdodGVkIjpmYWxzZSwibWF0Y2hlZFdvcmRzIjpbImlzbyIsIjQiXX0sInRleHQiOnsidmFsdWUiOiI8ZW0+SVNPPC9lbT4gPGVtPjQ8L2VtPjY5MToyMDA5IHNwZWNpZmllcyBhIHNwZWN0cm9waG90b21ldHJpYyBtZXRob2QgdXNpbmcgZGlhbnRpcHlyeWxtZXRoYW5lIGZvciB0aGUgZGV0ZXJtaW5hdGlvbiBvZiB0aGUgbWFzcyBmcmFjdGlvbiBvZiB0aXRhbml1bSBpbiBpcm9uIG9yZXMuIDxlbT5JU088L2VtPiA8ZW0+NDwvZW0+NjkxOjIwMDkgaXMgYXBwbGljYWJsZSB0byBhIG1hc3MtZnJhY3Rpb24gcmFuZ2Ugb2YgMCwwMiAlIHRvIDxlbT40PC9lbT4sMCAlIG9mIHRpdGFuaXVtIGluIG5hdHVyYWwgaXJvbiBvcmVzLCBhbmQgaXJvbiBvcmUgY29uY2VudHJhdGVzIGFuZCBhZ2dsb21lcmF0ZXMgaW5jbHVkaW5nIHNpbnRlciBwcm9kdWN0cy4gIiwibWF0Y2hMZXZlbCI6ImZ1bGwiLCJmdWxseUhpZ2hsaWdodGVkIjpmYWxzZSwibWF0Y2hlZFdvcmRzIjpbImlzbyIsIjQiXX19fSx7ImNhdGVnb3J5Ijoic3RhbmRhcmQiLCJwYXRoIjoiL3NpdGVzL2lzb29yZy9jb250ZW50cy9kYXRhL3N0YW5kYXJkLzA0LzQyLzQ0MjA4IiwidXVpZCI6ImY2YjdkODczLWIxYTEtNDA1Ny04MGY3LThjYmE0NGY0ZGIwYSIsInRpdGxlIjoiSVNPIDQzNzgtNToyMDA5IFBsYWluIGJlYXJpbmdzIOKAlCBUZXJtcywgZGVmaW5pdGlvbnMsIGNsYXNzaWZpY2F0aW9uIGFuZCBzeW1ib2xzIOKAlCBQYXJ0IDU6IEFwcGxpY2F0aW9uIG9mIHN5bWJvbHMiLCJzdGF0dXMiOiJQdWJsaXNoZWQiLCJ5ZWFyIjoyMDIyLCJvcmRlciI6MTEsInRleHQiOiJJU08gNDM3OC01OjIwMDkgc3BlY2lmaWVzIHByYWN0aWNhbCBhcHBsaWNhdGlvbnMgb2YgdGhlIGdlbmVyYWwgc3ltYm9scyBkZWZpbmVkIGluIElTTyA0Mzc4LTQsIHdpdGggcmVnYXJkIHRvIHRoZSBjYWxjdWxhdGlvbnMsIGRlc2lnbiBhbmQgdGVzdGluZyBvZiBwbGFpbiBiZWFyaW5ncy4gIiwib2JqZWN0SUQiOiI0NDIwOF8wIiwiX2hpZ2hsaWdodFJlc3VsdCI6eyJ0aXRsZSI6eyJ2YWx1ZSI6IjxlbT5JU088L2VtPiA8ZW0+NDwvZW0+Mzc4LTU6MjAwOSBQbGFpbiBiZWFyaW5ncyDigJQgVGVybXMsIGRlZmluaXRpb25zLCBjbGFzc2lmaWNhdGlvbiBhbmQgc3ltYm9scyDigJQgUGFydCA1OiBBcHBsaWNhdGlvbiBvZiBzeW1ib2xzIiwibWF0Y2hMZXZlbCI6ImZ1bGwiLCJmdWxseUhpZ2hsaWdodGVkIjpmYWxzZSwibWF0Y2hlZFdvcmRzIjpbImlzbyIsIjQiXX0sInRleHQiOnsidmFsdWUiOiI8ZW0+SVNPPC9lbT4gPGVtPjQ8L2VtPjM3OC01OjIwMDkgc3BlY2lmaWVzIHByYWN0aWNhbCBhcHBsaWNhdGlvbnMgb2YgdGhlIGdlbmVyYWwgc3ltYm9scyBkZWZpbmVkIGluIDxlbT5JU088L2VtPiA8ZW0+NDwvZW0+Mzc4LTxlbT40PC9lbT4sIHdpdGggcmVnYXJkIHRvIHRoZSBjYWxjdWxhdGlvbnMsIGRlc2lnbiBhbmQgdGVzdGluZyBvZiBwbGFpbiBiZWFyaW5ncy4gIiwibWF0Y2hMZXZlbCI6ImZ1bGwiLCJmdWxseUhpZ2hsaWdodGVkIjpmYWxzZSwibWF0Y2hlZFdvcmRzIjpbImlzbyIsIjQiXX19fSx7ImNhdGVnb3J5Ijoic3RhbmRhcmQiLCJwYXRoIjoiL3NpdGVzL2lzb29yZy9jb250ZW50cy9kYXRhL3N0YW5kYXJkLzA0LzQyLzQ0MjA3IiwidXVpZCI6IjFiYTI2YWMyLWUwZTYtNDAxYy1hZjM1LTVjMjhjMGE0MzdiNSIsInRpdGxlIjoiSVNPIDQzNzgtNDoyMDA5IFBsYWluIGJlYXJpbmdzIOKAlCBUZXJtcywgZGVmaW5pdGlvbnMsIGNsYXNzaWZpY2F0aW9uIGFuZCBzeW1ib2xzIOKAlCBQYXJ0IDQ6IEJhc2ljIHN5bWJvbHMiLCJzdGF0dXMiOiJQdWJsaXNoZWQiLCJ5ZWFyIjoyMDIyLCJvcmRlciI6MTEsInRleHQiOiJJU08gNDM3OC00OjIwMDkgZGVmaW5lcyBiYXNpYyBzeW1ib2xzIGZvciB1c2UgaW4gdGhlIGZpZWxkIG9mIHBsYWluIGJlYXJpbmdzLiBBZGRpdGlvbmFsIHNpZ25zIGFyZSBhbHNvIGRlZmluZWQgZm9yIHVzZSBhcyBzdXBlcnNjcmlwdHMgYW5kIHN1YnNjcmlwdHMuIFRoZSBjaGFyYWN0ZXJzIGVtcGxveWVkIGFyZSBkcmF3biBmcm9tIHRoZSBMYXRpbiBhbmQgR3JlZWsgYWxwaGFiZXRzLCBBcmFiaWMgbnVtZXJhbHMgYW5kIG90aGVyIHNpZ25zLCBmb3IgZXhhbXBsZSBwb2ludHMsIGNvbW1hcywgaG9yaXpvbnRhbCBsaW5lcyBvciBhc3Rlcmlza3MuIEluIHRoZSBzaW1wbGVzdCBjYXNlLCBhbiBhcHBsaWNhdGlvbiBzeW1ib2wgY29uc2lzdHMgb2YgdGhlIGJhc2ljIGNoYXJhY3RlciBhbG9uZTsgaW4gdGhlIG1vc3QgY29tcGxleCwgb2YgdGhlIGJhc2ljIGNoYXJhY3RlciB3aXRoIHN1YnNjcmlwdHMgYW5kIHN1cGVyc2NyaXB0cyAoYWRkaXRpb25hbCBzaWducykuIEZvciB0aGUgcHVycG9zZXMgb2YgaW50ZXJuYXRpb25hbCBhcHBsaWNhYmlsaXR5LCBhbGwgYmFzaWMgc3ltYm9scyBhbmQgYWRkaXRpb25hbCBzaWducyBoYXZlIGJlZW4gZGVyaXZlZCBmcm9tIEVuZ2xpc2ggd29yZHMsIGFuZCBkZXNpZ25hdGlvbnMgdXNlZCBpbiB0ZWNobmljYWwgbGl0ZXJhdHVyZSB1cCB0byBub3cgaGF2ZSBiZWVuIGFkb3B0ZWQgYXMgZmFyIGFzIHBvc3NpYmxlLiBXaWRlIGNvbmZvcm1pdHkgb2YgdGhlIHN5bWJvbHMgZm9yIGFsbCB0eXBlcyBvZiBwbGFpbiBiZWFyaW5ncyBoYXMgYmVlbiBhdHRlbXB0ZWQuIFRoaXMgY2xhc3NpZmljYXRpb24gaXMgZXN0YWJsaXNoZWQgZm9yIHVzZSBpbiBjYWxjdWxhdGlvbnMgYW5kIHRlY2hub2xvZ2ljYWwgYW5kIGdlb21ldHJpY2FsIGRldGVybWluYXRpb25zLCBhcyB3ZWxsIGFzIGluIHRoZSBxdWFsaXR5IGFzc3VyYW5jZSBvZiBwbGFpbiBiZWFyaW5ncy4gIiwib2JqZWN0SUQiOiI0NDIwN18wIiwiX2hpZ2hsaWdodFJlc3VsdCI6eyJ0aXRsZSI6eyJ2YWx1ZSI6IjxlbT5JU088L2VtPiA8ZW0+NDwvZW0+Mzc4LTxlbT40PC9lbT46MjAwOSBQbGFpbiBiZWFyaW5ncyDigJQgVGVybXMsIGRlZmluaXRpb25zLCBjbGFzc2lmaWNhdGlvbiBhbmQgc3ltYm9scyDigJQgUGFydCA8ZW0+NDwvZW0+OiBCYXNpYyBzeW1ib2xzIiwibWF0Y2hMZXZlbCI6ImZ1bGwiLCJmdWxseUhpZ2hsaWdodGVkIjpmYWxzZSwibWF0Y2hlZFdvcmRzIjpbImlzbyIsIjQiXX0sInRleHQiOnsidmFsdWUiOiI8ZW0+SVNPPC9lbT4gPGVtPjQ8L2VtPjM3OC08ZW0+NDwvZW0+OjIwMDkgZGVmaW5lcyBiYXNpYyBzeW1ib2xzIGZvciB1c2UgaW4gdGhlIGZpZWxkIG9mIHBsYWluIGJlYXJpbmdzLiBBZGRpdGlvbmFsIHNpZ25zIGFyZSBhbHNvIGRlZmluZWQgZm9yIHVzZSBhcyBzdXBlcnNjcmlwdHMgYW5kIHN1YnNjcmlwdHMuIFRoZSBjaGFyYWN0ZXJzIGVtcGxveWVkIGFyZSBkcmF3biBmcm9tIHRoZSBMYXRpbiBhbmQgR3JlZWsgYWxwaGFiZXRzLCBBcmFiaWMgbnVtZXJhbHMgYW5kIG90aGVyIHNpZ25zLCBmb3IgZXhhbXBsZSBwb2ludHMsIGNvbW1hcywgaG9yaXpvbnRhbCBsaW5lcyBvciBhc3Rlcmlza3MuIEluIHRoZSBzaW1wbGVzdCBjYXNlLCBhbiBhcHBsaWNhdGlvbiBzeW1ib2wgY29uc2lzdHMgb2YgdGhlIGJhc2ljIGNoYXJhY3RlciBhbG9uZTsgaW4gdGhlIG1vc3QgY29tcGxleCwgb2YgdGhlIGJhc2ljIGNoYXJhY3RlciB3aXRoIHN1YnNjcmlwdHMgYW5kIHN1cGVyc2NyaXB0cyAoYWRkaXRpb25hbCBzaWducykuIEZvciB0aGUgcHVycG9zZXMgb2YgaW50ZXJuYXRpb25hbCBhcHBsaWNhYmlsaXR5LCBhbGwgYmFzaWMgc3ltYm9scyBhbmQgYWRkaXRpb25hbCBzaWducyBoYXZlIGJlZW4gZGVyaXZlZCBmcm9tIEVuZ2xpc2ggd29yZHMsIGFuZCBkZXNpZ25hdGlvbnMgdXNlZCBpbiB0ZWNobmljYWwgbGl0ZXJhdHVyZSB1cCB0byBub3cgaGF2ZSBiZWVuIGFkb3B0ZWQgYXMgZmFyIGFzIHBvc3NpYmxlLiBXaWRlIGNvbmZvcm1pdHkgb2YgdGhlIHN5bWJvbHMgZm9yIGFsbCB0eXBlcyBvZiBwbGFpbiBiZWFyaW5ncyBoYXMgYmVlbiBhdHRlbXB0ZWQuIFRoaXMgY2xhc3NpZmljYXRpb24gaXMgZXN0YWJsaXNoZWQgZm9yIHVzZSBpbiBjYWxjdWxhdGlvbnMgYW5kIHRlY2hub2xvZ2ljYWwgYW5kIGdlb21ldHJpY2FsIGRldGVybWluYXRpb25zLCBhcyB3ZWxsIGFzIGluIHRoZSBxdWFsaXR5IGFzc3VyYW5jZSBvZiBwbGFpbiBiZWFyaW5ncy4gIiwibWF0Y2hMZXZlbCI6ImZ1bGwiLCJmdWxseUhpZ2hsaWdodGVkIjpmYWxzZSwibWF0Y2hlZFdvcmRzIjpbImlzbyIsIjQiXX19fSx7ImNhdGVnb3J5Ijoic3RhbmRhcmQiLCJwYXRoIjoiL3NpdGVzL2lzb29yZy9jb250ZW50cy9kYXRhL3N0YW5kYXJkLzAyLzc1LzI3NTg2IiwidXVpZCI6ImZhMjY0ZDgxLWNhZmQtNDk0Yi05MzI4LTJlNGFmYTQzMDczNyIsInRpdGxlIjoiSVNPIDQyNjYtMzoyMDAyIFBldHJvbGV1bSBhbmQgbGlxdWlkIHBldHJvbGV1bSBwcm9kdWN0cyDigJQgTWVhc3VyZW1lbnQgb2YgbGV2ZWwgYW5kIHRlbXBlcmF0dXJlIGluIHN0b3JhZ2UgdGFua3MgYnkgYXV0b21hdGljIG1ldGhvZHMg4oCUIFBhcnQgMzogTWVhc3VyZW1lbnQgb2YgbGV2ZWwgaW4gcHJlc3N1cml6ZWQgc3RvcmFnZSB0YW5rcyAobm9uLXJlZnJpZ2VyYXRlZCkiLCJzdGF0dXMiOiJQdWJsaXNoZWQiLCJ5ZWFyIjoyMDIyLCJvcmRlciI6MTEsInRleHQiOiJJU08gNDI2Ni0zIGdpdmVzIGd1aWRhbmNlIG9uIHRoZSBhY2N1cmFjeSwgaW5zdGFsbGF0aW9uLCBjb21taXNzaW9uaW5nLCBjYWxpYnJhdGlvbiBhbmQgdmVyaWZpY2F0aW9uIG9mIGF1dG9tYXRpYyBsZXZlbCBnYXVnZXMgKEFMR3MpIGJvdGggaW50cnVzaXZlIGFuZCBub24taW50cnVzaXZlLCBmb3IgbWVhc3VyaW5nIHRoZSBsZXZlbCBvZiBwZXRyb2xldW0gYW5kIHBldHJvbGV1bSBwcm9kdWN0cyBoYXZpbmcgYSB2YXBvdXIgcHJlc3N1cmUgbGVzcyB0aGFuIDQgTVBhLCBzdG9yZWQgaW4gcHJlc3N1cml6ZWQgc3RvcmFnZSB0YW5rcy4gSVNPIDQyNjYtMyBnaXZlcyBndWlkYW5jZSBvbiB0aGUgdXNlIG9mIEFMR3MgaW4gY3VzdG9keSB0cmFuc2ZlciBhcHBsaWNhdGlvbi4gSVNPIDQyNjYtMyBpcyBub3QgYXBwbGljYWJsZSB0byB0aGUgbWVhc3VyZW1lbnQgb2YgbGV2ZWwgaW4gY2F2ZXJucyBhbmQgcmVmcmlnZXJhdGVkIHN0b3JhZ2UgdGFua3Mgd2l0aCBBTEcgZXF1aXBtZW50LiAiLCJvYmplY3RJRCI6IjI3NTg2XzAiLCJfaGlnaGxpZ2h0UmVzdWx0Ijp7InRpdGxlIjp7InZhbHVlIjoiPGVtPklTTzwvZW0+IDxlbT40PC9lbT4yNjYtMzoyMDAyIFBldHJvbGV1bSBhbmQgbGlxdWlkIHBldHJvbGV1bSBwcm9kdWN0cyDigJQgTWVhc3VyZW1lbnQgb2YgbGV2ZWwgYW5kIHRlbXBlcmF0dXJlIGluIHN0b3JhZ2UgdGFua3MgYnkgYXV0b21hdGljIG1ldGhvZHMg4oCUIFBhcnQgMzogTWVhc3VyZW1lbnQgb2YgbGV2ZWwgaW4gcHJlc3N1cml6ZWQgc3RvcmFnZSB0YW5rcyAobm9uLXJlZnJpZ2VyYXRlZCkiLCJtYXRjaExldmVsIjoiZnVsbCIsImZ1bGx5SGlnaGxpZ2h0ZWQiOmZhbHNlLCJtYXRjaGVkV29yZHMiOlsiaXNvIiwiNCJdfSwidGV4dCI6eyJ2YWx1ZSI6IjxlbT5JU088L2VtPiA8ZW0+NDwvZW0+MjY2LTMgZ2l2ZXMgZ3VpZGFuY2Ugb24gdGhlIGFjY3VyYWN5LCBpbnN0YWxsYXRpb24sIGNvbW1pc3Npb25pbmcsIGNhbGlicmF0aW9uIGFuZCB2ZXJpZmljYXRpb24gb2YgYXV0b21hdGljIGxldmVsIGdhdWdlcyAoQUxHcykgYm90aCBpbnRydXNpdmUgYW5kIG5vbi1pbnRydXNpdmUsIGZvciBtZWFzdXJpbmcgdGhlIGxldmVsIG9mIHBldHJvbGV1bSBhbmQgcGV0cm9sZXVtIHByb2R1Y3RzIGhhdmluZyBhIHZhcG91ciBwcmVzc3VyZSBsZXNzIHRoYW4gPGVtPjQ8L2VtPiBNUGEsIHN0b3JlZCBpbiBwcmVzc3VyaXplZCBzdG9yYWdlIHRhbmtzLiA8ZW0+SVNPPC9lbT4gPGVtPjQ8L2VtPjI2Ni0zIGdpdmVzIGd1aWRhbmNlIG9uIHRoZSB1c2Ugb2YgQUxHcyBpbiBjdXN0b2R5IHRyYW5zZmVyIGFwcGxpY2F0aW9uLiA8ZW0+SVNPPC9lbT4gPGVtPjQ8L2VtPjI2Ni0zIGlzIG5vdCBhcHBsaWNhYmxlIHRvIHRoZSBtZWFzdXJlbWVudCBvZiBsZXZlbCBpbiBjYXZlcm5zIGFuZCByZWZyaWdlcmF0ZWQgc3RvcmFnZSB0YW5rcyB3aXRoIEFMRyBlcXVpcG1lbnQuICIsIm1hdGNoTGV2ZWwiOiJmdWxsIiwiZnVsbHlIaWdobGlnaHRlZCI6ZmFsc2UsIm1hdGNoZWRXb3JkcyI6WyJpc28iLCI0Il19fX0seyJjYXRlZ29yeSI6InN0YW5kYXJkIiwicGF0aCI6Ii9zaXRlcy9pc29vcmcvY29udGVudHMvZGF0YS9zdGFuZGFyZC8wMS8wMS8xMDE5OCIsInV1aWQiOiI2ODE0NzlmZS0zZDI2LTQ2MWQtYTU3Ny1lMzhiMDA3MmY1MDgiLCJ0aXRsZSI6IklTTyA0MzI1OjE5OTAgU29hcHMgYW5kIGRldGVyZ2VudHMg4oCUIERldGVybWluYXRpb24gb2YgY2hlbGF0aW5nIGFnZW50IGNvbnRlbnQg4oCUIFRpdHJpbWV0cmljIG1ldGhvZCIsInN0YXR1cyI6IlB1Ymxpc2hlZCIsInllYXIiOjIwMjIsIm9yZGVyIjoxMSwidGV4dCI6IkEgdGVzdCBwb3J0aW9uIG9mIHRoZSBzYW1wbGUgaXMgZGlzc29sdmVkIGluIHdhdGVyLCB0aGUgcEggb2YgdGhlIHNvbHV0aW9uIGFkanVzdGVkIHRvIDQuNjUgYW5kIHRoZSBzb2x1dGlvbiB0aXRyYXRlZCBhZ2FpbnN0IHN0YW5kYXJkIGNvcHBlcihJSSkgc3VscGhhdGUgc29sdXRpb24gdXNpbmcgMS0oMi1weXJpZHlsYXpvKS0yLW5hcGh0aG9sIGFzIGluZGljYXRvci4gUHJpbmNpcGFsbHkgdGhlIG1ldGhvZCBoYXMgYmVlbiBkZXNpZ25lZCBwcmluY2lwYWxseSBmb3IgZGV0ZXJtaW5pbmcgZXRoeWxlbmVkaWFtaW5ldGV0cmFhY2V0aWMgYWNpZCAoRURUQSkgYW5kIGl0IHNhbHRzLiBCZWZvcmUgZGV0ZXJtaW5pbmcgb3RoZXIgY2hlbGF0aW5nIGFnZW50cywgb3IgZGV0ZXJtaW5pbmcgZXRoeWxlbmVkaWFtaW5ldGV0cmFhY2V0aWMgYWNpZCBpbiB0aGUgcHJlc2VuY2Ugb2Ygb3RoZXIgY2hlbGF0aW5nIGFnZW50cywgdGhlIGFwcGxpY2FiaWxpdHkgb2YgdGhlIG1ldGhvZCBzaG91bGQgYmUgY29uZmlybWVkLiAiLCJvYmplY3RJRCI6IjEwMTk4XzAiLCJfaGlnaGxpZ2h0UmVzdWx0Ijp7InRpdGxlIjp7InZhbHVlIjoiPGVtPklTTzwvZW0+IDxlbT40PC9lbT4zMjU6MTk5MCBTb2FwcyBhbmQgZGV0ZXJnZW50cyDigJQgRGV0ZXJtaW5hdGlvbiBvZiBjaGVsYXRpbmcgYWdlbnQgY29udGVudCDigJQgVGl0cmltZXRyaWMgbWV0aG9kIiwibWF0Y2hMZXZlbCI6ImZ1bGwiLCJmdWxseUhpZ2hsaWdodGVkIjpmYWxzZSwibWF0Y2hlZFdvcmRzIjpbImlzbyIsIjQiXX0sInRleHQiOnsidmFsdWUiOiJBIHRlc3QgcG9ydGlvbiBvZiB0aGUgc2FtcGxlIGlzIGRpc3NvbHZlZCBpbiB3YXRlciwgdGhlIHBIIG9mIHRoZSBzb2x1dGlvbiBhZGp1c3RlZCB0byA8ZW0+NDwvZW0+LjY1IGFuZCB0aGUgc29sdXRpb24gdGl0cmF0ZWQgYWdhaW5zdCBzdGFuZGFyZCBjb3BwZXIoSUkpIHN1bHBoYXRlIHNvbHV0aW9uIHVzaW5nIDEtKDItcHlyaWR5bGF6byktMi1uYXBodGhvbCBhcyBpbmRpY2F0b3IuIFByaW5jaXBhbGx5IHRoZSBtZXRob2QgaGFzIGJlZW4gZGVzaWduZWQgcHJpbmNpcGFsbHkgZm9yIGRldGVybWluaW5nIGV0aHlsZW5lZGlhbWluZXRldHJhYWNldGljIGFjaWQgKEVEVEEpIGFuZCBpdCBzYWx0cy4gQmVmb3JlIGRldGVybWluaW5nIG90aGVyIGNoZWxhdGluZyBhZ2VudHMsIG9yIGRldGVybWluaW5nIGV0aHlsZW5lZGlhbWluZXRldHJhYWNldGljIGFjaWQgaW4gdGhlIHByZXNlbmNlIG9mIG90aGVyIGNoZWxhdGluZyBhZ2VudHMsIHRoZSBhcHBsaWNhYmlsaXR5IG9mIHRoZSBtZXRob2Qgc2hvdWxkIGJlIGNvbmZpcm1lZC4gIiwibWF0Y2hMZXZlbCI6InBhcnRpYWwiLCJmdWxseUhpZ2hsaWdodGVkIjpmYWxzZSwibWF0Y2hlZFdvcmRzIjpbIjQiXX19fSx7ImNhdGVnb3J5Ijoic3RhbmRhcmQiLCJwYXRoIjoiL3NpdGVzL2lzb29yZy9jb250ZW50cy9kYXRhL3N0YW5kYXJkLzAxLzAwLzEwMDUyIiwidXVpZCI6IjI5MmY4NDZmLTViNDctNDU0ZC1iOWZlLTFiNzc1ZjAwMGU4YSIsInRpdGxlIjoiSVNPIDQyNDktMjoxOTkwIE1vdG9yY3ljbGUgdHlyZXMgYW5kIHJpbXMgKENvZGUtZGVzaWduYXRlZCBzZXJpZXMpIOKAlCBQYXJ0IDI6IFR5cmUgbG9hZCByYXRpbmdzIiwic3RhdHVzIjoiUHVibGlzaGVkIiwieWVhciI6MjAyMiwib3JkZXIiOjExLCJ0ZXh0IjoiVGFidWxhdGVzIHRoZSBjb3JyZWxhdGlvbiBiZXR3ZWVuIGxvYWQgaW5kZXggYW5kIHR5cmUgbG9hZC1jYXJyeWluZyBjYXBhY2l0eSAodGFibGUgMSksIGJldHdlZW4gc3BlZWQgc3ltYm9sIGFuZCBzcGVlZCBjYXRlZ29yeSAodGFibGUgMiksIHRoZSBtYXhpbXVtIHR5cmUgbG9hZCBjYXBhY2l0aWVzICh0YWJsZSAzKSwgYW5kIHRoZSB2YXJpYXRpb24gb2YgbWF4aW11bSBsb2FkIGNhcGFjaXRpZXMgb2YgdHlyZXMgYWNjb3JkaW5nIHRvIG1heGltdW0gc3BlZWQgb2YgbW90b3JjeWNsZSAodGFibGUgNCkuIFRoaXMgc2Vjb25kIGVkaXRpb24gY2FuY2VscyBhbmQgcmVwbGFjZXMgdGhlIGZpcnN0IGVkaXRpb24gKDE5ODMpLiAiLCJvYmplY3RJRCI6IjEwMDUyXzAiLCJfaGlnaGxpZ2h0UmVzdWx0Ijp7InRpdGxlIjp7InZhbHVlIjoiPGVtPklTTzwvZW0+IDxlbT40PC9lbT4yNDktMjoxOTkwIE1vdG9yY3ljbGUgdHlyZXMgYW5kIHJpbXMgKENvZGUtZGVzaWduYXRlZCBzZXJpZXMpIOKAlCBQYXJ0IDI6IFR5cmUgbG9hZCByYXRpbmdzIiwibWF0Y2hMZXZlbCI6ImZ1bGwiLCJmdWxseUhpZ2hsaWdodGVkIjpmYWxzZSwibWF0Y2hlZFdvcmRzIjpbImlzbyIsIjQiXX0sInRleHQiOnsidmFsdWUiOiJUYWJ1bGF0ZXMgdGhlIGNvcnJlbGF0aW9uIGJldHdlZW4gbG9hZCBpbmRleCBhbmQgdHlyZSBsb2FkLWNhcnJ5aW5nIGNhcGFjaXR5ICh0YWJsZSAxKSwgYmV0d2VlbiBzcGVlZCBzeW1ib2wgYW5kIHNwZWVkIGNhdGVnb3J5ICh0YWJsZSAyKSwgdGhlIG1heGltdW0gdHlyZSBsb2FkIGNhcGFjaXRpZXMgKHRhYmxlIDMpLCBhbmQgdGhlIHZhcmlhdGlvbiBvZiBtYXhpbXVtIGxvYWQgY2FwYWNpdGllcyBvZiB0eXJlcyBhY2NvcmRpbmcgdG8gbWF4aW11bSBzcGVlZCBvZiBtb3RvcmN5Y2xlICh0YWJsZSA8ZW0+NDwvZW0+KS4gVGhpcyBzZWNvbmQgZWRpdGlvbiBjYW5jZWxzIGFuZCByZXBsYWNlcyB0aGUgZmlyc3QgZWRpdGlvbiAoMTk4MykuICIsIm1hdGNoTGV2ZWwiOiJwYXJ0aWFsIiwiZnVsbHlIaWdobGlnaHRlZCI6ZmFsc2UsIm1hdGNoZWRXb3JkcyI6WyI0Il19fX0seyJjYXRlZ29yeSI6InN0YW5kYXJkIiwicGF0aCI6Ii9zaXRlcy9pc29vcmcvY29udGVudHMvZGF0YS9zdGFuZGFyZC8wMC85OC85ODQzIiwidXVpZCI6ImJlMWM5MmYwLWE2ODEtNDQxNS1iOTcyLTBmMTAyZWE3OWQxZiIsInRpdGxlIjoiSVNPIDQxMDI6MTk4NCBFcXVpcG1lbnQgZm9yIGNyb3AgcHJvdGVjdGlvbiDigJQgU3ByYXllcnMg4oCUIENvbm5lY3Rpb24gdGhyZWFkaW5nIiwic3RhdHVzIjoiUHVibGlzaGVkIiwieWVhciI6MjAyMSwib3JkZXIiOjExLCJ0ZXh0IjoiTGF5cyBkb3duIHRoZSBlc3NlbnRpYWwgZGltZW5zaW9ucyBvZiBjb25uZWN0aW9uIHRocmVhZGluZyBmb3Igc3ByYXllcnMgdG8gY292ZXIgZXhpc3RpbmcgYW5kIGZvcmVzZWVhYmxlIG5lZWRzLiBBcHBsaWVzIHRvIHNwcmF5IHRpcHMsIG5venpsZXMsIHByZXNzdXJlIHJlZ3VsYXRvcnMgYW5kIG51dHMgb2Ygc3ByYXllcnMuIFRhYnVsYXRlcyB0aGUgbWV0cmljIHRocmVhZHMgYWNjb3JkaW5nIHRvIElTTyAyNjEgKE0xMiwgTTE4LCBNMjcpLCBhbmQgdGhlIGdhcyBsaXN0IHRocmVhZHMgYWNjb3JkaW5nIHRvIElTTyAyMjgvMSAobm9taW5hbCBzaXplczogMS80LCAzLzgsIDMvNCBpbmNoKS4gIiwib2JqZWN0SUQiOiI5ODQzXzAiLCJfaGlnaGxpZ2h0UmVzdWx0Ijp7InRpdGxlIjp7InZhbHVlIjoiPGVtPklTTzwvZW0+IDxlbT40PC9lbT4xMDI6MTk4NCBFcXVpcG1lbnQgZm9yIGNyb3AgcHJvdGVjdGlvbiDigJQgU3ByYXllcnMg4oCUIENvbm5lY3Rpb24gdGhyZWFkaW5nIiwibWF0Y2hMZXZlbCI6ImZ1bGwiLCJmdWxseUhpZ2hsaWdodGVkIjpmYWxzZSwibWF0Y2hlZFdvcmRzIjpbImlzbyIsIjQiXX0sInRleHQiOnsidmFsdWUiOiJMYXlzIGRvd24gdGhlIGVzc2VudGlhbCBkaW1lbnNpb25zIG9mIGNvbm5lY3Rpb24gdGhyZWFkaW5nIGZvciBzcHJheWVycyB0byBjb3ZlciBleGlzdGluZyBhbmQgZm9yZXNlZWFibGUgbmVlZHMuIEFwcGxpZXMgdG8gc3ByYXkgdGlwcywgbm96emxlcywgcHJlc3N1cmUgcmVndWxhdG9ycyBhbmQgbnV0cyBvZiBzcHJheWVycy4gVGFidWxhdGVzIHRoZSBtZXRyaWMgdGhyZWFkcyBhY2NvcmRpbmcgdG8gPGVtPklTTzwvZW0+IDI2MSAoTTEyLCBNMTgsIE0yNyksIGFuZCB0aGUgZ2FzIGxpc3QgdGhyZWFkcyBhY2NvcmRpbmcgdG8gPGVtPklTTzwvZW0+IDIyOC8xIChub21pbmFsIHNpemVzOiAxLzxlbT40PC9lbT4sIDMvOCwgMy88ZW0+NDwvZW0+IGluY2gpLiAiLCJtYXRjaExldmVsIjoiZnVsbCIsImZ1bGx5SGlnaGxpZ2h0ZWQiOmZhbHNlLCJtYXRjaGVkV29yZHMiOlsiaXNvIiwiNCJdfX19LHsiY2F0ZWdvcnkiOiJzdGFuZGFyZCIsInBhdGgiOiIvc2l0ZXMvaXNvb3JnL2NvbnRlbnRzL2RhdGEvc3RhbmRhcmQvMDcvNzUvNzc1ODQiLCJ1dWlkIjoiMjc1NmRmMjktOGJlNi00YjE0LWFiYTktMWM3NDhkYjg3ZGM2IiwidGl0bGUiOiJJU08gNDU2ODoyMDIxIFNoaXBzIGFuZCBtYXJpbmUgdGVjaG5vbG9neSDigJQgU2VhLWdvaW5nIHZlc3NlbHMg4oCUIFdpbmRsYXNzZXMgYW5kIGFuY2hvciBjYXBzdGFucyIsInN0YXR1cyI6IlB1Ymxpc2hlZCIsInllYXIiOjIwMjEsIm9yZGVyIjoxMSwidGV4dCI6IlRoaXMgZG9jdW1lbnQgc3BlY2lmaWVzIHJlcXVpcmVtZW50cyBmb3IgdGhlIGRlc2lnbiwgY29uc3RydWN0aW9uLCBzYWZldHksIHBlcmZvcm1hbmNlIGFuZCBhY2NlcHRhbmNlIHRlc3Rpbmcgb2Ygd2luZGxhc3NlcyBhbmQgYW5jaG9yIGNhcHN0YW5zLiBUaGlzIGRvY3VtZW50IGlzIGFwcGxpY2FibGUgdG8gd2luZGxhc3NlcyBhbmQgYW5jaG9yIGNhcHN0YW5zIG9mIHNlYS1nb2luZyB2ZXNzZWxzLCB3aGljaCBoYXZlIGFuIGVsZWN0cmljLCBoeWRyYXVsaWMsIHBuZXVtYXRpYyBvciBleHRlcm5hbCBkcml2ZSwgb2YgdGhlIGZvbGxvd2luZyB0eXBlczog4oCUwqDCoMKgIHN5bW1ldHJpY2FsIGRvdWJsZSBjYWJsZS1saWZ0ZXIgd2luZGxhc3NlcyAodHlwZSAxKTsg4oCUwqDCoMKgIHNpbmdsZSBjYWJsZS1saWZ0ZXIgd2luZGxhc3NlcyAodHlwZSAyKTsg4oCUwqDCoMKgIHNpbmdsZSBjYWJsZS1saWZ0ZXIgd2luZGxhc3MgdW5pdHMgKHR5cGVzIDMgYW5kIDQpOyDigJTCoMKgwqAgYW5jaG9yIGNhcHN0YW5zICh0eXBlIDUpOyDigJTCoMKgwqAgZG91YmxlIGNhYmxlLWxpZnRlciB3aW5kbGFzc2VzIHdpdGggY29ubmVjdGluZyBzaGFmdCAodHlwZSA2KS4gRm9yIGNvbWJpbmVkIHdpbmRsYXNzZXMvbW9vcmluZyB3aW5jaGVzLCBJU0/CoDM3MzAgaXMgYXBwbGljYWJsZSBpbiBhZGRpdGlvbiB0byB0aGlzIGRvY3VtZW50LiBOT1RFwqDCoMKgwqDCoMKgIEF0dGVudGlvbiBpcyBkcmF3biB0byB0aGUgcmVxdWlyZW1lbnRzIG9mIHJlbGV2YW50IENsYXNzaWZpY2F0aW9uIFNvY2lldGllcyBvciB0aGUgZ292ZXJubWVudCBvZiB0aGUgc3RhdGUgd2hvc2UgZmxhZyB0aGUgc2hpcCBpcyBlbnRpdGxlZCB0byBmbHkuICIsIm9iamVjdElEIjoiNzc1ODRfMCIsIl9oaWdobGlnaHRSZXN1bHQiOnsidGl0bGUiOnsidmFsdWUiOiI8ZW0+SVNPPC9lbT4gPGVtPjQ8L2VtPjU2ODoyMDIxIFNoaXBzIGFuZCBtYXJpbmUgdGVjaG5vbG9neSDigJQgU2VhLWdvaW5nIHZlc3NlbHMg4oCUIFdpbmRsYXNzZXMgYW5kIGFuY2hvciBjYXBzdGFucyIsIm1hdGNoTGV2ZWwiOiJmdWxsIiwiZnVsbHlIaWdobGlnaHRlZCI6ZmFsc2UsIm1hdGNoZWRXb3JkcyI6WyJpc28iLCI0Il19LCJ0ZXh0Ijp7InZhbHVlIjoiVGhpcyBkb2N1bWVudCBzcGVjaWZpZXMgcmVxdWlyZW1lbnRzIGZvciB0aGUgZGVzaWduLCBjb25zdHJ1Y3Rpb24sIHNhZmV0eSwgcGVyZm9ybWFuY2UgYW5kIGFjY2VwdGFuY2UgdGVzdGluZyBvZiB3aW5kbGFzc2VzIGFuZCBhbmNob3IgY2Fwc3RhbnMuIFRoaXMgZG9jdW1lbnQgaXMgYXBwbGljYWJsZSB0byB3aW5kbGFzc2VzIGFuZCBhbmNob3IgY2Fwc3RhbnMgb2Ygc2VhLWdvaW5nIHZlc3NlbHMsIHdoaWNoIGhhdmUgYW4gZWxlY3RyaWMsIGh5ZHJhdWxpYywgcG5ldW1hdGljIG9yIGV4dGVybmFsIGRyaXZlLCBvZiB0aGUgZm9sbG93aW5nIHR5cGVzOiDigJTCoMKgwqAgc3ltbWV0cmljYWwgZG91YmxlIGNhYmxlLWxpZnRlciB3aW5kbGFzc2VzICh0eXBlIDEpOyDigJTCoMKgwqAgc2luZ2xlIGNhYmxlLWxpZnRlciB3aW5kbGFzc2VzICh0eXBlIDIpOyDigJTCoMKgwqAgc2luZ2xlIGNhYmxlLWxpZnRlciB3aW5kbGFzcyB1bml0cyAodHlwZXMgMyBhbmQgPGVtPjQ8L2VtPik7IOKAlMKgwqDCoCBhbmNob3IgY2Fwc3RhbnMgKHR5cGUgNSk7IOKAlMKgwqDCoCBkb3VibGUgY2FibGUtbGlmdGVyIHdpbmRsYXNzZXMgd2l0aCBjb25uZWN0aW5nIHNoYWZ0ICh0eXBlIDYpLiBGb3IgY29tYmluZWQgd2luZGxhc3Nlcy9tb29yaW5nIHdpbmNoZXMsIDxlbT5JU088L2VtPsKgMzczMCBpcyBhcHBsaWNhYmxlIGluIGFkZGl0aW9uIHRvIHRoaXMgZG9jdW1lbnQuIE5PVEXCoMKgwqDCoMKgwqAgQXR0ZW50aW9uIGlzIGRyYXduIHRvIHRoZSByZXF1aXJlbWVudHMgb2YgcmVsZXZhbnQgQ2xhc3NpZmljYXRpb24gU29jaWV0aWVzIG9yIHRoZSBnb3Zlcm5tZW50IG9mIHRoZSBzdGF0ZSB3aG9zZSBmbGFnIHRoZSBzaGlwIGlzIGVudGl0bGVkIHRvIGZseS4gIiwibWF0Y2hMZXZlbCI6ImZ1bGwiLCJmdWxseUhpZ2hsaWdodGVkIjpmYWxzZSwibWF0Y2hlZFdvcmRzIjpbImlzbyIsIjQiXX19fSx7ImNhdGVnb3J5Ijoic3RhbmRhcmQiLCJwYXRoIjoiL3NpdGVzL2lzb29yZy9jb250ZW50cy9kYXRhL3N0YW5kYXJkLzA3LzYxLzc2MTAyIiwidXVpZCI6IjNjMDgxZjY1LWJiYTUtNDIxZS1hOGIzLTI4ZWM3YzVhNjA3MyIsInRpdGxlIjoiSVNPIDQyNTktNDoyMDIxIFBldHJvbGV1bSBhbmQgcmVsYXRlZCBwcm9kdWN0cyDigJQgUHJlY2lzaW9uIG9mIG1lYXN1cmVtZW50IG1ldGhvZHMgYW5kIHJlc3VsdHMg4oCUIFBhcnQgNDogVXNlIG9mIHN0YXRpc3RpY2FsIGNvbnRyb2wgY2hhcnRzIHRvIHZhbGlkYXRlICdpbi1zdGF0aXN0aWNhbC1jb250cm9sJyBzdGF0dXMgZm9yIHRoZSBleGVjdXRpb24gb2YgYSBzdGFuZGFyZCB0ZXN0IG1ldGhvZCBpbiBhIHNpbmdsZSBsYWJvcmF0b3J5Iiwic3RhdHVzIjoiUHVibGlzaGVkIiwieWVhciI6MjAyMSwib3JkZXIiOjExLCJ0ZXh0IjoiVGhpcyBkb2N1bWVudCBzcGVjaWZpZXMgdGhlIHByb2Nlc3MgYW5kIG1ldGhvZG9sb2d5IGZvciB0aGUgY29uc3RydWN0aW9uLCBvcGVyYXRpb24sIGFuZCBtYWludGVuYW5jZSBvZiBzdGF0aXN0aWNhbCBjb250cm9sIGNoYXJ0cyB0byBhc3Nlc3MgaWYgYSBsYWJvcmF0b3J5J3MgZXhlY3V0aW9uIG9mIGEgc3RhbmRhcmQgdGVzdCBtZXRob2QgaXMgaW4tc3RhdGlzdGljYWwtY29udHJvbCBhbmQgaG93IHRvIGVzdGFibGlzaCBhbmQgdmFsaWRhdGUgdGhlICdpbi1zdGF0aXN0aWNhbC1jb250cm9sJyBzdGF0dXMuIEl0IHNwZWNpZmllcyBjb250cm9sIGNoYXJ0cyB0aGF0IGFyZSBtb3N0IGFwcHJvcHJpYXRlIGZvciBJU08vVEPCoDI4IHRlc3QgbWV0aG9kcyB3aGVyZSB0aGUgZG9taW5hbnQgY29tbW9uIGNhdXNlIHZhcmlhdGlvbiBpcyBhc3NvY2lhdGVkIHdpdGggdGhlIGxvbmcgdGVybSwgbXVsdGlwbGUgb3BlcmF0b3IgY29uZGl0aW9ucy4gVGhlIGNvbnRyb2wgY2hhcnRzIHNwZWNpZmllZCBmb3IgZGV0ZXJtaW5hdGlvbiBvZiBpbi1zdGF0aXN0aWNhbC1jb250cm9sIGFyZTogaW5kaXZpZHVhbCAoSSksIG1vdmluZyByYW5nZSBvZiAyIChNUiAyICksIGFuZCBlaXRoZXIgdGhlIGV4cG9uZW50aWFsbHkgd2VpZ2h0ZWQgbW92aW5nIGF2ZXJhZ2UgKEVXTUEpIG9yIHpvbmUtYmFzZWQgcnVuIHJ1bGVzIFtzaW1pbGFyIHRvIFdlc3Rlcm4gRWxlY3RyaWMgKFdFKSBydW4gcnVsZXMgWyAzIF0gXSBhcyBzZW5zaXRpdml0eSBlbmhhbmNlbWVudCBzdHJhdGVneSB0byBzdXBwb3J0IHRoZSBJLWNoYXJ0LiBUaGUgcHJvY2VkdXJlcyBpbiB0aGlzIGRvY3VtZW50IGhhdmUgYmVlbiBwcmltYXJpbHkgZGVzaWduZWQgZm9yIG51bWVyaWNhbCByZXN1bHRzIG9idGFpbmVkIGZyb20gdGVzdGluZyBvZiBjb250cm9sIHNhbXBsZXMgcHJlcGFyZWQgZnJvbSBhIGhvbW9nZW5vdXMgc291cmNlIG9mIHBldHJvbGV1bSBhbmQgcmVsYXRlZCBwcm9kdWN0cyBpbiBhIG1hbm5lciB0aGF0IHByZXNlcnZlcyB0aGUgaG9tb2dlbmVpdHkgb2YgcHJvcGVydGllcyBvZiBpbnRlcmVzdCBiZXR3ZWVuIGNvbnRyb2wgc2FtcGxlcy4gSWYgdGhlIHRlc3QgbWV0aG9kIHBlcm1pdHMsIGEgY2VydGlmaWVkIHJlZmVyZW5jZSBtYXRlcmlhbCAoQ1JNKSBzYW1wbGUgaXMgdXNlZCBhcyBhIGNvbnRyb2wgc2FtcGxlIHByb3ZpZGVkIHRoZSBzYW1wbGUgY29tcG9zaXRpb24gaXMgcmVwcmVzZW50YXRpdmUgb2YgdGhlIG1hdGVyaWFsIGJlaW5nIHRlc3RlZCBhbmQgaXMgbm90IGEgcHVyZSBjb21wb3VuZDsgaWYgdGhpcyBpcyBkb25lIHRoZW4gdGhlIGxhYm9yYXRvcnkgYmVzdCBlc3RhYmxpc2hlcyBpdHMgb3duIG1lYW4gZm9yIHRoZSBDUk0gc2FtcGxlLiBUaGlzIGRvY3VtZW50IGlzIGFwcGxpY2FibGUgdG8gcHJvcGVydGllcyBvZiBpbnRlcmVzdCB0aGF0IGFyZSAoa25vd24gdG8gYmUpIHN0YWJsZSBvdmVyIHRpbWUsIGFuZCBmb3IgZGF0YSBzZXRzIHdpdGggc3VmZmljaWVudCByZXNvbHV0aW9uIHRvIHN1cHBvcnQgdmFsaWRhdGlvbiBvZiB0aGUgYXNzdW1wdGlvbiB0aGF0IHRoZSBkYXRhIGRpc3RyaWJ1dGlvbiBjYW4gYmUgYXBwcm94aW1hdGVseSByZXByZXNlbnRlZCBieSB0aGUgbm9ybWFsIChHYXVzc2lhbikgbW9kZWwuIE1pdGlnYXRpbmcgc3RyYXRlZ2llcyBhcmUgc3VnZ2VzdGVkIGZvciBzaXR1YXRpb25zIHdoZXJlIHRoZSBhc3N1bXB0aW9uIGNhbm5vdCBiZSB2YWxpZGF0ZWQuICIsIm9iamVjdElEIjoiNzYxMDJfMCIsIl9oaWdobGlnaHRSZXN1bHQiOnsidGl0bGUiOnsidmFsdWUiOiI8ZW0+SVNPPC9lbT4gPGVtPjQ8L2VtPjI1OS08ZW0+NDwvZW0+OjIwMjEgUGV0cm9sZXVtIGFuZCByZWxhdGVkIHByb2R1Y3RzIOKAlCBQcmVjaXNpb24gb2YgbWVhc3VyZW1lbnQgbWV0aG9kcyBhbmQgcmVzdWx0cyDigJQgUGFydCA8ZW0+NDwvZW0+OiBVc2Ugb2Ygc3RhdGlzdGljYWwgY29udHJvbCBjaGFydHMgdG8gdmFsaWRhdGUgJ2luLXN0YXRpc3RpY2FsLWNvbnRyb2wnIHN0YXR1cyBmb3IgdGhlIGV4ZWN1dGlvbiBvZiBhIHN0YW5kYXJkIHRlc3QgbWV0aG9kIGluIGEgc2luZ2xlIGxhYm9yYXRvcnkiLCJtYXRjaExldmVsIjoiZnVsbCIsImZ1bGx5SGlnaGxpZ2h0ZWQiOmZhbHNlLCJtYXRjaGVkV29yZHMiOlsiaXNvIiwiNCJdfSwidGV4dCI6eyJ2YWx1ZSI6IlRoaXMgZG9jdW1lbnQgc3BlY2lmaWVzIHRoZSBwcm9jZXNzIGFuZCBtZXRob2RvbG9neSBmb3IgdGhlIGNvbnN0cnVjdGlvbiwgb3BlcmF0aW9uLCBhbmQgbWFpbnRlbmFuY2Ugb2Ygc3RhdGlzdGljYWwgY29udHJvbCBjaGFydHMgdG8gYXNzZXNzIGlmIGEgbGFib3JhdG9yeSdzIGV4ZWN1dGlvbiBvZiBhIHN0YW5kYXJkIHRlc3QgbWV0aG9kIGlzIGluLXN0YXRpc3RpY2FsLWNvbnRyb2wgYW5kIGhvdyB0byBlc3RhYmxpc2ggYW5kIHZhbGlkYXRlIHRoZSAnaW4tc3RhdGlzdGljYWwtY29udHJvbCcgc3RhdHVzLiBJdCBzcGVjaWZpZXMgY29udHJvbCBjaGFydHMgdGhhdCBhcmUgbW9zdCBhcHByb3ByaWF0ZSBmb3IgPGVtPklTTzwvZW0+L1RDwqAyOCB0ZXN0IG1ldGhvZHMgd2hlcmUgdGhlIGRvbWluYW50IGNvbW1vbiBjYXVzZSB2YXJpYXRpb24gaXMgYXNzb2NpYXRlZCB3aXRoIHRoZSBsb25nIHRlcm0sIG11bHRpcGxlIG9wZXJhdG9yIGNvbmRpdGlvbnMuIFRoZSBjb250cm9sIGNoYXJ0cyBzcGVjaWZpZWQgZm9yIGRldGVybWluYXRpb24gb2YgaW4tc3RhdGlzdGljYWwtY29udHJvbCBhcmU6IGluZGl2aWR1YWwgKEkpLCBtb3ZpbmcgcmFuZ2Ugb2YgMiAoTVIgMiApLCBhbmQgZWl0aGVyIHRoZSBleHBvbmVudGlhbGx5IHdlaWdodGVkIG1vdmluZyBhdmVyYWdlIChFV01BKSBvciB6b25lLWJhc2VkIHJ1biBydWxlcyBbc2ltaWxhciB0byBXZXN0ZXJuIEVsZWN0cmljIChXRSkgcnVuIHJ1bGVzIFsgMyBdIF0gYXMgc2Vuc2l0aXZpdHkgZW5oYW5jZW1lbnQgc3RyYXRlZ3kgdG8gc3VwcG9ydCB0aGUgSS1jaGFydC4gVGhlIHByb2NlZHVyZXMgaW4gdGhpcyBkb2N1bWVudCBoYXZlIGJlZW4gcHJpbWFyaWx5IGRlc2lnbmVkIGZvciBudW1lcmljYWwgcmVzdWx0cyBvYnRhaW5lZCBmcm9tIHRlc3Rpbmcgb2YgY29udHJvbCBzYW1wbGVzIHByZXBhcmVkIGZyb20gYSBob21vZ2Vub3VzIHNvdXJjZSBvZiBwZXRyb2xldW0gYW5kIHJlbGF0ZWQgcHJvZHVjdHMgaW4gYSBtYW5uZXIgdGhhdCBwcmVzZXJ2ZXMgdGhlIGhvbW9nZW5laXR5IG9mIHByb3BlcnRpZXMgb2YgaW50ZXJlc3QgYmV0d2VlbiBjb250cm9sIHNhbXBsZXMuIElmIHRoZSB0ZXN0IG1ldGhvZCBwZXJtaXRzLCBhIGNlcnRpZmllZCByZWZlcmVuY2UgbWF0ZXJpYWwgKENSTSkgc2FtcGxlIGlzIHVzZWQgYXMgYSBjb250cm9sIHNhbXBsZSBwcm92aWRlZCB0aGUgc2FtcGxlIGNvbXBvc2l0aW9uIGlzIHJlcHJlc2VudGF0aXZlIG9mIHRoZSBtYXRlcmlhbCBiZWluZyB0ZXN0ZWQgYW5kIGlzIG5vdCBhIHB1cmUgY29tcG91bmQ7IGlmIHRoaXMgaXMgZG9uZSB0aGVuIHRoZSBsYWJvcmF0b3J5IGJlc3QgZXN0YWJsaXNoZXMgaXRzIG93biBtZWFuIGZvciB0aGUgQ1JNIHNhbXBsZS4gVGhpcyBkb2N1bWVudCBpcyBhcHBsaWNhYmxlIHRvIHByb3BlcnRpZXMgb2YgaW50ZXJlc3QgdGhhdCBhcmUgKGtub3duIHRvIGJlKSBzdGFibGUgb3ZlciB0aW1lLCBhbmQgZm9yIGRhdGEgc2V0cyB3aXRoIHN1ZmZpY2llbnQgcmVzb2x1dGlvbiB0byBzdXBwb3J0IHZhbGlkYXRpb24gb2YgdGhlIGFzc3VtcHRpb24gdGhhdCB0aGUgZGF0YSBkaXN0cmlidXRpb24gY2FuIGJlIGFwcHJveGltYXRlbHkgcmVwcmVzZW50ZWQgYnkgdGhlIG5vcm1hbCAoR2F1c3NpYW4pIG1vZGVsLiBNaXRpZ2F0aW5nIHN0cmF0ZWdpZXMgYXJlIHN1Z2dlc3RlZCBmb3Igc2l0dWF0aW9ucyB3aGVyZSB0aGUgYXNzdW1wdGlvbiBjYW5ub3QgYmUgdmFsaWRhdGVkLiAiLCJtYXRjaExldmVsIjoicGFydGlhbCIsImZ1bGx5SGlnaGxpZ2h0ZWQiOmZhbHNlLCJtYXRjaGVkV29yZHMiOlsiaXNvIl19fX0seyJjYXRlZ29yeSI6InN0YW5kYXJkIiwicGF0aCI6Ii9zaXRlcy9pc29vcmcvY29udGVudHMvZGF0YS9zdGFuZGFyZC8wNy81Mi83NTIxNSIsInV1aWQiOiJkOTdmMWE5ZC05MmYzLTQ5MDMtYTc0Ny1lMTY1ODZjOTA1ZmIiLCJ0aXRsZSI6IklTTyA0NTg5LTQ6MjAyMSBQbGFzdGljcyDigJQgRGV0ZXJtaW5hdGlvbiBvZiBidXJuaW5nIGJlaGF2aW91ciBieSBveHlnZW4gaW5kZXgg4oCUIFBhcnQgNDogSGlnaCBnYXMgdmVsb2NpdHkgdGVzdCIsInN0YXR1cyI6IlB1Ymxpc2hlZCIsInllYXIiOjIwMjEsIm9yZGVyIjoxMSwidGV4dCI6IlRoaXMgZG9jdW1lbnQgc3BlY2lmaWVzIGEgdGVzdCBtZXRob2QgZm9yIGRldGVybWluaW5nIHRoZSBtaW5pbXVtIHZvbHVtZSBmcmFjdGlvbiBvZiBveHlnZW4sIGluIGFkbWl4dHVyZSB3aXRoIG5pdHJvZ2VuLCBhdCBhbWJpZW50IHRlbXBlcmF0dXJlLCB0aGF0IHN1cHBvcnRzIGNvbWJ1c3Rpb24gb2Ygc21hbGwgdmVydGljYWwgc2hlZXQgdGVzdCBzcGVjaW1lbiB1bmRlciBhIHNwZWNpZmllZCBnYXMgdmVsb2NpdHkgdGhhdCBpcyBoaWdoZXIgdGhhbiB0aGF0IHNwZWNpZmllZCBpbiBJU0/CoDQ1ODktMi4gTk9URcKgwqDCoMKgwqDCoMKgwqDCoMKgwqAgVGhlIHJlc3VsdCBpcyBleHByZXNzZWQgYXMgYSBoaWdoIGdhcyB2ZWxvY2l0eSBveHlnZW4gaW5kZXggKEhPSSkuIEluIGFkZGl0aW9uLCB0aGlzIGRvY3VtZW50IHNwZWNpZmllcyB0aGUgdGVzdGluZyBhcHBhcmF0dXMgZm9yIGRldGVybWluaW5nIHRoZSBIT0kuIFRoZSB0ZXN0IG1ldGhvZCBpcyBhcHBsaWNhYmxlIHRvIG1hdGVyaWFscyBpbiB0aGUgZm9ybSBvZiBzaGVldHMgdXAgdG8gMsKgbW0gdGhpY2suIEl0IGlzIGFsc28gYXBwbGljYWJsZSB0byBmbGV4aWJsZSBzaGVldCBtYXRlcmlhbHMgdGhhdCBhcmUgc3VwcG9ydGVkIHZlcnRpY2FsbHkgYnkgYSBzcGVjaWZpZWQgc3BlY2ltZW4gaG9sZGVyLiAiLCJvYmplY3RJRCI6Ijc1MjE1XzAiLCJfaGlnaGxpZ2h0UmVzdWx0Ijp7InRpdGxlIjp7InZhbHVlIjoiPGVtPklTTzwvZW0+IDxlbT40PC9lbT41ODktPGVtPjQ8L2VtPjoyMDIxIFBsYXN0aWNzIOKAlCBEZXRlcm1pbmF0aW9uIG9mIGJ1cm5pbmcgYmVoYXZpb3VyIGJ5IG94eWdlbiBpbmRleCDigJQgUGFydCA8ZW0+NDwvZW0+OiBIaWdoIGdhcyB2ZWxvY2l0eSB0ZXN0IiwibWF0Y2hMZXZlbCI6ImZ1bGwiLCJmdWxseUhpZ2hsaWdodGVkIjpmYWxzZSwibWF0Y2hlZFdvcmRzIjpbImlzbyIsIjQiXX0sInRleHQiOnsidmFsdWUiOiJUaGlzIGRvY3VtZW50IHNwZWNpZmllcyBhIHRlc3QgbWV0aG9kIGZvciBkZXRlcm1pbmluZyB0aGUgbWluaW11bSB2b2x1bWUgZnJhY3Rpb24gb2Ygb3h5Z2VuLCBpbiBhZG1peHR1cmUgd2l0aCBuaXRyb2dlbiwgYXQgYW1iaWVudCB0ZW1wZXJhdHVyZSwgdGhhdCBzdXBwb3J0cyBjb21idXN0aW9uIG9mIHNtYWxsIHZlcnRpY2FsIHNoZWV0IHRlc3Qgc3BlY2ltZW4gdW5kZXIgYSBzcGVjaWZpZWQgZ2FzIHZlbG9jaXR5IHRoYXQgaXMgaGlnaGVyIHRoYW4gdGhhdCBzcGVjaWZpZWQgaW4gPGVtPklTTzwvZW0+wqA8ZW0+NDwvZW0+NTg5LTIuIE5PVEXCoMKgwqDCoMKgwqDCoMKgwqDCoMKgIFRoZSByZXN1bHQgaXMgZXhwcmVzc2VkIGFzIGEgaGlnaCBnYXMgdmVsb2NpdHkgb3h5Z2VuIGluZGV4IChIT0kpLiBJbiBhZGRpdGlvbiwgdGhpcyBkb2N1bWVudCBzcGVjaWZpZXMgdGhlIHRlc3RpbmcgYXBwYXJhdHVzIGZvciBkZXRlcm1pbmluZyB0aGUgSE9JLiBUaGUgdGVzdCBtZXRob2QgaXMgYXBwbGljYWJsZSB0byBtYXRlcmlhbHMgaW4gdGhlIGZvcm0gb2Ygc2hlZXRzIHVwIHRvIDLCoG1tIHRoaWNrLiBJdCBpcyBhbHNvIGFwcGxpY2FibGUgdG8gZmxleGlibGUgc2hlZXQgbWF0ZXJpYWxzIHRoYXQgYXJlIHN1cHBvcnRlZCB2ZXJ0aWNhbGx5IGJ5IGEgc3BlY2lmaWVkIHNwZWNpbWVuIGhvbGRlci4gIiwibWF0Y2hMZXZlbCI6ImZ1bGwiLCJmdWxseUhpZ2hsaWdodGVkIjpmYWxzZSwibWF0Y2hlZFdvcmRzIjpbImlzbyIsIjQiXX19fSx7ImNhdGVnb3J5Ijoic3RhbmRhcmQiLCJwYXRoIjoiL3NpdGVzL2lzb29yZy9jb250ZW50cy9kYXRhL3N0YW5kYXJkLzA3LzQ5Lzc0OTI3IiwidXVpZCI6IjM2Nzg0NjRiLWQ4MzYtNGZiYS04NzY0LTg1YTQ3Y2VkMmQzOSIsInRpdGxlIjoiSVNPIDQ4MDM6MjAyMSBMYWJvcmF0b3J5IGdsYXNzd2FyZSDigJQgQm9yb3NpbGljYXRlIGdsYXNzIHR1YmluZyIsInN0YXR1cyI6IlB1Ymxpc2hlZCIsInllYXIiOjIwMjEsIm9yZGVyIjoxMSwidGV4dCI6IlRoaXMgZG9jdW1lbnQgc3BlY2lmaWVzIHJlcXVpcmVtZW50cyBmb3IgYm9yb3NpbGljYXRlwqAzLDMgZ2xhc3MgdHViaW5nIGFjY29yZGluZyB0byBJU0/CoDM1ODUgZm9yIGxhYm9yYXRvcnkgYXBwYXJhdHVzIGluIGFuIG91dGVyIGRpYW1ldGVyIHJhbmdlIGZyb20gNMKgbW0gdG8gMzAwwqBtbS4gVGhpcyBkb2N1bWVudCBkZWZpbmVzIGRpbWVuc2lvbnMsIG1hdGVyaWFsLCBkZW5vbWluYXRpb24sIGRlc2lnbmF0aW9uLCByZXF1aXJlbWVudHMgYW5kIGluc3BlY3Rpb24gbWV0aG9kcy4gIiwib2JqZWN0SUQiOiI3NDkyN18wIiwiX2hpZ2hsaWdodFJlc3VsdCI6eyJ0aXRsZSI6eyJ2YWx1ZSI6IjxlbT5JU088L2VtPiA8ZW0+NDwvZW0+ODAzOjIwMjEgTGFib3JhdG9yeSBnbGFzc3dhcmUg4oCUIEJvcm9zaWxpY2F0ZSBnbGFzcyB0dWJpbmciLCJtYXRjaExldmVsIjoiZnVsbCIsImZ1bGx5SGlnaGxpZ2h0ZWQiOmZhbHNlLCJtYXRjaGVkV29yZHMiOlsiaXNvIiwiNCJdfSwidGV4dCI6eyJ2YWx1ZSI6IlRoaXMgZG9jdW1lbnQgc3BlY2lmaWVzIHJlcXVpcmVtZW50cyBmb3IgYm9yb3NpbGljYXRlwqAzLDMgZ2xhc3MgdHViaW5nIGFjY29yZGluZyB0byA8ZW0+SVNPPC9lbT7CoDM1ODUgZm9yIGxhYm9yYXRvcnkgYXBwYXJhdHVzIGluIGFuIG91dGVyIGRpYW1ldGVyIHJhbmdlIGZyb20gPGVtPjQ8L2VtPsKgbW0gdG8gMzAwwqBtbS4gVGhpcyBkb2N1bWVudCBkZWZpbmVzIGRpbWVuc2lvbnMsIG1hdGVyaWFsLCBkZW5vbWluYXRpb24sIGRlc2lnbmF0aW9uLCByZXF1aXJlbWVudHMgYW5kIGluc3BlY3Rpb24gbWV0aG9kcy4gIiwibWF0Y2hMZXZlbCI6ImZ1bGwiLCJmdWxseUhpZ2hsaWdodGVkIjpmYWxzZSwibWF0Y2hlZFdvcmRzIjpbImlzbyIsIjQiXX19fSx7ImNhdGVnb3J5Ijoic3RhbmRhcmQiLCJwYXRoIjoiL3NpdGVzL2lzb29yZy9jb250ZW50cy9kYXRhL3N0YW5kYXJkLzA3LzQ5Lzc0OTE0IiwidXVpZCI6IjE3ODY1OWE4LTJjZDQtNDg1ZC05MWUxLTY0N2M4MTAxOTI3OCIsInRpdGxlIjoiSVNPIDQ3Nzk6MjAyMSBDaGFpbiBjb21wb25lbnRzIGZvciBsaWZ0aW5nIHB1cnBvc2VzIOKAlCBGb3JnZWQgZXllIGhvb2sgd2l0aCBwb2ludCBhbmQgbGF0Y2gg4oCUIEdyYWRlIDQsIHN0YWlubGVzcyBzdGVlbCwgc29sdXRpb24gYW5uZWFsZWQiLCJzdGF0dXMiOiJQdWJsaXNoZWQiLCJ5ZWFyIjoyMDIxLCJvcmRlciI6MTEsInRleHQiOiJUaGlzIGRvY3VtZW50IHNwZWNpZmllcyB0aGUgcmVxdWlyZW1lbnRzIGZvciBmb3JnZWQgZXllIGhvb2tzIHdpdGggcG9pbnQgYW5kIGxhdGNoIG9mIGdyYWRlIDQgZnJvbSBzdGFpbmxlc3Mgc3RlZWwgYW5kIHNvbHV0aW9uIGFubmVhbGVkIGZvciB1c2UgcHJlZmVyYWJseSBhcyBhIGNvbXBvbmVudCBpbiBjaGFpbiBzbGluZ3Mgb2Ygd2VsZGVkIGNvbnN0cnVjdGlvbiBvZiBncmFkZSA0IGZyb20gc3RhaW5sZXNzIHN0ZWVsIGFuZCBzb2x1dGlvbiBhbm5lYWxlZC4gSU1QT1JUQU5UwqDigJQgRm9yIG90aGVyIGFwcGxpY2F0aW9ucywgZS5nLiBzdGVlbCB3aXJlIHJvcGUgc2xpbmdzIG9yIHRleHRpbGUgc2xpbmdzLCBpdCBpcyBpbXBvcnRhbnQgdGhhdCB0aGUgaG9vayBkZXNpZ24gaXMgY2hlY2tlZCB0byBlbnN1cmUgaXRzIGZpdG5lc3MgZm9yIGEgc2FmZSB1c2UuIE5PVEXCoDHCoMKgwqAgVGhlIGdyYWRlIGZvciB0aGUgaG9vayBhY2NvcmRpbmcgdG8gdGhpcyBkb2N1bWVudCBpcyB0YWtlbiBmcm9tIHRoZSBncmFkZSBvZiB0aGUgc2xpbmcgY2hhaW4gYWNjb3JkaW5nIHRvIElTT8KgMTgzNS4gQm90aCAoc2xpbmcgY2hhaW5zIGFuZCBob29rcykgaGF2ZSBpZGVudGljYWwgc2NvcGVzIGFuZCB2YWx1ZXMgZm9yIHRoZSB3b3JraW5nIGxvYWQgbGltaXQsIFdMTCAsIGFjY29yZGluZyB0byBUYWJsZcKgMiBhbmQgdmFsdWVzIGZvciB0aGUgbWVjaGFuaWNhbCByZXF1aXJlbWVudHMgYWNjb3JkaW5nIHRvIFRhYmxlwqAzLiBUaHVzLCB0aGUgZGlyZWN0IGNvcnJlbGF0aW9uIG9mIGhvb2tzIHRvIHRoZSBzbGluZyBjaGFpbiBpcyBnaXZlbiBieSB0aGUgV0xMIGFuZCBlc3BlY2lhbGx5IHRoZSBjb2RlIHN5c3RlbSBvbiB0aGUgcHJvZHVjdCBib2R5IGl0c2VsZi4gVGhlIGdyYWRlIG9mIHRoZSBob29rIGRvZXMgbm90IGRlZmluZSBhbnkgdmFsdWVzIG9mIHRoZSB0ZW5zaWxlIHN0cmVuZ3RoIG9mIHRoZSBob29rIG1hdGVyaWFsLiBGb3IgZnVydGhlciBpbmZvcm1hdGlvbiwgc2VlIEFubmV4wqBCLiBUaGUgcmFuZ2Ugb2YgdGhlIG5vbWluYWwgZGlhbWV0ZXIsIGQgbiAsIG9mIHRoZSBhc3NvY2lhdGVkIHNsaW5nIGNoYWluIGFjY29yZGluZyB0byBJU0/CoDE4MzUgaXMgZnJvbSA0wqBtbSB0byAyMsKgbW0uIEhvb2tzIGFjY29yZGluZyB0byB0aGlzIGRvY3VtZW50IGFyZSBmb3IgdXNlIGluIHRoZSB0ZW1wZXJhdHVyZSByYW5nZSDigJMxMDDCoMKwQyB0byArNDAwwqDCsEMuIFRoZXNlIGhvb2tzIGFyZSBzb2x1dGlvbiBhbm5lYWxlZCBpbiB0aGUgZmluaXNoZWQgY29uZGl0aW9uIGFuZCBjYW4gdGhlcmVmb3JlIGJlIHVzZWQgd2l0aG91dCByZXN0cmljdGlvbnMgd2l0aCByZWdhcmQgdG8gdGhlIGNvcnJvc2lvbiByZXNpc3RhbmNlIG9mIHRoZSBzdGVlbHMgYWNjb3JkaW5nIHRvwqA1LjEuIE5PVEXCoDLCoMKgwqAgVGhlIHRlcm0g4oCcZXllIGhvb2sgd2l0aCBwb2ludCBhbmQgbGF0Y2jigJ0gaXMgdGFrZW4gZnJvbSBJU0/CoDE4Mzc6MjAwMywgRmlndXJlwqA1LiAiLCJvYmplY3RJRCI6Ijc0OTE0XzAiLCJfaGlnaGxpZ2h0UmVzdWx0Ijp7InRpdGxlIjp7InZhbHVlIjoiPGVtPklTTzwvZW0+IDxlbT40PC9lbT43Nzk6MjAyMSBDaGFpbiBjb21wb25lbnRzIGZvciBsaWZ0aW5nIHB1cnBvc2VzIOKAlCBGb3JnZWQgZXllIGhvb2sgd2l0aCBwb2ludCBhbmQgbGF0Y2gg4oCUIEdyYWRlIDxlbT40PC9lbT4sIHN0YWlubGVzcyBzdGVlbCwgc29sdXRpb24gYW5uZWFsZWQiLCJtYXRjaExldmVsIjoiZnVsbCIsImZ1bGx5SGlnaGxpZ2h0ZWQiOmZhbHNlLCJtYXRjaGVkV29yZHMiOlsiaXNvIiwiNCJdfSwidGV4dCI6eyJ2YWx1ZSI6IlRoaXMgZG9jdW1lbnQgc3BlY2lmaWVzIHRoZSByZXF1aXJlbWVudHMgZm9yIGZvcmdlZCBleWUgaG9va3Mgd2l0aCBwb2ludCBhbmQgbGF0Y2ggb2YgZ3JhZGUgPGVtPjQ8L2VtPiBmcm9tIHN0YWlubGVzcyBzdGVlbCBhbmQgc29sdXRpb24gYW5uZWFsZWQgZm9yIHVzZSBwcmVmZXJhYmx5IGFzIGEgY29tcG9uZW50IGluIGNoYWluIHNsaW5ncyBvZiB3ZWxkZWQgY29uc3RydWN0aW9uIG9mIGdyYWRlIDxlbT40PC9lbT4gZnJvbSBzdGFpbmxlc3Mgc3RlZWwgYW5kIHNvbHV0aW9uIGFubmVhbGVkLiBJTVBPUlRBTlTCoOKAlCBGb3Igb3RoZXIgYXBwbGljYXRpb25zLCBlLmcuIHN0ZWVsIHdpcmUgcm9wZSBzbGluZ3Mgb3IgdGV4dGlsZSBzbGluZ3MsIGl0IGlzIGltcG9ydGFudCB0aGF0IHRoZSBob29rIGRlc2lnbiBpcyBjaGVja2VkIHRvIGVuc3VyZSBpdHMgZml0bmVzcyBmb3IgYSBzYWZlIHVzZS4gTk9URcKgMcKgwqDCoCBUaGUgZ3JhZGUgZm9yIHRoZSBob29rIGFjY29yZGluZyB0byB0aGlzIGRvY3VtZW50IGlzIHRha2VuIGZyb20gdGhlIGdyYWRlIG9mIHRoZSBzbGluZyBjaGFpbiBhY2NvcmRpbmcgdG8gPGVtPklTTzwvZW0+wqAxODM1LiBCb3RoIChzbGluZyBjaGFpbnMgYW5kIGhvb2tzKSBoYXZlIGlkZW50aWNhbCBzY29wZXMgYW5kIHZhbHVlcyBmb3IgdGhlIHdvcmtpbmcgbG9hZCBsaW1pdCwgV0xMICwgYWNjb3JkaW5nIHRvIFRhYmxlwqAyIGFuZCB2YWx1ZXMgZm9yIHRoZSBtZWNoYW5pY2FsIHJlcXVpcmVtZW50cyBhY2NvcmRpbmcgdG8gVGFibGXCoDMuIFRodXMsIHRoZSBkaXJlY3QgY29ycmVsYXRpb24gb2YgaG9va3MgdG8gdGhlIHNsaW5nIGNoYWluIGlzIGdpdmVuIGJ5IHRoZSBXTEwgYW5kIGVzcGVjaWFsbHkgdGhlIGNvZGUgc3lzdGVtIG9uIHRoZSBwcm9kdWN0IGJvZHkgaXRzZWxmLiBUaGUgZ3JhZGUgb2YgdGhlIGhvb2sgZG9lcyBub3QgZGVmaW5lIGFueSB2YWx1ZXMgb2YgdGhlIHRlbnNpbGUgc3RyZW5ndGggb2YgdGhlIGhvb2sgbWF0ZXJpYWwuIEZvciBmdXJ0aGVyIGluZm9ybWF0aW9uLCBzZWUgQW5uZXjCoEIuIFRoZSByYW5nZSBvZiB0aGUgbm9taW5hbCBkaWFtZXRlciwgZCBuICwgb2YgdGhlIGFzc29jaWF0ZWQgc2xpbmcgY2hhaW4gYWNjb3JkaW5nIHRvIDxlbT5JU088L2VtPsKgMTgzNSBpcyBmcm9tIDxlbT40PC9lbT7CoG1tIHRvIDIywqBtbS4gSG9va3MgYWNjb3JkaW5nIHRvIHRoaXMgZG9jdW1lbnQgYXJlIGZvciB1c2UgaW4gdGhlIHRlbXBlcmF0dXJlIHJhbmdlIOKAkzEwMMKgwrBDIHRvICs8ZW0+NDwvZW0+MDDCoMKwQy4gVGhlc2UgaG9va3MgYXJlIHNvbHV0aW9uIGFubmVhbGVkIGluIHRoZSBmaW5pc2hlZCBjb25kaXRpb24gYW5kIGNhbiB0aGVyZWZvcmUgYmUgdXNlZCB3aXRob3V0IHJlc3RyaWN0aW9ucyB3aXRoIHJlZ2FyZCB0byB0aGUgY29ycm9zaW9uIHJlc2lzdGFuY2Ugb2YgdGhlIHN0ZWVscyBhY2NvcmRpbmcgdG/CoDUuMS4gTk9URcKgMsKgwqDCoCBUaGUgdGVybSDigJxleWUgaG9vayB3aXRoIHBvaW50IGFuZCBsYXRjaOKAnSBpcyB0YWtlbiBmcm9tIDxlbT5JU088L2VtPsKgMTgzNzoyMDAzLCBGaWd1cmXCoDUuICIsIm1hdGNoTGV2ZWwiOiJmdWxsIiwiZnVsbHlIaWdobGlnaHRlZCI6ZmFsc2UsIm1hdGNoZWRXb3JkcyI6WyJpc28iLCI0Il19fX0seyJjYXRlZ29yeSI6InN0YW5kYXJkIiwicGF0aCI6Ii9zaXRlcy9pc29vcmcvY29udGVudHMvZGF0YS9zdGFuZGFyZC8wNi85OC82OTgzMyIsInV1aWQiOiI3ZTdkMDAxNS03YzQxLTQ0ZDAtYTFkMi05MjA1ZTc1ODQyYWQiLCJ0aXRsZSI6IklTTyA0MDQ2LTQ6MjAxNiBQYXBlciwgYm9hcmQsIHB1bHBzIGFuZCByZWxhdGVkIHRlcm1zIOKAlCBWb2NhYnVsYXJ5IOKAlCBQYXJ0IDQ6IFBhcGVyIGFuZCBib2FyZCBncmFkZXMgYW5kIGNvbnZlcnRlZCBwcm9kdWN0cyIsInN0YXR1cyI6IlB1Ymxpc2hlZCIsInllYXIiOjIwMjEsIm9yZGVyIjoxMSwidGV4dCI6IklTTyA0MDQ2LTQ6MjAxNiBkZWZpbmVzIHRlcm1zIHJlbGF0ZWQgdG8gcGFwZXIgYW5kIGJvYXJkIGdyYWRlcyBhbmQgY29udmVydGVkIHByb2R1Y3RzLCBpbiBib3RoIEVuZ2xpc2ggYW5kIEZyZW5jaC4gIiwib2JqZWN0SUQiOiI2OTgzM18wIiwiX2hpZ2hsaWdodFJlc3VsdCI6eyJ0aXRsZSI6eyJ2YWx1ZSI6IjxlbT5JU088L2VtPiA8ZW0+NDwvZW0+MDQ2LTxlbT40PC9lbT46MjAxNiBQYXBlciwgYm9hcmQsIHB1bHBzIGFuZCByZWxhdGVkIHRlcm1zIOKAlCBWb2NhYnVsYXJ5IOKAlCBQYXJ0IDxlbT40PC9lbT46IFBhcGVyIGFuZCBib2FyZCBncmFkZXMgYW5kIGNvbnZlcnRlZCBwcm9kdWN0cyIsIm1hdGNoTGV2ZWwiOiJmdWxsIiwiZnVsbHlIaWdobGlnaHRlZCI6ZmFsc2UsIm1hdGNoZWRXb3JkcyI6WyJpc28iLCI0Il19LCJ0ZXh0Ijp7InZhbHVlIjoiPGVtPklTTzwvZW0+IDxlbT40PC9lbT4wNDYtPGVtPjQ8L2VtPjoyMDE2IGRlZmluZXMgdGVybXMgcmVsYXRlZCB0byBwYXBlciBhbmQgYm9hcmQgZ3JhZGVzIGFuZCBjb252ZXJ0ZWQgcHJvZHVjdHMsIGluIGJvdGggRW5nbGlzaCBhbmQgRnJlbmNoLiAiLCJtYXRjaExldmVsIjoiZnVsbCIsImZ1bGx5SGlnaGxpZ2h0ZWQiOmZhbHNlLCJtYXRjaGVkV29yZHMiOlsiaXNvIiwiNCJdfX19LHsiY2F0ZWdvcnkiOiJzdGFuZGFyZCIsInBhdGgiOiIvc2l0ZXMvaXNvb3JnL2NvbnRlbnRzL2RhdGEvc3RhbmRhcmQvMDYvNjQvNjY0MDMiLCJ1dWlkIjoiZThkODlhMDMtZDk0My00YjEyLWE0YTctZDIyNmJjZTdkZDMwIiwidGl0bGUiOiJJU08gNDYyOC03OjIwMTYgUGFpbnRzIGFuZCB2YXJuaXNoZXMg4oCUIEV2YWx1YXRpb24gb2YgZGVncmFkYXRpb24gb2YgY29hdGluZ3Mg4oCUIERlc2lnbmF0aW9uIG9mIHF1YW50aXR5IGFuZCBzaXplIG9mIGRlZmVjdHMsIGFuZCBvZiBpbnRlbnNpdHkgb2YgdW5pZm9ybSBjaGFuZ2VzIGluIGFwcGVhcmFuY2Ug4oCUIFBhcnQgNzogQXNzZXNzbWVudCBvZiBkZWdyZWUgb2YgY2hhbGtpbmcgYnkgdmVsdmV0IG1ldGhvZCIsInN0YXR1cyI6IlB1Ymxpc2hlZCIsInllYXIiOjIwMjEsIm9yZGVyIjoxMSwidGV4dCI6IklTTyA0NjI4LTc6MjAxNiBzcGVjaWZpZXMgYSBtZXRob2Qgc3VpdGFibGUsIGluIHBhcnRpY3VsYXIsIGZvciByYXRpbmcgdGhlIGRlZ3JlZSBvZiBjaGFsa2luZyBvbiB3aGl0ZSBvciBjb2xvdXJlZCBleHRlcmlvciBjb2F0aW5ncyBhbmQgY29hdGluZyBzeXN0ZW1zIG9uIHJvdWdoIHN1cmZhY2VzIChpLmUuIHRob3NlIGhhdmluZyBhIHJvdWdobmVzcyBncmVhdGVyIHRoYW4gc2VnbWVudCA0IG9mIHRoZSByZWZlcmVuY2UgY29tcGFyYXRvciBHIGFzIGRlc2NyaWJlZCBpbiBJU08gODUwM+KAkTEpLiBUaGUgdGVzdCBtZXRob2Qgc3BlY2lmaWVkIGNhbiBhbHNvIGJlIHVzZWQgZm9yIHRoZSBhc3Nlc3NtZW50IG9mIHRoZSBkZWdyZWUgb2YgY2hhbGtpbmcgb2YgY29hdGluZ3MgYW5kIGNvYXRpbmcgc3lzdGVtcyBvbiBzbW9vdGggc3VyZmFjZXMsIGJ1dCB0aGUgbWV0aG9kIHNwZWNpZmllZCBpbiBJU08gNDYyOOKAkTY6MjAxMSBpcyBwcmVmZXJhYmxlIGZvciB0aGlzIHB1cnBvc2UuIFRoZSB0ZXN0IG1ldGhvZCBpcyBhcHBsaWNhYmxlIHRvIGNvYXRpbmdzIGFuZCBjb2F0aW5nIHN5c3RlbXMgb24gbWluZXJhbCBzdWJzdHJhdGVzLCBlLmcuIGZpYnJlIGNlbWVudCwgYnJpY2ssIGNvbmNyZXRlLCBhbmQgcmVuZGVyaW5ncywgaW5kZXBlbmRlbnQgb2YgdGhlIHN0cnVjdHVyZSBvZiB0aGUgc3VyZmFjZS4gVGhlIG1ldGhvZCBjYW4gYmUgdXNlZCBxdWl0ZSBlZmZlY3RpdmVseSBieSBleHBlcmllbmNlZCBvcGVyYXRvcnMgYW5kIGlzIHJlY29tbWVuZGVkIGZvciBsYWJvcmF0b3J5IHVzZSBhcyB3ZWxsIGFzIGZvciBvbi1zaXRlIGV2YWx1YXRpb24uIE5PVEUgMSAgICAgICBXaGVuIGEgcmVmZXJlbmNlIHRvIHRoaXMgdGVzdCBtZXRob2QgaXMgaW5jbHVkZWQgaW4gc3BlY2lmaWNhdGlvbnMsIHRoZSB0ZXN0IGNvbmRpdGlvbnMgKGkuZS4gd2VhdGhlcmluZyBtZXRob2QgYW5kIHN1YnN0cmF0ZSkgaGF2ZSB0byBiZSBhZ3JlZWQgYmV0d2VlbiB0aGUgaW50ZXJlc3RlZCBwYXJ0aWVzLiBOT1RFIDIgICAgICAgVGhlIG1ldGhvZCBkZXNjcmliZWQgaW4gdGhpcyBwYXJ0IG9mIElTTyA0NjI4IGlzIGEgcmVsYXRpdmUgcmFua2luZyBtZXRob2QgYW5kIGlzIHRoZXJlZm9yZSBub3Qgc3VpdGFibGUgZm9yIHVzZSBpbiBhZ3JlZW1lbnRzIGJldHdlZW4gcGFydGllcy4gU2VlLCBob3dldmVyLCB0aGUgTm90ZSB0byBUYWJsZSAxLiBOT1RFIDMgICAgICAgUmVmZXIgdG8gSVNPIDQ2MjjigJExIGZvciB0aGUgZGVzaWduYXRpb24gc3lzdGVtIGZvciBxdWFudGl0eSBhbmQgc2l6ZSBvZiBkZWZlY3RzIGFuZCB0aGUgaW50ZW5zaXR5IG9mIGNoYW5nZXMgaW4gYXBwZWFyYW5jZSBvZiBjb2F0aW5ncywgYXMgd2VsbCBhcyBnZW5lcmFsIHByaW5jaXBsZXMgb2YgdGhlIHN5c3RlbS4gIiwib2JqZWN0SUQiOiI2NjQwM18wIiwiX2hpZ2hsaWdodFJlc3VsdCI6eyJ0aXRsZSI6eyJ2YWx1ZSI6IjxlbT5JU088L2VtPiA8ZW0+NDwvZW0+NjI4LTc6MjAxNiBQYWludHMgYW5kIHZhcm5pc2hlcyDigJQgRXZhbHVhdGlvbiBvZiBkZWdyYWRhdGlvbiBvZiBjb2F0aW5ncyDigJQgRGVzaWduYXRpb24gb2YgcXVhbnRpdHkgYW5kIHNpemUgb2YgZGVmZWN0cywgYW5kIG9mIGludGVuc2l0eSBvZiB1bmlmb3JtIGNoYW5nZXMgaW4gYXBwZWFyYW5jZSDigJQgUGFydCA3OiBBc3Nlc3NtZW50IG9mIGRlZ3JlZSBvZiBjaGFsa2luZyBieSB2ZWx2ZXQgbWV0aG9kIiwibWF0Y2hMZXZlbCI6ImZ1bGwiLCJmdWxseUhpZ2hsaWdodGVkIjpmYWxzZSwibWF0Y2hlZFdvcmRzIjpbImlzbyIsIjQiXX0sInRleHQiOnsidmFsdWUiOiI8ZW0+SVNPPC9lbT4gPGVtPjQ8L2VtPjYyOC03OjIwMTYgc3BlY2lmaWVzIGEgbWV0aG9kIHN1aXRhYmxlLCBpbiBwYXJ0aWN1bGFyLCBmb3IgcmF0aW5nIHRoZSBkZWdyZWUgb2YgY2hhbGtpbmcgb24gd2hpdGUgb3IgY29sb3VyZWQgZXh0ZXJpb3IgY29hdGluZ3MgYW5kIGNvYXRpbmcgc3lzdGVtcyBvbiByb3VnaCBzdXJmYWNlcyAoaS5lLiB0aG9zZSBoYXZpbmcgYSByb3VnaG5lc3MgZ3JlYXRlciB0aGFuIHNlZ21lbnQgPGVtPjQ8L2VtPiBvZiB0aGUgcmVmZXJlbmNlIGNvbXBhcmF0b3IgRyBhcyBkZXNjcmliZWQgaW4gPGVtPklTTzwvZW0+IDg1MDPigJExKS4gVGhlIHRlc3QgbWV0aG9kIHNwZWNpZmllZCBjYW4gYWxzbyBiZSB1c2VkIGZvciB0aGUgYXNzZXNzbWVudCBvZiB0aGUgZGVncmVlIG9mIGNoYWxraW5nIG9mIGNvYXRpbmdzIGFuZCBjb2F0aW5nIHN5c3RlbXMgb24gc21vb3RoIHN1cmZhY2VzLCBidXQgdGhlIG1ldGhvZCBzcGVjaWZpZWQgaW4gPGVtPklTTzwvZW0+IDxlbT40PC9lbT42MjjigJE2OjIwMTEgaXMgcHJlZmVyYWJsZSBmb3IgdGhpcyBwdXJwb3NlLiBUaGUgdGVzdCBtZXRob2QgaXMgYXBwbGljYWJsZSB0byBjb2F0aW5ncyBhbmQgY29hdGluZyBzeXN0ZW1zIG9uIG1pbmVyYWwgc3Vic3RyYXRlcywgZS5nLiBmaWJyZSBjZW1lbnQsIGJyaWNrLCBjb25jcmV0ZSwgYW5kIHJlbmRlcmluZ3MsIGluZGVwZW5kZW50IG9mIHRoZSBzdHJ1Y3R1cmUgb2YgdGhlIHN1cmZhY2UuIFRoZSBtZXRob2QgY2FuIGJlIHVzZWQgcXVpdGUgZWZmZWN0aXZlbHkgYnkgZXhwZXJpZW5jZWQgb3BlcmF0b3JzIGFuZCBpcyByZWNvbW1lbmRlZCBmb3IgbGFib3JhdG9yeSB1c2UgYXMgd2VsbCBhcyBmb3Igb24tc2l0ZSBldmFsdWF0aW9uLiBOT1RFIDEgICAgICAgV2hlbiBhIHJlZmVyZW5jZSB0byB0aGlzIHRlc3QgbWV0aG9kIGlzIGluY2x1ZGVkIGluIHNwZWNpZmljYXRpb25zLCB0aGUgdGVzdCBjb25kaXRpb25zIChpLmUuIHdlYXRoZXJpbmcgbWV0aG9kIGFuZCBzdWJzdHJhdGUpIGhhdmUgdG8gYmUgYWdyZWVkIGJldHdlZW4gdGhlIGludGVyZXN0ZWQgcGFydGllcy4gTk9URSAyICAgICAgIFRoZSBtZXRob2QgZGVzY3JpYmVkIGluIHRoaXMgcGFydCBvZiA8ZW0+SVNPPC9lbT4gPGVtPjQ8L2VtPjYyOCBpcyBhIHJlbGF0aXZlIHJhbmtpbmcgbWV0aG9kIGFuZCBpcyB0aGVyZWZvcmUgbm90IHN1aXRhYmxlIGZvciB1c2UgaW4gYWdyZWVtZW50cyBiZXR3ZWVuIHBhcnRpZXMuIFNlZSwgaG93ZXZlciwgdGhlIE5vdGUgdG8gVGFibGUgMS4gTk9URSAzICAgICAgIFJlZmVyIHRvIDxlbT5JU088L2VtPiA8ZW0+NDwvZW0+NjI44oCRMSBmb3IgdGhlIGRlc2lnbmF0aW9uIHN5c3RlbSBmb3IgcXVhbnRpdHkgYW5kIHNpemUgb2YgZGVmZWN0cyBhbmQgdGhlIGludGVuc2l0eSBvZiBjaGFuZ2VzIGluIGFwcGVhcmFuY2Ugb2YgY29hdGluZ3MsIGFzIHdlbGwgYXMgZ2VuZXJhbCBwcmluY2lwbGVzIG9mIHRoZSBzeXN0ZW0uICIsIm1hdGNoTGV2ZWwiOiJmdWxsIiwiZnVsbHlIaWdobGlnaHRlZCI6ZmFsc2UsIm1hdGNoZWRXb3JkcyI6WyJpc28iLCI0Il19fX0seyJjYXRlZ29yeSI6InN0YW5kYXJkIiwicGF0aCI6Ii9zaXRlcy9pc29vcmcvY29udGVudHMvZGF0YS9zdGFuZGFyZC8wNi82NC82NjQwMSIsInV1aWQiOiJkYWQ3MTRmNi00MjllLTQ1MTUtYTk0MS0wZDIxMDdjZDBiN2IiLCJ0aXRsZSI6IklTTyA0NjI4LTQ6MjAxNiBQYWludHMgYW5kIHZhcm5pc2hlcyDigJQgRXZhbHVhdGlvbiBvZiBkZWdyYWRhdGlvbiBvZiBjb2F0aW5ncyDigJQgRGVzaWduYXRpb24gb2YgcXVhbnRpdHkgYW5kIHNpemUgb2YgZGVmZWN0cywgYW5kIG9mIGludGVuc2l0eSBvZiB1bmlmb3JtIGNoYW5nZXMgaW4gYXBwZWFyYW5jZSDigJQgUGFydCA0OiBBc3Nlc3NtZW50IG9mIGRlZ3JlZSBvZiBjcmFja2luZyIsInN0YXR1cyI6IlB1Ymxpc2hlZCIsInllYXIiOjIwMjEsIm9yZGVyIjoxMSwidGV4dCI6IklTTyA0NjI4LTQ6MjAxNiBzcGVjaWZpZXMgYSBtZXRob2QgZm9yIGFzc2Vzc2luZyB0aGUgZGVncmVlIG9mIGNyYWNraW5nIG9mIGNvYXRpbmdzIGJ5IGNvbXBhcmlzb24gd2l0aCBwaWN0b3JpYWwgc3RhbmRhcmRzLiBJU08gNDYyOOKAkTEgZGVmaW5lcyB0aGUgc3lzdGVtIHVzZWQgZm9yIGRlc2lnbmF0aW5nIHRoZSBxdWFudGl0eSBhbmQgc2l6ZSBvZiBkZWZlY3RzIGFuZCB0aGUgaW50ZW5zaXR5IG9mIGNoYW5nZXMgaW4gYXBwZWFyYW5jZSBvZiBjb2F0aW5ncyBhbmQgb3V0bGluZXMgdGhlIGdlbmVyYWwgcHJpbmNpcGxlcyBvZiB0aGUgc3lzdGVtLiBUaGlzIHN5c3RlbSBpcyBpbnRlbmRlZCB0byBiZSB1c2VkLCBpbiBwYXJ0aWN1bGFyLCBmb3IgZGVmZWN0cyBjYXVzZWQgYnkgYWdlaW5nIGFuZCB3ZWF0aGVyaW5nLCBhbmQgZm9yIHVuaWZvcm0gY2hhbmdlcyBzdWNoIGFzIGNvbG91ciBjaGFuZ2VzLCBmb3IgZXhhbXBsZSB5ZWxsb3dpbmcuICIsIm9iamVjdElEIjoiNjY0MDFfMCIsIl9oaWdobGlnaHRSZXN1bHQiOnsidGl0bGUiOnsidmFsdWUiOiI8ZW0+SVNPPC9lbT4gPGVtPjQ8L2VtPjYyOC08ZW0+NDwvZW0+OjIwMTYgUGFpbnRzIGFuZCB2YXJuaXNoZXMg4oCUIEV2YWx1YXRpb24gb2YgZGVncmFkYXRpb24gb2YgY29hdGluZ3Mg4oCUIERlc2lnbmF0aW9uIG9mIHF1YW50aXR5IGFuZCBzaXplIG9mIGRlZmVjdHMsIGFuZCBvZiBpbnRlbnNpdHkgb2YgdW5pZm9ybSBjaGFuZ2VzIGluIGFwcGVhcmFuY2Ug4oCUIFBhcnQgPGVtPjQ8L2VtPjogQXNzZXNzbWVudCBvZiBkZWdyZWUgb2YgY3JhY2tpbmciLCJtYXRjaExldmVsIjoiZnVsbCIsImZ1bGx5SGlnaGxpZ2h0ZWQiOmZhbHNlLCJtYXRjaGVkV29yZHMiOlsiaXNvIiwiNCJdfSwidGV4dCI6eyJ2YWx1ZSI6IjxlbT5JU088L2VtPiA8ZW0+NDwvZW0+NjI4LTxlbT40PC9lbT46MjAxNiBzcGVjaWZpZXMgYSBtZXRob2QgZm9yIGFzc2Vzc2luZyB0aGUgZGVncmVlIG9mIGNyYWNraW5nIG9mIGNvYXRpbmdzIGJ5IGNvbXBhcmlzb24gd2l0aCBwaWN0b3JpYWwgc3RhbmRhcmRzLiA8ZW0+SVNPPC9lbT4gPGVtPjQ8L2VtPjYyOOKAkTEgZGVmaW5lcyB0aGUgc3lzdGVtIHVzZWQgZm9yIGRlc2lnbmF0aW5nIHRoZSBxdWFudGl0eSBhbmQgc2l6ZSBvZiBkZWZlY3RzIGFuZCB0aGUgaW50ZW5zaXR5IG9mIGNoYW5nZXMgaW4gYXBwZWFyYW5jZSBvZiBjb2F0aW5ncyBhbmQgb3V0bGluZXMgdGhlIGdlbmVyYWwgcHJpbmNpcGxlcyBvZiB0aGUgc3lzdGVtLiBUaGlzIHN5c3RlbSBpcyBpbnRlbmRlZCB0byBiZSB1c2VkLCBpbiBwYXJ0aWN1bGFyLCBmb3IgZGVmZWN0cyBjYXVzZWQgYnkgYWdlaW5nIGFuZCB3ZWF0aGVyaW5nLCBhbmQgZm9yIHVuaWZvcm0gY2hhbmdlcyBzdWNoIGFzIGNvbG91ciBjaGFuZ2VzLCBmb3IgZXhhbXBsZSB5ZWxsb3dpbmcuICIsIm1hdGNoTGV2ZWwiOiJmdWxsIiwiZnVsbHlIaWdobGlnaHRlZCI6ZmFsc2UsIm1hdGNoZWRXb3JkcyI6WyJpc28iLCI0Il19fX0seyJjYXRlZ29yeSI6InN0YW5kYXJkIiwicGF0aCI6Ii9zaXRlcy9pc29vcmcvY29udGVudHMvZGF0YS9zdGFuZGFyZC8wNi82My82NjM5OSIsInV1aWQiOiI4ZDlmMTdiYi1hMTAyLTRlN2UtOGZiNS03YjM5Yzc2NDNhNzEiLCJ0aXRsZSI6IklTTyA0NjI4LTI6MjAxNiBQYWludHMgYW5kIHZhcm5pc2hlcyDigJQgRXZhbHVhdGlvbiBvZiBkZWdyYWRhdGlvbiBvZiBjb2F0aW5ncyDigJQgRGVzaWduYXRpb24gb2YgcXVhbnRpdHkgYW5kIHNpemUgb2YgZGVmZWN0cywgYW5kIG9mIGludGVuc2l0eSBvZiB1bmlmb3JtIGNoYW5nZXMgaW4gYXBwZWFyYW5jZSDigJQgUGFydCAyOiBBc3Nlc3NtZW50IG9mIGRlZ3JlZSBvZiBibGlzdGVyaW5nIiwic3RhdHVzIjoiUHVibGlzaGVkIiwieWVhciI6MjAyMSwib3JkZXIiOjExLCJ0ZXh0IjoiSVNPIDQ2MjgtMjoyMDE2IHNwZWNpZmllcyBhIG1ldGhvZCBmb3IgYXNzZXNzaW5nIHRoZSBkZWdyZWUgb2YgYmxpc3RlcmluZyBvZiBjb2F0aW5ncyBieSBjb21wYXJpc29uIHdpdGggcGljdG9yaWFsIHN0YW5kYXJkcy4gVGhlIHBpY3RvcmlhbCBzdGFuZGFyZHMgcHJvdmlkZWQgaW4gdGhpcyBwYXJ0IG9mIElTTyA0NjI4IGlsbHVzdHJhdGUgYmxpc3RlcnMgaW4gdGhlIHNpemVzIDIsIDMsIDQsIGFuZCA1LCBhbmQgZWFjaCBzaXplIGluIHRoZSBxdWFudGl0aWVzIChkZW5zaXRpZXMpIDIsIDMsIDQsIGFuZCA1LiBJU08gNDYyOOKAkTEgZGVmaW5lcyB0aGUgc3lzdGVtIHVzZWQgZm9yIGRlc2lnbmF0aW5nIHRoZSBxdWFudGl0eSBhbmQgc2l6ZSBvZiBkZWZlY3RzIGFuZCB0aGUgaW50ZW5zaXR5IG9mIGNoYW5nZXMgaW4gYXBwZWFyYW5jZSBvZiBjb2F0aW5ncyBhbmQgb3V0bGluZXMgdGhlIGdlbmVyYWwgcHJpbmNpcGxlcyBvZiB0aGUgc3lzdGVtLiBUaGlzIHN5c3RlbSBpcyBpbnRlbmRlZCB0byBiZSB1c2VkLCBpbiBwYXJ0aWN1bGFyLCBmb3IgZGVmZWN0cyBjYXVzZWQgYnkgYWdlaW5nIGFuZCB3ZWF0aGVyaW5nLCBhbmQgZm9yIHVuaWZvcm0gY2hhbmdlcyBzdWNoIGFzIGNvbG91ciBjaGFuZ2VzLCBmb3IgZXhhbXBsZSB5ZWxsb3dpbmcuICIsIm9iamVjdElEIjoiNjYzOTlfMCIsIl9oaWdobGlnaHRSZXN1bHQiOnsidGl0bGUiOnsidmFsdWUiOiI8ZW0+SVNPPC9lbT4gPGVtPjQ8L2VtPjYyOC0yOjIwMTYgUGFpbnRzIGFuZCB2YXJuaXNoZXMg4oCUIEV2YWx1YXRpb24gb2YgZGVncmFkYXRpb24gb2YgY29hdGluZ3Mg4oCUIERlc2lnbmF0aW9uIG9mIHF1YW50aXR5IGFuZCBzaXplIG9mIGRlZmVjdHMsIGFuZCBvZiBpbnRlbnNpdHkgb2YgdW5pZm9ybSBjaGFuZ2VzIGluIGFwcGVhcmFuY2Ug4oCUIFBhcnQgMjogQXNzZXNzbWVudCBvZiBkZWdyZWUgb2YgYmxpc3RlcmluZyIsIm1hdGNoTGV2ZWwiOiJmdWxsIiwiZnVsbHlIaWdobGlnaHRlZCI6ZmFsc2UsIm1hdGNoZWRXb3JkcyI6WyJpc28iLCI0Il19LCJ0ZXh0Ijp7InZhbHVlIjoiPGVtPklTTzwvZW0+IDxlbT40PC9lbT42MjgtMjoyMDE2IHNwZWNpZmllcyBhIG1ldGhvZCBmb3IgYXNzZXNzaW5nIHRoZSBkZWdyZWUgb2YgYmxpc3RlcmluZyBvZiBjb2F0aW5ncyBieSBjb21wYXJpc29uIHdpdGggcGljdG9yaWFsIHN0YW5kYXJkcy4gVGhlIHBpY3RvcmlhbCBzdGFuZGFyZHMgcHJvdmlkZWQgaW4gdGhpcyBwYXJ0IG9mIDxlbT5JU088L2VtPiA8ZW0+NDwvZW0+NjI4IGlsbHVzdHJhdGUgYmxpc3RlcnMgaW4gdGhlIHNpemVzIDIsIDMsIDxlbT40PC9lbT4sIGFuZCA1LCBhbmQgZWFjaCBzaXplIGluIHRoZSBxdWFudGl0aWVzIChkZW5zaXRpZXMpIDIsIDMsIDxlbT40PC9lbT4sIGFuZCA1LiA8ZW0+SVNPPC9lbT4gPGVtPjQ8L2VtPjYyOOKAkTEgZGVmaW5lcyB0aGUgc3lzdGVtIHVzZWQgZm9yIGRlc2lnbmF0aW5nIHRoZSBxdWFudGl0eSBhbmQgc2l6ZSBvZiBkZWZlY3RzIGFuZCB0aGUgaW50ZW5zaXR5IG9mIGNoYW5nZXMgaW4gYXBwZWFyYW5jZSBvZiBjb2F0aW5ncyBhbmQgb3V0bGluZXMgdGhlIGdlbmVyYWwgcHJpbmNpcGxlcyBvZiB0aGUgc3lzdGVtLiBUaGlzIHN5c3RlbSBpcyBpbnRlbmRlZCB0byBiZSB1c2VkLCBpbiBwYXJ0aWN1bGFyLCBmb3IgZGVmZWN0cyBjYXVzZWQgYnkgYWdlaW5nIGFuZCB3ZWF0aGVyaW5nLCBhbmQgZm9yIHVuaWZvcm0gY2hhbmdlcyBzdWNoIGFzIGNvbG91ciBjaGFuZ2VzLCBmb3IgZXhhbXBsZSB5ZWxsb3dpbmcuICIsIm1hdGNoTGV2ZWwiOiJmdWxsIiwiZnVsbHlIaWdobGlnaHRlZCI6ZmFsc2UsIm1hdGNoZWRXb3JkcyI6WyJpc28iLCI0Il19fX0seyJjYXRlZ29yeSI6InN0YW5kYXJkIiwicGF0aCI6Ii9zaXRlcy9pc29vcmcvY29udGVudHMvZGF0YS9zdGFuZGFyZC8wNi81OS82NTk0MCIsInV1aWQiOiIxYzhjOWQ2Yi1mODhkLTRkNWItODdkMi05NTNhMmM5NDJlYjYiLCJ0aXRsZSI6IklTTyA0OTU1OjIwMTYgSGVhdC1yZXNpc3RhbnQgc3RlZWxzIiwic3RhdHVzIjoiUHVibGlzaGVkIiwieWVhciI6MjAyMSwib3JkZXIiOjExLCJ0ZXh0IjoiSVNPIDQ5NTU6MjAxNiBzcGVjaWZpZXMgcmVxdWlyZW1lbnRzIGZvciB0aGUgZ3JhZGVzIGxpc3RlZCBpbiBUYWJsZSAyLCB3aGljaCBhcmUgdXN1YWxseSBlbXBsb3llZCBmb3IgcHJvZHVjdHMgZm9yIHdoaWNoIHRoZSByZXNpc3RhbmNlIHRvIHRoZSBlZmZlY3RzIG9mIGhvdCBnYXNlcyBhbmQgdGhlIHByb2R1Y3RzIG9mIGNvbWJ1c3Rpb24gYXQgdGVtcGVyYXR1cmVzIGluIHRoZSByZWdpb24gYWJvdmUgNTUwwrBDIGFuZC9vciB0byBsb25nLXRlcm0gbWVjaGFuaWNhbCBzdHJlc3MgaXMgdGhlIG1haW4gcmVxdWlyZW1lbnQuIE5PVEUgMSAgICAgICBHcmFkZXMgbWVudGlvbmVkIGluIHRoaXMgSW50ZXJuYXRpb25hbCBTdGFuZGFyZCBtYXkgYWxzbyBiZSB1c2VkIGZvciBjb3Jyb3Npb24gYW5kIGNyZWVwIHJlc2lzdGFudCBwdXJwb3Nlcy4gSVNPIDQ5NTU6MjAxNiBpcyBhcHBsaWNhYmxlIHRvIHRoZSBmb2xsb3dpbmc6IC0gICAgICBmbGF0IHByb2R1Y3RzOyAtICAgICAgYmFycywgc2VjdGlvbnMsIHJvZCwgc2VtaS1maW5pc2hlZCBwcm9kdWN0cyBhbmQgZm9yZ2luZ3MuIE5PVEUgMiAgICAgICBIYW1tZXItZm9yZ2VkIHNlbWktZmluaXNoZWQgcHJvZHVjdHMgKGJsb29tcywgYmlsbGV0cywgc2xhYnMsIGV0Yy4pLCBzZWFtbGVzcyByb2xsZWQgcmluZ3MgYW5kIGhhbW1lci1mb3JnZWQgYmFycyBhcmUgaW4gdGhlIGZvbGxvd2luZywgY292ZXJlZCB1bmRlciBzZW1pLWZpbmlzaGVkIHByb2R1Y3RzIG9yIGJhcnMgYW5kIG5vdCB1bmRlciB0aGUgdGVybSBcImZvcmdpbmdzXCIuIE5PVEUgMyAgICAgICBOb3QgYWxsIG9mIHRoZSBncmFkZXMgaW5jbHVkZWQgaW4gdGhpcyBJbnRlcm5hdGlvbmFsIFN0YW5kYXJkIGFyZSBuZWNlc3NhcmlseSBhdmFpbGFibGUgaW4gYWxsIHByb2R1Y3QgZm9ybXMuIE5PVEUgNCAgICAgICBJbiBUYWJsZSAyLCB0d28gYWxsb3lzIGFyZSBsaXN0ZWQgaW4gYWRkaXRpb24gdG8gdGhlIHN0ZWVscyBzaW5jZSB0aGV5IGJlbG9uZyB0byB0aGUgaGVhdCByZXNpc3RhbnQgZ3JhZGVzLiBOT1RFIDUgICAgICAgSGVhdCByZXNpc3RhbnQgd2lyZSBpbiB0aGUgY29sZCB3b3JrZWQgY29uZGl0aW9uIGlzIGNvdmVyZWQgYnkgSVNPIDE2MTQz4oCRMy4gTk9URSA2ICAgICAgIENvcnJvc2lvbiByZXNpc3RhbnQgc3RhaW5sZXNzIHN0ZWVscyBmb3Igd2hpY2ggcmVzaXN0YW5jZSB0byBjb3Jyb3Npb24gaXMgb2YgcHJpbWFyeSBpbXBvcnRhbmNlIGFyZSBjb3ZlcmVkIGJ5IElTTyAxNjE0M+KAkTEgYW5kIElTTyAxNjE0M+KAkTIuIE5PVEUgNyAgICAgICBIZWF0LXJlc2lzdGFudCBzdGVlbHMgZm9yIHZhbHZlcyBhcmUgY292ZXJlZCBieSBJU08gNjgz4oCRMTUuIEluIGFkZGl0aW9uIHRvIHRoaXMgSW50ZXJuYXRpb25hbCBTdGFuZGFyZCwgdGhlIGdlbmVyYWwgdGVjaG5pY2FsIGRlbGl2ZXJ5IHJlcXVpcmVtZW50cyBvZiBJU08gNDA0IGFyZSBhcHBsaWNhYmxlLiAiLCJvYmplY3RJRCI6IjY1OTQwXzAiLCJfaGlnaGxpZ2h0UmVzdWx0Ijp7InRpdGxlIjp7InZhbHVlIjoiPGVtPklTTzwvZW0+IDxlbT40PC9lbT45NTU6MjAxNiBIZWF0LXJlc2lzdGFudCBzdGVlbHMiLCJtYXRjaExldmVsIjoiZnVsbCIsImZ1bGx5SGlnaGxpZ2h0ZWQiOmZhbHNlLCJtYXRjaGVkV29yZHMiOlsiaXNvIiwiNCJdfSwidGV4dCI6eyJ2YWx1ZSI6IjxlbT5JU088L2VtPiA8ZW0+NDwvZW0+OTU1OjIwMTYgc3BlY2lmaWVzIHJlcXVpcmVtZW50cyBmb3IgdGhlIGdyYWRlcyBsaXN0ZWQgaW4gVGFibGUgMiwgd2hpY2ggYXJlIHVzdWFsbHkgZW1wbG95ZWQgZm9yIHByb2R1Y3RzIGZvciB3aGljaCB0aGUgcmVzaXN0YW5jZSB0byB0aGUgZWZmZWN0cyBvZiBob3QgZ2FzZXMgYW5kIHRoZSBwcm9kdWN0cyBvZiBjb21idXN0aW9uIGF0IHRlbXBlcmF0dXJlcyBpbiB0aGUgcmVnaW9uIGFib3ZlIDU1MMKwQyBhbmQvb3IgdG8gbG9uZy10ZXJtIG1lY2hhbmljYWwgc3RyZXNzIGlzIHRoZSBtYWluIHJlcXVpcmVtZW50LiBOT1RFIDEgICAgICAgR3JhZGVzIG1lbnRpb25lZCBpbiB0aGlzIEludGVybmF0aW9uYWwgU3RhbmRhcmQgbWF5IGFsc28gYmUgdXNlZCBmb3IgY29ycm9zaW9uIGFuZCBjcmVlcCByZXNpc3RhbnQgcHVycG9zZXMuIDxlbT5JU088L2VtPiA8ZW0+NDwvZW0+OTU1OjIwMTYgaXMgYXBwbGljYWJsZSB0byB0aGUgZm9sbG93aW5nOiAtICAgICAgZmxhdCBwcm9kdWN0czsgLSAgICAgIGJhcnMsIHNlY3Rpb25zLCByb2QsIHNlbWktZmluaXNoZWQgcHJvZHVjdHMgYW5kIGZvcmdpbmdzLiBOT1RFIDIgICAgICAgSGFtbWVyLWZvcmdlZCBzZW1pLWZpbmlzaGVkIHByb2R1Y3RzIChibG9vbXMsIGJpbGxldHMsIHNsYWJzLCBldGMuKSwgc2VhbWxlc3Mgcm9sbGVkIHJpbmdzIGFuZCBoYW1tZXItZm9yZ2VkIGJhcnMgYXJlIGluIHRoZSBmb2xsb3dpbmcsIGNvdmVyZWQgdW5kZXIgc2VtaS1maW5pc2hlZCBwcm9kdWN0cyBvciBiYXJzIGFuZCBub3QgdW5kZXIgdGhlIHRlcm0gXCJmb3JnaW5nc1wiLiBOT1RFIDMgICAgICAgTm90IGFsbCBvZiB0aGUgZ3JhZGVzIGluY2x1ZGVkIGluIHRoaXMgSW50ZXJuYXRpb25hbCBTdGFuZGFyZCBhcmUgbmVjZXNzYXJpbHkgYXZhaWxhYmxlIGluIGFsbCBwcm9kdWN0IGZvcm1zLiBOT1RFIDxlbT40PC9lbT4gICAgICAgSW4gVGFibGUgMiwgdHdvIGFsbG95cyBhcmUgbGlzdGVkIGluIGFkZGl0aW9uIHRvIHRoZSBzdGVlbHMgc2luY2UgdGhleSBiZWxvbmcgdG8gdGhlIGhlYXQgcmVzaXN0YW50IGdyYWRlcy4gTk9URSA1ICAgICAgIEhlYXQgcmVzaXN0YW50IHdpcmUgaW4gdGhlIGNvbGQgd29ya2VkIGNvbmRpdGlvbiBpcyBjb3ZlcmVkIGJ5IDxlbT5JU088L2VtPiAxNjE0M+KAkTMuIE5PVEUgNiAgICAgICBDb3Jyb3Npb24gcmVzaXN0YW50IHN0YWlubGVzcyBzdGVlbHMgZm9yIHdoaWNoIHJlc2lzdGFuY2UgdG8gY29ycm9zaW9uIGlzIG9mIHByaW1hcnkgaW1wb3J0YW5jZSBhcmUgY292ZXJlZCBieSA8ZW0+SVNPPC9lbT4gMTYxNDPigJExIGFuZCA8ZW0+SVNPPC9lbT4gMTYxNDPigJEyLiBOT1RFIDcgICAgICAgSGVhdC1yZXNpc3RhbnQgc3RlZWxzIGZvciB2YWx2ZXMgYXJlIGNvdmVyZWQgYnkgPGVtPklTTzwvZW0+IDY4M+KAkTE1LiBJbiBhZGRpdGlvbiB0byB0aGlzIEludGVybmF0aW9uYWwgU3RhbmRhcmQsIHRoZSBnZW5lcmFsIHRlY2huaWNhbCBkZWxpdmVyeSByZXF1aXJlbWVudHMgb2YgPGVtPklTTzwvZW0+IDxlbT40PC9lbT4wNCBhcmUgYXBwbGljYWJsZS4gIiwibWF0Y2hMZXZlbCI6ImZ1bGwiLCJmdWxseUhpZ2hsaWdodGVkIjpmYWxzZSwibWF0Y2hlZFdvcmRzIjpbImlzbyIsIjQiXX19fSx7ImNhdGVnb3J5Ijoic3RhbmRhcmQiLCJwYXRoIjoiL3NpdGVzL2lzb29yZy9jb250ZW50cy9kYXRhL3N0YW5kYXJkLzA2LzEyLzYxMjY2IiwidXVpZCI6IjkzODc2MWZiLWU3NDMtNDY1Ny05MWNhLTc0MDQxZTU1ZmJlNCIsInRpdGxlIjoiSVNPIDQ0OTktNDoyMDE2IEhhcmRtZXRhbHMg4oCUIE1ldGFsbG9ncmFwaGljIGRldGVybWluYXRpb24gb2YgbWljcm9zdHJ1Y3R1cmUg4oCUIFBhcnQgNDogQ2hhcmFjdGVyaXNhdGlvbiBvZiBwb3Jvc2l0eSwgY2FyYm9uIGRlZmVjdHMgYW5kIGV0YS1waGFzZSBjb250ZW50Iiwic3RhdHVzIjoiUHVibGlzaGVkIiwieWVhciI6MjAyMSwib3JkZXIiOjExLCJ0ZXh0IjoiSVNPIDQ0OTktNDoyMDE2IHNwZWNpZmllcyBtZXRob2RzIGZvciB0aGUgbWV0YWxsb2dyYXBoaWMgZGV0ZXJtaW5hdGlvbiBvZiB0aGUgcHJlc2VuY2UsIHR5cGUsIGFuZCBkaXN0cmlidXRpb24gb2YgcG9yb3NpdHksIHVuY29tYmluZWQgY2FyYm9uIGFuZCBldGEtcGhhc2UgaW4gaGFyZG1ldGFscy4gIiwib2JqZWN0SUQiOiI2MTI2Nl8wIiwiX2hpZ2hsaWdodFJlc3VsdCI6eyJ0aXRsZSI6eyJ2YWx1ZSI6IjxlbT5JU088L2VtPiA8ZW0+NDwvZW0+NDk5LTxlbT40PC9lbT46MjAxNiBIYXJkbWV0YWxzIOKAlCBNZXRhbGxvZ3JhcGhpYyBkZXRlcm1pbmF0aW9uIG9mIG1pY3Jvc3RydWN0dXJlIOKAlCBQYXJ0IDxlbT40PC9lbT46IENoYXJhY3RlcmlzYXRpb24gb2YgcG9yb3NpdHksIGNhcmJvbiBkZWZlY3RzIGFuZCBldGEtcGhhc2UgY29udGVudCIsIm1hdGNoTGV2ZWwiOiJmdWxsIiwiZnVsbHlIaWdobGlnaHRlZCI6ZmFsc2UsIm1hdGNoZWRXb3JkcyI6WyJpc28iLCI0Il19LCJ0ZXh0Ijp7InZhbHVlIjoiPGVtPklTTzwvZW0+IDxlbT40PC9lbT40OTktPGVtPjQ8L2VtPjoyMDE2IHNwZWNpZmllcyBtZXRob2RzIGZvciB0aGUgbWV0YWxsb2dyYXBoaWMgZGV0ZXJtaW5hdGlvbiBvZiB0aGUgcHJlc2VuY2UsIHR5cGUsIGFuZCBkaXN0cmlidXRpb24gb2YgcG9yb3NpdHksIHVuY29tYmluZWQgY2FyYm9uIGFuZCBldGEtcGhhc2UgaW4gaGFyZG1ldGFscy4gIiwibWF0Y2hMZXZlbCI6ImZ1bGwiLCJmdWxseUhpZ2hsaWdodGVkIjpmYWxzZSwibWF0Y2hlZFdvcmRzIjpbImlzbyIsIjQiXX19fSx7ImNhdGVnb3J5Ijoic3RhbmRhcmQiLCJwYXRoIjoiL3NpdGVzL2lzb29yZy9jb250ZW50cy9kYXRhL3N0YW5kYXJkLzA2LzAxLzYwMTMwIiwidXVpZCI6ImJjMjAzYTQxLTFhMjgtNDcxZi04OTJiLTFjMmMzZTkzZGJlNCIsInRpdGxlIjoiSVNPIDQ2NDoyMDE1IFJvbGxpbmcgYmVhcmluZ3Mg4oCUIFJhZGlhbCBiZWFyaW5ncyB3aXRoIGxvY2F0aW5nIHNuYXAgcmluZyDigJQgRGltZW5zaW9ucywgZ2VvbWV0cmljYWwgcHJvZHVjdCBzcGVjaWZpY2F0aW9ucyAoR1BTKSBhbmQgdG9sZXJhbmNlIHZhbHVlcyIsInN0YXR1cyI6IlB1Ymxpc2hlZCIsInllYXIiOjIwMjEsIm9yZGVyIjoxMSwidGV4dCI6IklTTyA0NjQ6MjAxNSBzcGVjaWZpZXMgdGhlIHNuYXAgcmluZyBncm9vdmUgZGltZW5zaW9ucyBhbmQgdG9sZXJhbmNlIHZhbHVlcywgY2hhbWZlciBkaW1lbnNpb25zIG9uIHRoZSBzbmFwIHJpbmcgZ3Jvb3ZlIHNpZGUgb2YgdGhlIG91dGVyIHJpbmcsIGFuZCB0aGUgc25hcCByaW5nIGRpbWVuc2lvbnMgYW5kIHRvbGVyYW5jZSB2YWx1ZXMgZm9yIHJhZGlhbCBiZWFyaW5ncyBpbiB0aGUgZGltZW5zaW9uIHNlcmllcyAxOCBhbmQgMTkgYW5kIHRoZSBkaWFtZXRlciBzZXJpZXMgMCwgMiwgMywgYW5kIDQgKGV4Y2VwdCBkaW1lbnNpb24gc2VyaWVzIDAwLCA4MiwgYW5kIDgzKSwgYXMgc3BlY2lmaWVkIGluIElTTyAxNS4gIiwib2JqZWN0SUQiOiI2MDEzMF8wIiwiX2hpZ2hsaWdodFJlc3VsdCI6eyJ0aXRsZSI6eyJ2YWx1ZSI6IjxlbT5JU088L2VtPiA8ZW0+NDwvZW0+NjQ6MjAxNSBSb2xsaW5nIGJlYXJpbmdzIOKAlCBSYWRpYWwgYmVhcmluZ3Mgd2l0aCBsb2NhdGluZyBzbmFwIHJpbmcg4oCUIERpbWVuc2lvbnMsIGdlb21ldHJpY2FsIHByb2R1Y3Qgc3BlY2lmaWNhdGlvbnMgKEdQUykgYW5kIHRvbGVyYW5jZSB2YWx1ZXMiLCJtYXRjaExldmVsIjoiZnVsbCIsImZ1bGx5SGlnaGxpZ2h0ZWQiOmZhbHNlLCJtYXRjaGVkV29yZHMiOlsiaXNvIiwiNCJdfSwidGV4dCI6eyJ2YWx1ZSI6IjxlbT5JU088L2VtPiA8ZW0+NDwvZW0+NjQ6MjAxNSBzcGVjaWZpZXMgdGhlIHNuYXAgcmluZyBncm9vdmUgZGltZW5zaW9ucyBhbmQgdG9sZXJhbmNlIHZhbHVlcywgY2hhbWZlciBkaW1lbnNpb25zIG9uIHRoZSBzbmFwIHJpbmcgZ3Jvb3ZlIHNpZGUgb2YgdGhlIG91dGVyIHJpbmcsIGFuZCB0aGUgc25hcCByaW5nIGRpbWVuc2lvbnMgYW5kIHRvbGVyYW5jZSB2YWx1ZXMgZm9yIHJhZGlhbCBiZWFyaW5ncyBpbiB0aGUgZGltZW5zaW9uIHNlcmllcyAxOCBhbmQgMTkgYW5kIHRoZSBkaWFtZXRlciBzZXJpZXMgMCwgMiwgMywgYW5kIDxlbT40PC9lbT4gKGV4Y2VwdCBkaW1lbnNpb24gc2VyaWVzIDAwLCA4MiwgYW5kIDgzKSwgYXMgc3BlY2lmaWVkIGluIDxlbT5JU088L2VtPiAxNS4gIiwibWF0Y2hMZXZlbCI6ImZ1bGwiLCJmdWxseUhpZ2hsaWdodGVkIjpmYWxzZSwibWF0Y2hlZFdvcmRzIjpbImlzbyIsIjQiXX19fSx7ImNhdGVnb3J5Ijoic3RhbmRhcmQiLCJwYXRoIjoiL3NpdGVzL2lzb29yZy9jb250ZW50cy9kYXRhL3N0YW5kYXJkLzA1Lzc1LzU3NTYwIiwidXVpZCI6IjJjZTgyZDBkLWNlMzEtNGVhNS04NGM0LTk0NDliM2YxOGQyNCIsInRpdGxlIjoiSVNPIDQyNTQtMTQ6MjAxNiBBZ3JpY3VsdHVyYWwgbWFjaGluZXJ5IOKAlCAgU2FmZXR5IOKAlCBQYXJ0IDE0OiBCYWxlIHdyYXBwZXJzIiwic3RhdHVzIjoiUHVibGlzaGVkIiwieWVhciI6MjAyMSwib3JkZXIiOjExLCJ0ZXh0IjoiSVNPIDQyNTQtMTQ6MjAxNiBpbnRlbmRlZCB0byBiZSB1c2VkIHRvZ2V0aGVyIHdpdGggSVNPIDQyNTTigJExLCBzcGVjaWZpZXMgdGhlIHNhZmV0eSByZXF1aXJlbWVudHMgYW5kIHRoZWlyIHZlcmlmaWNhdGlvbiBmb3IgdGhlIGRlc2lnbiBhbmQgY29uc3RydWN0aW9uIG9mIG1vdW50ZWQsIHNlbWktbW91bnRlZCwgdHJhaWxlZCwgYW5kIHN0YXRpb25hcnkgYmFsZSB3cmFwcGVyIGZvciBiYWxlcyBvZiBhZ3JpY3VsdHVyYWwgaGFydmVzdGluZyBwcm9kdWN0cyBpbmNsdWRpbmcgd3JhcHBlcnMgd2hpY2ggYXJlIGNvbWJpbmVkIG9yIGludGVncmF0ZWQgd2l0aCBwaWNrLXVwIGJhbGVycy4gSXQgZGVzY3JpYmVzIG1ldGhvZHMgZm9yIHRoZSBlbGltaW5hdGlvbiBvciByZWR1Y3Rpb24gb2YgaGF6YXJkcyBhcmlzaW5nIGZyb20gdGhlIGludGVuZGVkIHVzZSBhbmQgcmVhc29uYWJseSBmb3Jlc2VlYWJsZSBtaXN1c2Ugb2YgdGhlc2UgbWFjaGluZXMgYnkgb25lIHBlcnNvbiAodGhlIG9wZXJhdG9yKSBpbiB0aGUgY291cnNlIG9mIG5vcm1hbCBvcGVyYXRpb24gYW5kIHNlcnZpY2UuIEluIGFkZGl0aW9uLCBpdCBzcGVjaWZpZXMgdGhlIHR5cGUgb2YgaW5mb3JtYXRpb24gb24gc2FmZSB3b3JraW5nIHByYWN0aWNlcyB0byBiZSBwcm92aWRlZCBieSB0aGUgbWFudWZhY3R1cmVyLiBOT1RFIDEgICAgICAgUmVxdWlyZW1lbnRzIGZvciBzZWxmLXByb3BlbGxlZCBiYWxlIHdyYXBwZXJzIG1heSBiZSBhZGRlZCBkdXJpbmcgdGhlIG5leHQgcmV2aXNpb24gb2YgdGhpcyBwYXJ0IG9mIElTTyA0MjU0LiBOT1RFIDIgICAgICAgRXhhbXBsZXMgb2YgdGhlc2UgbWFjaGluZXMgYXJlIGdpdmVuIGluIEFubmV4IEEuIE5PVEUgMyAgICAgICBSZXF1aXJlbWVudHMgZm9yIHBpY2stdXAgYmFsZXJzIGFyZSBzcGVjaWZpZWQgaW4gSVNPIDQyNTTigJExMS4gV2hlbiByZXF1aXJlbWVudHMgb2YgdGhpcyBwYXJ0IG9mIElTTyA0MjU0IGFyZSBkaWZmZXJlbnQgZnJvbSB0aG9zZSB3aGljaCBhcmUgc3RhdGVkIGluIElTTyA0MjU04oCRMSwgdGhlIHJlcXVpcmVtZW50cyBvZiB0aGlzIHBhcnQgb2YgSVNPIDQyNTQgdGFrZSBwcmVjZWRlbmNlIG92ZXIgdGhlIHJlcXVpcmVtZW50cyBvZiBJU08gNDI1NOKAkTEgZm9yIG1hY2hpbmVzIHRoYXQgaGF2ZSBiZWVuIGRlc2lnbmVkIGFuZCBidWlsdCBhY2NvcmRpbmcgdG8gdGhlIHJlcXVpcmVtZW50cyBvZiB0aGlzIHBhcnQgb2YgSVNPIDQyNTQuIFRoaXMgcGFydCBvZiBJU08gNDI1NCwgdGFrZW4gdG9nZXRoZXIgd2l0aCBJU08gNDI1NOKAkTEsIGRlYWxzIHdpdGggYWxsIHRoZSBzaWduaWZpY2FudCBoYXphcmRzIChhcyBsaXN0ZWQgaW4gVGFibGUgMSksIGhhemFyZG91cyBzaXR1YXRpb25zLCBhbmQgZXZlbnRzIHJlbGV2YW50IHRvIG1vdW50ZWQsIHNlbWktbW91bnRlZCwgYW5kIHRyYWlsZWQgYmFsZSB3cmFwcGVycyBpbmNsdWRpbmcgd3JhcHBlcnMgd2hpY2ggYXJlIGNvbWJpbmVkIHdpdGggcGljay11cCBiYWxlcnMgd2hlbiB0aGV5IGFyZSB1c2VkIGFzIGludGVuZGVkIGFuZCB1bmRlciB0aGUgY29uZGl0aW9ucyBvZiBtaXN1c2UgdGhhdCBhcmUgcmVhc29uYWJseSBmb3Jlc2VlYWJsZSBieSB0aGUgbWFudWZhY3R1cmVyIChzZWUgQ2xhdXNlIDQpLiBJU08gNDI1NC0xNDoyMDE2IGlzIG5vdCBhcHBsaWNhYmxlIHRvIHRoZSBmb2xsb3dpbmc6IC0gICAgICBub24tbW9iaWxlIGZpeGVkIGJhbGUgd3JhcHBlcnM7IC0gICAgICB0dWJlL2lubGluZSB3cmFwcGVyczsgLSAgICAgIHdyYXBwaW5nIHByb2Nlc3MgdGhhdCBjb25jZXJucyBvbmx5IHRoZSBjaXJjdW1mZXJlbnRpYWwgcGFydCBvZiB0aGUgYmFsZSBhbmQgdGhhdCBvY2N1cnMgaW4gdGhlIGJhbGUgY2hhbWJlcjsgLSAgICAgIHRoZSBpbnRlZ3JpdHkgb2Ygc2FmZXR5IHJlbGF0ZWQgcGFydHMgb2YgY29udHJvbCBzeXN0ZW1zIHdpdGggcmVnYXJkIHRvIHRoZSBzcGVjaWZpY2F0aW9uIG9mIHBlcmZvcm1hbmNlIGxldmVsczsgLSAgICAgIGVudmlyb25tZW50YWwgaGF6YXJkcyAoZXhjZXB0IG5vaXNlKSwgcm9hZCBzYWZldHksIGFuZCBoYXphcmRzIHJlbGF0ZWQgdG8gbW92aW5nIHBhcnRzIGZvciBwb3dlciB0cmFuc21pc3Npb247IC0gICAgICBoYXphcmRzIHJlbGF0ZWQgdG8gbWFpbnRlbmFuY2Ugb3IgcmVwYWlycyBjYXJyaWVkIG91dCBieSBwcm9mZXNzaW9uYWwgc2VydmljZSBwZXJzb25uZWwuIE5PVEUgNCAgICAgICBTcGVjaWZpYyByZXF1aXJlbWVudHMgcmVsYXRlZCB0byByb2FkIHRyYWZmaWMgcmVndWxhdGlvbnMgYXJlIG5vdCB0YWtlbiBpbnRvIGFjY291bnQgaW4gdGhpcyBwYXJ0IG9mIElTTyA0MjU0LiBJU08gNDI1NC0xNDoyMDE2IGlzIG5vdCBhcHBsaWNhYmxlIHRvIG1hY2hpbmVzIG1hbnVmYWN0dXJlZCBiZWZvcmUgdGhlIGRhdGUgb2YgaXRzIHB1YmxpY2F0aW9uLiAiLCJvYmplY3RJRCI6IjU3NTYwXzAiLCJfaGlnaGxpZ2h0UmVzdWx0Ijp7InRpdGxlIjp7InZhbHVlIjoiPGVtPklTTzwvZW0+IDxlbT40PC9lbT4yNTQtMTQ6MjAxNiBBZ3JpY3VsdHVyYWwgbWFjaGluZXJ5IOKAlCAgU2FmZXR5IOKAlCBQYXJ0IDE0OiBCYWxlIHdyYXBwZXJzIiwibWF0Y2hMZXZlbCI6ImZ1bGwiLCJmdWxseUhpZ2hsaWdodGVkIjpmYWxzZSwibWF0Y2hlZFdvcmRzIjpbImlzbyIsIjQiXX0sInRleHQiOnsidmFsdWUiOiI8ZW0+SVNPPC9lbT4gPGVtPjQ8L2VtPjI1NC0xNDoyMDE2IGludGVuZGVkIHRvIGJlIHVzZWQgdG9nZXRoZXIgd2l0aCA8ZW0+SVNPPC9lbT4gPGVtPjQ8L2VtPjI1NOKAkTEsIHNwZWNpZmllcyB0aGUgc2FmZXR5IHJlcXVpcmVtZW50cyBhbmQgdGhlaXIgdmVyaWZpY2F0aW9uIGZvciB0aGUgZGVzaWduIGFuZCBjb25zdHJ1Y3Rpb24gb2YgbW91bnRlZCwgc2VtaS1tb3VudGVkLCB0cmFpbGVkLCBhbmQgc3RhdGlvbmFyeSBiYWxlIHdyYXBwZXIgZm9yIGJhbGVzIG9mIGFncmljdWx0dXJhbCBoYXJ2ZXN0aW5nIHByb2R1Y3RzIGluY2x1ZGluZyB3cmFwcGVycyB3aGljaCBhcmUgY29tYmluZWQgb3IgaW50ZWdyYXRlZCB3aXRoIHBpY2stdXAgYmFsZXJzLiBJdCBkZXNjcmliZXMgbWV0aG9kcyBmb3IgdGhlIGVsaW1pbmF0aW9uIG9yIHJlZHVjdGlvbiBvZiBoYXphcmRzIGFyaXNpbmcgZnJvbSB0aGUgaW50ZW5kZWQgdXNlIGFuZCByZWFzb25hYmx5IGZvcmVzZWVhYmxlIG1pc3VzZSBvZiB0aGVzZSBtYWNoaW5lcyBieSBvbmUgcGVyc29uICh0aGUgb3BlcmF0b3IpIGluIHRoZSBjb3Vyc2Ugb2Ygbm9ybWFsIG9wZXJhdGlvbiBhbmQgc2VydmljZS4gSW4gYWRkaXRpb24sIGl0IHNwZWNpZmllcyB0aGUgdHlwZSBvZiBpbmZvcm1hdGlvbiBvbiBzYWZlIHdvcmtpbmcgcHJhY3RpY2VzIHRvIGJlIHByb3ZpZGVkIGJ5IHRoZSBtYW51ZmFjdHVyZXIuIE5PVEUgMSAgICAgICBSZXF1aXJlbWVudHMgZm9yIHNlbGYtcHJvcGVsbGVkIGJhbGUgd3JhcHBlcnMgbWF5IGJlIGFkZGVkIGR1cmluZyB0aGUgbmV4dCByZXZpc2lvbiBvZiB0aGlzIHBhcnQgb2YgPGVtPklTTzwvZW0+IDxlbT40PC9lbT4yNTQuIE5PVEUgMiAgICAgICBFeGFtcGxlcyBvZiB0aGVzZSBtYWNoaW5lcyBhcmUgZ2l2ZW4gaW4gQW5uZXggQS4gTk9URSAzICAgICAgIFJlcXVpcmVtZW50cyBmb3IgcGljay11cCBiYWxlcnMgYXJlIHNwZWNpZmllZCBpbiA8ZW0+SVNPPC9lbT4gPGVtPjQ8L2VtPjI1NOKAkTExLiBXaGVuIHJlcXVpcmVtZW50cyBvZiB0aGlzIHBhcnQgb2YgPGVtPklTTzwvZW0+IDxlbT40PC9lbT4yNTQgYXJlIGRpZmZlcmVudCBmcm9tIHRob3NlIHdoaWNoIGFyZSBzdGF0ZWQgaW4gPGVtPklTTzwvZW0+IDxlbT40PC9lbT4yNTTigJExLCB0aGUgcmVxdWlyZW1lbnRzIG9mIHRoaXMgcGFydCBvZiA8ZW0+SVNPPC9lbT4gPGVtPjQ8L2VtPjI1NCB0YWtlIHByZWNlZGVuY2Ugb3ZlciB0aGUgcmVxdWlyZW1lbnRzIG9mIDxlbT5JU088L2VtPiA8ZW0+NDwvZW0+MjU04oCRMSBmb3IgbWFjaGluZXMgdGhhdCBoYXZlIGJlZW4gZGVzaWduZWQgYW5kIGJ1aWx0IGFjY29yZGluZyB0byB0aGUgcmVxdWlyZW1lbnRzIG9mIHRoaXMgcGFydCBvZiA8ZW0+SVNPPC9lbT4gPGVtPjQ8L2VtPjI1NC4gVGhpcyBwYXJ0IG9mIDxlbT5JU088L2VtPiA8ZW0+NDwvZW0+MjU0LCB0YWtlbiB0b2dldGhlciB3aXRoIDxlbT5JU088L2VtPiA8ZW0+NDwvZW0+MjU04oCRMSwgZGVhbHMgd2l0aCBhbGwgdGhlIHNpZ25pZmljYW50IGhhemFyZHMgKGFzIGxpc3RlZCBpbiBUYWJsZSAxKSwgaGF6YXJkb3VzIHNpdHVhdGlvbnMsIGFuZCBldmVudHMgcmVsZXZhbnQgdG8gbW91bnRlZCwgc2VtaS1tb3VudGVkLCBhbmQgdHJhaWxlZCBiYWxlIHdyYXBwZXJzIGluY2x1ZGluZyB3cmFwcGVycyB3aGljaCBhcmUgY29tYmluZWQgd2l0aCBwaWNrLXVwIGJhbGVycyB3aGVuIHRoZXkgYXJlIHVzZWQgYXMgaW50ZW5kZWQgYW5kIHVuZGVyIHRoZSBjb25kaXRpb25zIG9mIG1pc3VzZSB0aGF0IGFyZSByZWFzb25hYmx5IGZvcmVzZWVhYmxlIGJ5IHRoZSBtYW51ZmFjdHVyZXIgKHNlZSBDbGF1c2UgPGVtPjQ8L2VtPikuIDxlbT5JU088L2VtPiA8ZW0+NDwvZW0+MjU0LTE0OjIwMTYgaXMgbm90IGFwcGxpY2FibGUgdG8gdGhlIGZvbGxvd2luZzogLSAgICAgIG5vbi1tb2JpbGUgZml4ZWQgYmFsZSB3cmFwcGVyczsgLSAgICAgIHR1YmUvaW5saW5lIHdyYXBwZXJzOyAtICAgICAgd3JhcHBpbmcgcHJvY2VzcyB0aGF0IGNvbmNlcm5zIG9ubHkgdGhlIGNpcmN1bWZlcmVudGlhbCBwYXJ0IG9mIHRoZSBiYWxlIGFuZCB0aGF0IG9jY3VycyBpbiB0aGUgYmFsZSBjaGFtYmVyOyAtICAgICAgdGhlIGludGVncml0eSBvZiBzYWZldHkgcmVsYXRlZCBwYXJ0cyBvZiBjb250cm9sIHN5c3RlbXMgd2l0aCByZWdhcmQgdG8gdGhlIHNwZWNpZmljYXRpb24gb2YgcGVyZm9ybWFuY2UgbGV2ZWxzOyAtICAgICAgZW52aXJvbm1lbnRhbCBoYXphcmRzIChleGNlcHQgbm9pc2UpLCByb2FkIHNhZmV0eSwgYW5kIGhhemFyZHMgcmVsYXRlZCB0byBtb3ZpbmcgcGFydHMgZm9yIHBvd2VyIHRyYW5zbWlzc2lvbjsgLSAgICAgIGhhemFyZHMgcmVsYXRlZCB0byBtYWludGVuYW5jZSBvciByZXBhaXJzIGNhcnJpZWQgb3V0IGJ5IHByb2Zlc3Npb25hbCBzZXJ2aWNlIHBlcnNvbm5lbC4gTk9URSA8ZW0+NDwvZW0+ICAgICAgIFNwZWNpZmljIHJlcXVpcmVtZW50cyByZWxhdGVkIHRvIHJvYWQgdHJhZmZpYyByZWd1bGF0aW9ucyBhcmUgbm90IHRha2VuIGludG8gYWNjb3VudCBpbiB0aGlzIHBhcnQgb2YgPGVtPklTTzwvZW0+IDxlbT40PC9lbT4yNTQuIDxlbT5JU088L2VtPiA8ZW0+NDwvZW0+MjU0LTE0OjIwMTYgaXMgbm90IGFwcGxpY2FibGUgdG8gbWFjaGluZXMgbWFudWZhY3R1cmVkIGJlZm9yZSB0aGUgZGF0ZSBvZiBpdHMgcHVibGljYXRpb24uICIsIm1hdGNoTGV2ZWwiOiJmdWxsIiwiZnVsbHlIaWdobGlnaHRlZCI6ZmFsc2UsIm1hdGNoZWRXb3JkcyI6WyJpc28iLCI0Il19fX0seyJjYXRlZ29yeSI6InN0YW5kYXJkIiwicGF0aCI6Ii9zaXRlcy9pc29vcmcvY29udGVudHMvZGF0YS9zdGFuZGFyZC8wNS82NS81NjU0MiIsInV1aWQiOiI3MDI3MmE3MS1jYTAyLTQ0NWItYjZjOC1mODc3MDc5NGRhNzciLCJ0aXRsZSI6IklTTyA0NDA0LTI6MjAxMCBQZXRyb2xldW0gYW5kIHJlbGF0ZWQgcHJvZHVjdHMg4oCUIERldGVybWluYXRpb24gb2YgdGhlIGNvcnJvc2lvbiByZXNpc3RhbmNlIG9mIGZpcmUtcmVzaXN0YW50IGh5ZHJhdWxpYyBmbHVpZHMg4oCUIFBhcnQgMjogTm9uLWFxdWVvdXMgZmx1aWRzIiwic3RhdHVzIjoiUHVibGlzaGVkIiwieWVhciI6MjAyMSwib3JkZXIiOjExLCJ0ZXh0IjoiSVNPIDQ0MDQtMjoyMDEwIHNwZWNpZmllcyBhIHByb2NlZHVyZSBmb3IgdGhlIGRldGVybWluYXRpb24gb2YgdGhlIGNvcnJvc2lvbi1pbmhpYml0aW5nIHByb3BlcnRpZXMgb2Ygbm9uLWFxdWVvdXMgaHlkcmF1bGljIGZsdWlkcyB3aXRoaW4gdGhlIGNhdGVnb3J5IEhGRCwgYXMgY2xhc3NpZmllZCBpbiBJU08gNjc0M+KAkTQuIEl0IHByb3ZpZGVzIGEgcXVhbGl0YXRpdmUgYXNzZXNzbWVudCBvZiBjb3Jyb3Npb24gb2YgZml2ZSBvZiB0aGUgbW9zdCBjb21tb24gbWV0YWxzIHVzZWQgaW4gdGhlIGNvbnN0cnVjdGlvbiBvZiBoeWRyYXVsaWMgc3lzdGVtcywgYnV0IG90aGVyIG1ldGFscyBhbmQvb3IgYWxsb3lzIGNvdWxkIGJlIGFkZGVkIG9yIHN1YnN0aXR1dGVkIGZvciB0aGVzZSBtZXRhbHMgZm9yIHBhcnRpY3VsYXIgaW5zdGFsbGF0aW9ucy4gIiwib2JqZWN0SUQiOiI1NjU0Ml8wIiwiX2hpZ2hsaWdodFJlc3VsdCI6eyJ0aXRsZSI6eyJ2YWx1ZSI6IjxlbT5JU088L2VtPiA8ZW0+NDwvZW0+NDA0LTI6MjAxMCBQZXRyb2xldW0gYW5kIHJlbGF0ZWQgcHJvZHVjdHMg4oCUIERldGVybWluYXRpb24gb2YgdGhlIGNvcnJvc2lvbiByZXNpc3RhbmNlIG9mIGZpcmUtcmVzaXN0YW50IGh5ZHJhdWxpYyBmbHVpZHMg4oCUIFBhcnQgMjogTm9uLWFxdWVvdXMgZmx1aWRzIiwibWF0Y2hMZXZlbCI6ImZ1bGwiLCJmdWxseUhpZ2hsaWdodGVkIjpmYWxzZSwibWF0Y2hlZFdvcmRzIjpbImlzbyIsIjQiXX0sInRleHQiOnsidmFsdWUiOiI8ZW0+SVNPPC9lbT4gPGVtPjQ8L2VtPjQwNC0yOjIwMTAgc3BlY2lmaWVzIGEgcHJvY2VkdXJlIGZvciB0aGUgZGV0ZXJtaW5hdGlvbiBvZiB0aGUgY29ycm9zaW9uLWluaGliaXRpbmcgcHJvcGVydGllcyBvZiBub24tYXF1ZW91cyBoeWRyYXVsaWMgZmx1aWRzIHdpdGhpbiB0aGUgY2F0ZWdvcnkgSEZELCBhcyBjbGFzc2lmaWVkIGluIDxlbT5JU088L2VtPiA2NzQz4oCRPGVtPjQ8L2VtPi4gSXQgcHJvdmlkZXMgYSBxdWFsaXRhdGl2ZSBhc3Nlc3NtZW50IG9mIGNvcnJvc2lvbiBvZiBmaXZlIG9mIHRoZSBtb3N0IGNvbW1vbiBtZXRhbHMgdXNlZCBpbiB0aGUgY29uc3RydWN0aW9uIG9mIGh5ZHJhdWxpYyBzeXN0ZW1zLCBidXQgb3RoZXIgbWV0YWxzIGFuZC9vciBhbGxveXMgY291bGQgYmUgYWRkZWQgb3Igc3Vic3RpdHV0ZWQgZm9yIHRoZXNlIG1ldGFscyBmb3IgcGFydGljdWxhciBpbnN0YWxsYXRpb25zLiAiLCJtYXRjaExldmVsIjoiZnVsbCIsImZ1bGx5SGlnaGxpZ2h0ZWQiOmZhbHNlLCJtYXRjaGVkV29yZHMiOlsiaXNvIiwiNCJdfX19LHsiY2F0ZWdvcnkiOiJzdGFuZGFyZCIsInBhdGgiOiIvc2l0ZXMvaXNvb3JnL2NvbnRlbnRzL2RhdGEvc3RhbmRhcmQvMDAvNDQvNDQ4MyIsInV1aWQiOiIxNjJlMTdiMC0yOGE0LTRhNWYtYmFmNy1lMzdiZDJmZmNhZWIiLCJ0aXRsZSI6IklTTyA0NTgtMjoxOTg1IFBsYXN0aWNzIOKAlCBEZXRlcm1pbmF0aW9uIG9mIHN0aWZmbmVzcyBpbiB0b3JzaW9uIG9mIGZsZXhpYmxlIG1hdGVyaWFscyDigJQgUGFydCAyOiBBcHBsaWNhdGlvbiB0byBwbGFzdGljaXplZCBjb21wb3VuZHMgb2YgaG9tb3BvbHltZXJzIGFuZCBjb3BvbHltZXJzIG9mIHZpbnlsIGNobG9yaWRlIiwic3RhdHVzIjoiUHVibGlzaGVkIiwieWVhciI6MjAyMSwib3JkZXIiOjExLCJ0ZXh0IjoiQXBwbGljYXRpb24gb2YgdGhlIGdlbmVyYWwgbWV0aG9kIGluIElTTyA0NTgtMSBmb3IgdGhlIGFib3ZlIG1lbnRpb25lZCBwbGFzdGljcyBhY2NvcmRpbmcgdG8gdGhlIHNwZWNpYWwgY2FzZSBvZiB0aGUgbWV0aG9kIHdpdGggYW4gYW5nbGUgb2YgZGVmbGVjdGlvbiBiZXR3ZWVuIDU1IGFuZCA2NSAuIFRoZSB0ZW1wZXJhdHVyZXMgYWNjb3JkaW5nIHRvIHRocmVlIGNoYXJhY3RlcmlzdGljIHZhbHVlcyBvZiB0aGUgdG9yc2lvbiBzdGlmZm5lc3M7IDMwMCBNUGEsIDIzIE1QYSBhbmQgNCBNUGEgYXJlIHRvIGJlIGRldGVybWluZWQgZm9yIHRoZSBtYXRlcmlhbCB1bmRlciB0ZXN0LiAiLCJvYmplY3RJRCI6IjQ0ODNfMCIsIl9oaWdobGlnaHRSZXN1bHQiOnsidGl0bGUiOnsidmFsdWUiOiI8ZW0+SVNPPC9lbT4gPGVtPjQ8L2VtPjU4LTI6MTk4NSBQbGFzdGljcyDigJQgRGV0ZXJtaW5hdGlvbiBvZiBzdGlmZm5lc3MgaW4gdG9yc2lvbiBvZiBmbGV4aWJsZSBtYXRlcmlhbHMg4oCUIFBhcnQgMjogQXBwbGljYXRpb24gdG8gcGxhc3RpY2l6ZWQgY29tcG91bmRzIG9mIGhvbW9wb2x5bWVycyBhbmQgY29wb2x5bWVycyBvZiB2aW55bCBjaGxvcmlkZSIsIm1hdGNoTGV2ZWwiOiJmdWxsIiwiZnVsbHlIaWdobGlnaHRlZCI6ZmFsc2UsIm1hdGNoZWRXb3JkcyI6WyJpc28iLCI0Il19LCJ0ZXh0Ijp7InZhbHVlIjoiQXBwbGljYXRpb24gb2YgdGhlIGdlbmVyYWwgbWV0aG9kIGluIDxlbT5JU088L2VtPiA8ZW0+NDwvZW0+NTgtMSBmb3IgdGhlIGFib3ZlIG1lbnRpb25lZCBwbGFzdGljcyBhY2NvcmRpbmcgdG8gdGhlIHNwZWNpYWwgY2FzZSBvZiB0aGUgbWV0aG9kIHdpdGggYW4gYW5nbGUgb2YgZGVmbGVjdGlvbiBiZXR3ZWVuIDU1IGFuZCA2NSAuIFRoZSB0ZW1wZXJhdHVyZXMgYWNjb3JkaW5nIHRvIHRocmVlIGNoYXJhY3RlcmlzdGljIHZhbHVlcyBvZiB0aGUgdG9yc2lvbiBzdGlmZm5lc3M7IDMwMCBNUGEsIDIzIE1QYSBhbmQgPGVtPjQ8L2VtPiBNUGEgYXJlIHRvIGJlIGRldGVybWluZWQgZm9yIHRoZSBtYXRlcmlhbCB1bmRlciB0ZXN0LiAiLCJtYXRjaExldmVsIjoiZnVsbCIsImZ1bGx5SGlnaGxpZ2h0ZWQiOmZhbHNlLCJtYXRjaGVkV29yZHMiOlsiaXNvIiwiNCJdfX19LHsiY2F0ZWdvcnkiOiJzdGFuZGFyZCIsInBhdGgiOiIvc2l0ZXMvaXNvb3JnL2NvbnRlbnRzL2RhdGEvc3RhbmRhcmQvMDEvMDUvMTA1MDYiLCJ1dWlkIjoiYzNiYTFmOGItMjAyOS00N2JmLThmMjktNjI2YmYxOGY5OGJhIiwidGl0bGUiOiJJU08gNDU4MToxOTk0IFBsYXN0aWNzIOKAlCBTdHlyZW5lL2Fjcnlsb25pdHJpbGUgY29wb2x5bWVycyDigJQgRGV0ZXJtaW5hdGlvbiBvZiByZXNpZHVhbCBhY3J5bG9uaXRyaWxlIG1vbm9tZXIgY29udGVudCDigJQgR2FzIGNocm9tYXRvZ3JhcGh5IG1ldGhvZCIsInN0YXR1cyI6IlB1Ymxpc2hlZCIsInllYXIiOjIwMjEsIm9yZGVyIjoxMSwidGV4dCI6IlRoZSBwcmluY2lwbGUgb2YgdGhlIG1ldGhvZCBzcGVjaWZpZWQgaXMgZGlzc29sdmluZyBhIHRlc3QgcG9ydGlvbiBpbiBkaW1ldGh5bGZvcm1hbWlkZSBhbmQgaW5qZWN0aW5nIGEgc21hbGwgdm9sdW1lIG9mIHRoZSBzb2x1dGlvbiBpbnRvIGEgZ2FzIGNocm9tYXRvZ3JhcGggZXF1aXBwZWQgd2l0aCBmbGFtZSBpb25pemF0aW9uIGRldGVjdG9yIHRvIHNlcGFyYXRlIGFuZCBkZXRlY3QgdGhlIHZvbGF0aWxlIGNvbXBvbmVudHMuIFRoZSBzb2x2ZW50IGNvbnRhaW5zIGEga25vd24gYW1vdW50IG9mIHByb3Bpb25pdHJpbGUgb3IgYWNldG9uaXRyaWxlIGFzIGFuIGludGVybmFsIHN0YW5kYXJkIGZvciBxdWFudGl0YXRpdmUgZXZhbHVhdGlvbi4gV2l0aCB0aGlzIG1ldGhvZCwgYSBsb3dlciBkZXRlY3Rpb24gbGltaXQgb2YgdGhlIG9yZGVyIG9mIDMgcHBtIG9mIGFjcnlsb25pdHJpbGUgaW4gdGhlIGNvcG9seW1lciBtYXkgYmUgZXhwZWN0ZWQuIFRvIG9idGFpbiBhIGxvd2VyIGRldGVjdGlvbiBsaW1pdCBvZiB0aGUgb3JkZXIgb2YgMCwzIHBwbSB0byAwLDQgcHBtLCBhbiBhbHRlcm5hdGl2ZSBtZXRob2QgaXMgc3BlY2lmaWVkIGluIGFubmV4IEEuICIsIm9iamVjdElEIjoiMTA1MDZfMCIsIl9oaWdobGlnaHRSZXN1bHQiOnsidGl0bGUiOnsidmFsdWUiOiI8ZW0+SVNPPC9lbT4gPGVtPjQ8L2VtPjU4MToxOTk0IFBsYXN0aWNzIOKAlCBTdHlyZW5lL2Fjcnlsb25pdHJpbGUgY29wb2x5bWVycyDigJQgRGV0ZXJtaW5hdGlvbiBvZiByZXNpZHVhbCBhY3J5bG9uaXRyaWxlIG1vbm9tZXIgY29udGVudCDigJQgR2FzIGNocm9tYXRvZ3JhcGh5IG1ldGhvZCIsIm1hdGNoTGV2ZWwiOiJmdWxsIiwiZnVsbHlIaWdobGlnaHRlZCI6ZmFsc2UsIm1hdGNoZWRXb3JkcyI6WyJpc28iLCI0Il19LCJ0ZXh0Ijp7InZhbHVlIjoiVGhlIHByaW5jaXBsZSBvZiB0aGUgbWV0aG9kIHNwZWNpZmllZCBpcyBkaXNzb2x2aW5nIGEgdGVzdCBwb3J0aW9uIGluIGRpbWV0aHlsZm9ybWFtaWRlIGFuZCBpbmplY3RpbmcgYSBzbWFsbCB2b2x1bWUgb2YgdGhlIHNvbHV0aW9uIGludG8gYSBnYXMgY2hyb21hdG9ncmFwaCBlcXVpcHBlZCB3aXRoIGZsYW1lIGlvbml6YXRpb24gZGV0ZWN0b3IgdG8gc2VwYXJhdGUgYW5kIGRldGVjdCB0aGUgdm9sYXRpbGUgY29tcG9uZW50cy4gVGhlIHNvbHZlbnQgY29udGFpbnMgYSBrbm93biBhbW91bnQgb2YgcHJvcGlvbml0cmlsZSBvciBhY2V0b25pdHJpbGUgYXMgYW4gaW50ZXJuYWwgc3RhbmRhcmQgZm9yIHF1YW50aXRhdGl2ZSBldmFsdWF0aW9uLiBXaXRoIHRoaXMgbWV0aG9kLCBhIGxvd2VyIGRldGVjdGlvbiBsaW1pdCBvZiB0aGUgb3JkZXIgb2YgMyBwcG0gb2YgYWNyeWxvbml0cmlsZSBpbiB0aGUgY29wb2x5bWVyIG1heSBiZSBleHBlY3RlZC4gVG8gb2J0YWluIGEgbG93ZXIgZGV0ZWN0aW9uIGxpbWl0IG9mIHRoZSBvcmRlciBvZiAwLDMgcHBtIHRvIDAsPGVtPjQ8L2VtPiBwcG0sIGFuIGFsdGVybmF0aXZlIG1ldGhvZCBpcyBzcGVjaWZpZWQgaW4gYW5uZXggQS4gIiwibWF0Y2hMZXZlbCI6InBhcnRpYWwiLCJmdWxseUhpZ2hsaWdodGVkIjpmYWxzZSwibWF0Y2hlZFdvcmRzIjpbIjQiXX19fSx7ImNhdGVnb3J5Ijoic3RhbmRhcmQiLCJwYXRoIjoiL3NpdGVzL2lzb29yZy9jb250ZW50cy9kYXRhL3N0YW5kYXJkLzAwLzk5Lzk5NDMiLCJ1dWlkIjoiYmI3YThjZGMtZGY3NS00ZDMxLWE0YmYtMTFmMzM4MjI2YjYzIiwidGl0bGUiOiJJU08gNDE3MjoxOTkxIFRlY2huaWNhbCBkcmF3aW5ncyDigJQgQ29uc3RydWN0aW9uIGRyYXdpbmdzIOKAlCBEcmF3aW5ncyBmb3IgdGhlIGFzc2VtYmx5IG9mIHByZWZhYnJpY2F0ZWQgc3RydWN0dXJlcyIsInN0YXR1cyI6IlB1Ymxpc2hlZCIsInllYXIiOjIwMjAsIm9yZGVyIjoxMSwidGV4dCI6IlRoaXMgc2Vjb25kIGVkaXRpb24gY2FuY2VscyBhbmQgcmVwbGFjZXMgdGhlIGZpcnN0IGVkaXRpb24gKElTTyA0MTcyIDoxOTgxKSwgY2xhdXNlIDIgYW5kIHN1YmNsYXVzZSA0LjMgb2Ygd2hpY2ggaGF2ZSBiZWVuIHRlY2huaWNhbGx5IHJldmlzZWQuIFNwZWNpZmllcyBnZW5lcmFsIHJ1bGVzIGZvciB0aGUgcHJlcGFyYXRpb24gb2Ygd29ya2luZyBkcmF3aW5ncyBpbnRlbmRlZCBmb3IgdGhlIGZpZWxkIGFzc2VtYmx5IG9mIHByZWZhYnJpY2F0ZWQgc3RydWN0dXJlcyBmb3IgYnVpbGRpbmcgYW5kIGNpdmlsIGVuZ2luZWVyaW5nIHdvcmtzLiBHaXZlcyBub3JtYXRpdmUgcmVmZXJlbmNlcywgZGVmaW5pdGlvbnMsIGRvY3VtZW50YXRpb24sIGRlc2lnbmF0aW9uIG9mIHByZWZhYnJpY2F0ZWQgc3RydWN0dXJhbCBjb21wb25lbnRzLiAiLCJvYmplY3RJRCI6Ijk5NDNfMCIsIl9oaWdobGlnaHRSZXN1bHQiOnsidGl0bGUiOnsidmFsdWUiOiI8ZW0+SVNPPC9lbT4gPGVtPjQ8L2VtPjE3MjoxOTkxIFRlY2huaWNhbCBkcmF3aW5ncyDigJQgQ29uc3RydWN0aW9uIGRyYXdpbmdzIOKAlCBEcmF3aW5ncyBmb3IgdGhlIGFzc2VtYmx5IG9mIHByZWZhYnJpY2F0ZWQgc3RydWN0dXJlcyIsIm1hdGNoTGV2ZWwiOiJmdWxsIiwiZnVsbHlIaWdobGlnaHRlZCI6ZmFsc2UsIm1hdGNoZWRXb3JkcyI6WyJpc28iLCI0Il19LCJ0ZXh0Ijp7InZhbHVlIjoiVGhpcyBzZWNvbmQgZWRpdGlvbiBjYW5jZWxzIGFuZCByZXBsYWNlcyB0aGUgZmlyc3QgZWRpdGlvbiAoPGVtPklTTzwvZW0+IDxlbT40PC9lbT4xNzIgOjE5ODEpLCBjbGF1c2UgMiBhbmQgc3ViY2xhdXNlIDxlbT40PC9lbT4uMyBvZiB3aGljaCBoYXZlIGJlZW4gdGVjaG5pY2FsbHkgcmV2aXNlZC4gU3BlY2lmaWVzIGdlbmVyYWwgcnVsZXMgZm9yIHRoZSBwcmVwYXJhdGlvbiBvZiB3b3JraW5nIGRyYXdpbmdzIGludGVuZGVkIGZvciB0aGUgZmllbGQgYXNzZW1ibHkgb2YgcHJlZmFicmljYXRlZCBzdHJ1Y3R1cmVzIGZvciBidWlsZGluZyBhbmQgY2l2aWwgZW5naW5lZXJpbmcgd29ya3MuIEdpdmVzIG5vcm1hdGl2ZSByZWZlcmVuY2VzLCBkZWZpbml0aW9ucywgZG9jdW1lbnRhdGlvbiwgZGVzaWduYXRpb24gb2YgcHJlZmFicmljYXRlZCBzdHJ1Y3R1cmFsIGNvbXBvbmVudHMuICIsIm1hdGNoTGV2ZWwiOiJmdWxsIiwiZnVsbHlIaWdobGlnaHRlZCI6ZmFsc2UsIm1hdGNoZWRXb3JkcyI6WyJpc28iLCI0Il19fX0seyJjYXRlZ29yeSI6InN0YW5kYXJkIiwicGF0aCI6Ii9zaXRlcy9pc29vcmcvY29udGVudHMvZGF0YS9zdGFuZGFyZC8wMC85OS85OTA2IiwidXVpZCI6IjM3ZmJlN2JkLWQ3MTQtNGE4ZS1hZGQ1LTE5MDEwMWJkYzUwOCIsInRpdGxlIjoiSVNPIDQxNDU6MTk4NiBOb24tYWxsb3kgc3RlZWwgZml0dGluZ3MgdGhyZWFkZWQgdG8gSVNPIDctMSIsInN0YXR1cyI6IlB1Ymxpc2hlZCIsInllYXIiOjIwMjAsIm9yZGVyIjoxMSwidGV4dCI6IlNwZWNpZmllcyByZXF1aXJlbWVudHMgZm9yIGZpdHRpbmdzIGZvciB0aHJlYWRlZCBjb25uZWN0aW9ucywgdXNlZCBtYWlubHkgZm9yIGluZHVzdHJpYWwgcHVycG9zZXMuIFRhYmxlIDEgY29udGFpbnMgZGlhZ3JhbXMgb2YgdHlwZXMgb2YgZml0dGluZ3MgYW5kIHRoZWlyIHN5bWJvbHMuIFRhYnVsYXRlcyB0aGUgZml0dGluZyBkaW1lbnNpb25zICh0YWJsZXMgMiwgNSwgOSB0byAxMikgd2l0aCBub21pbmFsIHNpemVzIGZyb20gRE4gNiB1cCB0byBhbmQgaW5jbHVkaW5nIEROIDEwMCAodGhyZWFkIGRlc2lnbmF0aW9uIDEvOCB0byA0KS4gVGFibGUgNiBjb250YWlucyBzb2NrZXRzIChETiA2IHRvIEROIDE1MCksIHJlZHVjaW5nIGZpdHRpbmdzIGFyZSBpbmNsdWRlZCBpbiB0aGUgdGFibGVzIDMsIDcgYW5kIDggKEROIDggRE4gMTAwIGFuZCBETiA2IHRvIEROIDgwIHJlc3AuKSwgdGFibGUgNCBjb21wcmlzZXMgZWxib3dzIChETiA4IHRvIEROIDUwKS4gIiwib2JqZWN0SUQiOiI5OTA2XzAiLCJfaGlnaGxpZ2h0UmVzdWx0Ijp7InRpdGxlIjp7InZhbHVlIjoiPGVtPklTTzwvZW0+IDxlbT40PC9lbT4xNDU6MTk4NiBOb24tYWxsb3kgc3RlZWwgZml0dGluZ3MgdGhyZWFkZWQgdG8gPGVtPklTTzwvZW0+IDctMSIsIm1hdGNoTGV2ZWwiOiJmdWxsIiwiZnVsbHlIaWdobGlnaHRlZCI6ZmFsc2UsIm1hdGNoZWRXb3JkcyI6WyJpc28iLCI0Il19LCJ0ZXh0Ijp7InZhbHVlIjoiU3BlY2lmaWVzIHJlcXVpcmVtZW50cyBmb3IgZml0dGluZ3MgZm9yIHRocmVhZGVkIGNvbm5lY3Rpb25zLCB1c2VkIG1haW5seSBmb3IgaW5kdXN0cmlhbCBwdXJwb3Nlcy4gVGFibGUgMSBjb250YWlucyBkaWFncmFtcyBvZiB0eXBlcyBvZiBmaXR0aW5ncyBhbmQgdGhlaXIgc3ltYm9scy4gVGFidWxhdGVzIHRoZSBmaXR0aW5nIGRpbWVuc2lvbnMgKHRhYmxlcyAyLCA1LCA5IHRvIDEyKSB3aXRoIG5vbWluYWwgc2l6ZXMgZnJvbSBETiA2IHVwIHRvIGFuZCBpbmNsdWRpbmcgRE4gMTAwICh0aHJlYWQgZGVzaWduYXRpb24gMS84IHRvIDxlbT40PC9lbT4pLiBUYWJsZSA2IGNvbnRhaW5zIHNvY2tldHMgKEROIDYgdG8gRE4gMTUwKSwgcmVkdWNpbmcgZml0dGluZ3MgYXJlIGluY2x1ZGVkIGluIHRoZSB0YWJsZXMgMywgNyBhbmQgOCAoRE4gOCBETiAxMDAgYW5kIEROIDYgdG8gRE4gODAgcmVzcC4pLCB0YWJsZSA8ZW0+NDwvZW0+IGNvbXByaXNlcyBlbGJvd3MgKEROIDggdG8gRE4gNTApLiAiLCJtYXRjaExldmVsIjoicGFydGlhbCIsImZ1bGx5SGlnaGxpZ2h0ZWQiOmZhbHNlLCJtYXRjaGVkV29yZHMiOlsiNCJdfX19LHsiY2F0ZWdvcnkiOiJzdGFuZGFyZCIsInBhdGgiOiIvc2l0ZXMvaXNvb3JnL2NvbnRlbnRzL2RhdGEvc3RhbmRhcmQvMDcvNTYvNzU2NTAiLCJ1dWlkIjoiNzJhMzdjNjEtYTA0MS00NmJlLWIxNDYtNDEyN2IzZjlhZDE1IiwidGl0bGUiOiJJU08gNDA3OToyMDIwIFJ1YmJlciBob3NlcyBhbmQgaG9zZSBhc3NlbWJsaWVzIOKAlCBUZXh0aWxlLXJlaW5mb3JjZWQgaHlkcmF1bGljIHR5cGVzIGZvciBvaWwtYmFzZWQgb3Igd2F0ZXItYmFzZWQgZmx1aWRzIOKAlCBTcGVjaWZpY2F0aW9uIiwic3RhdHVzIjoiUHVibGlzaGVkIiwieWVhciI6MjAyMCwib3JkZXIiOjExLCJ0ZXh0IjoiVGhpcyBkb2N1bWVudCBzcGVjaWZpZXMgcmVxdWlyZW1lbnRzIGZvciBmaXZlIHR5cGVzIG9mIHRleHRpbGUtcmVpbmZvcmNlZCBoeWRyYXVsaWMgaG9zZXMgYW5kIGhvc2UgYXNzZW1ibGllcyBvZiBub21pbmFsIHNpemUgZnJvbSA1IHRvIDEwMC4gVGhleSBhcmUgc3VpdGFibGUgZm9yIHVzZSB3aXRoOiDigJQgICAgIG9pbC1iYXNlZCBoeWRyYXVsaWMgZmx1aWRzIEhILCBITCwgSE0sIEhSIGFuZCBIViBhcyBkZWZpbmVkIGluIElTTyA2NzQz4oCRNCBhdCB0ZW1wZXJhdHVyZXMgcmFuZ2luZyBmcm9tIOKIkjQwIMKwQyB0byArMTAwIMKwQzsg4oCUICAgICB3YXRlci1iYXNlZCBmbHVpZHMgSEZDLCBIRkFFLCBIRkFTIGFuZCBIRkIgYXMgZGVmaW5lZCBpbiBJU08gNjc0M+KAkTQgYXQgdGVtcGVyYXR1cmVzIHJhbmdpbmcgZnJvbSDiiJI0MCDCsEMgdG8gKzcwIMKwQzsg4oCUICAgICB3YXRlciBhdCB0ZW1wZXJhdHVyZXMgcmFuZ2luZyBmcm9tIDAgwrBDIHRvICs3MCDCsEMuIFRoaXMgZG9jdW1lbnQgZG9lcyBub3QgaW5jbHVkZSByZXF1aXJlbWVudHMgZm9yIGVuZCBmaXR0aW5ncy4gSXQgaXMgbGltaXRlZCB0byByZXF1aXJlbWVudHMgZm9yIGhvc2VzIGFuZCBob3NlIGFzc2VtYmxpZXMuIE5PVEUgICAgSXQgaXMgdGhlIHJlc3BvbnNpYmlsaXR5IG9mIHRoZSB1c2VyLCBpbiBjb25zdWx0YXRpb24gd2l0aCB0aGUgaG9zZSBtYW51ZmFjdHVyZXIsIHRvIGVzdGFibGlzaCB0aGUgY29tcGF0aWJpbGl0eSBvZiB0aGUgaG9zZSB3aXRoIHRoZSBmbHVpZCB0byBiZSB1c2VkLiAiLCJvYmplY3RJRCI6Ijc1NjUwXzAiLCJfaGlnaGxpZ2h0UmVzdWx0Ijp7InRpdGxlIjp7InZhbHVlIjoiPGVtPklTTzwvZW0+IDxlbT40PC9lbT4wNzk6MjAyMCBSdWJiZXIgaG9zZXMgYW5kIGhvc2UgYXNzZW1ibGllcyDigJQgVGV4dGlsZS1yZWluZm9yY2VkIGh5ZHJhdWxpYyB0eXBlcyBmb3Igb2lsLWJhc2VkIG9yIHdhdGVyLWJhc2VkIGZsdWlkcyDigJQgU3BlY2lmaWNhdGlvbiIsIm1hdGNoTGV2ZWwiOiJmdWxsIiwiZnVsbHlIaWdobGlnaHRlZCI6ZmFsc2UsIm1hdGNoZWRXb3JkcyI6WyJpc28iLCI0Il19LCJ0ZXh0Ijp7InZhbHVlIjoiVGhpcyBkb2N1bWVudCBzcGVjaWZpZXMgcmVxdWlyZW1lbnRzIGZvciBmaXZlIHR5cGVzIG9mIHRleHRpbGUtcmVpbmZvcmNlZCBoeWRyYXVsaWMgaG9zZXMgYW5kIGhvc2UgYXNzZW1ibGllcyBvZiBub21pbmFsIHNpemUgZnJvbSA1IHRvIDEwMC4gVGhleSBhcmUgc3VpdGFibGUgZm9yIHVzZSB3aXRoOiDigJQgICAgIG9pbC1iYXNlZCBoeWRyYXVsaWMgZmx1aWRzIEhILCBITCwgSE0sIEhSIGFuZCBIViBhcyBkZWZpbmVkIGluIElTTyA2NzQz4oCRNCBhdCB0ZW1wZXJhdHVyZXMgcmFuZ2luZyBmcm9tIOKIkjQwIMKwQyB0byArMTAwIMKwQzsg4oCUICAgICB3YXRlci1iYXNlZCBmbHVpZHMgSEZDLCBIRkFFLCBIRkFTIGFuZCBIRkIgYXMgZGVmaW5lZCBpbiBJU08gNjc0M+KAkTQgYXQgdGVtcGVyYXR1cmVzIHJhbmdpbmcgZnJvbSDiiJI0MCDCsEMgdG8gKzcwIMKwQzsg4oCUICAgICB3YXRlciBhdCB0ZW1wZXJhdHVyZXMgcmFuZ2luZyBmcm9tIDAgwrBDIHRvICs3MCDCsEMuIFRoaXMgZG9jdW1lbnQgZG9lcyBub3QgaW5jbHVkZSByZXF1aXJlbWVudHMgZm9yIGVuZCBmaXR0aW5ncy4gSXQgaXMgbGltaXRlZCB0byByZXF1aXJlbWVudHMgZm9yIGhvc2VzIGFuZCBob3NlIGFzc2VtYmxpZXMuIE5PVEUgICAgSXQgaXMgdGhlIHJlc3BvbnNpYmlsaXR5IG9mIHRoZSB1c2VyLCBpbiBjb25zdWx0YXRpb24gd2l0aCB0aGUgaG9zZSBtYW51ZmFjdHVyZXIsIHRvIGVzdGFibGlzaCB0aGUgY29tcGF0aWJpbGl0eSBvZiB0aGUgaG9zZSB3aXRoIHRoZSBmbHVpZCB0byBiZSB1c2VkLiAiLCJtYXRjaExldmVsIjoibm9uZSIsIm1hdGNoZWRXb3JkcyI6W119fX0seyJjYXRlZ29yeSI6InN0YW5kYXJkIiwicGF0aCI6Ii9zaXRlcy9pc29vcmcvY29udGVudHMvZGF0YS9zdGFuZGFyZC8wNy8zMC83MzA0MSIsInV1aWQiOiJhOGE3ZDE5MC03ZjA0LTQyZDYtOWVjZi00NmIzMzI4YTdhMjQiLCJ0aXRsZSI6IklTTyA0OTg2OjIwMjAgU3RlZWwgYW5kIGlyb24gY2FzdGluZ3Mg4oCUIE1hZ25ldGljIHBhcnRpY2xlIHRlc3RpbmciLCJzdGF0dXMiOiJQdWJsaXNoZWQiLCJ5ZWFyIjoyMDIwLCJvcmRlciI6MTEsInRleHQiOiJUaGlzIGRvY3VtZW50IHNwZWNpZmllcyBhIG1ldGhvZCBmb3IgdGhlIG1hZ25ldGljIHBhcnRpY2xlIHRlc3Rpbmcgb2YgZmVycm8tbWFnbmV0aWMgc3RlZWwgYW5kIGlyb24gY2FzdGluZ3MuIEl0IGFsc28gZ2l2ZXMgYWNjZXB0YW5jZSBjcml0ZXJpYSB0aHJvdWdoIHNldmVyaXR5IGxldmVscyBkZWZpbmVkIGJ5IHRoZSBuYXR1cmUsIHRoZSBhcmVhIGFuZCB0aGUgZGltZW5zaW9ucyBvZiB0aGUgZGlzY29udGludWl0aWVzIHByZXNlbnQuIFRoaXMgZG9jdW1lbnQgaXMgYXBwbGljYWJsZSB0byBhbGwgZmVycm8tbWFnbmV0aWMgY2FzdGluZ3MsIGluZGVwZW5kZW50IG9mIHRoZSBtb3VsZGluZyBtZXRob2QuIEEgc3RlZWwgYW5kIGlyb24gY2FzdGluZyBpcyBjb25zaWRlcmVkIHRvIGJlIGZlcnJvLW1hZ25ldGljIGlmIHRoZSBtYWduZXRpYyBpbmR1Y3Rpb24gaXMgZ3JlYXRlciB0aGFuIDEgVCAoVGVzbGEpIGZvciBhIG1hZ25ldGljIGZpZWxkIHN0cmVuZ3RoIG9mIDIsNCBrQS9tLiBUaGlzIGRvY3VtZW50IG9ubHkgYXBwbGllcyB0byB0aG9zZSBhcmVhcyBvZiB0aGUgY2FzdGluZ3Mgc3BlY2lmaWVkIGZvciB0ZXN0aW5nLCBhcyB3ZWxsIGFzIHRoZSBwZXJjZW50YWdlIG9mIGNhc3RpbmdzIHRvIGJlIHRlc3RlZC4gIiwib2JqZWN0SUQiOiI3MzA0MV8wIiwiX2hpZ2hsaWdodFJlc3VsdCI6eyJ0aXRsZSI6eyJ2YWx1ZSI6IklTTyA0OTg2OjIwMjAgU3RlZWwgYW5kIGlyb24gY2FzdGluZ3Mg4oCUIE1hZ25ldGljIHBhcnRpY2xlIHRlc3RpbmciLCJtYXRjaExldmVsIjoibm9uZSIsIm1hdGNoZWRXb3JkcyI6W119LCJ0ZXh0Ijp7InZhbHVlIjoiVGhpcyBkb2N1bWVudCBzcGVjaWZpZXMgYSBtZXRob2QgZm9yIHRoZSBtYWduZXRpYyBwYXJ0aWNsZSB0ZXN0aW5nIG9mIGZlcnJvLW1hZ25ldGljIHN0ZWVsIGFuZCBpcm9uIGNhc3RpbmdzLiBJdCBhbHNvIGdpdmVzIGFjY2VwdGFuY2UgY3JpdGVyaWEgdGhyb3VnaCBzZXZlcml0eSBsZXZlbHMgZGVmaW5lZCBieSB0aGUgbmF0dXJlLCB0aGUgYXJlYSBhbmQgdGhlIGRpbWVuc2lvbnMgb2YgdGhlIGRpc2NvbnRpbnVpdGllcyBwcmVzZW50LiBUaGlzIGRvY3VtZW50IGlzIGFwcGxpY2FibGUgdG8gYWxsIGZlcnJvLW1hZ25ldGljIGNhc3RpbmdzLCBpbmRlcGVuZGVudCBvZiB0aGUgbW91bGRpbmcgbWV0aG9kLiBBIHN0ZWVsIGFuZCBpcm9uIGNhc3RpbmcgaXMgY29uc2lkZXJlZCB0byBiZSBmZXJyby1tYWduZXRpYyBpZiB0aGUgbWFnbmV0aWMgaW5kdWN0aW9uIGlzIGdyZWF0ZXIgdGhhbiAxIFQgKFRlc2xhKSBmb3IgYSBtYWduZXRpYyBmaWVsZCBzdHJlbmd0aCBvZiAyLDQga0EvbS4gVGhpcyBkb2N1bWVudCBvbmx5IGFwcGxpZXMgdG8gdGhvc2UgYXJlYXMgb2YgdGhlIGNhc3RpbmdzIHNwZWNpZmllZCBmb3IgdGVzdGluZywgYXMgd2VsbCBhcyB0aGUgcGVyY2VudGFnZSBvZiBjYXN0aW5ncyB0byBiZSB0ZXN0ZWQuICIsIm1hdGNoTGV2ZWwiOiJub25lIiwibWF0Y2hlZFdvcmRzIjpbXX19fSx7ImNhdGVnb3J5Ijoic3RhbmRhcmQiLCJwYXRoIjoiL3NpdGVzL2lzb29yZy9jb250ZW50cy9kYXRhL3N0YW5kYXJkLzA3LzIwLzcyMDQ1IiwidXVpZCI6ImZlOWI4NWNhLTU0ODEtNDU1NC1iODU5LWMyYTUzZjE3NzI1MyIsInRpdGxlIjoiSVNPIDQzMDYtNDoyMDIwIENyYW5lcyDigJQgVm9jYWJ1bGFyeSDigJQgUGFydCA0OiBKaWIgY3JhbmVzIiwic3RhdHVzIjoiUHVibGlzaGVkIiwieWVhciI6MjAyMCwib3JkZXIiOjExLCJ0ZXh0IjoiVGhlIElTTyA0MzA2IHNlcmllcyBlc3RhYmxpc2hlcyBhIHZvY2FidWxhcnkgb2YgdGhlIG1vc3QgY29tbW9ubHkgdXNlZCB0ZXJtcyBpbiB0aGUgZmllbGQgb2YgY3JhbmVzLiBUaGlzIGRvY3VtZW50IGRlZmluZXMgdGhlIHRlcm1zIHJlbGF0ZWQgdG8gamliIHR5cGUgY3JhbmVzLiBNb2JpbGUgY3JhbmVzLCB0b3dlciBjcmFuZXMsIHJhaWx3YXkgY3JhbmVzLCBhbmQgb2Zmc2hvcmUgY3JhbmVzIGFyZSBleGNsdWRlZC4gQW5uZXggQSBjb250YWlucyBhIGRpYWdyYW0gc2hvd2luZyB0aGUgZGlmZmVyZW50IHR5cGVzIG9mIGppYiBjcmFuZXMuICIsIm9iamVjdElEIjoiNzIwNDVfMCIsIl9oaWdobGlnaHRSZXN1bHQiOnsidGl0bGUiOnsidmFsdWUiOiJJU08gNDMwNi00OjIwMjAgQ3JhbmVzIOKAlCBWb2NhYnVsYXJ5IOKAlCBQYXJ0IDQ6IEppYiBjcmFuZXMiLCJtYXRjaExldmVsIjoibm9uZSIsIm1hdGNoZWRXb3JkcyI6W119LCJ0ZXh0Ijp7InZhbHVlIjoiVGhlIElTTyA0MzA2IHNlcmllcyBlc3RhYmxpc2hlcyBhIHZvY2FidWxhcnkgb2YgdGhlIG1vc3QgY29tbW9ubHkgdXNlZCB0ZXJtcyBpbiB0aGUgZmllbGQgb2YgY3JhbmVzLiBUaGlzIGRvY3VtZW50IGRlZmluZXMgdGhlIHRlcm1zIHJlbGF0ZWQgdG8gamliIHR5cGUgY3JhbmVzLiBNb2JpbGUgY3JhbmVzLCB0b3dlciBjcmFuZXMsIHJhaWx3YXkgY3JhbmVzLCBhbmQgb2Zmc2hvcmUgY3JhbmVzIGFyZSBleGNsdWRlZC4gQW5uZXggQSBjb250YWlucyBhIGRpYWdyYW0gc2hvd2luZyB0aGUgZGlmZmVyZW50IHR5cGVzIG9mIGppYiBjcmFuZXMuICIsIm1hdGNoTGV2ZWwiOiJub25lIiwibWF0Y2hlZFdvcmRzIjpbXX19fSx7ImNhdGVnb3J5Ijoic3RhbmRhcmQiLCJwYXRoIjoiL3NpdGVzL2lzb29yZy9jb250ZW50cy9kYXRhL3N0YW5kYXJkLzA2Lzk2LzY5NjQ2IiwidXVpZCI6IjBiOTZiMDkwLTcwZjktNDVhNS04ZWE4LWZlYjMwMDZhYzg3NiIsInRpdGxlIjoiSVNPIDQxMjYtMzoyMDIwIFNhZmV0eSBkZXZpY2VzIGZvciBwcm90ZWN0aW9uIGFnYWluc3QgZXhjZXNzaXZlIHByZXNzdXJlIOKAlCBQYXJ0IDM6IFNhZmV0eSB2YWx2ZXMgYW5kIGJ1cnN0aW5nIGRpc2Mgc2FmZXR5IGRldmljZXMgaW4gY29tYmluYXRpb24iLCJzdGF0dXMiOiJQdWJsaXNoZWQiLCJ5ZWFyIjoyMDIwLCJvcmRlciI6MTEsInRleHQiOiJUaGlzIGRvY3VtZW50IHNwZWNpZmllcyBvbmx5IHRoZSByZXF1aXJlbWVudHMgZm9yIGEgcHJvZHVjdCBhc3NlbWJsZWQgZnJvbSB0aGUgaW4tc2VyaWVzIGNvbWJpbmF0aW9uIG9mIHNhZmV0eSB2YWx2ZXMgb3IgQ1NQUlMgKGNvbnRyb2xsZWQgc2FmZXR5IHByZXNzdXJlIHJlbGllZiBzeXN0ZW1zKSBhY2NvcmRpbmcgdG8gSVNPIDQxMjbigJExLCBJU08gNDEyNuKAkTQgYW5kIElTTyA0MTI24oCRNSwgYW5kIGJ1cnN0aW5nIGRpc2Mgc2FmZXR5IGRldmljZXMsIGFjY29yZGluZyB0byBJU08gNDEyNuKAkTIsIGluc3RhbGxlZCB1cHN0cmVhbSBvZiB0aGUgdmFsdmUgd2l0aGluIGZpdmUgcGlwZSBkaWFtZXRlcnMgb2YgdGhlIHZhbHZlIGlubGV0LiBJdCBzcGVjaWZpZXMgdGhlIGRlc2lnbiwgYXBwbGljYXRpb24gYW5kIG1hcmtpbmcgcmVxdWlyZW1lbnRzIGZvciBzdWNoIHByb2R1Y3RzLCBjb21wb3NlZCBvZiB0aGUgYnVyc3RpbmcgZGlzYyBzYWZldHkgZGV2aWNlLCBhIHNhZmV0eSB2YWx2ZSBvciBDU1BSUyBhbmQsIHdoZXJlIGFwcGxpY2FibGUsIGEgY29ubmVjdGluZyBwaXBlIG9yIHNwb29sIHBpZWNlLiBJbiBhZGRpdGlvbiwgaXQgZ2l2ZXMgYSBtZXRob2QgZm9yIGVzdGFibGlzaGluZyB0aGUgY29tYmluYXRpb24gZGlzY2hhcmdlIGZhY3RvciB1c2VkIGluIHNpemluZyBjb21iaW5hdGlvbnMuICIsIm9iamVjdElEIjoiNjk2NDZfMCIsIl9oaWdobGlnaHRSZXN1bHQiOnsidGl0bGUiOnsidmFsdWUiOiJJU08gNDEyNi0zOjIwMjAgU2FmZXR5IGRldmljZXMgZm9yIHByb3RlY3Rpb24gYWdhaW5zdCBleGNlc3NpdmUgcHJlc3N1cmUg4oCUIFBhcnQgMzogU2FmZXR5IHZhbHZlcyBhbmQgYnVyc3RpbmcgZGlzYyBzYWZldHkgZGV2aWNlcyBpbiBjb21iaW5hdGlvbiIsIm1hdGNoTGV2ZWwiOiJub25lIiwibWF0Y2hlZFdvcmRzIjpbXX0sInRleHQiOnsidmFsdWUiOiJUaGlzIGRvY3VtZW50IHNwZWNpZmllcyBvbmx5IHRoZSByZXF1aXJlbWVudHMgZm9yIGEgcHJvZHVjdCBhc3NlbWJsZWQgZnJvbSB0aGUgaW4tc2VyaWVzIGNvbWJpbmF0aW9uIG9mIHNhZmV0eSB2YWx2ZXMgb3IgQ1NQUlMgKGNvbnRyb2xsZWQgc2FmZXR5IHByZXNzdXJlIHJlbGllZiBzeXN0ZW1zKSBhY2NvcmRpbmcgdG8gSVNPIDQxMjbigJExLCBJU08gNDEyNuKAkTQgYW5kIElTTyA0MTI24oCRNSwgYW5kIGJ1cnN0aW5nIGRpc2Mgc2FmZXR5IGRldmljZXMsIGFjY29yZGluZyB0byBJU08gNDEyNuKAkTIsIGluc3RhbGxlZCB1cHN0cmVhbSBvZiB0aGUgdmFsdmUgd2l0aGluIGZpdmUgcGlwZSBkaWFtZXRlcnMgb2YgdGhlIHZhbHZlIGlubGV0LiBJdCBzcGVjaWZpZXMgdGhlIGRlc2lnbiwgYXBwbGljYXRpb24gYW5kIG1hcmtpbmcgcmVxdWlyZW1lbnRzIGZvciBzdWNoIHByb2R1Y3RzLCBjb21wb3NlZCBvZiB0aGUgYnVyc3RpbmcgZGlzYyBzYWZldHkgZGV2aWNlLCBhIHNhZmV0eSB2YWx2ZSBvciBDU1BSUyBhbmQsIHdoZXJlIGFwcGxpY2FibGUsIGEgY29ubmVjdGluZyBwaXBlIG9yIHNwb29sIHBpZWNlLiBJbiBhZGRpdGlvbiwgaXQgZ2l2ZXMgYSBtZXRob2QgZm9yIGVzdGFibGlzaGluZyB0aGUgY29tYmluYXRpb24gZGlzY2hhcmdlIGZhY3RvciB1c2VkIGluIHNpemluZyBjb21iaW5hdGlvbnMuICIsIm1hdGNoTGV2ZWwiOiJub25lIiwibWF0Y2hlZFdvcmRzIjpbXX19fSx7ImNhdGVnb3J5Ijoic3RhbmRhcmQiLCJwYXRoIjoiL3NpdGVzL2lzb29yZy9jb250ZW50cy9kYXRhL3N0YW5kYXJkLzA2LzgwLzY4MDMyIiwidXVpZCI6IjMzYTJjZjk1LThiOGUtNDNmOC04MDE1LWM1OTU4NDJiMWQ2MSIsInRpdGxlIjoiSVNPIDQ2NDItMjoyMDE1IFJ1YmJlciBhbmQgcGxhc3RpY3MgaG9zZXMsIG5vbi1jb2xsYXBzaWJsZSwgZm9yIGZpcmUtZmlnaHRpbmcgc2VydmljZSDigJQgUGFydCAyOiBTZW1pLXJpZ2lkIGhvc2VzIChhbmQgaG9zZSBhc3NlbWJsaWVzKSBmb3IgcHVtcHMgYW5kIHZlaGljbGVzIiwic3RhdHVzIjoiUHVibGlzaGVkIiwieWVhciI6MjAyMCwib3JkZXIiOjExLCJ0ZXh0IjoiSVNPIDQ2NDItMjoyMDE1IHNwZWNpZmllcyB0aGUgcmVxdWlyZW1lbnRzIGFuZCB0ZXN0IG1ldGhvZHMgZm9yIHNlbWktcmlnaWQgcmVlbCBob3NlcyBmb3IgdXNlIG9uIGZpcmUtZmlnaHRpbmcgdmVoaWNsZXMgYW5kIHRyYWlsZXIgcHVtcHMuIFRoZSBob3NlcyBhcmUgaW50ZW5kZWQgZm9yIHVzZSBhdCBhIG1heGltdW0gd29ya2luZyBwcmVzc3VyZSBvZiAxLDUgTVBhIGZvciBub3JtYWwgcHJlc3N1cmUgaG9zZXMgKGNhdGVnb3J5IEkpIGFuZCA0LDAgTVBhIGZvciBoaWdoIHByZXNzdXJlIGhvc2VzIChjYXRlZ29yeSBJSSkuIFRoZSBob3NlcyBhcmUgZnVydGhlciBzdWJkaXZpZGVkIGludG8gdHlwZXMgYW5kIGNsYXNzZXMgKHNlZSBDbGF1c2UgNCkuIElTTyA0NjQyLTI6MjAxNSBhcHBsaWVzIHRvIGRlbGl2ZXJ5IGhvc2VzIGZvciBmaXJlLWZpZ2h0aW5nIHB1cnBvc2VzIGludGVuZGVkIGZvciB1c2UgYXQgYSBtaW5pbXVtIGFtYmllbnQgdGVtcGVyYXR1cmUgb2Yg4oiSMjAgwrBDLiBIb3NlcyBjb25mb3JtaW5nIHRvIHRoaXMgcGFydCBvZiBJU08gNDY0MiBhcmUgaW50ZW5kZWQgdG8gYmUgdXNlZCB3aXRoIGZpcmUgaG9zZSBjb3VwbGluZ3MgY29uZm9ybWluZyB0byB0aGUgcmVsZXZhbnQgbmF0aW9uYWwgc3RhbmRhcmRzIGNvdXBsaW5ncy4gUmVxdWlyZW1lbnRzIGFyZSBhbHNvIGdpdmVuIGZvciBob3NlIGFzc2VtYmxpZXMgKHNlZSA2LjEyKSB3aGVyZSB0aGVzZSBhcmUgZml0dGVkIGJ5IHRoZSBob3NlIG1hbnVmYWN0dXJlci4gTk9URSAxICAgICAgIEhvc2VzIGZvciB1c2UgYXQgdGVtcGVyYXR1cmVzIGxvd2VyIHRoYW4g4oiSMjAgwrBDIGNhbiBiZSBzdXBwbGllZCBieSBhZ3JlZW1lbnQgYmV0d2VlbiB0aGUgbWFudWZhY3R1cmVyIGFuZCBwdXJjaGFzZXIuIE5PVEUgMiAgICAgICBBbGwgcHJlc3N1cmVzIGFyZSBleHByZXNzZWQgaW4gbWVnYXBhc2NhbHMgd2hlcmUgMSBNUGEgPSAxMCBiYXIuICIsIm9iamVjdElEIjoiNjgwMzJfMCIsIl9oaWdobGlnaHRSZXN1bHQiOnsidGl0bGUiOnsidmFsdWUiOiJJU08gNDY0Mi0yOjIwMTUgUnViYmVyIGFuZCBwbGFzdGljcyBob3Nlcywgbm9uLWNvbGxhcHNpYmxlLCBmb3IgZmlyZS1maWdodGluZyBzZXJ2aWNlIOKAlCBQYXJ0IDI6IFNlbWktcmlnaWQgaG9zZXMgKGFuZCBob3NlIGFzc2VtYmxpZXMpIGZvciBwdW1wcyBhbmQgdmVoaWNsZXMiLCJtYXRjaExldmVsIjoibm9uZSIsIm1hdGNoZWRXb3JkcyI6W119LCJ0ZXh0Ijp7InZhbHVlIjoiSVNPIDQ2NDItMjoyMDE1IHNwZWNpZmllcyB0aGUgcmVxdWlyZW1lbnRzIGFuZCB0ZXN0IG1ldGhvZHMgZm9yIHNlbWktcmlnaWQgcmVlbCBob3NlcyBmb3IgdXNlIG9uIGZpcmUtZmlnaHRpbmcgdmVoaWNsZXMgYW5kIHRyYWlsZXIgcHVtcHMuIFRoZSBob3NlcyBhcmUgaW50ZW5kZWQgZm9yIHVzZSBhdCBhIG1heGltdW0gd29ya2luZyBwcmVzc3VyZSBvZiAxLDUgTVBhIGZvciBub3JtYWwgcHJlc3N1cmUgaG9zZXMgKGNhdGVnb3J5IEkpIGFuZCA0LDAgTVBhIGZvciBoaWdoIHByZXNzdXJlIGhvc2VzIChjYXRlZ29yeSBJSSkuIFRoZSBob3NlcyBhcmUgZnVydGhlciBzdWJkaXZpZGVkIGludG8gdHlwZXMgYW5kIGNsYXNzZXMgKHNlZSBDbGF1c2UgNCkuIElTTyA0NjQyLTI6MjAxNSBhcHBsaWVzIHRvIGRlbGl2ZXJ5IGhvc2VzIGZvciBmaXJlLWZpZ2h0aW5nIHB1cnBvc2VzIGludGVuZGVkIGZvciB1c2UgYXQgYSBtaW5pbXVtIGFtYmllbnQgdGVtcGVyYXR1cmUgb2Yg4oiSMjAgwrBDLiBIb3NlcyBjb25mb3JtaW5nIHRvIHRoaXMgcGFydCBvZiBJU08gNDY0MiBhcmUgaW50ZW5kZWQgdG8gYmUgdXNlZCB3aXRoIGZpcmUgaG9zZSBjb3VwbGluZ3MgY29uZm9ybWluZyB0byB0aGUgcmVsZXZhbnQgbmF0aW9uYWwgc3RhbmRhcmRzIGNvdXBsaW5ncy4gUmVxdWlyZW1lbnRzIGFyZSBhbHNvIGdpdmVuIGZvciBob3NlIGFzc2VtYmxpZXMgKHNlZSA2LjEyKSB3aGVyZSB0aGVzZSBhcmUgZml0dGVkIGJ5IHRoZSBob3NlIG1hbnVmYWN0dXJlci4gTk9URSAxICAgICAgIEhvc2VzIGZvciB1c2UgYXQgdGVtcGVyYXR1cmVzIGxvd2VyIHRoYW4g4oiSMjAgwrBDIGNhbiBiZSBzdXBwbGllZCBieSBhZ3JlZW1lbnQgYmV0d2VlbiB0aGUgbWFudWZhY3R1cmVyIGFuZCBwdXJjaGFzZXIuIE5PVEUgMiAgICAgICBBbGwgcHJlc3N1cmVzIGFyZSBleHByZXNzZWQgaW4gbWVnYXBhc2NhbHMgd2hlcmUgMSBNUGEgPSAxMCBiYXIuICIsIm1hdGNoTGV2ZWwiOiJub25lIiwibWF0Y2hlZFdvcmRzIjpbXX19fSx7ImNhdGVnb3J5Ijoic3RhbmRhcmQiLCJwYXRoIjoiL3NpdGVzL2lzb29yZy9jb250ZW50cy9kYXRhL3N0YW5kYXJkLzAwLzQ1LzQ1MjkiLCJ1dWlkIjoiNWQ2YzEwMjItNmE4NS00YjNmLTkxZTUtOGRmZDgzYmNmYWEzIiwidGl0bGUiOiJJU08gNDg1OjE5NzMgQWlyY3JhZnQgd2F0ZXItbWV0aGFub2wgcHJlc3N1cmUgY29ubmVjdGlvbnMiLCJzdGF0dXMiOiJQdWJsaXNoZWQiLCJ5ZWFyIjoyMDIwLCJvcmRlciI6MTEsInRleHQiOiJHaXZlcyB0aGUgZGltZW5zaW9ucyBvZiAxOSBtbSBhbmQgMzggbW0gYm9yZSBwcmVzc3VyZSBjb25uZWN0aW9ucy4gQSBzcGFjZSBlbnZvbG9wZSBpcyBhbHNvIHNwZWNpZmllZCBmb3IgZWFjaCBzaXplIG9mIGNvbm5lY3Rpb24uIERpbWVuc2lvbnMgYW5kIHRvbGVyYW5jZXMgZm9yIGNvbm5lY3Rpb25zIGFyZSBnaXZlbiBpbiBmaWd1cmVzIDEgYW5kIDMsIGFuZCB0aG9zZSBmb3Igc3BhY2UgZW52ZWxvcGVzIGluIGZpZ3VyZXMgMiBhbmQgNC4gVGhlIHZhbHVlcyBhcmUgbGlzdGVkIGluIHRhYmxlcy4gIiwib2JqZWN0SUQiOiI0NTI5XzAiLCJfaGlnaGxpZ2h0UmVzdWx0Ijp7InRpdGxlIjp7InZhbHVlIjoiSVNPIDQ4NToxOTczIEFpcmNyYWZ0IHdhdGVyLW1ldGhhbm9sIHByZXNzdXJlIGNvbm5lY3Rpb25zIiwibWF0Y2hMZXZlbCI6Im5vbmUiLCJtYXRjaGVkV29yZHMiOltdfSwidGV4dCI6eyJ2YWx1ZSI6IkdpdmVzIHRoZSBkaW1lbnNpb25zIG9mIDE5IG1tIGFuZCAzOCBtbSBib3JlIHByZXNzdXJlIGNvbm5lY3Rpb25zLiBBIHNwYWNlIGVudm9sb3BlIGlzIGFsc28gc3BlY2lmaWVkIGZvciBlYWNoIHNpemUgb2YgY29ubmVjdGlvbi4gRGltZW5zaW9ucyBhbmQgdG9sZXJhbmNlcyBmb3IgY29ubmVjdGlvbnMgYXJlIGdpdmVuIGluIGZpZ3VyZXMgMSBhbmQgMywgYW5kIHRob3NlIGZvciBzcGFjZSBlbnZlbG9wZXMgaW4gZmlndXJlcyAyIGFuZCA0LiBUaGUgdmFsdWVzIGFyZSBsaXN0ZWQgaW4gdGFibGVzLiAiLCJtYXRjaExldmVsIjoibm9uZSIsIm1hdGNoZWRXb3JkcyI6W119fX0seyJjYXRlZ29yeSI6InN0YW5kYXJkIiwicGF0aCI6Ii9zaXRlcy9pc29vcmcvY29udGVudHMvZGF0YS9zdGFuZGFyZC8wMy82OS8zNjk1NSIsInV1aWQiOiI0YTZkNzg5MC05YTg5LTRmZGMtODA2OC0yZjMyNGJkMzI2MzkiLCJ0aXRsZSI6IklTTyA0MjYzLTQ6MjAwNiBQZXRyb2xldW0gYW5kIHJlbGF0ZWQgcHJvZHVjdHMg4oCUIERldGVybWluYXRpb24gb2YgdGhlIGFnZWluZyBiZWhhdmlvdXIgb2YgaW5oaWJpdGVkIG9pbHMgYW5kIGZsdWlkcyDigJQgVE9TVCB0ZXN0IOKAlCBQYXJ0IDQ6IFByb2NlZHVyZSBmb3IgaW5kdXN0cmlhbCBnZWFyIG9pbHMiLCJzdGF0dXMiOiJQdWJsaXNoZWQiLCJ5ZWFyIjoyMDIwLCJvcmRlciI6MTEsInRleHQiOiJJU08gNDI2MzoyMDA2IHNwZWNpZmllcyBhIG1ldGhvZCBmb3IgdGhlIGRldGVybWluYXRpb24gb2YgdGhlIGFnZWluZyBiZWhhdmlvdXIgb2YgZ2VhciBvaWxzIG9mIGNhdGVnb3JpZXMgQ0tDLCBDS0QsIENLUyBhbmQgQ0tUIGFzIGRlZmluZWQgaW4gSVNPIDY3NDMtNi4gVGhlIGFnZWluZyBpcyBhY2NlbGVyYXRlZCBieSB0aGUgcHJlc2VuY2Ugb2YgYWlyIGFuZCBlbGV2YXRlZCB0ZW1wZXJhdHVyZXMsIGFuZCB0aGUgZGVncmFkYXRpb24gb2YgdGhlIG9pbCBpcyBhc3Nlc3NlZCBieSB0aGUgY2hhbmdlIGluIGtpbmVtYXRpYyB2aXNjb3NpdHkgYXQgMTAwIMKwQywgdGhlIGluc29sdWJsZSBjb250ZW50IChwcmVjaXBpdGF0aW9uIG51bWJlciksIGFuZCBwb3NzaWJseSB0aGUgYWNpZCBudW1iZXIgaW5jcmVhc2UsIHRoZSBzZWRpbWVudCBjb250ZW50IGJ5IGZpbHRyYXRpb24sIHRoZSBhZGRpdGl2ZXMgY29udGVudCB2YXJpYXRpb24gYW5kIHRoZSBpbmZyYS1yZWQgb3hpZGF0aW9uLiAiLCJvYmplY3RJRCI6IjM2OTU1XzAiLCJfaGlnaGxpZ2h0UmVzdWx0Ijp7InRpdGxlIjp7InZhbHVlIjoiSVNPIDQyNjMtNDoyMDA2IFBldHJvbGV1bSBhbmQgcmVsYXRlZCBwcm9kdWN0cyDigJQgRGV0ZXJtaW5hdGlvbiBvZiB0aGUgYWdlaW5nIGJlaGF2aW91ciBvZiBpbmhpYml0ZWQgb2lscyBhbmQgZmx1aWRzIOKAlCBUT1NUIHRlc3Qg4oCUIFBhcnQgNDogUHJvY2VkdXJlIGZvciBpbmR1c3RyaWFsIGdlYXIgb2lscyIsIm1hdGNoTGV2ZWwiOiJub25lIiwibWF0Y2hlZFdvcmRzIjpbXX0sInRleHQiOnsidmFsdWUiOiJJU08gNDI2MzoyMDA2IHNwZWNpZmllcyBhIG1ldGhvZCBmb3IgdGhlIGRldGVybWluYXRpb24gb2YgdGhlIGFnZWluZyBiZWhhdmlvdXIgb2YgZ2VhciBvaWxzIG9mIGNhdGVnb3JpZXMgQ0tDLCBDS0QsIENLUyBhbmQgQ0tUIGFzIGRlZmluZWQgaW4gSVNPIDY3NDMtNi4gVGhlIGFnZWluZyBpcyBhY2NlbGVyYXRlZCBieSB0aGUgcHJlc2VuY2Ugb2YgYWlyIGFuZCBlbGV2YXRlZCB0ZW1wZXJhdHVyZXMsIGFuZCB0aGUgZGVncmFkYXRpb24gb2YgdGhlIG9pbCBpcyBhc3Nlc3NlZCBieSB0aGUgY2hhbmdlIGluIGtpbmVtYXRpYyB2aXNjb3NpdHkgYXQgMTAwIMKwQywgdGhlIGluc29sdWJsZSBjb250ZW50IChwcmVjaXBpdGF0aW9uIG51bWJlciksIGFuZCBwb3NzaWJseSB0aGUgYWNpZCBudW1iZXIgaW5jcmVhc2UsIHRoZSBzZWRpbWVudCBjb250ZW50IGJ5IGZpbHRyYXRpb24sIHRoZSBhZGRpdGl2ZXMgY29udGVudCB2YXJpYXRpb24gYW5kIHRoZSBpbmZyYS1yZWQgb3hpZGF0aW9uLiAiLCJtYXRjaExldmVsIjoibm9uZSIsIm1hdGNoZWRXb3JkcyI6W119fX0seyJjYXRlZ29yeSI6InN0YW5kYXJkIiwicGF0aCI6Ii9zaXRlcy9pc29vcmcvY29udGVudHMvZGF0YS9zdGFuZGFyZC8wMC8zNS8zNTY5IiwidXVpZCI6ImJlZWY3OTQ5LTVlNjktNDM3Yi1hZWY1LTFlMWY0Mjc3OWEzNSIsInRpdGxlIjoiSVNPIDQ6MTk5NyBJbmZvcm1hdGlvbiBhbmQgZG9jdW1lbnRhdGlvbiDigJQgUnVsZXMgZm9yIHRoZSBhYmJyZXZpYXRpb24gb2YgdGl0bGUgd29yZHMgYW5kIHRpdGxlcyBvZiBwdWJsaWNhdGlvbnMiLCJzdGF0dXMiOiJQdWJsaXNoZWQiLCJ5ZWFyIjoyMDIwLCJvcmRlciI6MTEsInRleHQiOiJUaGlzIEludGVybmF0aW9uYWwgU3RhbmRhcmQgZ2l2ZXMgcnVsZXMgZm9yIGFiYnJldmlhdGluZyB0aXRsZXMgb2Ygc2VyaWFscyBhbmQsIGlmIGFwcHJvcHJpYXRlLCBub24tc2VyaWFsIGRvY3VtZW50cyBpbiBsYW5ndWFnZXMgdXNpbmcgdGhlIExhdGluLCBDeXJpbGxpYyBhbmQgR3JlZWsgYWxwaGFiZXRzLiBUaGlzIEludGVybmF0aW9uYWwgU3RhbmRhcmQgYWxzbyBzZXJ2ZXMgYXMgdGhlIGJhc2lzIGZvciB0aGUgZXN0YWJsaXNobWVudCBvZiB0aXRsZSB3b3JkIGFiYnJldmlhdGlvbnMgYnkgdGhlIElTU04gTmV0d29yay4gIiwib2JqZWN0SUQiOiIzNTY5XzAiLCJfaGlnaGxpZ2h0UmVzdWx0Ijp7InRpdGxlIjp7InZhbHVlIjoiSVNPIDQ6MTk5NyBJbmZvcm1hdGlvbiBhbmQgZG9jdW1lbnRhdGlvbiDigJQgUnVsZXMgZm9yIHRoZSBhYmJyZXZpYXRpb24gb2YgdGl0bGUgd29yZHMgYW5kIHRpdGxlcyBvZiBwdWJsaWNhdGlvbnMiLCJtYXRjaExldmVsIjoibm9uZSIsIm1hdGNoZWRXb3JkcyI6W119LCJ0ZXh0Ijp7InZhbHVlIjoiVGhpcyBJbnRlcm5hdGlvbmFsIFN0YW5kYXJkIGdpdmVzIHJ1bGVzIGZvciBhYmJyZXZpYXRpbmcgdGl0bGVzIG9mIHNlcmlhbHMgYW5kLCBpZiBhcHByb3ByaWF0ZSwgbm9uLXNlcmlhbCBkb2N1bWVudHMgaW4gbGFuZ3VhZ2VzIHVzaW5nIHRoZSBMYXRpbiwgQ3lyaWxsaWMgYW5kIEdyZWVrIGFscGhhYmV0cy4gVGhpcyBJbnRlcm5hdGlvbmFsIFN0YW5kYXJkIGFsc28gc2VydmVzIGFzIHRoZSBiYXNpcyBmb3IgdGhlIGVzdGFibGlzaG1lbnQgb2YgdGl0bGUgd29yZCBhYmJyZXZpYXRpb25zIGJ5IHRoZSBJU1NOIE5ldHdvcmsuICIsIm1hdGNoTGV2ZWwiOiJub25lIiwibWF0Y2hlZFdvcmRzIjpbXX19fSx7ImNhdGVnb3J5Ijoic3RhbmRhcmQiLCJwYXRoIjoiL3NpdGVzL2lzb29yZy9jb250ZW50cy9kYXRhL3N0YW5kYXJkLzAzLzUzLzM1MzA5IiwidXVpZCI6ImI5OTFmZjQyLTYzMGItNGNkMS04ZjU4LTcyMGRkNTgyMWI1YiIsInRpdGxlIjoiSVNPIDQyNjMtMToyMDAzIFBldHJvbGV1bSBhbmQgcmVsYXRlZCBwcm9kdWN0cyDigJQgRGV0ZXJtaW5hdGlvbiBvZiB0aGUgYWdlaW5nIGJlaGF2aW91ciBvZiBpbmhpYml0ZWQgb2lscyBhbmQgZmx1aWRzIOKAlCBUT1NUIHRlc3Qg4oCUIFBhcnQgMTogUHJvY2VkdXJlIGZvciBtaW5lcmFsIG9pbHMiLCJzdGF0dXMiOiJQdWJsaXNoZWQiLCJ5ZWFyIjoyMDIwLCJvcmRlciI6MTEsInRleHQiOiJJU08gNDI2My0xOjIwMDMgc3BlY2lmaWVzIGEgbWV0aG9kIGZvciB0aGUgZGV0ZXJtaW5hdGlvbiBvZiB0aGUgYWdlaW5nIGJlaGF2aW91ciBvZiBydXN0LSBhbmQgb3hpZGF0aW9uLSBpbmhpYml0ZWQgbWluZXJhbCBvaWxzIGhhdmluZyBhIGRlbnNpdHkgbGVzcyB0aGFuIHRoYXQgb2Ygd2F0ZXIsIHVzZWQgYXMgdHVyYmluZSBvaWxzIChjYXRlZ29yaWVzIFRTQSwgVEdBLCBUU0UsIFRHRSBvZiBJU08gNjc0My01LCBoeWRyYXVsaWMgb2lscyAoY2F0ZWdvcmllcyBITCwgSE0sIEhSLCBIViwgSEcgb2YgSVNPIDY3NDMtNCksIGFuZCBjaXJjdWxhdGluZyBvaWxzIChjYXRlZ29yeSBDS0Igb2YgSVNPIDY3NDMtNikuIE9pbHMgY29udGFpbmluZyBzeW50aGV0aWMgY29tcG9uZW50cyBjYW4gYmUgdGVzdGVkIGJ5IHRoaXMgcHJvY2VkdXJlLCBidXQgbm8gcHJlY2lzaW9uIHN0YXRlbWVudCBpcyBhdmFpbGFibGUgeWV0IGZvciBzdWNoIGZsdWlkcy4gVGhpcyB0ZXN0IG1ldGhvZCBpcyB3aWRlbHkgdXNlZCBpbiBzcGVjaWZpY2F0aW9ucyBhbmQgaXMgY29uc2lkZXJlZCBvZiB2YWx1ZSBpbiBjb21wYXJpbmcgdGhlIG94aWRhdGlvbiBzdGFiaWxpdHkgb2Ygb2lscyB0aGF0IGFyZSBwcm9uZSB0byBjb250YW1pbmF0aW9uIHdpdGggd2F0ZXIuIEhvd2V2ZXIsIGJlY2F1c2Ugb2YgdGhlIGxhcmdlIG51bWJlciBvZiBpbmRpdmlkdWFsIGZpZWxkIHNlcnZpY2UgYXBwbGljYXRpb25zLCB0aGUgY29ycmVsYXRpb24gYmV0d2VlbiB0aGUgcmVzdWx0cyBvZiB0aGlzIHRlc3QgYW5kIGFjdHVhbCBzZXJ2aWNlIHBlcmZvcm1hbmNlIGNhbiB2YXJ5IG1hcmtlZGx5LCBhbmQgaXMgYmVzdCBqdWRnZWQgb24gZXhwZXJpZW5jZS4gIiwib2JqZWN0SUQiOiIzNTMwOV8wIiwiX2hpZ2hsaWdodFJlc3VsdCI6eyJ0aXRsZSI6eyJ2YWx1ZSI6IklTTyA0MjYzLTE6MjAwMyBQZXRyb2xldW0gYW5kIHJlbGF0ZWQgcHJvZHVjdHMg4oCUIERldGVybWluYXRpb24gb2YgdGhlIGFnZWluZyBiZWhhdmlvdXIgb2YgaW5oaWJpdGVkIG9pbHMgYW5kIGZsdWlkcyDigJQgVE9TVCB0ZXN0IOKAlCBQYXJ0IDE6IFByb2NlZHVyZSBmb3IgbWluZXJhbCBvaWxzIiwibWF0Y2hMZXZlbCI6Im5vbmUiLCJtYXRjaGVkV29yZHMiOltdfSwidGV4dCI6eyJ2YWx1ZSI6IklTTyA0MjYzLTE6MjAwMyBzcGVjaWZpZXMgYSBtZXRob2QgZm9yIHRoZSBkZXRlcm1pbmF0aW9uIG9mIHRoZSBhZ2VpbmcgYmVoYXZpb3VyIG9mIHJ1c3QtIGFuZCBveGlkYXRpb24tIGluaGliaXRlZCBtaW5lcmFsIG9pbHMgaGF2aW5nIGEgZGVuc2l0eSBsZXNzIHRoYW4gdGhhdCBvZiB3YXRlciwgdXNlZCBhcyB0dXJiaW5lIG9pbHMgKGNhdGVnb3JpZXMgVFNBLCBUR0EsIFRTRSwgVEdFIG9mIElTTyA2NzQzLTUsIGh5ZHJhdWxpYyBvaWxzIChjYXRlZ29yaWVzIEhMLCBITSwgSFIsIEhWLCBIRyBvZiBJU08gNjc0My00KSwgYW5kIGNpcmN1bGF0aW5nIG9pbHMgKGNhdGVnb3J5IENLQiBvZiBJU08gNjc0My02KS4gT2lscyBjb250YWluaW5nIHN5bnRoZXRpYyBjb21wb25lbnRzIGNhbiBiZSB0ZXN0ZWQgYnkgdGhpcyBwcm9jZWR1cmUsIGJ1dCBubyBwcmVjaXNpb24gc3RhdGVtZW50IGlzIGF2YWlsYWJsZSB5ZXQgZm9yIHN1Y2ggZmx1aWRzLiBUaGlzIHRlc3QgbWV0aG9kIGlzIHdpZGVseSB1c2VkIGluIHNwZWNpZmljYXRpb25zIGFuZCBpcyBjb25zaWRlcmVkIG9mIHZhbHVlIGluIGNvbXBhcmluZyB0aGUgb3hpZGF0aW9uIHN0YWJpbGl0eSBvZiBvaWxzIHRoYXQgYXJlIHByb25lIHRvIGNvbnRhbWluYXRpb24gd2l0aCB3YXRlci4gSG93ZXZlciwgYmVjYXVzZSBvZiB0aGUgbGFyZ2UgbnVtYmVyIG9mIGluZGl2aWR1YWwgZmllbGQgc2VydmljZSBhcHBsaWNhdGlvbnMsIHRoZSBjb3JyZWxhdGlvbiBiZXR3ZWVuIHRoZSByZXN1bHRzIG9mIHRoaXMgdGVzdCBhbmQgYWN0dWFsIHNlcnZpY2UgcGVyZm9ybWFuY2UgY2FuIHZhcnkgbWFya2VkbHksIGFuZCBpcyBiZXN0IGp1ZGdlZCBvbiBleHBlcmllbmNlLiAiLCJtYXRjaExldmVsIjoibm9uZSIsIm1hdGNoZWRXb3JkcyI6W119fX0seyJjYXRlZ29yeSI6InN0YW5kYXJkIiwicGF0aCI6Ii9zaXRlcy9pc29vcmcvY29udGVudHMvZGF0YS9zdGFuZGFyZC8wMy80Mi8zNDI3OSIsInV1aWQiOiIzNDMxMDhjYS0yNTZkLTQ3YzQtYmM2My1mMTYwMGEyM2U3OGQiLCJ0aXRsZSI6IklTTyA0MjYzLTI6MjAwMyBQZXRyb2xldW0gYW5kIHJlbGF0ZWQgcHJvZHVjdHMg4oCUIERldGVybWluYXRpb24gb2YgdGhlIGFnZWluZyBiZWhhdmlvdXIgb2YgaW5oaWJpdGVkIG9pbHMgYW5kIGZsdWlkcyDigJQgVE9TVCB0ZXN0IOKAlCBQYXJ0IDI6IFByb2NlZHVyZSBmb3IgY2F0ZWdvcnkgSEZDIGh5ZHJhdWxpYyBmbHVpZHMiLCJzdGF0dXMiOiJQdWJsaXNoZWQiLCJ5ZWFyIjoyMDIwLCJvcmRlciI6MTEsInRleHQiOiJJU08gNDI2My0yOjIwMDMgc3BlY2lmaWVzIGEgbWV0aG9kIGZvciB0aGUgZGV0ZXJtaW5hdGlvbiBvZiB0aGUgYWdlaW5nIGJlaGF2aW91ciBvZiBoeWRyYXVsaWMgZmx1aWRzIG9mIGNhdGVnb3J5IEhGQyBhcyBkZWZpbmVkIGluIElTTyA2NzQzLTQgYW5kIHNwZWNpZmllZCBpbiBJU08gMTI5MjIuIFRoZSBhZ2VpbmcgaXMgYWNjZWxlcmF0ZWQgYnkgdGhlIHByZXNlbmNlIG9mIG94eWdlbiwgd2F0ZXIgYW5kIG1ldGFsIGNhdGFseXN0cyBhdCBlbGV2YXRlZCB0ZW1wZXJhdHVyZSwgYW5kIHRoZSBkZWdyYWRhdGlvbiBvZiB0aGUgZmx1aWQgaXMgZm9sbG93ZWQgYnkgY2hhbmdlcyBpbiBwSCB2YWx1ZSBhbmQgaW5zb2x1YmxlcyBjb250ZW50LiBPdGhlciBwYXJ0cyBvZiBJU08gNDI2MyBzcGVjaWZ5IHNpbWlsYXIgcHJvY2VkdXJlcyBmb3IgdGhlIGRldGVybWluYXRpb24gb2YgdGhlIGFnZWluZyBiZWhhdmlvdXIgb2YgbWluZXJhbCBvaWxzIGFuZCBzcGVjaWZpZWQgY2F0ZWdvcmllcyBvZiBmaXJlLXJlc2lzdGFudCBmbHVpZHMgdXNlZCBpbiBoeWRyYXVsaWMgYW5kIG90aGVyIGFwcGxpY2F0aW9ucy4gIiwib2JqZWN0SUQiOiIzNDI3OV8wIiwiX2hpZ2hsaWdodFJlc3VsdCI6eyJ0aXRsZSI6eyJ2YWx1ZSI6IklTTyA0MjYzLTI6MjAwMyBQZXRyb2xldW0gYW5kIHJlbGF0ZWQgcHJvZHVjdHMg4oCUIERldGVybWluYXRpb24gb2YgdGhlIGFnZWluZyBiZWhhdmlvdXIgb2YgaW5oaWJpdGVkIG9pbHMgYW5kIGZsdWlkcyDigJQgVE9TVCB0ZXN0IOKAlCBQYXJ0IDI6IFByb2NlZHVyZSBmb3IgY2F0ZWdvcnkgSEZDIGh5ZHJhdWxpYyBmbHVpZHMiLCJtYXRjaExldmVsIjoibm9uZSIsIm1hdGNoZWRXb3JkcyI6W119LCJ0ZXh0Ijp7InZhbHVlIjoiSVNPIDQyNjMtMjoyMDAzIHNwZWNpZmllcyBhIG1ldGhvZCBmb3IgdGhlIGRldGVybWluYXRpb24gb2YgdGhlIGFnZWluZyBiZWhhdmlvdXIgb2YgaHlkcmF1bGljIGZsdWlkcyBvZiBjYXRlZ29yeSBIRkMgYXMgZGVmaW5lZCBpbiBJU08gNjc0My00IGFuZCBzcGVjaWZpZWQgaW4gSVNPIDEyOTIyLiBUaGUgYWdlaW5nIGlzIGFjY2VsZXJhdGVkIGJ5IHRoZSBwcmVzZW5jZSBvZiBveHlnZW4sIHdhdGVyIGFuZCBtZXRhbCBjYXRhbHlzdHMgYXQgZWxldmF0ZWQgdGVtcGVyYXR1cmUsIGFuZCB0aGUgZGVncmFkYXRpb24gb2YgdGhlIGZsdWlkIGlzIGZvbGxvd2VkIGJ5IGNoYW5nZXMgaW4gcEggdmFsdWUgYW5kIGluc29sdWJsZXMgY29udGVudC4gT3RoZXIgcGFydHMgb2YgSVNPIDQyNjMgc3BlY2lmeSBzaW1pbGFyIHByb2NlZHVyZXMgZm9yIHRoZSBkZXRlcm1pbmF0aW9uIG9mIHRoZSBhZ2VpbmcgYmVoYXZpb3VyIG9mIG1pbmVyYWwgb2lscyBhbmQgc3BlY2lmaWVkIGNhdGVnb3JpZXMgb2YgZmlyZS1yZXNpc3RhbnQgZmx1aWRzIHVzZWQgaW4gaHlkcmF1bGljIGFuZCBvdGhlciBhcHBsaWNhdGlvbnMuICIsIm1hdGNoTGV2ZWwiOiJub25lIiwibWF0Y2hlZFdvcmRzIjpbXX19fSx7ImNhdGVnb3J5Ijoic3RhbmRhcmQiLCJwYXRoIjoiL3NpdGVzL2lzb29yZy9jb250ZW50cy9kYXRhL3N0YW5kYXJkLzAxLzAxLzEwMTIwIiwidXVpZCI6ImVjMTVjNGFkLWJhMjctNDYwOS04M2QzLWE2MTUxMDZiMGIxMCIsInRpdGxlIjoiSVNPIDQyODA6MTk3NyBDcnlvbGl0ZSwgbmF0dXJhbCBhbmQgYXJ0aWZpY2lhbCwgYW5kIGFsdW1pbml1bSBmbHVvcmlkZSBmb3IgaW5kdXN0cmlhbCB1c2Ug4oCUIERldGVybWluYXRpb24gb2Ygc3VscGhhdGUgY29udGVudCDigJQgQmFyaXVtIHN1bHBoYXRlIGdyYXZpbWV0cmljIG1ldGhvZCIsInN0YXR1cyI6IlB1Ymxpc2hlZCIsInllYXIiOjIwMjAsIm9yZGVyIjoxMSwidGV4dCI6IkFwcGxpY2FibGUgdG8gcHJvZHVjdHMgaGF2aW5nIGEgY29udGVudCwgZXhwcmVzc2VkIGFzIHN1bHBodXIgdHJpb3hpZGUsIGVxdWFsIHRvIG9yIG1vcmUgdGhhbiAwLjEgJSAobS9tKS4gQmFzZXMgb24gYWxrYWxpbmUgZnVzaW9uIG9mIGEgdGVzdCBwb3J0aW9uIHdpdGggYSBtaXh0dXJlIG9mIHNvZGl1bSBjYXJib25hdGUgYW5kIGJvcmljIGFjaWQuIEV4dHJhY3Rpb24gb2YgdGhlIGZ1c2VkIG1hc3Mgd2l0aCBwZXJjaGxvcmljIGFjaWQgc29sdXRpb24gYW5kIHByZWNpcGl0YXRpb24gb2YgdGhlIHN1bHBoYXRlIGlvbnMgd2l0aCBiYXJpdW0gY2hsb3JpZGUgaW4gYW4gYWNpZGlmaWVkIG1lZGl1bS4gRmlsdHJhdGlvbiBvbiBhIGZpbmUtdGV4dHVyZSwgYXNobGVzcyBmaWx0ZXIgcGFwZXIgKHBvcmUgZGlhbWV0ZXIgYXBwcm94aW1hdGVseSAwLjQgdG8gMS4wIG0pLiBDYWxjaW5hdGlvbiBhZnRlciBkcnlpbmcgaW4gYW4gZWxlY3RyaWMgb3ZlbiBhdCAoODUwIDIwKSDCsEMuIFdlaWdoaW5nIG9mIHRoZSByZXNpZHVlLiAiLCJvYmplY3RJRCI6IjEwMTIwXzAiLCJfaGlnaGxpZ2h0UmVzdWx0Ijp7InRpdGxlIjp7InZhbHVlIjoiSVNPIDQyODA6MTk3NyBDcnlvbGl0ZSwgbmF0dXJhbCBhbmQgYXJ0aWZpY2lhbCwgYW5kIGFsdW1pbml1bSBmbHVvcmlkZSBmb3IgaW5kdXN0cmlhbCB1c2Ug4oCUIERldGVybWluYXRpb24gb2Ygc3VscGhhdGUgY29udGVudCDigJQgQmFyaXVtIHN1bHBoYXRlIGdyYXZpbWV0cmljIG1ldGhvZCIsIm1hdGNoTGV2ZWwiOiJub25lIiwibWF0Y2hlZFdvcmRzIjpbXX0sInRleHQiOnsidmFsdWUiOiJBcHBsaWNhYmxlIHRvIHByb2R1Y3RzIGhhdmluZyBhIGNvbnRlbnQsIGV4cHJlc3NlZCBhcyBzdWxwaHVyIHRyaW94aWRlLCBlcXVhbCB0byBvciBtb3JlIHRoYW4gMC4xICUgKG0vbSkuIEJhc2VzIG9uIGFsa2FsaW5lIGZ1c2lvbiBvZiBhIHRlc3QgcG9ydGlvbiB3aXRoIGEgbWl4dHVyZSBvZiBzb2RpdW0gY2FyYm9uYXRlIGFuZCBib3JpYyBhY2lkLiBFeHRyYWN0aW9uIG9mIHRoZSBmdXNlZCBtYXNzIHdpdGggcGVyY2hsb3JpYyBhY2lkIHNvbHV0aW9uIGFuZCBwcmVjaXBpdGF0aW9uIG9mIHRoZSBzdWxwaGF0ZSBpb25zIHdpdGggYmFyaXVtIGNobG9yaWRlIGluIGFuIGFjaWRpZmllZCBtZWRpdW0uIEZpbHRyYXRpb24gb24gYSBmaW5lLXRleHR1cmUsIGFzaGxlc3MgZmlsdGVyIHBhcGVyIChwb3JlIGRpYW1ldGVyIGFwcHJveGltYXRlbHkgMC40IHRvIDEuMCBtKS4gQ2FsY2luYXRpb24gYWZ0ZXIgZHJ5aW5nIGluIGFuIGVsZWN0cmljIG92ZW4gYXQgKDg1MCAyMCkgwrBDLiBXZWlnaGluZyBvZiB0aGUgcmVzaWR1ZS4gIiwibWF0Y2hMZXZlbCI6Im5vbmUiLCJtYXRjaGVkV29yZHMiOltdfX19LHsiY2F0ZWdvcnkiOiJzdGFuZGFyZCIsInBhdGgiOiIvc2l0ZXMvaXNvb3JnL2NvbnRlbnRzL2RhdGEvc3RhbmRhcmQvMDcvNzEvNzcxODQiLCJ1dWlkIjoiNThlYTI2OTktNjcyOC00NjUyLTkwYzgtMWFkMDg0NzI2NzI3IiwidGl0bGUiOiJJU08gNDQ5MS00OjIwMTkgTWV0YWxsaWMgcG93ZGVycyDigJQgRGV0ZXJtaW5hdGlvbiBvZiBveHlnZW4gY29udGVudCBieSByZWR1Y3Rpb24gbWV0aG9kcyDigJQgUGFydCA0OiBUb3RhbCBveHlnZW4gYnkgcmVkdWN0aW9uLWV4dHJhY3Rpb24iLCJzdGF0dXMiOiJQdWJsaXNoZWQiLCJ5ZWFyIjoyMDE5LCJvcmRlciI6MTEsInRleHQiOiJUaGlzIGRvY3VtZW50IHNwZWNpZmllcyBhIG1ldGhvZCBmb3IgdGhlIGRldGVybWluYXRpb24gb2YgdGhlIHRvdGFsIG94eWdlbiBjb250ZW50IG9mIG1ldGFsbGljIHBvd2RlcnMgYnkgcmVkdWN0aW9uLWV4dHJhY3Rpb24gYXQgaGlnaCB0ZW1wZXJhdHVyZS4gQnkgYWdyZWVtZW50LCB0aGlzIG1ldGhvZCBpcyBhbHNvIGFwcGxpY2FibGUgdG8gdGhlIGRldGVybWluYXRpb24gb2YgdGhlIHRvdGFsIG94eWdlbiBjb250ZW50IG9mIHNpbnRlcmVkIG1ldGFsIG1hdGVyaWFscy4gVGhlIG1ldGhvZCBpcyBhcHBsaWNhYmxlIHRvIGFsbCBwb3dkZXJzIG9mIG1ldGFscywgYWxsb3lzLCBjYXJiaWRlcywgYW5kIG1peHR1cmVzIHRoZXJlb2Ygd2hpY2ggYXJlIG5vbi12b2xhdGlsZSB1bmRlciB0aGUgdGVzdCBjb25kaXRpb25zLiBUaGUgc2FtcGxlIGNhbiBiZSBpbiBwb3dkZXIgb3IgY29tcGFjdCBmb3JtLiBUaGUgYW5hbHlzaXMgaXMgY2FycmllZCBvdXQgb24gdGhlIHBvd2RlciBhcyBzdXBwbGllZCwgYnV0IHRoZSBtZXRob2QgaXMgbm90IGFwcGxpY2FibGUgaWYgdGhlIHBvd2RlciBjb250YWlucyBhIGx1YnJpY2FudCBvciBiaW5kZXIuIElmIHN1Y2ggc3Vic3RhbmNlcyBhcmUgcHJlc2VudCwgdGhlIG1ldGhvZCBtYXkgYmUgdXNlZCBvbmx5IGlmIHRoZXkgY2FuIGZpcnN0IGJlIGNvbXBsZXRlbHkgcmVtb3ZlZCBieSBhIG1ldGhvZCBub3QgYWZmZWN0aW5nIHRoZSBveHlnZW4gY29udGVudCBvZiB0aGUgcG93ZGVyLiBUaGlzIGRvY3VtZW50IGlzIHRvIGJlIHJlYWQgaW4gY29uanVuY3Rpb24gd2l0aCBJU08gNDQ5MS0xLiAiLCJvYmplY3RJRCI6Ijc3MTg0XzAiLCJfaGlnaGxpZ2h0UmVzdWx0Ijp7InRpdGxlIjp7InZhbHVlIjoiSVNPIDQ0OTEtNDoyMDE5IE1ldGFsbGljIHBvd2RlcnMg4oCUIERldGVybWluYXRpb24gb2Ygb3h5Z2VuIGNvbnRlbnQgYnkgcmVkdWN0aW9uIG1ldGhvZHMg4oCUIFBhcnQgNDogVG90YWwgb3h5Z2VuIGJ5IHJlZHVjdGlvbi1leHRyYWN0aW9uIiwibWF0Y2hMZXZlbCI6Im5vbmUiLCJtYXRjaGVkV29yZHMiOltdfSwidGV4dCI6eyJ2YWx1ZSI6IlRoaXMgZG9jdW1lbnQgc3BlY2lmaWVzIGEgbWV0aG9kIGZvciB0aGUgZGV0ZXJtaW5hdGlvbiBvZiB0aGUgdG90YWwgb3h5Z2VuIGNvbnRlbnQgb2YgbWV0YWxsaWMgcG93ZGVycyBieSByZWR1Y3Rpb24tZXh0cmFjdGlvbiBhdCBoaWdoIHRlbXBlcmF0dXJlLiBCeSBhZ3JlZW1lbnQsIHRoaXMgbWV0aG9kIGlzIGFsc28gYXBwbGljYWJsZSB0byB0aGUgZGV0ZXJtaW5hdGlvbiBvZiB0aGUgdG90YWwgb3h5Z2VuIGNvbnRlbnQgb2Ygc2ludGVyZWQgbWV0YWwgbWF0ZXJpYWxzLiBUaGUgbWV0aG9kIGlzIGFwcGxpY2FibGUgdG8gYWxsIHBvd2RlcnMgb2YgbWV0YWxzLCBhbGxveXMsIGNhcmJpZGVzLCBhbmQgbWl4dHVyZXMgdGhlcmVvZiB3aGljaCBhcmUgbm9uLXZvbGF0aWxlIHVuZGVyIHRoZSB0ZXN0IGNvbmRpdGlvbnMuIFRoZSBzYW1wbGUgY2FuIGJlIGluIHBvd2RlciBvciBjb21wYWN0IGZvcm0uIFRoZSBhbmFseXNpcyBpcyBjYXJyaWVkIG91dCBvbiB0aGUgcG93ZGVyIGFzIHN1cHBsaWVkLCBidXQgdGhlIG1ldGhvZCBpcyBub3QgYXBwbGljYWJsZSBpZiB0aGUgcG93ZGVyIGNvbnRhaW5zIGEgbHVicmljYW50IG9yIGJpbmRlci4gSWYgc3VjaCBzdWJzdGFuY2VzIGFyZSBwcmVzZW50LCB0aGUgbWV0aG9kIG1heSBiZSB1c2VkIG9ubHkgaWYgdGhleSBjYW4gZmlyc3QgYmUgY29tcGxldGVseSByZW1vdmVkIGJ5IGEgbWV0aG9kIG5vdCBhZmZlY3RpbmcgdGhlIG94eWdlbiBjb250ZW50IG9mIHRoZSBwb3dkZXIuIFRoaXMgZG9jdW1lbnQgaXMgdG8gYmUgcmVhZCBpbiBjb25qdW5jdGlvbiB3aXRoIElTTyA0NDkxLTEuICIsIm1hdGNoTGV2ZWwiOiJub25lIiwibWF0Y2hlZFdvcmRzIjpbXX19fSx7ImNhdGVnb3J5Ijoic3RhbmRhcmQiLCJwYXRoIjoiL3NpdGVzL2lzb29yZy9jb250ZW50cy9kYXRhL3N0YW5kYXJkLzA3LzU3Lzc1Nzg5IiwidXVpZCI6ImRlNWViNjA2LTQwYzEtNGI1NC05NGUxLWY4Yjg3ZGEzN2MyMSIsInRpdGxlIjoiSVNPIDQ3Nzg6MjAxOSBSb3VuZCBzdGVlbCBzaG9ydCBsaW5rIGNoYWlucyBmb3IgbGlmdGluZyBwdXJwb3NlcyDigJQgQ2hhaW4gc2xpbmdzIG9mIHdlbGRlZCBjb25zdHJ1Y3Rpb24g4oCUIEdyYWRlIDgiLCJzdGF0dXMiOiJQdWJsaXNoZWQiLCJ5ZWFyIjoyMDE5LCJvcmRlciI6MTEsInRleHQiOiJUaGlzIGRvY3VtZW50IHNwZWNpZmllcyB0aGUgcmVxdWlyZW1lbnRzLCBtZXRob2RzIG9mIHJhdGluZyBhbmQgdGVzdGluZyBvZiBzaW5nbGUsIGRvdWJsZSwgdGhyZWUgYW5kIGZvdXIgbGVnIHdlbGRlZCBjaGFpbiBzbGluZ3Mgb2YgZ3JhZGUgOCB1c2luZyBjb21wb25lbnRzIHN1Y2ggYXMgc2xpbmcgY2hhaW5zIGFjY29yZGluZyB0byBJU08gMzA3NiB0b2dldGhlciB3aXRoIGxpbmtzIGFjY29yZGluZyB0byBJU08gMTY3OTgsIGhvb2tzIGFjY29yZGluZyB0byBJU08gNzU5NyBhbmQgZm9yZ2VkIGNvbXBvbmVudHMgYWNjb3JkaW5nIHRvIElTTyA4NTM5LiBOT1RFIDEgICAgRm9yIHNwZWNpYWwgbGlmdGluZyBwdXJwb3NlcyBub3QgY292ZXJlZCBieSB0aGlzIGRvY3VtZW50LCBhZGRpdGlvbmFsbHkgaW50ZXJtZWRpYXRlIGxpbmtzIGNhbiBiZSB1c2VkLCBmb3IgZXhhbXBsZSB0byBjb25uZWN0IGNvbXBvbmVudHMgdG8gZWFjaCBvdGhlciBoYXZpbmcgZGlmZmVyZW50IHdvcmtpbmcgbG9hZCBsaW1pdC4gVGhlIHJhbmdlIG9mIG5vbWluYWwgZGlhbWV0ZXIsIGQgbiAsIGNvdmVyZWQgYnkgdGhpcyBkb2N1bWVudCBpcyBmcm9tIDQgbW0gdG8gNDUgbW0uIENoYWluIHNsaW5ncyBhY2NvcmRpbmcgdG8gdGhpcyBkb2N1bWVudCBhcmUgZm9yIHVzZSBpbiB0aGUgdGVtcGVyYXR1cmUgcmFuZ2UgPzQwIMKwQyB0byArNDAwIMKwQyBhY2NvcmRpbmcgdG8gSVNPIDMwNTYuIE5PVEUgMiAgICBDb25jZXJuaW5nIHRoZSB1c2UgYW5kIG1haW50ZW5hbmNlIG9mIGNoYWluIHNsaW5ncyBvZiBncmFkZSA4LCBzZWUgSVNPIDMwNTYuIENoYWluIHNsaW5ncyBhY2NvcmRpbmcgdG8gdGhpcyBkb2N1bWVudCBjb21wbHkgd2l0aCB0aGUgZ2VuZXJhbCBjb25kaXRpb25zIG9mIGFjY2VwdGFuY2Ugb2YgSVNPIDE4MzQgYW5kIGFyZSB1c2VkIGZvciBzeW1tZXRyaWNhbGx5IGRpc3RyaWJ1dGVkIGxvYWRzIG9ubHkuIE5PVEUgMyAgICBGb3IgcmF0aW5nIG9mIGNoYWluIHNsaW5ncyB3aXRoIGFzeW1tZXRyaWNhbGx5IGRpc3RyaWJ1dGVkIGxvYWRzLCBzZWUgSVNPIDMwNTYuIFRoaXMgZG9jdW1lbnQgZG9lcyBub3QgYXBwbHkgdG8gbWVjaGFuaWNhbGx5IGpvaW5lZCBjaGFpbiBzbGluZ3MuIE5PVEUgNCAgICBGb3IgbWVjaGFuaWNhbGx5IGpvaW5lZCBjaGFpbiBzbGluZ3MsIHNlZSBJU08gNzU5My4gIiwib2JqZWN0SUQiOiI3NTc4OV8wIiwiX2hpZ2hsaWdodFJlc3VsdCI6eyJ0aXRsZSI6eyJ2YWx1ZSI6IklTTyA0Nzc4OjIwMTkgUm91bmQgc3RlZWwgc2hvcnQgbGluayBjaGFpbnMgZm9yIGxpZnRpbmcgcHVycG9zZXMg4oCUIENoYWluIHNsaW5ncyBvZiB3ZWxkZWQgY29uc3RydWN0aW9uIOKAlCBHcmFkZSA4IiwibWF0Y2hMZXZlbCI6Im5vbmUiLCJtYXRjaGVkV29yZHMiOltdfSwidGV4dCI6eyJ2YWx1ZSI6IlRoaXMgZG9jdW1lbnQgc3BlY2lmaWVzIHRoZSByZXF1aXJlbWVudHMsIG1ldGhvZHMgb2YgcmF0aW5nIGFuZCB0ZXN0aW5nIG9mIHNpbmdsZSwgZG91YmxlLCB0aHJlZSBhbmQgZm91ciBsZWcgd2VsZGVkIGNoYWluIHNsaW5ncyBvZiBncmFkZSA4IHVzaW5nIGNvbXBvbmVudHMgc3VjaCBhcyBzbGluZyBjaGFpbnMgYWNjb3JkaW5nIHRvIElTTyAzMDc2IHRvZ2V0aGVyIHdpdGggbGlua3MgYWNjb3JkaW5nIHRvIElTTyAxNjc5OCwgaG9va3MgYWNjb3JkaW5nIHRvIElTTyA3NTk3IGFuZCBmb3JnZWQgY29tcG9uZW50cyBhY2NvcmRpbmcgdG8gSVNPIDg1MzkuIE5PVEUgMSAgICBGb3Igc3BlY2lhbCBsaWZ0aW5nIHB1cnBvc2VzIG5vdCBjb3ZlcmVkIGJ5IHRoaXMgZG9jdW1lbnQsIGFkZGl0aW9uYWxseSBpbnRlcm1lZGlhdGUgbGlua3MgY2FuIGJlIHVzZWQsIGZvciBleGFtcGxlIHRvIGNvbm5lY3QgY29tcG9uZW50cyB0byBlYWNoIG90aGVyIGhhdmluZyBkaWZmZXJlbnQgd29ya2luZyBsb2FkIGxpbWl0LiBUaGUgcmFuZ2Ugb2Ygbm9taW5hbCBkaWFtZXRlciwgZCBuICwgY292ZXJlZCBieSB0aGlzIGRvY3VtZW50IGlzIGZyb20gNCBtbSB0byA0NSBtbS4gQ2hhaW4gc2xpbmdzIGFjY29yZGluZyB0byB0aGlzIGRvY3VtZW50IGFyZSBmb3IgdXNlIGluIHRoZSB0ZW1wZXJhdHVyZSByYW5nZSA/NDAgwrBDIHRvICs0MDAgwrBDIGFjY29yZGluZyB0byBJU08gMzA1Ni4gTk9URSAyICAgIENvbmNlcm5pbmcgdGhlIHVzZSBhbmQgbWFpbnRlbmFuY2Ugb2YgY2hhaW4gc2xpbmdzIG9mIGdyYWRlIDgsIHNlZSBJU08gMzA1Ni4gQ2hhaW4gc2xpbmdzIGFjY29yZGluZyB0byB0aGlzIGRvY3VtZW50IGNvbXBseSB3aXRoIHRoZSBnZW5lcmFsIGNvbmRpdGlvbnMgb2YgYWNjZXB0YW5jZSBvZiBJU08gMTgzNCBhbmQgYXJlIHVzZWQgZm9yIHN5bW1ldHJpY2FsbHkgZGlzdHJpYnV0ZWQgbG9hZHMgb25seS4gTk9URSAzICAgIEZvciByYXRpbmcgb2YgY2hhaW4gc2xpbmdzIHdpdGggYXN5bW1ldHJpY2FsbHkgZGlzdHJpYnV0ZWQgbG9hZHMsIHNlZSBJU08gMzA1Ni4gVGhpcyBkb2N1bWVudCBkb2VzIG5vdCBhcHBseSB0byBtZWNoYW5pY2FsbHkgam9pbmVkIGNoYWluIHNsaW5ncy4gTk9URSA0ICAgIEZvciBtZWNoYW5pY2FsbHkgam9pbmVkIGNoYWluIHNsaW5ncywgc2VlIElTTyA3NTkzLiAiLCJtYXRjaExldmVsIjoibm9uZSIsIm1hdGNoZWRXb3JkcyI6W119fX0seyJjYXRlZ29yeSI6InN0YW5kYXJkIiwicGF0aCI6Ii9zaXRlcy9pc29vcmcvY29udGVudHMvZGF0YS9zdGFuZGFyZC8wNy8zNi83MzY1NSIsInV1aWQiOiJiNGRmZGVmOS1mY2FlLTQ2NjctYmU2Zi1kYjVlZjVhNDNiMWYiLCJ0aXRsZSI6IklTTyA0MjUxLTI6MjAxOSBDb2RlIGRlc2lnbmF0ZWQgZGlhZ29uYWwgdHlyZXMgKHBseSByYXRpbmcgbWFya2VkIHNlcmllcykgZm9yIGFncmljdWx0dXJhbCB0cmFjdG9ycywgdHJhaWxlcnMgYW5kIG1hY2hpbmVzIOKAlCBQYXJ0IDI6IFR5cmUgbG9hZCByYXRpbmdzIiwic3RhdHVzIjoiUHVibGlzaGVkIiwieWVhciI6MjAxOSwib3JkZXIiOjExLCJ0ZXh0IjoiVGhpcyBkb2N1bWVudCBlc3RhYmxpc2hlcyB0aGUgbG9hZCByYXRpbmdzIG9mIHRoZSBkaWFnb25hbCBjb2RlIGRlc2lnbmF0ZWQgKHBseSByYXRpbmcgbWFya2VkIHNlcmllcykgdHlyZXMgZm9yIGFncmljdWx0dXJhbCB0cmFjdG9ycywgdHJhaWxlcnMgYW5kIG1hY2hpbmVzLiBUeXJlIGRlc2lnbmF0aW9uIGFuZCBkaW1lbnNpb25zLCBhbmQgYXBwcm92ZWQgcmltIGNvbnRvdXJzIGFyZSBnaXZlbiBpbiBJU08gNDI1MeKAkTEuIE5PVEUgICAgICAgQ29kZSBkZXNpZ25hdGVkIGRpYWdvbmFsIHR5cmVzIChwbHkgcmF0aW5nIG1hcmtlZCBzZXJpZXMpIGZvciBjb25zdHJ1Y3Rpb24gYXBwbGljYXRpb25zIChpbmR1c3RyaWFsIHRyYWN0b3JzKSwgaWRlbnRpZmllZCBieSB0aGUgY2xhc3NpZmljYXRpb24gY29kZSBSLTQsIGFzIHNwZWNpZmllZCBpbiBJU08gMTg4MDUsIG9yIGJ5IHN1ZmZpeCBcIklORFwiIGFyZSBwYXJ0IG9mIElTTyAxMzQ0Mi4gQ29kZSBkZXNpZ25hdGVkIGRpYWdvbmFsIHR5cmVzIChwbHkgcmF0aW5nIG1hcmtlZCBzZXJpZXMpIGZvciBmb3Jlc3RyeSBtYWNoaW5lcywgaWRlbnRpZmllZCBieSB0aGUgY2xhc3NpZmljYXRpb24gY29kZSBMUywgYXMgc3BlY2lmaWVkIGluIElTTyAxODgwNSwgYXJlIGNvdmVyZWQgYnkgSVNPIDE4ODA3LiAiLCJvYmplY3RJRCI6IjczNjU1XzAiLCJfaGlnaGxpZ2h0UmVzdWx0Ijp7InRpdGxlIjp7InZhbHVlIjoiSVNPIDQyNTEtMjoyMDE5IENvZGUgZGVzaWduYXRlZCBkaWFnb25hbCB0eXJlcyAocGx5IHJhdGluZyBtYXJrZWQgc2VyaWVzKSBmb3IgYWdyaWN1bHR1cmFsIHRyYWN0b3JzLCB0cmFpbGVycyBhbmQgbWFjaGluZXMg4oCUIFBhcnQgMjogVHlyZSBsb2FkIHJhdGluZ3MiLCJtYXRjaExldmVsIjoibm9uZSIsIm1hdGNoZWRXb3JkcyI6W119LCJ0ZXh0Ijp7InZhbHVlIjoiVGhpcyBkb2N1bWVudCBlc3RhYmxpc2hlcyB0aGUgbG9hZCByYXRpbmdzIG9mIHRoZSBkaWFnb25hbCBjb2RlIGRlc2lnbmF0ZWQgKHBseSByYXRpbmcgbWFya2VkIHNlcmllcykgdHlyZXMgZm9yIGFncmljdWx0dXJhbCB0cmFjdG9ycywgdHJhaWxlcnMgYW5kIG1hY2hpbmVzLiBUeXJlIGRlc2lnbmF0aW9uIGFuZCBkaW1lbnNpb25zLCBhbmQgYXBwcm92ZWQgcmltIGNvbnRvdXJzIGFyZSBnaXZlbiBpbiBJU08gNDI1MeKAkTEuIE5PVEUgICAgICAgQ29kZSBkZXNpZ25hdGVkIGRpYWdvbmFsIHR5cmVzIChwbHkgcmF0aW5nIG1hcmtlZCBzZXJpZXMpIGZvciBjb25zdHJ1Y3Rpb24gYXBwbGljYXRpb25zIChpbmR1c3RyaWFsIHRyYWN0b3JzKSwgaWRlbnRpZmllZCBieSB0aGUgY2xhc3NpZmljYXRpb24gY29kZSBSLTQsIGFzIHNwZWNpZmllZCBpbiBJU08gMTg4MDUsIG9yIGJ5IHN1ZmZpeCBcIklORFwiIGFyZSBwYXJ0IG9mIElTTyAxMzQ0Mi4gQ29kZSBkZXNpZ25hdGVkIGRpYWdvbmFsIHR5cmVzIChwbHkgcmF0aW5nIG1hcmtlZCBzZXJpZXMpIGZvciBmb3Jlc3RyeSBtYWNoaW5lcywgaWRlbnRpZmllZCBieSB0aGUgY2xhc3NpZmljYXRpb24gY29kZSBMUywgYXMgc3BlY2lmaWVkIGluIElTTyAxODgwNSwgYXJlIGNvdmVyZWQgYnkgSVNPIDE4ODA3LiAiLCJtYXRjaExldmVsIjoibm9uZSIsIm1hdGNoZWRXb3JkcyI6W119fX0seyJjYXRlZ29yeSI6InN0YW5kYXJkIiwicGF0aCI6Ii9zaXRlcy9pc29vcmcvY29udGVudHMvZGF0YS9zdGFuZGFyZC8wNy8zNi83MzY1NCIsInV1aWQiOiI4NTM4MjFhMy01ZGJlLTQ1MzEtOGZjMy0xM2ZiMGYyNjFjNjMiLCJ0aXRsZSI6IklTTyA0MjUxLTE6MjAxOSBDb2RlIGRlc2lnbmF0ZWQgZGlhZ29uYWwgdHlyZXMgKHBseSByYXRpbmcgbWFya2VkIHNlcmllcykgZm9yIGFncmljdWx0dXJhbCB0cmFjdG9ycywgdHJhaWxlcnMgYW5kIG1hY2hpbmVzIOKAlCBQYXJ0IDE6IFR5cmUgZGVzaWduYXRpb24gYW5kIGRpbWVuc2lvbnMsIGFuZCBhcHByb3ZlZCByaW0gY29udG91cnMiLCJzdGF0dXMiOiJQdWJsaXNoZWQiLCJ5ZWFyIjoyMDE5LCJvcmRlciI6MTEsInRleHQiOiJUaGlzIGRvY3VtZW50IGVzdGFibGlzaGVzIHRoZSBkZXNpZ25hdGlvbiBpbiB1c2UgYW5kIHRoZSBkaW1lbnNpb25zIG9mIGNvZGUgZGVzaWduYXRlZCB0eXJlcyBpbiBkaWFnb25hbCBjb25zdHJ1Y3Rpb24gKHBseSByYXRpbmcgbWFya2VkIHNlcmllcykgZm9yIGFncmljdWx0dXJhbCB0cmFjdG9ycywgdHJhaWxlcnMgYW5kIG1hY2hpbmVzLiBUeXJlIGxvYWQgcmF0aW5ncyBhcmUgZ2l2ZW4gaW4gSVNPIDQyNTHigJEyLiBOT1RFICAgICAgIENvZGUgZGVzaWduYXRlZCBkaWFnb25hbCB0eXJlcyAocGx5IHJhdGluZyBtYXJrZWQgc2VyaWVzKSBmb3IgY29uc3RydWN0aW9uIGFwcGxpY2F0aW9ucyAoaW5kdXN0cmlhbCB0cmFjdG9ycyksIGlkZW50aWZpZWQgYnkgdGhlIGNsYXNzaWZpY2F0aW9uIGNvZGUgUi00LCBhcyBzcGVjaWZpZWQgaW4gSVNPIDE4ODA1LCBvciBieSBzdWZmaXggXCJJTkRcIiBhcmUgY292ZXJlZCBieSBJU08gMTM0NDIuIENvZGUgZGVzaWduYXRlZCB0eXJlcyBpbiByYWRpYWwgY29uc3RydWN0aW9uIGZvciBkcml2ZSB3aGVlbHMgb2YgYWdyaWN1bHR1cmFsIHRyYWN0b3JzIGFyZSBjb3ZlcmVkIGJ5IElTTyA4NjY0LiBDb2RlIGRlc2lnbmF0ZWQgZGlhZ29uYWwgdHlyZXMgKHBseSByYXRpbmcgbWFya2VkIHNlcmllcykgZm9yIGZvcmVzdHJ5IG1hY2hpbmVzLCBpZGVudGlmaWVkIGJ5IHRoZSBjbGFzc2lmaWNhdGlvbiBjb2RlIExTLCBhcyBzcGVjaWZpZWQgaW4gSVNPIDE4ODA1LCBhcmUgY292ZXJlZCBieSBJU08gMTg4MDcuICIsIm9iamVjdElEIjoiNzM2NTRfMCIsIl9oaWdobGlnaHRSZXN1bHQiOnsidGl0bGUiOnsidmFsdWUiOiJJU08gNDI1MS0xOjIwMTkgQ29kZSBkZXNpZ25hdGVkIGRpYWdvbmFsIHR5cmVzIChwbHkgcmF0aW5nIG1hcmtlZCBzZXJpZXMpIGZvciBhZ3JpY3VsdHVyYWwgdHJhY3RvcnMsIHRyYWlsZXJzIGFuZCBtYWNoaW5lcyDigJQgUGFydCAxOiBUeXJlIGRlc2lnbmF0aW9uIGFuZCBkaW1lbnNpb25zLCBhbmQgYXBwcm92ZWQgcmltIGNvbnRvdXJzIiwibWF0Y2hMZXZlbCI6Im5vbmUiLCJtYXRjaGVkV29yZHMiOltdfSwidGV4dCI6eyJ2YWx1ZSI6IlRoaXMgZG9jdW1lbnQgZXN0YWJsaXNoZXMgdGhlIGRlc2lnbmF0aW9uIGluIHVzZSBhbmQgdGhlIGRpbWVuc2lvbnMgb2YgY29kZSBkZXNpZ25hdGVkIHR5cmVzIGluIGRpYWdvbmFsIGNvbnN0cnVjdGlvbiAocGx5IHJhdGluZyBtYXJrZWQgc2VyaWVzKSBmb3IgYWdyaWN1bHR1cmFsIHRyYWN0b3JzLCB0cmFpbGVycyBhbmQgbWFjaGluZXMuIFR5cmUgbG9hZCByYXRpbmdzIGFyZSBnaXZlbiBpbiBJU08gNDI1MeKAkTIuIE5PVEUgICAgICAgQ29kZSBkZXNpZ25hdGVkIGRpYWdvbmFsIHR5cmVzIChwbHkgcmF0aW5nIG1hcmtlZCBzZXJpZXMpIGZvciBjb25zdHJ1Y3Rpb24gYXBwbGljYXRpb25zIChpbmR1c3RyaWFsIHRyYWN0b3JzKSwgaWRlbnRpZmllZCBieSB0aGUgY2xhc3NpZmljYXRpb24gY29kZSBSLTQsIGFzIHNwZWNpZmllZCBpbiBJU08gMTg4MDUsIG9yIGJ5IHN1ZmZpeCBcIklORFwiIGFyZSBjb3ZlcmVkIGJ5IElTTyAxMzQ0Mi4gQ29kZSBkZXNpZ25hdGVkIHR5cmVzIGluIHJhZGlhbCBjb25zdHJ1Y3Rpb24gZm9yIGRyaXZlIHdoZWVscyBvZiBhZ3JpY3VsdHVyYWwgdHJhY3RvcnMgYXJlIGNvdmVyZWQgYnkgSVNPIDg2NjQuIENvZGUgZGVzaWduYXRlZCBkaWFnb25hbCB0eXJlcyAocGx5IHJhdGluZyBtYXJrZWQgc2VyaWVzKSBmb3IgZm9yZXN0cnkgbWFjaGluZXMsIGlkZW50aWZpZWQgYnkgdGhlIGNsYXNzaWZpY2F0aW9uIGNvZGUgTFMsIGFzIHNwZWNpZmllZCBpbiBJU08gMTg4MDUsIGFyZSBjb3ZlcmVkIGJ5IElTTyAxODgwNy4gIiwibWF0Y2hMZXZlbCI6Im5vbmUiLCJtYXRjaGVkV29yZHMiOltdfX19LHsiY2F0ZWdvcnkiOiJzdGFuZGFyZCIsInBhdGgiOiIvc2l0ZXMvaXNvb3JnL2NvbnRlbnRzL2RhdGEvc3RhbmRhcmQvMDcvMjEvNzIxODQiLCJ1dWlkIjoiYWVkMmMzODAtZTBkZi00ZjUyLWJkN2ItYTExZmZhZWM3Mjk0IiwidGl0bGUiOiJJU08gNDQyNy0yOjIwMTkgUGxhc3RpY3MgcGlwaW5nIHN5c3RlbXMgZm9yIHdhdGVyIHN1cHBseSwgYW5kIGZvciBkcmFpbmFnZSBhbmQgc2V3ZXJhZ2UgdW5kZXIgcHJlc3N1cmUg4oCUIFBvbHlldGh5bGVuZSAoUEUpIOKAlCBQYXJ0IDI6IFBpcGVzIiwic3RhdHVzIjoiUHVibGlzaGVkIiwieWVhciI6MjAxOSwib3JkZXIiOjExLCJ0ZXh0IjoiVGhpcyBkb2N1bWVudCBzcGVjaWZpZXMgdGhlIHBpcGVzIG1hZGUgZnJvbSBwb2x5ZXRoeWxlbmUgKFBFKSBmb3IgYnVyaWVkIG9yIGFib3ZlIGdyb3VuZCBhcHBsaWNhdGlvbnMsIGludGVuZGVkIGZvciB0aGUgY29udmV5YW5jZSBvZjog4oCUICAgICAgICAgIHdhdGVyIGZvciBodW1hbiBjb25zdW1wdGlvbjsg4oCUICAgICAgICAgIHJhdyB3YXRlciBwcmlvciB0byB0cmVhdG1lbnQ7IOKAlCAgICAgICAgICBkcmFpbmFnZSBhbmQgc2V3ZXJhZ2UgdW5kZXIgcHJlc3N1cmU7IOKAlCAgICAgICAgICB2YWN1dW0gc2V3ZXIgc3lzdGVtczsg4oCUICAgICAgICAgIHdhdGVyIGZvciBvdGhlciBwdXJwb3Nlcy4gTk9URSAxICAgIFRoZSBpbnRlbmRlZCB1c2VzIGluY2x1ZGUgc2VhIG91dGZhbGxzLCBsYWlkIGluIHdhdGVyIGFuZCBwaXBlcyBzdXNwZW5kZWQgYmVsb3cgYnJpZGdlcy4gUGlwZXMgY29tcGx5aW5nIHdpdGggdGhpcyBkb2N1bWVudCBhcmUgbm90IGludGVuZGVkIGZvciB0aGUgdHJhbnNwb3J0IG9mIHdhdGVyIGludGVuZGVkIGZvciBodW1hbiBjb25zdW1wdGlvbiBpbiBjb250YW1pbmF0ZWQgc29pbHMgdW5sZXNzIHNwZWNpYWwgY29uc2lkZXJhdGlvbiBoYXMgYmVlbiB0YWtlbi4gTk9URSAyICAgIEZvciBleGFtcGxlLCBJU08gMjEwMDQgcHJvdmlkZXMgYW4gYWx0ZXJuYXRpdmUgc29sdXRpb24gZm9yIHVzZSBpbiBjb250YW1pbmF0ZWQgc29pbHMuIFNlZSBSZWZlcmVuY2UgWzNdIGluIHRoZSBCaWJsaW9ncmFwaHkuIFRoaXMgZG9jdW1lbnQgc3BlY2lmaWVzIHRocmVlIHR5cGVzIG9mIHBpcGU6IOKAlCAgICAgICAgICBQRSBwaXBlcyAob3V0c2lkZSBkaWFtZXRlciBkIG4gKSwgaW5jbHVkaW5nIGFueSBpZGVudGlmaWNhdGlvbiBzdHJpcGVzOyDigJQgICAgICAgICAgUEUgcGlwZXMgd2l0aCBjby1leHRydWRlZCBsYXllcnMgb24gZWl0aGVyIG9yIGJvdGggdGhlIG91dHNpZGUgYW5kL29yIGluc2lkZSBvZiB0aGUgcGlwZSAodG90YWwgb3V0c2lkZSBkaWFtZXRlciBkIG4gKSB3aGVyZSBhbGwgbGF5ZXJzIGhhdmUgdGhlIHNhbWUgTVJTIHJhdGluZzsg4oCUICAgICAgICAgIFBFIHBpcGVzIChvdXRzaWRlIGRpYW1ldGVyIGQgbiApIGhhdmluZyBhIHBlZWxhYmxlIGFuZCBjb250aWd1b3VzIHRoZXJtb3BsYXN0aWNzIGFkZGl0aW9uYWwgbGF5ZXIgb24gdGhlIG91dHNpZGUgb2YgdGhlIHBpcGUgKFwiY29hdGVkIHBpcGVcIikuIFRoaXMgZG9jdW1lbnQgYWxzbyBzcGVjaWZpZXMgdGhlIHRlc3QgcGFyYW1ldGVycyBmb3IgdGhlIHRlc3QgbWV0aG9kcyByZWZlcnJlZCB0byBpbiB0aGlzIGRvY3VtZW50LiBJbiBjb25qdW5jdGlvbiB3aXRoIHRoZSBvdGhlciBwYXJ0cyBvZiB0aGUgSVNPIDQ0Mjcgc2VyaWVzLCB0aGlzIGRvY3VtZW50IGlzIGFwcGxpY2FibGUgdG8gUEUgcGlwZXMsIHRoZWlyIGpvaW50cyBhbmQgdG8gam9pbnRzIHdpdGggY29tcG9uZW50cyBtYWRlIG9mIFBFIGFuZCBvdGhlciBtYXRlcmlhbHMsIGludGVuZGVkIHRvIGJlIHVzZWQgdW5kZXIgdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOiBhKSAgICBhIG1heGltdW0gYWxsb3dhYmxlIG9wZXJhdGluZyBwcmVzc3VyZSAoUEZBKSB1cCB0byBhbmQgaW5jbHVkaW5nIDI1IGJhclsxXTsgYikgICAgYW4gb3BlcmF0aW5nIHRlbXBlcmF0dXJlIG9mIDIwIMKwIEMgYXMgdGhlIHJlZmVyZW5jZSB0ZW1wZXJhdHVyZS4gTk9URSAzICAgIEZvciBvdGhlciBvcGVyYXRpbmcgdGVtcGVyYXR1cmVzLCBndWlkYW5jZSBpcyBnaXZlbiBpbiBJU08gNDQyN+KAkTE6MjAxOSwgQW5uZXggQS4gVGhpcyBkb2N1bWVudCBjb3ZlcnMgYSByYW5nZSBvZiBtYXhpbXVtIGFsbG93YWJsZSBvcGVyYXRpbmcgcHJlc3N1cmVzIGFuZCBnaXZlcyByZXF1aXJlbWVudHMgY29uY2VybmluZyBjb2xvdXJzLiBOT1RFIDQgICAgSXQgaXMgdGhlIHJlc3BvbnNpYmlsaXR5IG9mIHRoZSBwdXJjaGFzZXIgb3Igc3BlY2lmaWVyIHRvIG1ha2UgdGhlIGFwcHJvcHJpYXRlIHNlbGVjdGlvbnMgZnJvbSB0aGVzZSBhc3BlY3RzLCB0YWtpbmcgaW50byBhY2NvdW50IHRoZWlyIHBhcnRpY3VsYXIgcmVxdWlyZW1lbnRzIGFuZCBpbnN0YWxsYXRpb24gcHJhY3RpY2VzIG9yIGNvZGVzLiBbMV0gMSBiYXIgPSAwLDEgTVBhID0gMTAgNSBQYTsgMSBNUGEgPSAxIE4vbW0gMiAuICIsIm9iamVjdElEIjoiNzIxODRfMCIsIl9oaWdobGlnaHRSZXN1bHQiOnsidGl0bGUiOnsidmFsdWUiOiJJU08gNDQyNy0yOjIwMTkgUGxhc3RpY3MgcGlwaW5nIHN5c3RlbXMgZm9yIHdhdGVyIHN1cHBseSwgYW5kIGZvciBkcmFpbmFnZSBhbmQgc2V3ZXJhZ2UgdW5kZXIgcHJlc3N1cmUg4oCUIFBvbHlldGh5bGVuZSAoUEUpIOKAlCBQYXJ0IDI6IFBpcGVzIiwibWF0Y2hMZXZlbCI6Im5vbmUiLCJtYXRjaGVkV29yZHMiOltdfSwidGV4dCI6eyJ2YWx1ZSI6IlRoaXMgZG9jdW1lbnQgc3BlY2lmaWVzIHRoZSBwaXBlcyBtYWRlIGZyb20gcG9seWV0aHlsZW5lIChQRSkgZm9yIGJ1cmllZCBvciBhYm92ZSBncm91bmQgYXBwbGljYXRpb25zLCBpbnRlbmRlZCBmb3IgdGhlIGNvbnZleWFuY2Ugb2Y6IOKAlCAgICAgICAgICB3YXRlciBmb3IgaHVtYW4gY29uc3VtcHRpb247IOKAlCAgICAgICAgICByYXcgd2F0ZXIgcHJpb3IgdG8gdHJlYXRtZW50OyDigJQgICAgICAgICAgZHJhaW5hZ2UgYW5kIHNld2VyYWdlIHVuZGVyIHByZXNzdXJlOyDigJQgICAgICAgICAgdmFjdXVtIHNld2VyIHN5c3RlbXM7IOKAlCAgICAgICAgICB3YXRlciBmb3Igb3RoZXIgcHVycG9zZXMuIE5PVEUgMSAgICBUaGUgaW50ZW5kZWQgdXNlcyBpbmNsdWRlIHNlYSBvdXRmYWxscywgbGFpZCBpbiB3YXRlciBhbmQgcGlwZXMgc3VzcGVuZGVkIGJlbG93IGJyaWRnZXMuIFBpcGVzIGNvbXBseWluZyB3aXRoIHRoaXMgZG9jdW1lbnQgYXJlIG5vdCBpbnRlbmRlZCBmb3IgdGhlIHRyYW5zcG9ydCBvZiB3YXRlciBpbnRlbmRlZCBmb3IgaHVtYW4gY29uc3VtcHRpb24gaW4gY29udGFtaW5hdGVkIHNvaWxzIHVubGVzcyBzcGVjaWFsIGNvbnNpZGVyYXRpb24gaGFzIGJlZW4gdGFrZW4uIE5PVEUgMiAgICBGb3IgZXhhbXBsZSwgSVNPIDIxMDA0IHByb3ZpZGVzIGFuIGFsdGVybmF0aXZlIHNvbHV0aW9uIGZvciB1c2UgaW4gY29udGFtaW5hdGVkIHNvaWxzLiBTZWUgUmVmZXJlbmNlIFszXSBpbiB0aGUgQmlibGlvZ3JhcGh5LiBUaGlzIGRvY3VtZW50IHNwZWNpZmllcyB0aHJlZSB0eXBlcyBvZiBwaXBlOiDigJQgICAgICAgICAgUEUgcGlwZXMgKG91dHNpZGUgZGlhbWV0ZXIgZCBuICksIGluY2x1ZGluZyBhbnkgaWRlbnRpZmljYXRpb24gc3RyaXBlczsg4oCUICAgICAgICAgIFBFIHBpcGVzIHdpdGggY28tZXh0cnVkZWQgbGF5ZXJzIG9uIGVpdGhlciBvciBib3RoIHRoZSBvdXRzaWRlIGFuZC9vciBpbnNpZGUgb2YgdGhlIHBpcGUgKHRvdGFsIG91dHNpZGUgZGlhbWV0ZXIgZCBuICkgd2hlcmUgYWxsIGxheWVycyBoYXZlIHRoZSBzYW1lIE1SUyByYXRpbmc7IOKAlCAgICAgICAgICBQRSBwaXBlcyAob3V0c2lkZSBkaWFtZXRlciBkIG4gKSBoYXZpbmcgYSBwZWVsYWJsZSBhbmQgY29udGlndW91cyB0aGVybW9wbGFzdGljcyBhZGRpdGlvbmFsIGxheWVyIG9uIHRoZSBvdXRzaWRlIG9mIHRoZSBwaXBlIChcImNvYXRlZCBwaXBlXCIpLiBUaGlzIGRvY3VtZW50IGFsc28gc3BlY2lmaWVzIHRoZSB0ZXN0IHBhcmFtZXRlcnMgZm9yIHRoZSB0ZXN0IG1ldGhvZHMgcmVmZXJyZWQgdG8gaW4gdGhpcyBkb2N1bWVudC4gSW4gY29uanVuY3Rpb24gd2l0aCB0aGUgb3RoZXIgcGFydHMgb2YgdGhlIElTTyA0NDI3IHNlcmllcywgdGhpcyBkb2N1bWVudCBpcyBhcHBsaWNhYmxlIHRvIFBFIHBpcGVzLCB0aGVpciBqb2ludHMgYW5kIHRvIGpvaW50cyB3aXRoIGNvbXBvbmVudHMgbWFkZSBvZiBQRSBhbmQgb3RoZXIgbWF0ZXJpYWxzLCBpbnRlbmRlZCB0byBiZSB1c2VkIHVuZGVyIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczogYSkgICAgYSBtYXhpbXVtIGFsbG93YWJsZSBvcGVyYXRpbmcgcHJlc3N1cmUgKFBGQSkgdXAgdG8gYW5kIGluY2x1ZGluZyAyNSBiYXJbMV07IGIpICAgIGFuIG9wZXJhdGluZyB0ZW1wZXJhdHVyZSBvZiAyMCDCsCBDIGFzIHRoZSByZWZlcmVuY2UgdGVtcGVyYXR1cmUuIE5PVEUgMyAgICBGb3Igb3RoZXIgb3BlcmF0aW5nIHRlbXBlcmF0dXJlcywgZ3VpZGFuY2UgaXMgZ2l2ZW4gaW4gSVNPIDQ0MjfigJExOjIwMTksIEFubmV4IEEuIFRoaXMgZG9jdW1lbnQgY292ZXJzIGEgcmFuZ2Ugb2YgbWF4aW11bSBhbGxvd2FibGUgb3BlcmF0aW5nIHByZXNzdXJlcyBhbmQgZ2l2ZXMgcmVxdWlyZW1lbnRzIGNvbmNlcm5pbmcgY29sb3Vycy4gTk9URSA0ICAgIEl0IGlzIHRoZSByZXNwb25zaWJpbGl0eSBvZiB0aGUgcHVyY2hhc2VyIG9yIHNwZWNpZmllciB0byBtYWtlIHRoZSBhcHByb3ByaWF0ZSBzZWxlY3Rpb25zIGZyb20gdGhlc2UgYXNwZWN0cywgdGFraW5nIGludG8gYWNjb3VudCB0aGVpciBwYXJ0aWN1bGFyIHJlcXVpcmVtZW50cyBhbmQgaW5zdGFsbGF0aW9uIHByYWN0aWNlcyBvciBjb2Rlcy4gWzFdIDEgYmFyID0gMCwxIE1QYSA9IDEwIDUgUGE7IDEgTVBhID0gMSBOL21tIDIgLiAiLCJtYXRjaExldmVsIjoibm9uZSIsIm1hdGNoZWRXb3JkcyI6W119fX0seyJjYXRlZ29yeSI6InN0YW5kYXJkIiwicGF0aCI6Ii9zaXRlcy9pc29vcmcvY29udGVudHMvZGF0YS9zdGFuZGFyZC8wNi84Mi82ODI4NiIsInV1aWQiOiIzNThiOTc3NC02MTZmLTQ5NWEtOGY1MC01ZGI3NzNjYzg3OGQiLCJ0aXRsZSI6IklTTyA0NjAwMToyMDE5IFdhdGVyIGVmZmljaWVuY3kgbWFuYWdlbWVudCBzeXN0ZW1zIOKAlCBSZXF1aXJlbWVudHMgd2l0aCBndWlkYW5jZSBmb3IgdXNlIiwic3RhdHVzIjoiUHVibGlzaGVkIiwieWVhciI6MjAxOSwib3JkZXIiOjExLCJ0ZXh0IjoiVGhpcyBkb2N1bWVudCBzcGVjaWZpZXMgcmVxdWlyZW1lbnRzIGFuZCBjb250YWlucyBndWlkYW5jZSBmb3IgaXRzIHVzZSBpbiBlc3RhYmxpc2hpbmcsIGltcGxlbWVudGluZyBhbmQgbWFpbnRhaW5pbmcgYSB3YXRlciBlZmZpY2llbmN5IG1hbmFnZW1lbnQgc3lzdGVtLiBJdCBpcyBhcHBsaWNhYmxlIHRvIG9yZ2FuaXphdGlvbnMgb2YgYWxsIHR5cGVzIGFuZCBzaXplcyB0aGF0IHVzZSB3YXRlci4gSXQgaXMgZm9jdXNlZCBvbiBlbmQtdXNlIGNvbnN1bWVycy4gVGhpcyBkb2N1bWVudCBpcyBhcHBsaWNhYmxlIHRvIGFueSBvcmdhbml6YXRpb24gdGhhdCB3aXNoZXMgdG86IGEpICAgIGFjaGlldmUgdGhlIGVmZmljaWVudCB1c2Ugb2Ygd2F0ZXIgdGhyb3VnaCB0aGUgP3JlZHVjZSwgcmVwbGFjZSBvciByZXVzZScgYXBwcm9hY2g7IGIpICAgIGVzdGFibGlzaCwgaW1wbGVtZW50IGFuZCBtYWludGFpbiB3YXRlciBlZmZpY2llbmN5OyBjKSAgICBjb250aW51YWxseSBpbXByb3ZlIHdhdGVyIGVmZmljaWVuY3kuIFRoaXMgZG9jdW1lbnQgc3BlY2lmaWVzIHJlcXVpcmVtZW50cyBhbmQgY29udGFpbnMgZ3VpZGFuY2UgZm9yIGl0cyB1c2UgcmVnYXJkaW5nIG9yZ2FuaXphdGlvbmFsIHdhdGVyIHVzZS4gSXQgaW5jbHVkZXMgbW9uaXRvcmluZywgbWVhc3VyZW1lbnQsIGRvY3VtZW50YXRpb24sIHJlcG9ydGluZywgZGVzaWduIGFuZCBwcm9jdXJlbWVudCBwcmFjdGljZXMgZm9yIGVxdWlwbWVudCwgc3lzdGVtcywgcHJvY2Vzc2VzIGFuZCBwZXJzb25uZWwgdHJhaW5pbmcgdGhhdCBjb250cmlidXRlIHRvIHdhdGVyIGVmZmljaWVuY3kgbWFuYWdlbWVudC4gTk9URSAxICAgID9SZWR1Y2UnIGluY2x1ZGVzIHRoZSB1c2Ugb2Ygd2F0ZXItZWZmaWNpZW50IGZpdHRpbmdzIGFuZCBlcXVpcG1lbnQgYW5kLCBmb3IgZXhhbXBsZSwgcHV0dGluZyBpbiBwbGFjZSBhIHByb3BlciBtb25pdG9yaW5nIHN5c3RlbSBmb3IgdXNhZ2UgYW5kIGxlYWsgZGV0ZWN0aW9uLiBOT1RFIDIgICAgP1JlcGxhY2UnIGluY2x1ZGVzIHN1YnN0aXR1dGlvbiBvZiBkcmlua2luZyB3YXRlciB3aXRoIHJlY2xhaW1lZCB3YXRlciwgc2VhIHdhdGVyIGFuZCByYWlud2F0ZXIgd2hlcmV2ZXIgZmVhc2libGUuIE5PVEUgMyAgICA/UmV1c2UnIGluY2x1ZGVzIHJlY3ljbGluZyBvZiwgZm9yIGV4YW1wbGUsIHByb2Nlc3Mgd2F0ZXIgb3IgZ3JleSB3YXRlci4gRm9yIHV0aWxpemluZyB3YXRlciByZXVzZSBzeXN0ZW1zLCBJU08vVEMgMjgyIGRvY3VtZW50cyBjYW4gYmUgcmVmZXJyZWQgdG8gYXMgZ3VpZGVsaW5lcy4gTk9URSA0ICAgIEd1aWRhbmNlIGluIHRoZSBhbm5leGVzIHByb3ZpZGVzIGFkZGl0aW9uYWwgcHJhY3RpY2FsIGluZm9ybWF0aW9uIHRvIHN1cHBvcnQgaW1wbGVtZW50YXRpb24uIEFubmV4IEEgcHJvdmlkZXMgZ3VpZGFuY2Ugb24gdGhlIHVzZSBvZiB0aGlzIGRvY3VtZW50IGFuZCBBbm5leCBCIGdpdmVzIGV4YW1wbGVzIG9mIHNjZW5hcmlvcyBpbiB3YXRlciBlZmZpY2llbmN5LiAiLCJvYmplY3RJRCI6IjY4Mjg2XzAiLCJfaGlnaGxpZ2h0UmVzdWx0Ijp7InRpdGxlIjp7InZhbHVlIjoiSVNPIDQ2MDAxOjIwMTkgV2F0ZXIgZWZmaWNpZW5jeSBtYW5hZ2VtZW50IHN5c3RlbXMg4oCUIFJlcXVpcmVtZW50cyB3aXRoIGd1aWRhbmNlIGZvciB1c2UiLCJtYXRjaExldmVsIjoibm9uZSIsIm1hdGNoZWRXb3JkcyI6W119LCJ0ZXh0Ijp7InZhbHVlIjoiVGhpcyBkb2N1bWVudCBzcGVjaWZpZXMgcmVxdWlyZW1lbnRzIGFuZCBjb250YWlucyBndWlkYW5jZSBmb3IgaXRzIHVzZSBpbiBlc3RhYmxpc2hpbmcsIGltcGxlbWVudGluZyBhbmQgbWFpbnRhaW5pbmcgYSB3YXRlciBlZmZpY2llbmN5IG1hbmFnZW1lbnQgc3lzdGVtLiBJdCBpcyBhcHBsaWNhYmxlIHRvIG9yZ2FuaXphdGlvbnMgb2YgYWxsIHR5cGVzIGFuZCBzaXplcyB0aGF0IHVzZSB3YXRlci4gSXQgaXMgZm9jdXNlZCBvbiBlbmQtdXNlIGNvbnN1bWVycy4gVGhpcyBkb2N1bWVudCBpcyBhcHBsaWNhYmxlIHRvIGFueSBvcmdhbml6YXRpb24gdGhhdCB3aXNoZXMgdG86IGEpICAgIGFjaGlldmUgdGhlIGVmZmljaWVudCB1c2Ugb2Ygd2F0ZXIgdGhyb3VnaCB0aGUgP3JlZHVjZSwgcmVwbGFjZSBvciByZXVzZScgYXBwcm9hY2g7IGIpICAgIGVzdGFibGlzaCwgaW1wbGVtZW50IGFuZCBtYWludGFpbiB3YXRlciBlZmZpY2llbmN5OyBjKSAgICBjb250aW51YWxseSBpbXByb3ZlIHdhdGVyIGVmZmljaWVuY3kuIFRoaXMgZG9jdW1lbnQgc3BlY2lmaWVzIHJlcXVpcmVtZW50cyBhbmQgY29udGFpbnMgZ3VpZGFuY2UgZm9yIGl0cyB1c2UgcmVnYXJkaW5nIG9yZ2FuaXphdGlvbmFsIHdhdGVyIHVzZS4gSXQgaW5jbHVkZXMgbW9uaXRvcmluZywgbWVhc3VyZW1lbnQsIGRvY3VtZW50YXRpb24sIHJlcG9ydGluZywgZGVzaWduIGFuZCBwcm9jdXJlbWVudCBwcmFjdGljZXMgZm9yIGVxdWlwbWVudCwgc3lzdGVtcywgcHJvY2Vzc2VzIGFuZCBwZXJzb25uZWwgdHJhaW5pbmcgdGhhdCBjb250cmlidXRlIHRvIHdhdGVyIGVmZmljaWVuY3kgbWFuYWdlbWVudC4gTk9URSAxICAgID9SZWR1Y2UnIGluY2x1ZGVzIHRoZSB1c2Ugb2Ygd2F0ZXItZWZmaWNpZW50IGZpdHRpbmdzIGFuZCBlcXVpcG1lbnQgYW5kLCBmb3IgZXhhbXBsZSwgcHV0dGluZyBpbiBwbGFjZSBhIHByb3BlciBtb25pdG9yaW5nIHN5c3RlbSBmb3IgdXNhZ2UgYW5kIGxlYWsgZGV0ZWN0aW9uLiBOT1RFIDIgICAgP1JlcGxhY2UnIGluY2x1ZGVzIHN1YnN0aXR1dGlvbiBvZiBkcmlua2luZyB3YXRlciB3aXRoIHJlY2xhaW1lZCB3YXRlciwgc2VhIHdhdGVyIGFuZCByYWlud2F0ZXIgd2hlcmV2ZXIgZmVhc2libGUuIE5PVEUgMyAgICA/UmV1c2UnIGluY2x1ZGVzIHJlY3ljbGluZyBvZiwgZm9yIGV4YW1wbGUsIHByb2Nlc3Mgd2F0ZXIgb3IgZ3JleSB3YXRlci4gRm9yIHV0aWxpemluZyB3YXRlciByZXVzZSBzeXN0ZW1zLCBJU08vVEMgMjgyIGRvY3VtZW50cyBjYW4gYmUgcmVmZXJyZWQgdG8gYXMgZ3VpZGVsaW5lcy4gTk9URSA0ICAgIEd1aWRhbmNlIGluIHRoZSBhbm5leGVzIHByb3ZpZGVzIGFkZGl0aW9uYWwgcHJhY3RpY2FsIGluZm9ybWF0aW9uIHRvIHN1cHBvcnQgaW1wbGVtZW50YXRpb24uIEFubmV4IEEgcHJvdmlkZXMgZ3VpZGFuY2Ugb24gdGhlIHVzZSBvZiB0aGlzIGRvY3VtZW50IGFuZCBBbm5leCBCIGdpdmVzIGV4YW1wbGVzIG9mIHNjZW5hcmlvcyBpbiB3YXRlciBlZmZpY2llbmN5LiAiLCJtYXRjaExldmVsIjoibm9uZSIsIm1hdGNoZWRXb3JkcyI6W119fX0seyJjYXRlZ29yeSI6InN0YW5kYXJkIiwicGF0aCI6Ii9zaXRlcy9pc29vcmcvY29udGVudHMvZGF0YS9zdGFuZGFyZC8wNi82OC82Njg3NCIsInV1aWQiOiJiMjA0YjRhOC0zNzk3LTQxYmEtOTQzOC05ODRmOGE4MWJkN2UiLCJ0aXRsZSI6IklTTyA0MDM3LTM6MjAxOSBSYWRpb2xvZ2ljYWwgcHJvdGVjdGlvbiDigJQgWCBhbmQgZ2FtbWEgcmVmZXJlbmNlIHJhZGlhdGlvbiBmb3IgY2FsaWJyYXRpbmcgZG9zZW1ldGVycyBhbmQgZG9zZXJhdGUgbWV0ZXJzIGFuZCBmb3IgZGV0ZXJtaW5pbmcgdGhlaXIgcmVzcG9uc2UgYXMgYSBmdW5jdGlvbiBvZiBwaG90b24gZW5lcmd5IOKAlCBQYXJ0IDM6IENhbGlicmF0aW9uIG9mIGFyZWEgYW5kIHBlcnNvbmFsIGRvc2VtZXRlcnMgYW5kIHRoZSBtZWFzdXJlbWVudCBvZiB0aGVpciByZXNwb25zZSBhcyBhIGZ1bmN0aW9uIG9mIGVuZXJneSBhbmQgYW5nbGUgb2YgaW5jaWRlbmNlIiwic3RhdHVzIjoiUHVibGlzaGVkIiwieWVhciI6MjAxOSwib3JkZXIiOjExLCJ0ZXh0IjoiVGhpcyBkb2N1bWVudCBzcGVjaWZpZXMgYWRkaXRpb25hbCBwcm9jZWR1cmVzIGFuZCBkYXRhIGZvciB0aGUgY2FsaWJyYXRpb24gb2YgZG9zZW1ldGVycyBhbmQgZG9zZXJhdGUgbWV0ZXJzIHVzZWQgZm9yIGluZGl2aWR1YWwgYW5kIGFyZWEgbW9uaXRvcmluZyBpbiByYWRpYXRpb24gcHJvdGVjdGlvbi4gVGhlIGdlbmVyYWwgcHJvY2VkdXJlIGZvciB0aGUgY2FsaWJyYXRpb24gYW5kIHRoZSBkZXRlcm1pbmF0aW9uIG9mIHRoZSByZXNwb25zZSBvZiByYWRpYXRpb24gcHJvdGVjdGlvbiBkb3NlKHJhdGUpbWV0ZXJzIGlzIGRlc2NyaWJlZCBpbiBJU08gMjk2NjEgYW5kIGlzIGZvbGxvd2VkIGFzIGZhciBhcyBwb3NzaWJsZS4gRm9yIHRoaXMgcHVycG9zZSwgdGhlIHBob3RvbiByZWZlcmVuY2UgcmFkaWF0aW9uIGZpZWxkcyB3aXRoIG1lYW4gZW5lcmdpZXMgYmV0d2VlbiA4IGtlViBhbmQgOSBNZVYsIGFzIHNwZWNpZmllZCBpbiBJU08gNDAzNy0xLCBhcmUgdXNlZC4gSW4gQW5uZXggRCBzb21lIGFkZGl0aW9uYWwgaW5mb3JtYXRpb24gb24gcmVmZXJlbmNlIGNvbmRpdGlvbnMsIHJlcXVpcmVkIHN0YW5kYXJkIHRlc3QgY29uZGl0aW9ucyBhbmQgZWZmZWN0cyBhc3NvY2lhdGVkIHdpdGggZWxlY3Ryb24gcmFuZ2VzIGFyZSBnaXZlbi4gRm9yIGluZGl2aWR1YWwgbW9uaXRvcmluZywgYm90aCB3aG9sZSBib2R5IGFuZCBleHRyZW1pdHkgZG9zZW1ldGVycyBhcmUgY292ZXJlZCBhbmQgZm9yIGFyZWEgbW9uaXRvcmluZywgYm90aCBwb3J0YWJsZSBhbmQgaW5zdGFsbGVkIGRvc2UocmF0ZSltZXRlcnMgYXJlIGNvdmVyZWQuIENoYXJnZWQgcGFydGljbGUgZXF1aWxpYnJpdW0gaXMgbmVlZGVkIGZvciB0aGUgcmVmZXJlbmNlIGZpZWxkcyBhbHRob3VnaCB0aGlzIGlzIG5vdCBhbHdheXMgZXN0YWJsaXNoZWQgaW4gdGhlIHdvcmtwbGFjZSBmaWVsZHMgZm9yIHdoaWNoIHRoZSBkb3NlbWV0ZXIgc2hvdWxkIGJlIGNhbGlicmF0ZWQuIFRoaXMgaXMgZXNwZWNpYWxseSB0cnVlIGF0IHBob3RvbiBlbmVyZ2llcyB3aXRob3V0IGluaGVyZW50IGNoYXJnZWQgcGFydGljbGUgZXF1aWxpYnJpdW0gYXQgdGhlIHJlZmVyZW5jZSBkZXB0aCBkLCB3aGljaCBkZXBlbmRzIG9uIHRoZSBhY3R1YWwgY29tYmluYXRpb24gb2YgZW5lcmd5IGFuZCByZWZlcmVuY2UgZGVwdGggZC4gRWxlY3Ryb25zIG9mIGVuZXJnaWVzIGFib3ZlIDY1IGtlViwgMCw3NSBNZVYgYW5kIDIsMSBNZVYgY2FuIGp1c3QgcGVuZXRyYXRlIDAsMDcgbW0sIDMgbW0gYW5kIDEwIG1tIG9mIElDUlUgdGlzc3VlLCByZXNwZWN0aXZlbHksIGFuZCB0aGUgcmFkaWF0aW9uIHF1YWxpdGllcyB3aXRoIHBob3RvbiBlbmVyZ2llcyBhYm92ZSB0aGVzZSB2YWx1ZXMgYXJlIGNvbnNpZGVyZWQgYXMgcmFkaWF0aW9uIHF1YWxpdGllcyB3aXRob3V0IGluaGVyZW50IGNoYXJnZWQgcGFydGljbGUgZXF1aWxpYnJpdW0gZm9yIHRoZSBxdWFudGl0aWVzIGRlZmluZWQgYXQgdGhlc2UgZGVwdGhzLiBUaGlzIGRvY3VtZW50IGFsc28gZGVhbHMgd2l0aCB0aGUgZGV0ZXJtaW5hdGlvbiBvZiB0aGUgcmVzcG9uc2UgYXMgYSBmdW5jdGlvbiBvZiBwaG90b24gZW5lcmd5IGFuZCBhbmdsZSBvZiByYWRpYXRpb24gaW5jaWRlbmNlLiBTdWNoIG1lYXN1cmVtZW50cyBjYW4gcmVwcmVzZW50IHBhcnQgb2YgYSB0eXBlIHRlc3QgaW4gdGhlIGNvdXJzZSBvZiB3aGljaCB0aGUgZWZmZWN0IG9mIGZ1cnRoZXIgaW5mbHVlbmNlIHF1YW50aXRpZXMgb24gdGhlIHJlc3BvbnNlIGlzIGV4YW1pbmVkLiBUaGlzIGRvY3VtZW50IGlzIG9ubHkgYXBwbGljYWJsZSBmb3IgYWlyIGtlcm1hIHJhdGVzIGFib3ZlIDEgwrVHeS9oLiBUaGlzIGRvY3VtZW50IGRvZXMgbm90IGNvdmVyIHRoZSBpbi1zaXR1IGNhbGlicmF0aW9uIG9mIGZpeGVkIGluc3RhbGxlZCBhcmVhIGRvc2VtZXRlcnMuIFRoZSBwcm9jZWR1cmVzIHRvIGJlIGZvbGxvd2VkIGZvciB0aGUgZGlmZmVyZW50IHR5cGVzIG9mIGRvc2VtZXRlcnMgYXJlIGRlc2NyaWJlZC4gUmVjb21tZW5kYXRpb25zIGFyZSBnaXZlbiBvbiB0aGUgcGhhbnRvbSB0byBiZSB1c2VkIGFuZCBvbiB0aGUgY29udmVyc2lvbiBjb2VmZmljaWVudHMgdG8gYmUgYXBwbGllZC4gUmVjb21tZW5kZWQgY29udmVyc2lvbiBjb2VmZmljaWVudHMgYXJlIG9ubHkgZ2l2ZW4gZm9yIG1hdGNoZWQgcmVmZXJlbmNlIHJhZGlhdGlvbiBmaWVsZHMsIHdoaWNoIGFyZSBzcGVjaWZpZWQgaW4gSVNPIDQwMzctMToyMDE5LCBDbGF1c2VzIDQgdG8gNi4gSVNPIDQwMzfigJExOjIwMTksIEFubmV4ZXMgQSBhbmQgQiwgYm90aCBpbmZvcm1hdGl2ZSwgaW5jbHVkZSBmbHVvcmVzY2VudCByYWRpYXRpb25zLCB0aGUgZ2FtbWEgcmFkaWF0aW9uIG9mIHRoZSByYWRpb251Y2xpZGUgMjQxQW0sIFMtQW0sIGZvciB3aGljaCBkZXRhaWxlZCBwdWJsaXNoZWQgaW5mb3JtYXRpb24gaXMgbm90IGF2YWlsYWJsZS4gSVNPIDQwMzctMToyMDE5LCBBbm5leCBDLCBnaXZlcyBhZGRpdGlvbmFsIFggcmFkaWF0aW9uIGZpZWxkcywgd2hpY2ggYXJlIHNwZWNpZmllZCBieSB0aGUgcXVhbGl0eSBpbmRleC4gRm9yIGFsbCB0aGVzZSByYWRpYXRpb24gcXVhbGl0aWVzLCBjb252ZXJzaW9uIGNvZWZmaWNpZW50cyBhcmUgZ2l2ZW4gaW4gQW5uZXhlcyBBIHRvIEMsIGJ1dCBvbmx5IGFzIGEgcm91Z2ggZXN0aW1hdGUgYXMgdGhlIG92ZXJhbGwgdW5jZXJ0YWludHkgb2YgdGhlc2UgY29udmVyc2lvbiBjb2VmZmljaWVudHMgaW4gcHJhY3RpY2FsIHJlZmVyZW5jZSByYWRpYXRpb24gZmllbGRzIGlzIG5vdCBrbm93bi4gTk9URSAgICAgICBUaGUgdGVybSBkb3NlbWV0ZXIgaXMgdXNlZCBhcyBhIGdlbmVyaWMgdGVybSBkZW5vdGluZyBhbnkgZG9zZSBvciBkb3NlcmF0ZSBtZXRlciBmb3IgaW5kaXZpZHVhbCBvciBhcmVhIG1vbml0b3JpbmcuICIsIm9iamVjdElEIjoiNjY4NzRfMCIsIl9oaWdobGlnaHRSZXN1bHQiOnsidGl0bGUiOnsidmFsdWUiOiJJU08gNDAzNy0zOjIwMTkgUmFkaW9sb2dpY2FsIHByb3RlY3Rpb24g4oCUIFggYW5kIGdhbW1hIHJlZmVyZW5jZSByYWRpYXRpb24gZm9yIGNhbGlicmF0aW5nIGRvc2VtZXRlcnMgYW5kIGRvc2VyYXRlIG1ldGVycyBhbmQgZm9yIGRldGVybWluaW5nIHRoZWlyIHJlc3BvbnNlIGFzIGEgZnVuY3Rpb24gb2YgcGhvdG9uIGVuZXJneSDigJQgUGFydCAzOiBDYWxpYnJhdGlvbiBvZiBhcmVhIGFuZCBwZXJzb25hbCBkb3NlbWV0ZXJzIGFuZCB0aGUgbWVhc3VyZW1lbnQgb2YgdGhlaXIgcmVzcG9uc2UgYXMgYSBmdW5jdGlvbiBvZiBlbmVyZ3kgYW5kIGFuZ2xlIG9mIGluY2lkZW5jZSIsIm1hdGNoTGV2ZWwiOiJub25lIiwibWF0Y2hlZFdvcmRzIjpbXX0sInRleHQiOnsidmFsdWUiOiJUaGlzIGRvY3VtZW50IHNwZWNpZmllcyBhZGRpdGlvbmFsIHByb2NlZHVyZXMgYW5kIGRhdGEgZm9yIHRoZSBjYWxpYnJhdGlvbiBvZiBkb3NlbWV0ZXJzIGFuZCBkb3NlcmF0ZSBtZXRlcnMgdXNlZCBmb3IgaW5kaXZpZHVhbCBhbmQgYXJlYSBtb25pdG9yaW5nIGluIHJhZGlhdGlvbiBwcm90ZWN0aW9uLiBUaGUgZ2VuZXJhbCBwcm9jZWR1cmUgZm9yIHRoZSBjYWxpYnJhdGlvbiBhbmQgdGhlIGRldGVybWluYXRpb24gb2YgdGhlIHJlc3BvbnNlIG9mIHJhZGlhdGlvbiBwcm90ZWN0aW9uIGRvc2UocmF0ZSltZXRlcnMgaXMgZGVzY3JpYmVkIGluIElTTyAyOTY2MSBhbmQgaXMgZm9sbG93ZWQgYXMgZmFyIGFzIHBvc3NpYmxlLiBGb3IgdGhpcyBwdXJwb3NlLCB0aGUgcGhvdG9uIHJlZmVyZW5jZSByYWRpYXRpb24gZmllbGRzIHdpdGggbWVhbiBlbmVyZ2llcyBiZXR3ZWVuIDgga2VWIGFuZCA5IE1lViwgYXMgc3BlY2lmaWVkIGluIElTTyA0MDM3LTEsIGFyZSB1c2VkLiBJbiBBbm5leCBEIHNvbWUgYWRkaXRpb25hbCBpbmZvcm1hdGlvbiBvbiByZWZlcmVuY2UgY29uZGl0aW9ucywgcmVxdWlyZWQgc3RhbmRhcmQgdGVzdCBjb25kaXRpb25zIGFuZCBlZmZlY3RzIGFzc29jaWF0ZWQgd2l0aCBlbGVjdHJvbiByYW5nZXMgYXJlIGdpdmVuLiBGb3IgaW5kaXZpZHVhbCBtb25pdG9yaW5nLCBib3RoIHdob2xlIGJvZHkgYW5kIGV4dHJlbWl0eSBkb3NlbWV0ZXJzIGFyZSBjb3ZlcmVkIGFuZCBmb3IgYXJlYSBtb25pdG9yaW5nLCBib3RoIHBvcnRhYmxlIGFuZCBpbnN0YWxsZWQgZG9zZShyYXRlKW1ldGVycyBhcmUgY292ZXJlZC4gQ2hhcmdlZCBwYXJ0aWNsZSBlcXVpbGlicml1bSBpcyBuZWVkZWQgZm9yIHRoZSByZWZlcmVuY2UgZmllbGRzIGFsdGhvdWdoIHRoaXMgaXMgbm90IGFsd2F5cyBlc3RhYmxpc2hlZCBpbiB0aGUgd29ya3BsYWNlIGZpZWxkcyBmb3Igd2hpY2ggdGhlIGRvc2VtZXRlciBzaG91bGQgYmUgY2FsaWJyYXRlZC4gVGhpcyBpcyBlc3BlY2lhbGx5IHRydWUgYXQgcGhvdG9uIGVuZXJnaWVzIHdpdGhvdXQgaW5oZXJlbnQgY2hhcmdlZCBwYXJ0aWNsZSBlcXVpbGlicml1bSBhdCB0aGUgcmVmZXJlbmNlIGRlcHRoIGQsIHdoaWNoIGRlcGVuZHMgb24gdGhlIGFjdHVhbCBjb21iaW5hdGlvbiBvZiBlbmVyZ3kgYW5kIHJlZmVyZW5jZSBkZXB0aCBkLiBFbGVjdHJvbnMgb2YgZW5lcmdpZXMgYWJvdmUgNjUga2VWLCAwLDc1IE1lViBhbmQgMiwxIE1lViBjYW4ganVzdCBwZW5ldHJhdGUgMCwwNyBtbSwgMyBtbSBhbmQgMTAgbW0gb2YgSUNSVSB0aXNzdWUsIHJlc3BlY3RpdmVseSwgYW5kIHRoZSByYWRpYXRpb24gcXVhbGl0aWVzIHdpdGggcGhvdG9uIGVuZXJnaWVzIGFib3ZlIHRoZXNlIHZhbHVlcyBhcmUgY29uc2lkZXJlZCBhcyByYWRpYXRpb24gcXVhbGl0aWVzIHdpdGhvdXQgaW5oZXJlbnQgY2hhcmdlZCBwYXJ0aWNsZSBlcXVpbGlicml1bSBmb3IgdGhlIHF1YW50aXRpZXMgZGVmaW5lZCBhdCB0aGVzZSBkZXB0aHMuIFRoaXMgZG9jdW1lbnQgYWxzbyBkZWFscyB3aXRoIHRoZSBkZXRlcm1pbmF0aW9uIG9mIHRoZSByZXNwb25zZSBhcyBhIGZ1bmN0aW9uIG9mIHBob3RvbiBlbmVyZ3kgYW5kIGFuZ2xlIG9mIHJhZGlhdGlvbiBpbmNpZGVuY2UuIFN1Y2ggbWVhc3VyZW1lbnRzIGNhbiByZXByZXNlbnQgcGFydCBvZiBhIHR5cGUgdGVzdCBpbiB0aGUgY291cnNlIG9mIHdoaWNoIHRoZSBlZmZlY3Qgb2YgZnVydGhlciBpbmZsdWVuY2UgcXVhbnRpdGllcyBvbiB0aGUgcmVzcG9uc2UgaXMgZXhhbWluZWQuIFRoaXMgZG9jdW1lbnQgaXMgb25seSBhcHBsaWNhYmxlIGZvciBhaXIga2VybWEgcmF0ZXMgYWJvdmUgMSDCtUd5L2guIFRoaXMgZG9jdW1lbnQgZG9lcyBub3QgY292ZXIgdGhlIGluLXNpdHUgY2FsaWJyYXRpb24gb2YgZml4ZWQgaW5zdGFsbGVkIGFyZWEgZG9zZW1ldGVycy4gVGhlIHByb2NlZHVyZXMgdG8gYmUgZm9sbG93ZWQgZm9yIHRoZSBkaWZmZXJlbnQgdHlwZXMgb2YgZG9zZW1ldGVycyBhcmUgZGVzY3JpYmVkLiBSZWNvbW1lbmRhdGlvbnMgYXJlIGdpdmVuIG9uIHRoZSBwaGFudG9tIHRvIGJlIHVzZWQgYW5kIG9uIHRoZSBjb252ZXJzaW9uIGNvZWZmaWNpZW50cyB0byBiZSBhcHBsaWVkLiBSZWNvbW1lbmRlZCBjb252ZXJzaW9uIGNvZWZmaWNpZW50cyBhcmUgb25seSBnaXZlbiBmb3IgbWF0Y2hlZCByZWZlcmVuY2UgcmFkaWF0aW9uIGZpZWxkcywgd2hpY2ggYXJlIHNwZWNpZmllZCBpbiBJU08gNDAzNy0xOjIwMTksIENsYXVzZXMgNCB0byA2LiBJU08gNDAzN+KAkTE6MjAxOSwgQW5uZXhlcyBBIGFuZCBCLCBib3RoIGluZm9ybWF0aXZlLCBpbmNsdWRlIGZsdW9yZXNjZW50IHJhZGlhdGlvbnMsIHRoZSBnYW1tYSByYWRpYXRpb24gb2YgdGhlIHJhZGlvbnVjbGlkZSAyNDFBbSwgUy1BbSwgZm9yIHdoaWNoIGRldGFpbGVkIHB1Ymxpc2hlZCBpbmZvcm1hdGlvbiBpcyBub3QgYXZhaWxhYmxlLiBJU08gNDAzNy0xOjIwMTksIEFubmV4IEMsIGdpdmVzIGFkZGl0aW9uYWwgWCByYWRpYXRpb24gZmllbGRzLCB3aGljaCBhcmUgc3BlY2lmaWVkIGJ5IHRoZSBxdWFsaXR5IGluZGV4LiBGb3IgYWxsIHRoZXNlIHJhZGlhdGlvbiBxdWFsaXRpZXMsIGNvbnZlcnNpb24gY29lZmZpY2llbnRzIGFyZSBnaXZlbiBpbiBBbm5leGVzIEEgdG8gQywgYnV0IG9ubHkgYXMgYSByb3VnaCBlc3RpbWF0ZSBhcyB0aGUgb3ZlcmFsbCB1bmNlcnRhaW50eSBvZiB0aGVzZSBjb252ZXJzaW9uIGNvZWZmaWNpZW50cyBpbiBwcmFjdGljYWwgcmVmZXJlbmNlIHJhZGlhdGlvbiBmaWVsZHMgaXMgbm90IGtub3duLiBOT1RFICAgICAgIFRoZSB0ZXJtIGRvc2VtZXRlciBpcyB1c2VkIGFzIGEgZ2VuZXJpYyB0ZXJtIGRlbm90aW5nIGFueSBkb3NlIG9yIGRvc2VyYXRlIG1ldGVyIGZvciBpbmRpdmlkdWFsIG9yIGFyZWEgbW9uaXRvcmluZy4gIiwibWF0Y2hMZXZlbCI6Im5vbmUiLCJtYXRjaGVkV29yZHMiOltdfX19LHsiY2F0ZWdvcnkiOiJzdGFuZGFyZCIsInBhdGgiOiIvc2l0ZXMvaXNvb3JnL2NvbnRlbnRzL2RhdGEvc3RhbmRhcmQvMDYvNjgvNjY4NzMiLCJ1dWlkIjoiMmQyMWI5NmUtNmNlOC00NzZjLTg4ZGMtZTZhMGVmMDdkMTY5IiwidGl0bGUiOiJJU08gNDAzNy0yOjIwMTkgUmFkaW9sb2dpY2FsIHByb3RlY3Rpb24g4oCUIFggYW5kIGdhbW1hIHJlZmVyZW5jZSByYWRpYXRpb24gZm9yIGNhbGlicmF0aW5nIGRvc2VtZXRlcnMgYW5kIGRvc2VyYXRlIG1ldGVycyBhbmQgZm9yIGRldGVybWluaW5nIHRoZWlyIHJlc3BvbnNlIGFzIGEgZnVuY3Rpb24gb2YgcGhvdG9uIGVuZXJneSDigJQgUGFydCAyOiBEb3NpbWV0cnkgZm9yIHJhZGlhdGlvbiBwcm90ZWN0aW9uIG92ZXIgdGhlIGVuZXJneSByYW5nZXMgZnJvbSA4IGtlViB0byAxLDMgTWVWIGFuZCA0IE1lViB0byA5IE1lViIsInN0YXR1cyI6IlB1Ymxpc2hlZCIsInllYXIiOjIwMTksIm9yZGVyIjoxMSwidGV4dCI6IlRoaXMgZG9jdW1lbnQgc3BlY2lmaWVzIHRoZSBwcm9jZWR1cmVzIGZvciB0aGUgZG9zaW1ldHJ5IG9mIFggYW5kIGdhbW1hIHJlZmVyZW5jZSByYWRpYXRpb24gZm9yIHRoZSBjYWxpYnJhdGlvbiBvZiByYWRpYXRpb24gcHJvdGVjdGlvbiBpbnN0cnVtZW50cyBvdmVyIHRoZSBlbmVyZ3kgcmFuZ2UgZnJvbSBhcHByb3hpbWF0ZWx5IDgga2VWIHRvIDEsMyBNZVYgYW5kIGZyb20gNCBNZVYgdG8gOSBNZVYgYW5kIGZvciBhaXIga2VybWEgcmF0ZXMgYWJvdmUgMSDCtUd5L2guIFRoZSBjb25zaWRlcmVkIG1lYXN1cmluZyBxdWFudGl0aWVzIGFyZSB0aGUgYWlyIGtlcm1hIGZyZWUtaW4tYWlyLCBLYSwgYW5kIHRoZSBwaGFudG9tIHJlbGF0ZWQgb3BlcmF0aW9uYWwgcXVhbnRpdGllcyBvZiB0aGUgSW50ZXJuYXRpb25hbCBDb21taXNzaW9uIG9uIFJhZGlhdGlvbiBVbml0cyBhbmQgTWVhc3VyZW1lbnRzIChJQ1JVKVsyXSwgSCooMTApLCBIcCgxMCksIEgnKDMpLCBIcCgzKSwgSCcoMCwwNykgYW5kIEhwKDAsMDcpLCB0b2dldGhlciB3aXRoIHRoZSByZXNwZWN0aXZlIGRvc2UgcmF0ZXMuIFRoZSBtZXRob2RzIG9mIHByb2R1Y3Rpb24gYXJlIGdpdmVuIGluIElTTyA0MDM3LTEuIFRoaXMgZG9jdW1lbnQgY2FuIGFsc28gYmUgdXNlZCBmb3IgdGhlIHJhZGlhdGlvbiBxdWFsaXRpZXMgc3BlY2lmaWVkIGluIElTTyA0MDM3LTE6MjAxOSwgQW5uZXhlcyBBLCBCIGFuZCBDLCBidXQgdGhpcyBkb2VzIG5vdCBtZWFuIHRoYXQgYSBjYWxpYnJhdGlvbiBjZXJ0aWZpY2F0ZSBmb3IgcmFkaWF0aW9uIHF1YWxpdGllcyBkZXNjcmliZWQgaW4gdGhlc2UgYW5uZXhlcyBpcyBpbiBjb25mb3JtaXR5IHdpdGggdGhlIHJlcXVpcmVtZW50cyBvZiBJU08gNDAzNy4gVGhlIHJlcXVpcmVtZW50cyBhbmQgbWV0aG9kcyBnaXZlbiBpbiB0aGlzIGRvY3VtZW50IGFyZSB0YXJnZXRlZCBhdCBhbiBvdmVyYWxsIHVuY2VydGFpbnR5IChrID0gMikgb2YgdGhlIGRvc2UocmF0ZSkgb2YgYWJvdXQgNiAlIHRvIDEwICUgZm9yIHRoZSBwaGFudG9tIHJlbGF0ZWQgb3BlcmF0aW9uYWwgcXVhbnRpdGllcyBpbiB0aGUgcmVmZXJlbmNlIGZpZWxkcy4gVG8gYWNoaWV2ZSB0aGlzLCB0d28gcHJvZHVjdGlvbiBtZXRob2RzIG9mIHRoZSByZWZlcmVuY2UgZmllbGRzIGFyZSBwcm9wb3NlZCBpbiBJU08gNDAzNy0xLiBUaGUgZmlyc3QgaXMgdG8gcHJvZHVjZSBcIm1hdGNoZWQgcmVmZXJlbmNlIGZpZWxkc1wiLCB3aGljaCBmb2xsb3cgdGhlIHJlcXVpcmVtZW50cyBzbyBjbG9zZWx5IHRoYXQgcmVjb21tZW5kZWQgY29udmVyc2lvbiBjb2VmZmljaWVudHMgY2FuIGJlIHVzZWQuIFRoZSBleGlzdGVuY2Ugb2Ygb25seSBhIHNtYWxsIGRpZmZlcmVuY2UgaW4gdGhlIHNwZWN0cmFsIGRpc3RyaWJ1dGlvbiBvZiB0aGUgXCJtYXRjaGVkIHJlZmVyZW5jZSBmaWVsZFwiIGNvbXBhcmVkIHRvIHRoZSBub21pbmFsIHJlZmVyZW5jZSBmaWVsZCBpcyB2YWxpZGF0ZWQgYnkgcHJvY2VkdXJlcywgd2hpY2ggYXJlIGdpdmVuIGFuZCBkZXNjcmliZWQgaW4gZGV0YWlsIGluIHRoaXMgZG9jdW1lbnQuIEZvciBtYXRjaGVkIHJlZmVyZW5jZSByYWRpYXRpb24gZmllbGRzLCByZWNvbW1lbmRlZCBjb252ZXJzaW9uIGNvZWZmaWNpZW50cyBhcmUgZ2l2ZW4gaW4gSVNPIDQwMzctMyBvbmx5IGZvciBzcGVjaWZpZWQgZGlzdGFuY2VzIGJldHdlZW4gc291cmNlIGFuZCBkb3NlbWV0ZXIsIGUuZy4sIDEsMCBtIGFuZCAyLDUgbS4gRm9yIG90aGVyIGRpc3RhbmNlcywgdGhlIHVzZXIgaGFzIHRvIGRlY2lkZSBpZiB0aGVzZSBjb252ZXJzaW9uIGNvZWZmaWNpZW50cyBjYW4gYmUgdXNlZC4gVGhlIHNlY29uZCBtZXRob2QgaXMgdG8gcHJvZHVjZSBcImNoYXJhY3Rlcml6ZWQgcmVmZXJlbmNlIGZpZWxkc1wiLiBFaXRoZXIgdGhpcyBpcyBkb25lIGJ5IGRldGVybWluaW5nIHRoZSBjb252ZXJzaW9uIGNvZWZmaWNpZW50cyB1c2luZyBzcGVjdHJvbWV0cnksIG9yIHRoZSByZXF1aXJlZCB2YWx1ZSBpcyBtZWFzdXJlZCBkaXJlY3RseSB1c2luZyBzZWNvbmRhcnkgc3RhbmRhcmQgZG9zaW1ldGVycy4gVGhpcyBtZXRob2QgYXBwbGllcyB0byBhbnkgcmFkaWF0aW9uIHF1YWxpdHksIGZvciBhbnkgbWVhc3VyaW5nIHF1YW50aXR5IGFuZCwgaWYgYXBwbGljYWJsZSwgZm9yIGFueSBwaGFudG9tIGFuZCBhbmdsZSBvZiByYWRpYXRpb24gaW5jaWRlbmNlLiBUaGUgY29udmVyc2lvbiBjb2VmZmljaWVudHMgY2FuIGJlIGRldGVybWluZWQgZm9yIGFueSBkaXN0YW5jZSwgcHJvdmlkZWQgdGhlIGFpciBrZXJtYSByYXRlIGlzIG5vdCBiZWxvdyAxIMK1R3kvaC4gQm90aCBtZXRob2RzIHJlcXVpcmUgY2hhcmdlZCBwYXJ0aWNsZSBlcXVpbGlicml1bSBmb3IgdGhlIHJlZmVyZW5jZSBmaWVsZC4gSG93ZXZlciB0aGlzIGlzIG5vdCBhbHdheXMgZXN0YWJsaXNoZWQgaW4gdGhlIHdvcmtwbGFjZSBmaWVsZCBmb3Igd2hpY2ggdGhlIGRvc2VtZXRlciBzaGFsbCBiZSBjYWxpYnJhdGVkLiBUaGlzIGlzIGVzcGVjaWFsbHkgdHJ1ZSBhdCBwaG90b24gZW5lcmdpZXMgd2l0aG91dCBpbmhlcmVudCBjaGFyZ2VkIHBhcnRpY2xlIGVxdWlsaWJyaXVtIGF0IHRoZSByZWZlcmVuY2UgZGVwdGggZCwgd2hpY2ggZGVwZW5kcyBvbiB0aGUgYWN0dWFsIGNvbWJpbmF0aW9uIG9mIGVuZXJneSBhbmQgcmVmZXJlbmNlIGRlcHRoIGQuIEVsZWN0cm9ucyBvZiBlbmVyZ2llcyBhYm92ZSA2NSBrZVYsIDAsNzUgTWVWIGFuZCAyLDEgTWVWIGNhbiBqdXN0IHBlbmV0cmF0ZSAwLDA3IG1tLCAzIG1tIGFuZCAxMCBtbSBvZiBJQ1JVIHRpc3N1ZSwgcmVzcGVjdGl2ZWx5LCBhbmQgdGhlIHJhZGlhdGlvbiBxdWFsaXRpZXMgd2l0aCBwaG90b24gZW5lcmdpZXMgYWJvdmUgdGhlc2UgdmFsdWVzIGFyZSBjb25zaWRlcmVkIGFzIHJhZGlhdGlvbiBxdWFsaXRpZXMgd2l0aG91dCBpbmhlcmVudCBjaGFyZ2VkIHBhcnRpY2xlIGVxdWlsaWJyaXVtIGZvciB0aGUgcXVhbnRpdGllcyBkZWZpbmVkIGF0IHRoZXNlIGRlcHRocy4gVGhpcyBkb2N1bWVudCBpcyBub3QgYXBwbGljYWJsZSBmb3IgdGhlIGRvc2ltZXRyeSBvZiBwdWxzZWQgcmVmZXJlbmNlIGZpZWxkcy4gIiwib2JqZWN0SUQiOiI2Njg3M18wIiwiX2hpZ2hsaWdodFJlc3VsdCI6eyJ0aXRsZSI6eyJ2YWx1ZSI6IklTTyA0MDM3LTI6MjAxOSBSYWRpb2xvZ2ljYWwgcHJvdGVjdGlvbiDigJQgWCBhbmQgZ2FtbWEgcmVmZXJlbmNlIHJhZGlhdGlvbiBmb3IgY2FsaWJyYXRpbmcgZG9zZW1ldGVycyBhbmQgZG9zZXJhdGUgbWV0ZXJzIGFuZCBmb3IgZGV0ZXJtaW5pbmcgdGhlaXIgcmVzcG9uc2UgYXMgYSBmdW5jdGlvbiBvZiBwaG90b24gZW5lcmd5IOKAlCBQYXJ0IDI6IERvc2ltZXRyeSBmb3IgcmFkaWF0aW9uIHByb3RlY3Rpb24gb3ZlciB0aGUgZW5lcmd5IHJhbmdlcyBmcm9tIDgga2VWIHRvIDEsMyBNZVYgYW5kIDQgTWVWIHRvIDkgTWVWIiwibWF0Y2hMZXZlbCI6Im5vbmUiLCJtYXRjaGVkV29yZHMiOltdfSwidGV4dCI6eyJ2YWx1ZSI6IlRoaXMgZG9jdW1lbnQgc3BlY2lmaWVzIHRoZSBwcm9jZWR1cmVzIGZvciB0aGUgZG9zaW1ldHJ5IG9mIFggYW5kIGdhbW1hIHJlZmVyZW5jZSByYWRpYXRpb24gZm9yIHRoZSBjYWxpYnJhdGlvbiBvZiByYWRpYXRpb24gcHJvdGVjdGlvbiBpbnN0cnVtZW50cyBvdmVyIHRoZSBlbmVyZ3kgcmFuZ2UgZnJvbSBhcHByb3hpbWF0ZWx5IDgga2VWIHRvIDEsMyBNZVYgYW5kIGZyb20gNCBNZVYgdG8gOSBNZVYgYW5kIGZvciBhaXIga2VybWEgcmF0ZXMgYWJvdmUgMSDCtUd5L2guIFRoZSBjb25zaWRlcmVkIG1lYXN1cmluZyBxdWFudGl0aWVzIGFyZSB0aGUgYWlyIGtlcm1hIGZyZWUtaW4tYWlyLCBLYSwgYW5kIHRoZSBwaGFudG9tIHJlbGF0ZWQgb3BlcmF0aW9uYWwgcXVhbnRpdGllcyBvZiB0aGUgSW50ZXJuYXRpb25hbCBDb21taXNzaW9uIG9uIFJhZGlhdGlvbiBVbml0cyBhbmQgTWVhc3VyZW1lbnRzIChJQ1JVKVsyXSwgSCooMTApLCBIcCgxMCksIEgnKDMpLCBIcCgzKSwgSCcoMCwwNykgYW5kIEhwKDAsMDcpLCB0b2dldGhlciB3aXRoIHRoZSByZXNwZWN0aXZlIGRvc2UgcmF0ZXMuIFRoZSBtZXRob2RzIG9mIHByb2R1Y3Rpb24gYXJlIGdpdmVuIGluIElTTyA0MDM3LTEuIFRoaXMgZG9jdW1lbnQgY2FuIGFsc28gYmUgdXNlZCBmb3IgdGhlIHJhZGlhdGlvbiBxdWFsaXRpZXMgc3BlY2lmaWVkIGluIElTTyA0MDM3LTE6MjAxOSwgQW5uZXhlcyBBLCBCIGFuZCBDLCBidXQgdGhpcyBkb2VzIG5vdCBtZWFuIHRoYXQgYSBjYWxpYnJhdGlvbiBjZXJ0aWZpY2F0ZSBmb3IgcmFkaWF0aW9uIHF1YWxpdGllcyBkZXNjcmliZWQgaW4gdGhlc2UgYW5uZXhlcyBpcyBpbiBjb25mb3JtaXR5IHdpdGggdGhlIHJlcXVpcmVtZW50cyBvZiBJU08gNDAzNy4gVGhlIHJlcXVpcmVtZW50cyBhbmQgbWV0aG9kcyBnaXZlbiBpbiB0aGlzIGRvY3VtZW50IGFyZSB0YXJnZXRlZCBhdCBhbiBvdmVyYWxsIHVuY2VydGFpbnR5IChrID0gMikgb2YgdGhlIGRvc2UocmF0ZSkgb2YgYWJvdXQgNiAlIHRvIDEwICUgZm9yIHRoZSBwaGFudG9tIHJlbGF0ZWQgb3BlcmF0aW9uYWwgcXVhbnRpdGllcyBpbiB0aGUgcmVmZXJlbmNlIGZpZWxkcy4gVG8gYWNoaWV2ZSB0aGlzLCB0d28gcHJvZHVjdGlvbiBtZXRob2RzIG9mIHRoZSByZWZlcmVuY2UgZmllbGRzIGFyZSBwcm9wb3NlZCBpbiBJU08gNDAzNy0xLiBUaGUgZmlyc3QgaXMgdG8gcHJvZHVjZSBcIm1hdGNoZWQgcmVmZXJlbmNlIGZpZWxkc1wiLCB3aGljaCBmb2xsb3cgdGhlIHJlcXVpcmVtZW50cyBzbyBjbG9zZWx5IHRoYXQgcmVjb21tZW5kZWQgY29udmVyc2lvbiBjb2VmZmljaWVudHMgY2FuIGJlIHVzZWQuIFRoZSBleGlzdGVuY2Ugb2Ygb25seSBhIHNtYWxsIGRpZmZlcmVuY2UgaW4gdGhlIHNwZWN0cmFsIGRpc3RyaWJ1dGlvbiBvZiB0aGUgXCJtYXRjaGVkIHJlZmVyZW5jZSBmaWVsZFwiIGNvbXBhcmVkIHRvIHRoZSBub21pbmFsIHJlZmVyZW5jZSBmaWVsZCBpcyB2YWxpZGF0ZWQgYnkgcHJvY2VkdXJlcywgd2hpY2ggYXJlIGdpdmVuIGFuZCBkZXNjcmliZWQgaW4gZGV0YWlsIGluIHRoaXMgZG9jdW1lbnQuIEZvciBtYXRjaGVkIHJlZmVyZW5jZSByYWRpYXRpb24gZmllbGRzLCByZWNvbW1lbmRlZCBjb252ZXJzaW9uIGNvZWZmaWNpZW50cyBhcmUgZ2l2ZW4gaW4gSVNPIDQwMzctMyBvbmx5IGZvciBzcGVjaWZpZWQgZGlzdGFuY2VzIGJldHdlZW4gc291cmNlIGFuZCBkb3NlbWV0ZXIsIGUuZy4sIDEsMCBtIGFuZCAyLDUgbS4gRm9yIG90aGVyIGRpc3RhbmNlcywgdGhlIHVzZXIgaGFzIHRvIGRlY2lkZSBpZiB0aGVzZSBjb252ZXJzaW9uIGNvZWZmaWNpZW50cyBjYW4gYmUgdXNlZC4gVGhlIHNlY29uZCBtZXRob2QgaXMgdG8gcHJvZHVjZSBcImNoYXJhY3Rlcml6ZWQgcmVmZXJlbmNlIGZpZWxkc1wiLiBFaXRoZXIgdGhpcyBpcyBkb25lIGJ5IGRldGVybWluaW5nIHRoZSBjb252ZXJzaW9uIGNvZWZmaWNpZW50cyB1c2luZyBzcGVjdHJvbWV0cnksIG9yIHRoZSByZXF1aXJlZCB2YWx1ZSBpcyBtZWFzdXJlZCBkaXJlY3RseSB1c2luZyBzZWNvbmRhcnkgc3RhbmRhcmQgZG9zaW1ldGVycy4gVGhpcyBtZXRob2QgYXBwbGllcyB0byBhbnkgcmFkaWF0aW9uIHF1YWxpdHksIGZvciBhbnkgbWVhc3VyaW5nIHF1YW50aXR5IGFuZCwgaWYgYXBwbGljYWJsZSwgZm9yIGFueSBwaGFudG9tIGFuZCBhbmdsZSBvZiByYWRpYXRpb24gaW5jaWRlbmNlLiBUaGUgY29udmVyc2lvbiBjb2VmZmljaWVudHMgY2FuIGJlIGRldGVybWluZWQgZm9yIGFueSBkaXN0YW5jZSwgcHJvdmlkZWQgdGhlIGFpciBrZXJtYSByYXRlIGlzIG5vdCBiZWxvdyAxIMK1R3kvaC4gQm90aCBtZXRob2RzIHJlcXVpcmUgY2hhcmdlZCBwYXJ0aWNsZSBlcXVpbGlicml1bSBmb3IgdGhlIHJlZmVyZW5jZSBmaWVsZC4gSG93ZXZlciB0aGlzIGlzIG5vdCBhbHdheXMgZXN0YWJsaXNoZWQgaW4gdGhlIHdvcmtwbGFjZSBmaWVsZCBmb3Igd2hpY2ggdGhlIGRvc2VtZXRlciBzaGFsbCBiZSBjYWxpYnJhdGVkLiBUaGlzIGlzIGVzcGVjaWFsbHkgdHJ1ZSBhdCBwaG90b24gZW5lcmdpZXMgd2l0aG91dCBpbmhlcmVudCBjaGFyZ2VkIHBhcnRpY2xlIGVxdWlsaWJyaXVtIGF0IHRoZSByZWZlcmVuY2UgZGVwdGggZCwgd2hpY2ggZGVwZW5kcyBvbiB0aGUgYWN0dWFsIGNvbWJpbmF0aW9uIG9mIGVuZXJneSBhbmQgcmVmZXJlbmNlIGRlcHRoIGQuIEVsZWN0cm9ucyBvZiBlbmVyZ2llcyBhYm92ZSA2NSBrZVYsIDAsNzUgTWVWIGFuZCAyLDEgTWVWIGNhbiBqdXN0IHBlbmV0cmF0ZSAwLDA3IG1tLCAzIG1tIGFuZCAxMCBtbSBvZiBJQ1JVIHRpc3N1ZSwgcmVzcGVjdGl2ZWx5LCBhbmQgdGhlIHJhZGlhdGlvbiBxdWFsaXRpZXMgd2l0aCBwaG90b24gZW5lcmdpZXMgYWJvdmUgdGhlc2UgdmFsdWVzIGFyZSBjb25zaWRlcmVkIGFzIHJhZGlhdGlvbiBxdWFsaXRpZXMgd2l0aG91dCBpbmhlcmVudCBjaGFyZ2VkIHBhcnRpY2xlIGVxdWlsaWJyaXVtIGZvciB0aGUgcXVhbnRpdGllcyBkZWZpbmVkIGF0IHRoZXNlIGRlcHRocy4gVGhpcyBkb2N1bWVudCBpcyBub3QgYXBwbGljYWJsZSBmb3IgdGhlIGRvc2ltZXRyeSBvZiBwdWxzZWQgcmVmZXJlbmNlIGZpZWxkcy4gIiwibWF0Y2hMZXZlbCI6Im5vbmUiLCJtYXRjaGVkV29yZHMiOltdfX19LHsiY2F0ZWdvcnkiOiJzdGFuZGFyZCIsInBhdGgiOiIvc2l0ZXMvaXNvb3JnL2NvbnRlbnRzL2RhdGEvc3RhbmRhcmQvMDYvNjgvNjY4NzIiLCJ1dWlkIjoiNGFmMzRlODQtMTViYi00MTMxLWE1MDgtYTI4M2QxMGY5NTc3IiwidGl0bGUiOiJJU08gNDAzNy0xOjIwMTkgUmFkaW9sb2dpY2FsIHByb3RlY3Rpb24g4oCUIFggYW5kIGdhbW1hIHJlZmVyZW5jZSByYWRpYXRpb24gZm9yIGNhbGlicmF0aW5nIGRvc2VtZXRlcnMgYW5kIGRvc2VyYXRlIG1ldGVycyBhbmQgZm9yIGRldGVybWluaW5nIHRoZWlyIHJlc3BvbnNlIGFzIGEgZnVuY3Rpb24gb2YgcGhvdG9uIGVuZXJneSDigJQgUGFydCAxOiBSYWRpYXRpb24gY2hhcmFjdGVyaXN0aWNzIGFuZCBwcm9kdWN0aW9uIG1ldGhvZHMiLCJzdGF0dXMiOiJQdWJsaXNoZWQiLCJ5ZWFyIjoyMDE5LCJvcmRlciI6MTEsInRleHQiOiJUaGlzIGRvY3VtZW50IHNwZWNpZmllcyB0aGUgY2hhcmFjdGVyaXN0aWNzIGFuZCBwcm9kdWN0aW9uIG1ldGhvZHMgb2YgWCBhbmQgZ2FtbWEgcmVmZXJlbmNlIHJhZGlhdGlvbiBmb3IgY2FsaWJyYXRpbmcgcHJvdGVjdGlvbi1sZXZlbCBkb3NlbWV0ZXJzIGFuZCBkb3NlcmF0ZSBtZXRlcnMgd2l0aCByZXNwZWN0IHRvIHRoZSBwaGFudG9tIHJlbGF0ZWQgb3BlcmF0aW9uYWwgcXVhbnRpdGllcyBvZiB0aGUgSW50ZXJuYXRpb25hbCBDb21taXNzaW9uIG9uIFJhZGlhdGlvbiBVbml0cyBhbmQgTWVhc3VyZW1lbnRzIChJQ1JVKVs1XS4gVGhlIGxvd2VzdCBhaXIga2VybWEgcmF0ZSBmb3Igd2hpY2ggdGhpcyBzdGFuZGFyZCBpcyBhcHBsaWNhYmxlIGlzIDEgwrVHeSBoPzEuIEJlbG93IHRoaXMgYWlyIGtlcm1hIHJhdGUgdGhlIChuYXR1cmFsKSBiYWNrZ3JvdW5kIHJhZGlhdGlvbiBuZWVkcyBzcGVjaWFsIGNvbnNpZGVyYXRpb24gYW5kIHRoaXMgaXMgbm90IGluY2x1ZGVkIGluIHRoaXMgZG9jdW1lbnQuIEZvciB0aGUgcmFkaWF0aW9uIHF1YWxpdGllcyBzcGVjaWZpZWQgaW4gQ2xhdXNlcyA0IHRvIDYsIHN1ZmZpY2llbnQgcHVibGlzaGVkIGluZm9ybWF0aW9uIGlzIGF2YWlsYWJsZSB0byBzcGVjaWZ5IHRoZSByZXF1aXJlbWVudHMgZm9yIGFsbCByZWxldmFudCBwYXJhbWV0ZXJzIG9mIHRoZSBtYXRjaGVkIG9yIGNoYXJhY3Rlcml6ZWQgcmVmZXJlbmNlIGZpZWxkcyBpbiBvcmRlciB0byBhY2hpZXZlIHRoZSB0YXJnZXRlZCBvdmVyYWxsIHVuY2VydGFpbnR5IChrID0gMikgb2YgYWJvdXQgNiAlIHRvIDEwICUgZm9yIHRoZSBwaGFudG9tIHJlbGF0ZWQgb3BlcmF0aW9uYWwgcXVhbnRpdGllcy4gVGhlIFggcmF5IHJhZGlhdGlvbiBmaWVsZHMgZGVzY3JpYmVkIGluIHRoZSBpbmZvcm1hdGl2ZSBBbm5leGVzIEEgdG8gQyBhcmUgbm90IGRlc2lnbmF0ZWQgYXMgcmVmZXJlbmNlIFgtcmFkaWF0aW9uIGZpZWxkcy4gTk9URSAgICAgICBUaGUgZmlyc3QgZWRpdGlvbiBvZiBJU08gNDAzNy0xLCBpc3N1ZWQgaW4gMTk5NiwgaW5jbHVkZWQgc29tZSBhZGRpdGlvbmFsIHJhZGlhdGlvbiBxdWFsaXRpZXMgZm9yIHdoaWNoIHN1Y2ggcHVibGlzaGVkIGluZm9ybWF0aW9uIGlzIG5vdCBhdmFpbGFibGUuIFRoZXNlIGFyZSBmbHVvcmVzY2VudCByYWRpYXRpb25zLCB0aGUgZ2FtbWEgcmFkaWF0aW9uIG9mIHRoZSByYWRpb251Y2xpZGUgMjQxQW0sIFMtQW0sIGFuZCB0aGUgaGlnaCBlbmVyZ3kgcGhvdG9uIHJhZGlhdGlvbnMgUi1UaSBhbmQgUi1OaSwgd2hpY2ggaGF2ZSBiZWVuIHJlbW92ZWQgZnJvbSB0aGUgbWFpbiBwYXJ0IG9mIHRoaXMgZG9jdW1lbnQuIFRoZSBtb3N0IHdpZGVseSB1c2VkIHJhZGlhdGlvbnMsIHRoZSBmbHVvcmVzY2VudCByYWRpYXRpb25zIGFuZCB0aGUgZ2FtbWEgcmFkaWF0aW9uIG9mIHRoZSByYWRpb251Y2xpZGUgMjQxQW0sIFMtQW0sIGFyZSBpbmNsdWRlZCBuZWFybHkgdW5jaGFuZ2VkIGluIHRoZSBpbmZvcm1hdGl2ZSBBbm5leGVzIEEgYW5kIEIuIFRoZSBpbmZvcm1hdGl2ZSBBbm5leCBDIGdpdmVzIGFkZGl0aW9uYWwgWCByYWRpYXRpb24gZmllbGRzLCB3aGljaCBhcmUgc3BlY2lmaWVkIGJ5IHRoZSBxdWFsaXR5IGluZGV4LiBUaGUgbWV0aG9kcyBmb3IgcHJvZHVjaW5nIGEgZ3JvdXAgb2YgcmVmZXJlbmNlIHJhZGlhdGlvbnMgZm9yIGEgcGFydGljdWxhciBwaG90b24tZW5lcmd5IHJhbmdlIGFyZSBkZXNjcmliZWQgaW4gQ2xhdXNlcyA0IHRvIDYsIHdoaWNoIGRlZmluZSB0aGUgY2hhcmFjdGVyaXN0aWNzIG9mIHRoZXNlIHJhZGlhdGlvbnMuIFRoZSB0aHJlZSBncm91cHMgb2YgcmVmZXJlbmNlIHJhZGlhdGlvbiBhcmU6IGEpICAgIGluIHRoZSBlbmVyZ3kgcmFuZ2UgZnJvbSBhYm91dCA4IGtlViB0byAzMzAga2VWLCBjb250aW51b3VzIGZpbHRlcmVkIFggcmFkaWF0aW9uOyBiKSAgICBpbiB0aGUgZW5lcmd5IHJhbmdlIDYwMCBrZVYgdG8gMSwzIE1lViwgZ2FtbWEgcmFkaWF0aW9uIGVtaXR0ZWQgYnkgcmFkaW9udWNsaWRlczsgYykgICAgaW4gdGhlIGVuZXJneSByYW5nZSA0IE1lViB0byA5IE1lViwgcGhvdG9uIHJhZGlhdGlvbiBwcm9kdWNlZCBieSBhY2NlbGVyYXRvcnMuIFRoZSByZWZlcmVuY2UgcmFkaWF0aW9uIGZpZWxkIG1vc3Qgc3VpdGFibGUgZm9yIHRoZSBpbnRlbmRlZCBhcHBsaWNhdGlvbiBjYW4gYmUgc2VsZWN0ZWQgZnJvbSBUYWJsZSAxLCB3aGljaCBnaXZlcyBhbiBvdmVydmlldyBvZiBhbGwgcmVmZXJlbmNlIHJhZGlhdGlvbiBxdWFsaXRpZXMgc3BlY2lmaWVkIGluIENsYXVzZXMgNCB0byA2LiBJdCBkb2VzIG5vdCBpbmNsdWRlIHRoZSByYWRpYXRpb25zIHNwZWNpZmllZCBpbiB0aGUgQW5uZXhlcyBBLCBCIGFuZCBDLiBUaGUgcmVxdWlyZW1lbnRzIGFuZCBtZXRob2RzIGdpdmVuIGluIENsYXVzZXMgNCB0byA2IGFyZSB0YXJnZXRlZCBhdCBhbiBvdmVyYWxsIHVuY2VydGFpbnR5IChrID0gMikgb2YgdGhlIGRvc2UocmF0ZSkgdmFsdWUgb2YgYWJvdXQgNiAlIHRvIDEwICUgZm9yIHRoZSBwaGFudG9tIHJlbGF0ZWQgb3BlcmF0aW9uYWwgcXVhbnRpdGllcyBpbiB0aGUgcmVmZXJlbmNlIGZpZWxkcy4gVG8gYWNoaWV2ZSB0aGlzLCB0d28gcHJvZHVjdGlvbiBtZXRob2RzIGFyZSBwcm9wb3NlZDogVGhlIGZpcnN0IG9uZSBpcyB0byBwcm9kdWNlIFwibWF0Y2hlZCByZWZlcmVuY2UgZmllbGRzXCIsIHdob3NlIHByb3BlcnRpZXMgYXJlIHN1ZmZpY2llbnRseSB3ZWxsLWNoYXJhY3Rlcml6ZWQgc28gYXMgdG8gYWxsb3cgdGhlIHVzZSBvZiB0aGUgY29udmVyc2lvbiBjb2VmZmljaWVudHMgcmVjb21tZW5kZWQgaW4gSVNPIDQwMzctMy4gVGhlIGV4aXN0ZW5jZSBvZiBvbmx5IGEgc21hbGwgZGlmZmVyZW5jZSBpbiB0aGUgc3BlY3RyYWwgZGlzdHJpYnV0aW9uIG9mIHRoZSBcIm1hdGNoZWQgcmVmZXJlbmNlIGZpZWxkXCIgY29tcGFyZWQgdG8gdGhlIG5vbWluYWwgcmVmZXJlbmNlIGZpZWxkIGlzIHZhbGlkYXRlZCBieSBwcm9jZWR1cmVzLCB3aGljaCBhcmUgZ2l2ZW4gYW5kIGRlc2NyaWJlZCBpbiBkZXRhaWwgaW4gSVNPIDQwMzfigJEyLiBGb3IgbWF0Y2hlZCByZWZlcmVuY2UgcmFkaWF0aW9uIGZpZWxkcywgcmVjb21tZW5kZWQgY29udmVyc2lvbiBjb2VmZmljaWVudHMgYXJlIGdpdmVuIGluIElTTyA0MDM34oCRMyBvbmx5IGZvciBzcGVjaWZpZWQgZGlzdGFuY2VzIGJldHdlZW4gc291cmNlIGFuZCBkb3NlbWV0ZXIsIGUuZy4sIDEsMCBtIGFuZCAyLDUgbS4gRm9yIG90aGVyIGRpc3RhbmNlcywgdGhlIHVzZXIgaGFzIHRvIGRlY2lkZSBpZiB0aGVzZSBjb252ZXJzaW9uIGNvZWZmaWNpZW50cyBjYW4gYmUgdXNlZC4gSWYgYm90aCB2YWx1ZXMgYXJlIHZlcnkgc2ltaWxhciwgZS5nLiwgZGlmZmVyIG9ubHkgYnkgMiAlIG9yIGxlc3MsIHRoZW4gYSBsaW5lYXIgaW50ZXJwb2xhdGlvbiBtYXkgYmUgdXNlZC4gVGhlIHNlY29uZCBtZXRob2QgaXMgdG8gcHJvZHVjZSBcImNoYXJhY3Rlcml6ZWQgcmVmZXJlbmNlIGZpZWxkc1wiLiBFaXRoZXIgdGhpcyBpcyBkb25lIGJ5IGRldGVybWluaW5nIHRoZSBjb252ZXJzaW9uIGNvZWZmaWNpZW50cyB1c2luZyBzcGVjdHJvbWV0cnksIG9yIHRoZSByZXF1aXJlZCB2YWx1ZSBpcyBtZWFzdXJlZCBkaXJlY3RseSB1c2luZyBzZWNvbmRhcnkgc3RhbmRhcmQgZG9zaW1ldGVycy4gVGhpcyBtZXRob2QgYXBwbGllcyB0byBhbnkgcmFkaWF0aW9uIHF1YWxpdHksIGZvciBhbnkgbWVhc3VyaW5nIHF1YW50aXR5IGFuZCwgaWYgYXBwbGljYWJsZSwgZm9yIGFueSBwaGFudG9tIGFuZCBhbmdsZSBvZiByYWRpYXRpb24gaW5jaWRlbmNlLiBJbiBhZGRpdGlvbiwgdGhlIHJlcXVpcmVtZW50cyBvbiB0aGUgcGFyYW1ldGVycyBzcGVjaWZ5aW5nIHRoZSByZWZlcmVuY2UgcmFkaWF0aW9ucyBkZXBlbmQgb24gdGhlIGRlZmluaXRpb24gZGVwdGggaW4gdGhlIHBoYW50b20sIGkuZS4sIDAsMDcgbW0sIDMgbW0gYW5kIDEwIG1tLCB0aGVyZWZvcmUsIHRoZSByZXF1aXJlbWVudHMgYXJlIGRpZmZlcmVudCBmb3IgdGhlIGRpZmZlcmVudCBkZXB0aHMuIFRodXMsIGEgZ2l2ZW4gcmFkaWF0aW9uIGZpZWxkIGNhbiBiZSBhIFwibWF0Y2hlZCByZWZlcmVuY2UgZmllbGRcIiBmb3IgdGhlIGRlcHRoIG9mIDAsMDcgbW0gYnV0IG5vdCBmb3IgdGhlIGRlcHRoIG9mIDEwIG1tLCBmb3Igd2hpY2ggaXQgY2FuIHRoZW4gYmUgYSBcImNoYXJhY3Rlcml6ZWQgcmVmZXJlbmNlIGZpZWxkXCIuIFRoZSBjb252ZXJzaW9uIGNvZWZmaWNpZW50cyBjYW4gYmUgZGV0ZXJtaW5lZCBmb3IgYW55IGRpc3RhbmNlLCBwcm92aWRlZCB0aGUgYWlyIGtlcm1hIHJhdGUgaXMgbm90IGJlbG93IDEgwrVHeS9oLiBCb3RoIG1ldGhvZHMgbmVlZCBjaGFyZ2VkIHBhcnRpY2xlIGVxdWlsaWJyaXVtIGZvciB0aGUgcmVmZXJlbmNlIGZpZWxkLiBIb3dldmVyLCB0aGlzIGlzIG5vdCBhbHdheXMgZXN0YWJsaXNoZWQgaW4gdGhlIHdvcmtwbGFjZSBmaWVsZCBmb3Igd2hpY2ggdGhlIGRvc2VtZXRlciBpcyBjYWxpYnJhdGVkLiBUaGlzIGlzIGVzcGVjaWFsbHkgdHJ1ZSBhdCBwaG90b24gZW5lcmdpZXMgd2l0aG91dCBpbmhlcmVudCBjaGFyZ2VkIHBhcnRpY2xlIGVxdWlsaWJyaXVtIGF0IHRoZSByZWZlcmVuY2UgZGVwdGggZCwgd2hpY2ggZGVwZW5kcyBvbiB0aGUgYWN0dWFsIGNvbWJpbmF0aW9uIG9mIGVuZXJneSBhbmQgcmVmZXJlbmNlIGRlcHRoIGQuIEVsZWN0cm9ucyBvZiBlbmVyZ2llcyBhYm92ZSA2NSBrZVYsIDAsNzUgTWVWIGFuZCAyLDEgTWVWIGNhbiBqdXN0IHBlbmV0cmF0ZSAwLDA3IG1tLCAzIG1tIGFuZCAxMCBtbSBvZiBJQ1JVIHRpc3N1ZSwgcmVzcGVjdGl2ZWx5LCBhbmQgdGhlIHJhZGlhdGlvbiBxdWFsaXRpZXMgd2l0aCBwaG90b24gZW5lcmdpZXMgYWJvdmUgdGhlc2UgdmFsdWVzIGFyZSBjb25zaWRlcmVkIGFzIHJhZGlhdGlvbiBxdWFsaXRpZXMgd2l0aG91dCBpbmhlcmVudCBjaGFyZ2VkIHBhcnRpY2xlIGVxdWlsaWJyaXVtIGZvciB0aGUgcXVhbnRpdGllcyBkZWZpbmVkIGF0IHRoZXNlIGRlcHRocy4gVG8gZGV0ZXJtaW5lIHRoZSBkb3NlKHJhdGUpIHZhbHVlIGFuZCB0aGUgYXNzb2NpYXRlZCBvdmVyYWxsIHVuY2VydGFpbnR5IG9mIGl0LCBhIGNhbGlicmF0aW9uIG9mIGFsbCBtZWFzdXJpbmcgaW5zdHJ1bWVudHMgdXNlZCBmb3IgdGhlIGRldGVybWluYXRpb24gb2YgdGhlIHF1YW50aXR5IHZhbHVlIGlzIG5lZWRlZCB3aGljaCBpcyB0cmFjZWFibGUgdG8gbmF0aW9uYWwgc3RhbmRhcmRzLiBUaGlzIGRvY3VtZW50IGRvZXMgbm90IHNwZWNpZnkgcHVsc2VkIHJlZmVyZW5jZSByYWRpYXRpb24gZmllbGRzLiAiLCJvYmplY3RJRCI6IjY2ODcyXzAiLCJfaGlnaGxpZ2h0UmVzdWx0Ijp7InRpdGxlIjp7InZhbHVlIjoiSVNPIDQwMzctMToyMDE5IFJhZGlvbG9naWNhbCBwcm90ZWN0aW9uIOKAlCBYIGFuZCBnYW1tYSByZWZlcmVuY2UgcmFkaWF0aW9uIGZvciBjYWxpYnJhdGluZyBkb3NlbWV0ZXJzIGFuZCBkb3NlcmF0ZSBtZXRlcnMgYW5kIGZvciBkZXRlcm1pbmluZyB0aGVpciByZXNwb25zZSBhcyBhIGZ1bmN0aW9uIG9mIHBob3RvbiBlbmVyZ3kg4oCUIFBhcnQgMTogUmFkaWF0aW9uIGNoYXJhY3RlcmlzdGljcyBhbmQgcHJvZHVjdGlvbiBtZXRob2RzIiwibWF0Y2hMZXZlbCI6Im5vbmUiLCJtYXRjaGVkV29yZHMiOltdfSwidGV4dCI6eyJ2YWx1ZSI6IlRoaXMgZG9jdW1lbnQgc3BlY2lmaWVzIHRoZSBjaGFyYWN0ZXJpc3RpY3MgYW5kIHByb2R1Y3Rpb24gbWV0aG9kcyBvZiBYIGFuZCBnYW1tYSByZWZlcmVuY2UgcmFkaWF0aW9uIGZvciBjYWxpYnJhdGluZyBwcm90ZWN0aW9uLWxldmVsIGRvc2VtZXRlcnMgYW5kIGRvc2VyYXRlIG1ldGVycyB3aXRoIHJlc3BlY3QgdG8gdGhlIHBoYW50b20gcmVsYXRlZCBvcGVyYXRpb25hbCBxdWFudGl0aWVzIG9mIHRoZSBJbnRlcm5hdGlvbmFsIENvbW1pc3Npb24gb24gUmFkaWF0aW9uIFVuaXRzIGFuZCBNZWFzdXJlbWVudHMgKElDUlUpWzVdLiBUaGUgbG93ZXN0IGFpciBrZXJtYSByYXRlIGZvciB3aGljaCB0aGlzIHN0YW5kYXJkIGlzIGFwcGxpY2FibGUgaXMgMSDCtUd5IGg/MS4gQmVsb3cgdGhpcyBhaXIga2VybWEgcmF0ZSB0aGUgKG5hdHVyYWwpIGJhY2tncm91bmQgcmFkaWF0aW9uIG5lZWRzIHNwZWNpYWwgY29uc2lkZXJhdGlvbiBhbmQgdGhpcyBpcyBub3QgaW5jbHVkZWQgaW4gdGhpcyBkb2N1bWVudC4gRm9yIHRoZSByYWRpYXRpb24gcXVhbGl0aWVzIHNwZWNpZmllZCBpbiBDbGF1c2VzIDQgdG8gNiwgc3VmZmljaWVudCBwdWJsaXNoZWQgaW5mb3JtYXRpb24gaXMgYXZhaWxhYmxlIHRvIHNwZWNpZnkgdGhlIHJlcXVpcmVtZW50cyBmb3IgYWxsIHJlbGV2YW50IHBhcmFtZXRlcnMgb2YgdGhlIG1hdGNoZWQgb3IgY2hhcmFjdGVyaXplZCByZWZlcmVuY2UgZmllbGRzIGluIG9yZGVyIHRvIGFjaGlldmUgdGhlIHRhcmdldGVkIG92ZXJhbGwgdW5jZXJ0YWludHkgKGsgPSAyKSBvZiBhYm91dCA2ICUgdG8gMTAgJSBmb3IgdGhlIHBoYW50b20gcmVsYXRlZCBvcGVyYXRpb25hbCBxdWFudGl0aWVzLiBUaGUgWCByYXkgcmFkaWF0aW9uIGZpZWxkcyBkZXNjcmliZWQgaW4gdGhlIGluZm9ybWF0aXZlIEFubmV4ZXMgQSB0byBDIGFyZSBub3QgZGVzaWduYXRlZCBhcyByZWZlcmVuY2UgWC1yYWRpYXRpb24gZmllbGRzLiBOT1RFICAgICAgIFRoZSBmaXJzdCBlZGl0aW9uIG9mIElTTyA0MDM3LTEsIGlzc3VlZCBpbiAxOTk2LCBpbmNsdWRlZCBzb21lIGFkZGl0aW9uYWwgcmFkaWF0aW9uIHF1YWxpdGllcyBmb3Igd2hpY2ggc3VjaCBwdWJsaXNoZWQgaW5mb3JtYXRpb24gaXMgbm90IGF2YWlsYWJsZS4gVGhlc2UgYXJlIGZsdW9yZXNjZW50IHJhZGlhdGlvbnMsIHRoZSBnYW1tYSByYWRpYXRpb24gb2YgdGhlIHJhZGlvbnVjbGlkZSAyNDFBbSwgUy1BbSwgYW5kIHRoZSBoaWdoIGVuZXJneSBwaG90b24gcmFkaWF0aW9ucyBSLVRpIGFuZCBSLU5pLCB3aGljaCBoYXZlIGJlZW4gcmVtb3ZlZCBmcm9tIHRoZSBtYWluIHBhcnQgb2YgdGhpcyBkb2N1bWVudC4gVGhlIG1vc3Qgd2lkZWx5IHVzZWQgcmFkaWF0aW9ucywgdGhlIGZsdW9yZXNjZW50IHJhZGlhdGlvbnMgYW5kIHRoZSBnYW1tYSByYWRpYXRpb24gb2YgdGhlIHJhZGlvbnVjbGlkZSAyNDFBbSwgUy1BbSwgYXJlIGluY2x1ZGVkIG5lYXJseSB1bmNoYW5nZWQgaW4gdGhlIGluZm9ybWF0aXZlIEFubmV4ZXMgQSBhbmQgQi4gVGhlIGluZm9ybWF0aXZlIEFubmV4IEMgZ2l2ZXMgYWRkaXRpb25hbCBYIHJhZGlhdGlvbiBmaWVsZHMsIHdoaWNoIGFyZSBzcGVjaWZpZWQgYnkgdGhlIHF1YWxpdHkgaW5kZXguIFRoZSBtZXRob2RzIGZvciBwcm9kdWNpbmcgYSBncm91cCBvZiByZWZlcmVuY2UgcmFkaWF0aW9ucyBmb3IgYSBwYXJ0aWN1bGFyIHBob3Rvbi1lbmVyZ3kgcmFuZ2UgYXJlIGRlc2NyaWJlZCBpbiBDbGF1c2VzIDQgdG8gNiwgd2hpY2ggZGVmaW5lIHRoZSBjaGFyYWN0ZXJpc3RpY3Mgb2YgdGhlc2UgcmFkaWF0aW9ucy4gVGhlIHRocmVlIGdyb3VwcyBvZiByZWZlcmVuY2UgcmFkaWF0aW9uIGFyZTogYSkgICAgaW4gdGhlIGVuZXJneSByYW5nZSBmcm9tIGFib3V0IDgga2VWIHRvIDMzMCBrZVYsIGNvbnRpbnVvdXMgZmlsdGVyZWQgWCByYWRpYXRpb247IGIpICAgIGluIHRoZSBlbmVyZ3kgcmFuZ2UgNjAwIGtlViB0byAxLDMgTWVWLCBnYW1tYSByYWRpYXRpb24gZW1pdHRlZCBieSByYWRpb251Y2xpZGVzOyBjKSAgICBpbiB0aGUgZW5lcmd5IHJhbmdlIDQgTWVWIHRvIDkgTWVWLCBwaG90b24gcmFkaWF0aW9uIHByb2R1Y2VkIGJ5IGFjY2VsZXJhdG9ycy4gVGhlIHJlZmVyZW5jZSByYWRpYXRpb24gZmllbGQgbW9zdCBzdWl0YWJsZSBmb3IgdGhlIGludGVuZGVkIGFwcGxpY2F0aW9uIGNhbiBiZSBzZWxlY3RlZCBmcm9tIFRhYmxlIDEsIHdoaWNoIGdpdmVzIGFuIG92ZXJ2aWV3IG9mIGFsbCByZWZlcmVuY2UgcmFkaWF0aW9uIHF1YWxpdGllcyBzcGVjaWZpZWQgaW4gQ2xhdXNlcyA0IHRvIDYuIEl0IGRvZXMgbm90IGluY2x1ZGUgdGhlIHJhZGlhdGlvbnMgc3BlY2lmaWVkIGluIHRoZSBBbm5leGVzIEEsIEIgYW5kIEMuIFRoZSByZXF1aXJlbWVudHMgYW5kIG1ldGhvZHMgZ2l2ZW4gaW4gQ2xhdXNlcyA0IHRvIDYgYXJlIHRhcmdldGVkIGF0IGFuIG92ZXJhbGwgdW5jZXJ0YWludHkgKGsgPSAyKSBvZiB0aGUgZG9zZShyYXRlKSB2YWx1ZSBvZiBhYm91dCA2ICUgdG8gMTAgJSBmb3IgdGhlIHBoYW50b20gcmVsYXRlZCBvcGVyYXRpb25hbCBxdWFudGl0aWVzIGluIHRoZSByZWZlcmVuY2UgZmllbGRzLiBUbyBhY2hpZXZlIHRoaXMsIHR3byBwcm9kdWN0aW9uIG1ldGhvZHMgYXJlIHByb3Bvc2VkOiBUaGUgZmlyc3Qgb25lIGlzIHRvIHByb2R1Y2UgXCJtYXRjaGVkIHJlZmVyZW5jZSBmaWVsZHNcIiwgd2hvc2UgcHJvcGVydGllcyBhcmUgc3VmZmljaWVudGx5IHdlbGwtY2hhcmFjdGVyaXplZCBzbyBhcyB0byBhbGxvdyB0aGUgdXNlIG9mIHRoZSBjb252ZXJzaW9uIGNvZWZmaWNpZW50cyByZWNvbW1lbmRlZCBpbiBJU08gNDAzNy0zLiBUaGUgZXhpc3RlbmNlIG9mIG9ubHkgYSBzbWFsbCBkaWZmZXJlbmNlIGluIHRoZSBzcGVjdHJhbCBkaXN0cmlidXRpb24gb2YgdGhlIFwibWF0Y2hlZCByZWZlcmVuY2UgZmllbGRcIiBjb21wYXJlZCB0byB0aGUgbm9taW5hbCByZWZlcmVuY2UgZmllbGQgaXMgdmFsaWRhdGVkIGJ5IHByb2NlZHVyZXMsIHdoaWNoIGFyZSBnaXZlbiBhbmQgZGVzY3JpYmVkIGluIGRldGFpbCBpbiBJU08gNDAzN+KAkTIuIEZvciBtYXRjaGVkIHJlZmVyZW5jZSByYWRpYXRpb24gZmllbGRzLCByZWNvbW1lbmRlZCBjb252ZXJzaW9uIGNvZWZmaWNpZW50cyBhcmUgZ2l2ZW4gaW4gSVNPIDQwMzfigJEzIG9ubHkgZm9yIHNwZWNpZmllZCBkaXN0YW5jZXMgYmV0d2VlbiBzb3VyY2UgYW5kIGRvc2VtZXRlciwgZS5nLiwgMSwwIG0gYW5kIDIsNSBtLiBGb3Igb3RoZXIgZGlzdGFuY2VzLCB0aGUgdXNlciBoYXMgdG8gZGVjaWRlIGlmIHRoZXNlIGNvbnZlcnNpb24gY29lZmZpY2llbnRzIGNhbiBiZSB1c2VkLiBJZiBib3RoIHZhbHVlcyBhcmUgdmVyeSBzaW1pbGFyLCBlLmcuLCBkaWZmZXIgb25seSBieSAyICUgb3IgbGVzcywgdGhlbiBhIGxpbmVhciBpbnRlcnBvbGF0aW9uIG1heSBiZSB1c2VkLiBUaGUgc2Vjb25kIG1ldGhvZCBpcyB0byBwcm9kdWNlIFwiY2hhcmFjdGVyaXplZCByZWZlcmVuY2UgZmllbGRzXCIuIEVpdGhlciB0aGlzIGlzIGRvbmUgYnkgZGV0ZXJtaW5pbmcgdGhlIGNvbnZlcnNpb24gY29lZmZpY2llbnRzIHVzaW5nIHNwZWN0cm9tZXRyeSwgb3IgdGhlIHJlcXVpcmVkIHZhbHVlIGlzIG1lYXN1cmVkIGRpcmVjdGx5IHVzaW5nIHNlY29uZGFyeSBzdGFuZGFyZCBkb3NpbWV0ZXJzLiBUaGlzIG1ldGhvZCBhcHBsaWVzIHRvIGFueSByYWRpYXRpb24gcXVhbGl0eSwgZm9yIGFueSBtZWFzdXJpbmcgcXVhbnRpdHkgYW5kLCBpZiBhcHBsaWNhYmxlLCBmb3IgYW55IHBoYW50b20gYW5kIGFuZ2xlIG9mIHJhZGlhdGlvbiBpbmNpZGVuY2UuIEluIGFkZGl0aW9uLCB0aGUgcmVxdWlyZW1lbnRzIG9uIHRoZSBwYXJhbWV0ZXJzIHNwZWNpZnlpbmcgdGhlIHJlZmVyZW5jZSByYWRpYXRpb25zIGRlcGVuZCBvbiB0aGUgZGVmaW5pdGlvbiBkZXB0aCBpbiB0aGUgcGhhbnRvbSwgaS5lLiwgMCwwNyBtbSwgMyBtbSBhbmQgMTAgbW0sIHRoZXJlZm9yZSwgdGhlIHJlcXVpcmVtZW50cyBhcmUgZGlmZmVyZW50IGZvciB0aGUgZGlmZmVyZW50IGRlcHRocy4gVGh1cywgYSBnaXZlbiByYWRpYXRpb24gZmllbGQgY2FuIGJlIGEgXCJtYXRjaGVkIHJlZmVyZW5jZSBmaWVsZFwiIGZvciB0aGUgZGVwdGggb2YgMCwwNyBtbSBidXQgbm90IGZvciB0aGUgZGVwdGggb2YgMTAgbW0sIGZvciB3aGljaCBpdCBjYW4gdGhlbiBiZSBhIFwiY2hhcmFjdGVyaXplZCByZWZlcmVuY2UgZmllbGRcIi4gVGhlIGNvbnZlcnNpb24gY29lZmZpY2llbnRzIGNhbiBiZSBkZXRlcm1pbmVkIGZvciBhbnkgZGlzdGFuY2UsIHByb3ZpZGVkIHRoZSBhaXIga2VybWEgcmF0ZSBpcyBub3QgYmVsb3cgMSDCtUd5L2guIEJvdGggbWV0aG9kcyBuZWVkIGNoYXJnZWQgcGFydGljbGUgZXF1aWxpYnJpdW0gZm9yIHRoZSByZWZlcmVuY2UgZmllbGQuIEhvd2V2ZXIsIHRoaXMgaXMgbm90IGFsd2F5cyBlc3RhYmxpc2hlZCBpbiB0aGUgd29ya3BsYWNlIGZpZWxkIGZvciB3aGljaCB0aGUgZG9zZW1ldGVyIGlzIGNhbGlicmF0ZWQuIFRoaXMgaXMgZXNwZWNpYWxseSB0cnVlIGF0IHBob3RvbiBlbmVyZ2llcyB3aXRob3V0IGluaGVyZW50IGNoYXJnZWQgcGFydGljbGUgZXF1aWxpYnJpdW0gYXQgdGhlIHJlZmVyZW5jZSBkZXB0aCBkLCB3aGljaCBkZXBlbmRzIG9uIHRoZSBhY3R1YWwgY29tYmluYXRpb24gb2YgZW5lcmd5IGFuZCByZWZlcmVuY2UgZGVwdGggZC4gRWxlY3Ryb25zIG9mIGVuZXJnaWVzIGFib3ZlIDY1IGtlViwgMCw3NSBNZVYgYW5kIDIsMSBNZVYgY2FuIGp1c3QgcGVuZXRyYXRlIDAsMDcgbW0sIDMgbW0gYW5kIDEwIG1tIG9mIElDUlUgdGlzc3VlLCByZXNwZWN0aXZlbHksIGFuZCB0aGUgcmFkaWF0aW9uIHF1YWxpdGllcyB3aXRoIHBob3RvbiBlbmVyZ2llcyBhYm92ZSB0aGVzZSB2YWx1ZXMgYXJlIGNvbnNpZGVyZWQgYXMgcmFkaWF0aW9uIHF1YWxpdGllcyB3aXRob3V0IGluaGVyZW50IGNoYXJnZWQgcGFydGljbGUgZXF1aWxpYnJpdW0gZm9yIHRoZSBxdWFudGl0aWVzIGRlZmluZWQgYXQgdGhlc2UgZGVwdGhzLiBUbyBkZXRlcm1pbmUgdGhlIGRvc2UocmF0ZSkgdmFsdWUgYW5kIHRoZSBhc3NvY2lhdGVkIG92ZXJhbGwgdW5jZXJ0YWludHkgb2YgaXQsIGEgY2FsaWJyYXRpb24gb2YgYWxsIG1lYXN1cmluZyBpbnN0cnVtZW50cyB1c2VkIGZvciB0aGUgZGV0ZXJtaW5hdGlvbiBvZiB0aGUgcXVhbnRpdHkgdmFsdWUgaXMgbmVlZGVkIHdoaWNoIGlzIHRyYWNlYWJsZSB0byBuYXRpb25hbCBzdGFuZGFyZHMuIFRoaXMgZG9jdW1lbnQgZG9lcyBub3Qgc3BlY2lmeSBwdWxzZWQgcmVmZXJlbmNlIHJhZGlhdGlvbiBmaWVsZHMuICIsIm1hdGNoTGV2ZWwiOiJub25lIiwibWF0Y2hlZFdvcmRzIjpbXX19fSx7ImNhdGVnb3J5Ijoic3RhbmRhcmQiLCJwYXRoIjoiL3NpdGVzL2lzb29yZy9jb250ZW50cy9kYXRhL3N0YW5kYXJkLzA2LzYxLzY2MTY1IiwidXVpZCI6ImE0ODYxZWE5LTAwMjItNGQxMi1iNjU3LTEwNmMxMGM3ODg3NSIsInRpdGxlIjoiSVNPIDQwMzctNDoyMDE5IFJhZGlvbG9naWNhbCBwcm90ZWN0aW9uIOKAlCBYIGFuZCBnYW1tYSByZWZlcmVuY2UgcmFkaWF0aW9uIGZvciBjYWxpYnJhdGluZyBkb3NlbWV0ZXJzIGFuZCBkb3NlcmF0ZSBtZXRlcnMgYW5kIGZvciBkZXRlcm1pbmluZyB0aGVpciByZXNwb25zZSBhcyBhIGZ1bmN0aW9uIG9mIHBob3RvbiBlbmVyZ3kg4oCUIFBhcnQgNDogQ2FsaWJyYXRpb24gb2YgYXJlYSBhbmQgcGVyc29uYWwgZG9zZW1ldGVycyBpbiBsb3cgZW5lcmd5IFggcmVmZXJlbmNlIHJhZGlhdGlvbiBmaWVsZHMiLCJzdGF0dXMiOiJQdWJsaXNoZWQiLCJ5ZWFyIjoyMDE5LCJvcmRlciI6MTEsInRleHQiOiJUaGlzIGRvY3VtZW50IGdpdmVzIGd1aWRlbGluZXMgb24gYWRkaXRpb25hbCBhc3BlY3RzIG9mIHRoZSBjaGFyYWN0ZXJpemF0aW9uIG9mIGxvdyBlbmVyZ3kgcGhvdG9uIHJhZGlhdGlvbnMgYW5kIG9uIHRoZSBwcm9jZWR1cmVzIGZvciBjYWxpYnJhdGlvbiBhbmQgZGV0ZXJtaW5hdGlvbiBvZiB0aGUgcmVzcG9uc2Ugb2YgYXJlYSBhbmQgcGVyc29uYWwgZG9zZShyYXRlKW1ldGVycyBhcyBhIGZ1bmN0aW9uIG9mIHBob3RvbiBlbmVyZ3kgYW5kIGFuZ2xlIG9mIGluY2lkZW5jZS4gVGhpcyBkb2N1bWVudCBjb25jZW50cmF0ZXMgb24gdGhlIGFjY3VyYXRlIGRldGVybWluYXRpb24gb2YgY29udmVyc2lvbiBjb2VmZmljaWVudHMgZnJvbSBhaXIga2VybWEgdG8gSCBwICgxMCksIEgqICgxMCksIEggcCAoMykgYW5kIEgnICgzKSBhbmQgZm9yIHRoZSBzcGVjdHJhIG9mIGxvdyBlbmVyZ3kgcGhvdG9uIHJhZGlhdGlvbnMuIEFzIGFuIGFsdGVybmF0aXZlIHRvIHRoZSB1c2Ugb2YgY29udmVyc2lvbiBjb2VmZmljaWVudHMgdGhlIGRpcmVjdCBjYWxpYnJhdGlvbiBpbiB0ZXJtcyBvZiB0aGVzZSBxdWFudGl0aWVzIGJ5IG1lYW5zIG9mIGFwcHJvcHJpYXRlIHJlZmVyZW5jZSBpbnN0cnVtZW50cyBpcyBkZXNjcmliZWQuICIsIm9iamVjdElEIjoiNjYxNjVfMCIsIl9oaWdobGlnaHRSZXN1bHQiOnsidGl0bGUiOnsidmFsdWUiOiJJU08gNDAzNy00OjIwMTkgUmFkaW9sb2dpY2FsIHByb3RlY3Rpb24g4oCUIFggYW5kIGdhbW1hIHJlZmVyZW5jZSByYWRpYXRpb24gZm9yIGNhbGlicmF0aW5nIGRvc2VtZXRlcnMgYW5kIGRvc2VyYXRlIG1ldGVycyBhbmQgZm9yIGRldGVybWluaW5nIHRoZWlyIHJlc3BvbnNlIGFzIGEgZnVuY3Rpb24gb2YgcGhvdG9uIGVuZXJneSDigJQgUGFydCA0OiBDYWxpYnJhdGlvbiBvZiBhcmVhIGFuZCBwZXJzb25hbCBkb3NlbWV0ZXJzIGluIGxvdyBlbmVyZ3kgWCByZWZlcmVuY2UgcmFkaWF0aW9uIGZpZWxkcyIsIm1hdGNoTGV2ZWwiOiJub25lIiwibWF0Y2hlZFdvcmRzIjpbXX0sInRleHQiOnsidmFsdWUiOiJUaGlzIGRvY3VtZW50IGdpdmVzIGd1aWRlbGluZXMgb24gYWRkaXRpb25hbCBhc3BlY3RzIG9mIHRoZSBjaGFyYWN0ZXJpemF0aW9uIG9mIGxvdyBlbmVyZ3kgcGhvdG9uIHJhZGlhdGlvbnMgYW5kIG9uIHRoZSBwcm9jZWR1cmVzIGZvciBjYWxpYnJhdGlvbiBhbmQgZGV0ZXJtaW5hdGlvbiBvZiB0aGUgcmVzcG9uc2Ugb2YgYXJlYSBhbmQgcGVyc29uYWwgZG9zZShyYXRlKW1ldGVycyBhcyBhIGZ1bmN0aW9uIG9mIHBob3RvbiBlbmVyZ3kgYW5kIGFuZ2xlIG9mIGluY2lkZW5jZS4gVGhpcyBkb2N1bWVudCBjb25jZW50cmF0ZXMgb24gdGhlIGFjY3VyYXRlIGRldGVybWluYXRpb24gb2YgY29udmVyc2lvbiBjb2VmZmljaWVudHMgZnJvbSBhaXIga2VybWEgdG8gSCBwICgxMCksIEgqICgxMCksIEggcCAoMykgYW5kIEgnICgzKSBhbmQgZm9yIHRoZSBzcGVjdHJhIG9mIGxvdyBlbmVyZ3kgcGhvdG9uIHJhZGlhdGlvbnMuIEFzIGFuIGFsdGVybmF0aXZlIHRvIHRoZSB1c2Ugb2YgY29udmVyc2lvbiBjb2VmZmljaWVudHMgdGhlIGRpcmVjdCBjYWxpYnJhdGlvbiBpbiB0ZXJtcyBvZiB0aGVzZSBxdWFudGl0aWVzIGJ5IG1lYW5zIG9mIGFwcHJvcHJpYXRlIHJlZmVyZW5jZSBpbnN0cnVtZW50cyBpcyBkZXNjcmliZWQuICIsIm1hdGNoTGV2ZWwiOiJub25lIiwibWF0Y2hlZFdvcmRzIjpbXX19fSx7ImNhdGVnb3J5Ijoic3RhbmRhcmQiLCJwYXRoIjoiL3NpdGVzL2lzb29yZy9jb250ZW50cy9kYXRhL3N0YW5kYXJkLzA1Lzk1LzU5NTA5IiwidXVpZCI6ImJlN2RiZjk0LTc1M2EtNDdiMi05OTYwLWU4ZDQzOGYzM2VhYSIsInRpdGxlIjoiSVNPIDQ4MzMtMjoyMDEzIE1pY3JvYmlvbG9neSBvZiB0aGUgZm9vZCBjaGFpbiDigJQgSG9yaXpvbnRhbCBtZXRob2QgZm9yIHRoZSBlbnVtZXJhdGlvbiBvZiBtaWNyb29yZ2FuaXNtcyDigJQgUGFydCAyOiBDb2xvbnkgY291bnQgYXQgMzAgwrBDIGJ5IHRoZSBzdXJmYWNlIHBsYXRpbmcgdGVjaG5pcXVlIiwic3RhdHVzIjoiUHVibGlzaGVkIiwieWVhciI6MjAxOSwib3JkZXIiOjExLCJ0ZXh0IjoiSVNPIDQ4MzMtMjoyMDEzIHNwZWNpZmllcyBhIGhvcml6b250YWwgbWV0aG9kIGZvciBlbnVtZXJhdGlvbiBvZiBtaWNyb29yZ2FuaXNtcyB0aGF0IGFyZSBhYmxlIHRvIGdyb3cgYW5kIGZvcm0gY29sb25pZXMgb24gdGhlIHN1cmZhY2Ugb2YgYSBzb2xpZCBtZWRpdW0gYWZ0ZXIgYWVyb2JpYyBpbmN1YmF0aW9uIGF0IDMwIMKwQy4gVGhlIG1ldGhvZCBpcyBhcHBsaWNhYmxlIHRvOiBhKSAgICBwcm9kdWN0cyBpbnRlbmRlZCBmb3IgaHVtYW4gY29uc3VtcHRpb24gb3IgZm9yIGFuaW1hbCBmZWVkOyBiKSAgICBlbnZpcm9ubWVudGFsIHNhbXBsZXMgaW4gdGhlIGFyZWEgb2YgZm9vZCBhbmQgZmVlZCBwcm9kdWN0aW9uIGFuZCBmb29kIGhhbmRsaW5nLiBJU08gNDgzMy0yOjIwMTMgaXMgYXBwbGljYWJsZSB0bzogMSkgICAgcHJvZHVjdHMgY29udGFpbmluZyBoZWF0LXNlbnNpdGl2ZSBvcmdhbmlzbXMgdGhhdCBhcmUgbGlrZWx5IHRvIGZvcm0gYSBzaWduaWZpY2FudCBwcm9wb3J0aW9uIG9mIHRoZSB0b3RhbCBmbG9yYSAoZS5nLiBwc3ljaHJvdHJvcGhpYyBvcmdhbmlzbXMgaW4gY2hpbGxlZCBhbmQgZnJvemVuIGZvb2RzLCBkcmllZCBmb29kcywgb3RoZXIgZm9vZHMgdGhhdCBtYXkgY29udGFpbiBoZWF0LXNlbnNpdGl2ZSBvcmdhbmlzbXMpOyAyKSAgICBwcm9kdWN0cyBjb250YWluaW5nIG9ibGlnYXRlbHkgYWVyb2JpYyBiYWN0ZXJpYSB0aGF0IGFyZSBsaWtlbHkgdG8gZm9ybSBhIHNpZ25pZmljYW50IHByb3BvcnRpb24gb2YgdGhlIHRvdGFsIGZsb3JhIChlLmcuIFBzZXVkb21vbmFzIHNwcC4pOyAzKSAgICBwcm9kdWN0cyB0aGF0IGNvbnRhaW4gc21hbGwgcGFydGljbGVzIHRoYXQgY2FuIHByb3ZlIGRpZmZpY3VsdCB0byBkaXN0aW5ndWlzaCBmcm9tIGNvbG9uaWVzIGluIGEgcG91ciBwbGF0ZTsgNCkgICAgcHJvZHVjdHMgd2hvc2UgaW50ZW5zZSBjb2xvdXIgcHJldmVudHMgdGhlIHJlY29nbml0aW9uIG9mIGNvbG9uaWVzIGluIGEgcG91ciBwbGF0ZTsgNSkgICAgcHJvZHVjdHMgZm9yIHdoaWNoIGRpc3RpbmN0aW9uIGJldHdlZW4gZGlmZmVyZW50IHR5cGVzIG9mIGNvbG9ueSBpcyByZXF1aXJlZCBhcyBwYXJ0IG9mIHRoZSBhc3Nlc3NtZW50IG9mIGZvb2QgcXVhbGl0eS4gSW4gYWRkaXRpb24gdG8gdGhlIG1hbnVhbCBzcHJlYWQgcGxhdGluZyB0ZWNobmlxdWUsIGFuIGFubmV4IHRvIElTTyA0ODMzLTI6MjAxMyBhbHNvIHNwZWNpZmllcyB0aGUgdXNlIG9mIGEgc3BpcmFsIHBsYXRlciwgYSByYXBpZCBtZXRob2Qgb2YgcGVyZm9ybWluZyBzdXJmYWNlIGNvbG9ueSBjb3VudHMuIFRoZSBhcHBsaWNhYmlsaXR5IG9mIElTTyA0ODMzLTI6MjAxMyB0byB0aGUgZXhhbWluYXRpb24gb2YgY2VydGFpbiBmZXJtZW50ZWQgZm9vZCBhbmQgYW5pbWFsIGZlZWRzIGlzIGxpbWl0ZWQgYW5kIG90aGVyIG1lZGlhIG9yIGluY3ViYXRpb24gY29uZGl0aW9ucyBjYW4gYmUgbW9yZSBhcHByb3ByaWF0ZS4gSG93ZXZlciwgdGhpcyBtZXRob2QgY2FuIGJlIGFwcGxpZWQgdG8gc3VjaCBwcm9kdWN0cyBldmVuIHRob3VnaCBpdCBpcyBwb3NzaWJsZSB0aGF0IHRoZSBwcmVkb21pbmFudCBtaWNyb29yZ2FuaXNtcyBpbiB0aGVzZSBwcm9kdWN0cyBhcmUgbm90IGRldGVjdGVkIGVmZmVjdGl2ZWx5LiBGb3Igc29tZSBtYXRyaWNlcywgdGhlIG1ldGhvZCBkZXNjcmliZWQgaW4gSVNPIDQ4MzMtMjoyMDEzIGNhbiBnaXZlIGRpZmZlcmVudCByZXN1bHRzIHRvIHRob3NlIG9idGFpbmVkIHVzaW5nIHRoZSBtZXRob2QgZGVzY3JpYmVkIGluIElTTyA0ODMz4oCRMS4gIiwib2JqZWN0SUQiOiI1OTUwOV8wIiwiX2hpZ2hsaWdodFJlc3VsdCI6eyJ0aXRsZSI6eyJ2YWx1ZSI6IklTTyA0ODMzLTI6MjAxMyBNaWNyb2Jpb2xvZ3kgb2YgdGhlIGZvb2QgY2hhaW4g4oCUIEhvcml6b250YWwgbWV0aG9kIGZvciB0aGUgZW51bWVyYXRpb24gb2YgbWljcm9vcmdhbmlzbXMg4oCUIFBhcnQgMjogQ29sb255IGNvdW50IGF0IDMwIMKwQyBieSB0aGUgc3VyZmFjZSBwbGF0aW5nIHRlY2huaXF1ZSIsIm1hdGNoTGV2ZWwiOiJub25lIiwibWF0Y2hlZFdvcmRzIjpbXX0sInRleHQiOnsidmFsdWUiOiJJU08gNDgzMy0yOjIwMTMgc3BlY2lmaWVzIGEgaG9yaXpvbnRhbCBtZXRob2QgZm9yIGVudW1lcmF0aW9uIG9mIG1pY3Jvb3JnYW5pc21zIHRoYXQgYXJlIGFibGUgdG8gZ3JvdyBhbmQgZm9ybSBjb2xvbmllcyBvbiB0aGUgc3VyZmFjZSBvZiBhIHNvbGlkIG1lZGl1bSBhZnRlciBhZXJvYmljIGluY3ViYXRpb24gYXQgMzAgwrBDLiBUaGUgbWV0aG9kIGlzIGFwcGxpY2FibGUgdG86IGEpICAgIHByb2R1Y3RzIGludGVuZGVkIGZvciBodW1hbiBjb25zdW1wdGlvbiBvciBmb3IgYW5pbWFsIGZlZWQ7IGIpICAgIGVudmlyb25tZW50YWwgc2FtcGxlcyBpbiB0aGUgYXJlYSBvZiBmb29kIGFuZCBmZWVkIHByb2R1Y3Rpb24gYW5kIGZvb2QgaGFuZGxpbmcuIElTTyA0ODMzLTI6MjAxMyBpcyBhcHBsaWNhYmxlIHRvOiAxKSAgICBwcm9kdWN0cyBjb250YWluaW5nIGhlYXQtc2Vuc2l0aXZlIG9yZ2FuaXNtcyB0aGF0IGFyZSBsaWtlbHkgdG8gZm9ybSBhIHNpZ25pZmljYW50IHByb3BvcnRpb24gb2YgdGhlIHRvdGFsIGZsb3JhIChlLmcuIHBzeWNocm90cm9waGljIG9yZ2FuaXNtcyBpbiBjaGlsbGVkIGFuZCBmcm96ZW4gZm9vZHMsIGRyaWVkIGZvb2RzLCBvdGhlciBmb29kcyB0aGF0IG1heSBjb250YWluIGhlYXQtc2Vuc2l0aXZlIG9yZ2FuaXNtcyk7IDIpICAgIHByb2R1Y3RzIGNvbnRhaW5pbmcgb2JsaWdhdGVseSBhZXJvYmljIGJhY3RlcmlhIHRoYXQgYXJlIGxpa2VseSB0byBmb3JtIGEgc2lnbmlmaWNhbnQgcHJvcG9ydGlvbiBvZiB0aGUgdG90YWwgZmxvcmEgKGUuZy4gUHNldWRvbW9uYXMgc3BwLik7IDMpICAgIHByb2R1Y3RzIHRoYXQgY29udGFpbiBzbWFsbCBwYXJ0aWNsZXMgdGhhdCBjYW4gcHJvdmUgZGlmZmljdWx0IHRvIGRpc3Rpbmd1aXNoIGZyb20gY29sb25pZXMgaW4gYSBwb3VyIHBsYXRlOyA0KSAgICBwcm9kdWN0cyB3aG9zZSBpbnRlbnNlIGNvbG91ciBwcmV2ZW50cyB0aGUgcmVjb2duaXRpb24gb2YgY29sb25pZXMgaW4gYSBwb3VyIHBsYXRlOyA1KSAgICBwcm9kdWN0cyBmb3Igd2hpY2ggZGlzdGluY3Rpb24gYmV0d2VlbiBkaWZmZXJlbnQgdHlwZXMgb2YgY29sb255IGlzIHJlcXVpcmVkIGFzIHBhcnQgb2YgdGhlIGFzc2Vzc21lbnQgb2YgZm9vZCBxdWFsaXR5LiBJbiBhZGRpdGlvbiB0byB0aGUgbWFudWFsIHNwcmVhZCBwbGF0aW5nIHRlY2huaXF1ZSwgYW4gYW5uZXggdG8gSVNPIDQ4MzMtMjoyMDEzIGFsc28gc3BlY2lmaWVzIHRoZSB1c2Ugb2YgYSBzcGlyYWwgcGxhdGVyLCBhIHJhcGlkIG1ldGhvZCBvZiBwZXJmb3JtaW5nIHN1cmZhY2UgY29sb255IGNvdW50cy4gVGhlIGFwcGxpY2FiaWxpdHkgb2YgSVNPIDQ4MzMtMjoyMDEzIHRvIHRoZSBleGFtaW5hdGlvbiBvZiBjZXJ0YWluIGZlcm1lbnRlZCBmb29kIGFuZCBhbmltYWwgZmVlZHMgaXMgbGltaXRlZCBhbmQgb3RoZXIgbWVkaWEgb3IgaW5jdWJhdGlvbiBjb25kaXRpb25zIGNhbiBiZSBtb3JlIGFwcHJvcHJpYXRlLiBIb3dldmVyLCB0aGlzIG1ldGhvZCBjYW4gYmUgYXBwbGllZCB0byBzdWNoIHByb2R1Y3RzIGV2ZW4gdGhvdWdoIGl0IGlzIHBvc3NpYmxlIHRoYXQgdGhlIHByZWRvbWluYW50IG1pY3Jvb3JnYW5pc21zIGluIHRoZXNlIHByb2R1Y3RzIGFyZSBub3QgZGV0ZWN0ZWQgZWZmZWN0aXZlbHkuIEZvciBzb21lIG1hdHJpY2VzLCB0aGUgbWV0aG9kIGRlc2NyaWJlZCBpbiBJU08gNDgzMy0yOjIwMTMgY2FuIGdpdmUgZGlmZmVyZW50IHJlc3VsdHMgdG8gdGhvc2Ugb2J0YWluZWQgdXNpbmcgdGhlIG1ldGhvZCBkZXNjcmliZWQgaW4gSVNPIDQ4MzPigJExLiAiLCJtYXRjaExldmVsIjoibm9uZSIsIm1hdGNoZWRXb3JkcyI6W119fX0seyJjYXRlZ29yeSI6InN0YW5kYXJkIiwicGF0aCI6Ii9zaXRlcy9pc29vcmcvY29udGVudHMvZGF0YS9zdGFuZGFyZC8wNS85MS81OTEzMSIsInV1aWQiOiI0ZTk4NWNjYy0xNzZhLTQ3NDUtYTZkMi0xZDU0NjdlY2E0ODMiLCJ0aXRsZSI6IklTTyA0NDM3LTU6MjAxNCBQbGFzdGljcyBwaXBpbmcgc3lzdGVtcyBmb3IgdGhlIHN1cHBseSBvZiBnYXNlb3VzIGZ1ZWxzIC0gUG9seWV0aHlsZW5lIChQRSkg4oCUIFBhcnQgNTogRml0bmVzcyBmb3IgcHVycG9zZSBvZiB0aGUgc3lzdGVtIiwic3RhdHVzIjoiUHVibGlzaGVkIiwieWVhciI6MjAxOSwib3JkZXIiOjExLCJ0ZXh0IjoiSVNPIDQ0MzctNToyMDE0IHNwZWNpZmllcyB0aGUgcmVxdWlyZW1lbnRzIG9mIGZpdG5lc3MgZm9yIHB1cnBvc2Ugb2YgdGhlIHBvbHlldGh5bGVuZSAoUEUpIHBpcGluZyBzeXN0ZW0gdG8gYmUgdXNlZCBmb3IgdGhlIHN1cHBseSBvZiBnYXNlb3VzIGZ1ZWxzLiBJdCBzcGVjaWZpZXMgdGhlIGRlZmluaXRpb25zIG9mIGVsZWN0cm9mdXNpb24sIHNvY2tldCBmdXNpb24sIGJ1dHQgZnVzaW9uLCBhbmQgbWVjaGFuaWNhbCBqb2ludHMuIEl0IHNwZWNpZmllcyB0aGUgbWV0aG9kIG9mIHByZXBhcmF0aW9uIG9mIHRlc3QgcGllY2Ugam9pbnRzIGFuZCB0aGUgdGVzdHMgdG8gYmUgY2FycmllZCBvdXQgb24gdGhlc2Ugam9pbnRzIGZvciBhc3Nlc3NpbmcgdGhlIGZpdG5lc3MgZm9yIHB1cnBvc2Ugb2YgdGhlIHN5c3RlbSB1bmRlciBub3JtYWwgYW5kIGV4dHJlbWUgY29uZGl0aW9ucy4gSXQgc3BlY2lmaWVzIHRoZSB0ZXN0IHBhcmFtZXRlcnMgZm9yIHRoZSB0ZXN0IG1ldGhvZHMgcmVmZXJyZWQgdG8gaW4gdGhpcyBwYXJ0IG9mIElTTyA0NDM3LiBJbiBjb25qdW5jdGlvbiB3aXRoIElTTyA0NDM34oCRMSwgSVNPIDQ0MzfigJEyLCBJU08gNDQzN+KAkTMsIGFuZCBJU08gNDQzN+KAkTQsIGl0IGlzIGFwcGxpY2FibGUgdG8gUEUgcGlwZXMsIGZpdHRpbmdzLCB2YWx2ZXMsIHRoZWlyIGpvaW50cywgYW5kIGpvaW50cyB3aXRoIGNvbXBvbmVudHMgb2YgUEUgYW5kIG90aGVyIG1hdGVyaWFscyBpbnRlbmRlZCB0byBiZSB1c2VkIHVuZGVyIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczogdGhlIG1heGltdW0gb3BlcmF0aW5nIHByZXNzdXJlIChNT1ApIGlzIGJhc2VkIG9uIHRoZSBkZXNpZ24gc3RyZXNzLCBkZXRlcm1pbmVkIGZyb20gdGhlIGNvbXBvdW5kIG1pbmltdW0gcmVxdWlyZWQgc3RyZW5ndGggKE1SUykgZGl2aWRlZCBieSB0aGUgQyBmYWN0b3IsIGFuZCB0YWtpbmcgaW50byBhY2NvdW50IHJhcGlkIGNyYWNrIHByb3BhZ2F0aW9uIChSQ1ApIHJlcXVpcmVtZW50czsgYW5kIGEgdGVtcGVyYXR1cmUgb2YgMjAgwrBDIGlzIHRha2VuIGFzIHJlZmVyZW5jZSB0ZW1wZXJhdHVyZSBmb3IgdGhlIGRlc2lnbiBiYXNpcy4gIiwib2JqZWN0SUQiOiI1OTEzMV8wIiwiX2hpZ2hsaWdodFJlc3VsdCI6eyJ0aXRsZSI6eyJ2YWx1ZSI6IklTTyA0NDM3LTU6MjAxNCBQbGFzdGljcyBwaXBpbmcgc3lzdGVtcyBmb3IgdGhlIHN1cHBseSBvZiBnYXNlb3VzIGZ1ZWxzIC0gUG9seWV0aHlsZW5lIChQRSkg4oCUIFBhcnQgNTogRml0bmVzcyBmb3IgcHVycG9zZSBvZiB0aGUgc3lzdGVtIiwibWF0Y2hMZXZlbCI6Im5vbmUiLCJtYXRjaGVkV29yZHMiOltdfSwidGV4dCI6eyJ2YWx1ZSI6IklTTyA0NDM3LTU6MjAxNCBzcGVjaWZpZXMgdGhlIHJlcXVpcmVtZW50cyBvZiBmaXRuZXNzIGZvciBwdXJwb3NlIG9mIHRoZSBwb2x5ZXRoeWxlbmUgKFBFKSBwaXBpbmcgc3lzdGVtIHRvIGJlIHVzZWQgZm9yIHRoZSBzdXBwbHkgb2YgZ2FzZW91cyBmdWVscy4gSXQgc3BlY2lmaWVzIHRoZSBkZWZpbml0aW9ucyBvZiBlbGVjdHJvZnVzaW9uLCBzb2NrZXQgZnVzaW9uLCBidXR0IGZ1c2lvbiwgYW5kIG1lY2hhbmljYWwgam9pbnRzLiBJdCBzcGVjaWZpZXMgdGhlIG1ldGhvZCBvZiBwcmVwYXJhdGlvbiBvZiB0ZXN0IHBpZWNlIGpvaW50cyBhbmQgdGhlIHRlc3RzIHRvIGJlIGNhcnJpZWQgb3V0IG9uIHRoZXNlIGpvaW50cyBmb3IgYXNzZXNzaW5nIHRoZSBmaXRuZXNzIGZvciBwdXJwb3NlIG9mIHRoZSBzeXN0ZW0gdW5kZXIgbm9ybWFsIGFuZCBleHRyZW1lIGNvbmRpdGlvbnMuIEl0IHNwZWNpZmllcyB0aGUgdGVzdCBwYXJhbWV0ZXJzIGZvciB0aGUgdGVzdCBtZXRob2RzIHJlZmVycmVkIHRvIGluIHRoaXMgcGFydCBvZiBJU08gNDQzNy4gSW4gY29uanVuY3Rpb24gd2l0aCBJU08gNDQzN+KAkTEsIElTTyA0NDM34oCRMiwgSVNPIDQ0MzfigJEzLCBhbmQgSVNPIDQ0MzfigJE0LCBpdCBpcyBhcHBsaWNhYmxlIHRvIFBFIHBpcGVzLCBmaXR0aW5ncywgdmFsdmVzLCB0aGVpciBqb2ludHMsIGFuZCBqb2ludHMgd2l0aCBjb21wb25lbnRzIG9mIFBFIGFuZCBvdGhlciBtYXRlcmlhbHMgaW50ZW5kZWQgdG8gYmUgdXNlZCB1bmRlciB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6IHRoZSBtYXhpbXVtIG9wZXJhdGluZyBwcmVzc3VyZSAoTU9QKSBpcyBiYXNlZCBvbiB0aGUgZGVzaWduIHN0cmVzcywgZGV0ZXJtaW5lZCBmcm9tIHRoZSBjb21wb3VuZCBtaW5pbXVtIHJlcXVpcmVkIHN0cmVuZ3RoIChNUlMpIGRpdmlkZWQgYnkgdGhlIEMgZmFjdG9yLCBhbmQgdGFraW5nIGludG8gYWNjb3VudCByYXBpZCBjcmFjayBwcm9wYWdhdGlvbiAoUkNQKSByZXF1aXJlbWVudHM7IGFuZCBhIHRlbXBlcmF0dXJlIG9mIDIwIMKwQyBpcyB0YWtlbiBhcyByZWZlcmVuY2UgdGVtcGVyYXR1cmUgZm9yIHRoZSBkZXNpZ24gYmFzaXMuICIsIm1hdGNoTGV2ZWwiOiJub25lIiwibWF0Y2hlZFdvcmRzIjpbXX19fSx7ImNhdGVnb3J5Ijoic3RhbmRhcmQiLCJwYXRoIjoiL3NpdGVzL2lzb29yZy9jb250ZW50cy9kYXRhL3N0YW5kYXJkLzA1LzkxLzU5MTMwIiwidXVpZCI6IjAyN2Y1MTQzLTQ5NDctNDM1NS1hOTc0LTY2OGFiMjllMDVlZiIsInRpdGxlIjoiSVNPIDQ0MzctMzoyMDE0IFBsYXN0aWNzIHBpcGluZyBzeXN0ZW1zIGZvciB0aGUgc3VwcGx5IG9mIGdhc2VvdXMgZnVlbHMg4oCUIFBvbHlldGh5bGVuZSAoUEUpIOKAlCBQYXJ0IDM6IEZpdHRpbmdzIiwic3RhdHVzIjoiUHVibGlzaGVkIiwieWVhciI6MjAxOSwib3JkZXIiOjExLCJ0ZXh0IjoiSVNPIDQ0MzctMzoyMDE0IHNwZWNpZmllcyB0aGUgY2hhcmFjdGVyaXN0aWNzIG9mIGZ1c2lvbiBmaXR0aW5ncyBtYWRlIGZyb20gcG9seWV0aHlsZW5lIChQRSkgYXMgd2VsbCBhcyBvZiBtZWNoYW5pY2FsIGZpdHRpbmdzIGZvciBwaXBpbmcgc3lzdGVtcyBpbiB0aGUgZmllbGQgb2YgdGhlIHN1cHBseSBvZiBnYXNlb3VzIGZ1ZWxzLiBJdCBhbHNvIHNwZWNpZmllcyB0aGUgdGVzdCBwYXJhbWV0ZXJzIGZvciB0aGUgdGVzdCBtZXRob2RzIHJlZmVycmVkIHRvIGluIHRoaXMgcGFydCBvZiBJU08gNDQzNy4gSW4gY29uanVuY3Rpb24gd2l0aCBJU08gNDQzN+KAkTEsIElTTyA0NDM34oCRMiwgSVNPIDQ0MzfigJE0LCBhbmQgSVNPIDQ0MzfigJE1LCBpdCBpcyBhcHBsaWNhYmxlIHRvIFBFIHBpcGVzLCBmaXR0aW5ncyBhbmQgdmFsdmVzLCB0aGVpciBqb2ludHMsIGFuZCBqb2ludHMgd2l0aCBjb21wb25lbnRzIG9mIFBFIGFuZCBvdGhlciBtYXRlcmlhbHMgaW50ZW5kZWQgdG8gYmUgdXNlZCB1bmRlciB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6IHRoZSBtYXhpbXVtIG9wZXJhdGluZyBwcmVzc3VyZSAoTU9QKSBpcyBiYXNlZCBvbiB0aGUgZGVzaWduIHN0cmVzcywgZGV0ZXJtaW5lZCBmcm9tIHRoZSBjb21wb3VuZCBtaW5pbXVtIHJlcXVpcmVkIHN0cmVuZ3RoIChNUlMpIGRpdmlkZWQgYnkgdGhlIEMgZmFjdG9yLCBhbmQgdGFraW5nIGludG8gYWNjb3VudCByYXBpZCBjcmFjayBwcm9wYWdhdGlvbiAoUkNQKSByZXF1aXJlbWVudHM7IGFuZCBhIHRlbXBlcmF0dXJlIG9mIDIwIMKwQyBpcyB0YWtlbiBhcyByZWZlcmVuY2UgdGVtcGVyYXR1cmUgZm9yIHRoZSBkZXNpZ24gYmFzaXMuIElTTyA0NDM3LTM6MjAxNCBpcyBhcHBsaWNhYmxlIGZvciBmaXR0aW5ncyBvZiB0aGUgZm9sbG93aW5nIHR5cGVzOiBlbGVjdHJvZnVzaW9uIHNvY2tldCBmaXR0aW5nczsgZWxlY3Ryb2Z1c2lvbiBzYWRkbGUgZml0dGluZ3M7IHNwaWdvdCBlbmQgZml0dGluZ3MgKGZvciBidXR0IGZ1c2lvbiB1c2luZyBoZWF0ZWQgdG9vbHMgYW5kIGVsZWN0cm9mdXNpb24gc29ja2V0IGZ1c2lvbik7IHNvY2tldCBmdXNpb24gZml0dGluZ3M7IGFuZCBtZWNoYW5pY2FsIGZpdHRpbmdzLiAiLCJvYmplY3RJRCI6IjU5MTMwXzAiLCJfaGlnaGxpZ2h0UmVzdWx0Ijp7InRpdGxlIjp7InZhbHVlIjoiSVNPIDQ0MzctMzoyMDE0IFBsYXN0aWNzIHBpcGluZyBzeXN0ZW1zIGZvciB0aGUgc3VwcGx5IG9mIGdhc2VvdXMgZnVlbHMg4oCUIFBvbHlldGh5bGVuZSAoUEUpIOKAlCBQYXJ0IDM6IEZpdHRpbmdzIiwibWF0Y2hMZXZlbCI6Im5vbmUiLCJtYXRjaGVkV29yZHMiOltdfSwidGV4dCI6eyJ2YWx1ZSI6IklTTyA0NDM3LTM6MjAxNCBzcGVjaWZpZXMgdGhlIGNoYXJhY3RlcmlzdGljcyBvZiBmdXNpb24gZml0dGluZ3MgbWFkZSBmcm9tIHBvbHlldGh5bGVuZSAoUEUpIGFzIHdlbGwgYXMgb2YgbWVjaGFuaWNhbCBmaXR0aW5ncyBmb3IgcGlwaW5nIHN5c3RlbXMgaW4gdGhlIGZpZWxkIG9mIHRoZSBzdXBwbHkgb2YgZ2FzZW91cyBmdWVscy4gSXQgYWxzbyBzcGVjaWZpZXMgdGhlIHRlc3QgcGFyYW1ldGVycyBmb3IgdGhlIHRlc3QgbWV0aG9kcyByZWZlcnJlZCB0byBpbiB0aGlzIHBhcnQgb2YgSVNPIDQ0MzcuIEluIGNvbmp1bmN0aW9uIHdpdGggSVNPIDQ0MzfigJExLCBJU08gNDQzN+KAkTIsIElTTyA0NDM34oCRNCwgYW5kIElTTyA0NDM34oCRNSwgaXQgaXMgYXBwbGljYWJsZSB0byBQRSBwaXBlcywgZml0dGluZ3MgYW5kIHZhbHZlcywgdGhlaXIgam9pbnRzLCBhbmQgam9pbnRzIHdpdGggY29tcG9uZW50cyBvZiBQRSBhbmQgb3RoZXIgbWF0ZXJpYWxzIGludGVuZGVkIHRvIGJlIHVzZWQgdW5kZXIgdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOiB0aGUgbWF4aW11bSBvcGVyYXRpbmcgcHJlc3N1cmUgKE1PUCkgaXMgYmFzZWQgb24gdGhlIGRlc2lnbiBzdHJlc3MsIGRldGVybWluZWQgZnJvbSB0aGUgY29tcG91bmQgbWluaW11bSByZXF1aXJlZCBzdHJlbmd0aCAoTVJTKSBkaXZpZGVkIGJ5IHRoZSBDIGZhY3RvciwgYW5kIHRha2luZyBpbnRvIGFjY291bnQgcmFwaWQgY3JhY2sgcHJvcGFnYXRpb24gKFJDUCkgcmVxdWlyZW1lbnRzOyBhbmQgYSB0ZW1wZXJhdHVyZSBvZiAyMCDCsEMgaXMgdGFrZW4gYXMgcmVmZXJlbmNlIHRlbXBlcmF0dXJlIGZvciB0aGUgZGVzaWduIGJhc2lzLiBJU08gNDQzNy0zOjIwMTQgaXMgYXBwbGljYWJsZSBmb3IgZml0dGluZ3Mgb2YgdGhlIGZvbGxvd2luZyB0eXBlczogZWxlY3Ryb2Z1c2lvbiBzb2NrZXQgZml0dGluZ3M7IGVsZWN0cm9mdXNpb24gc2FkZGxlIGZpdHRpbmdzOyBzcGlnb3QgZW5kIGZpdHRpbmdzIChmb3IgYnV0dCBmdXNpb24gdXNpbmcgaGVhdGVkIHRvb2xzIGFuZCBlbGVjdHJvZnVzaW9uIHNvY2tldCBmdXNpb24pOyBzb2NrZXQgZnVzaW9uIGZpdHRpbmdzOyBhbmQgbWVjaGFuaWNhbCBmaXR0aW5ncy4gIiwibWF0Y2hMZXZlbCI6Im5vbmUiLCJtYXRjaGVkV29yZHMiOltdfX19LHsiY2F0ZWdvcnkiOiJzdGFuZGFyZCIsInBhdGgiOiIvc2l0ZXMvaXNvb3JnL2NvbnRlbnRzL2RhdGEvc3RhbmRhcmQvMDUvOTEvNTkxMjkiLCJ1dWlkIjoiMGIyYzdmYjQtOGMwYS00OTU4LWJhZjgtZTZjYWEyMjlkMzQyIiwidGl0bGUiOiJJU08gNDQzNy0yOjIwMTQgUGxhc3RpY3MgcGlwaW5nIHN5c3RlbXMgZm9yIHRoZSBzdXBwbHkgb2YgZ2FzZW91cyBmdWVscyAtIFBvbHlldGh5bGVuZSAoUEUpIOKAlCBQYXJ0IDI6IFBpcGVzIiwic3RhdHVzIjoiUHVibGlzaGVkIiwieWVhciI6MjAxOSwib3JkZXIiOjExLCJ0ZXh0IjoiSVNPIDQ0MzctMjoyMDE0IHNwZWNpZmllcyB0aGUgY2hhcmFjdGVyaXN0aWNzIG9mIHBpcGVzIG1hZGUgZnJvbSBwb2x5ZXRoeWxlbmUgKFBFKSBmb3IgcGlwaW5nIHN5c3RlbXMgaW4gdGhlIGZpZWxkIG9mIHRoZSBzdXBwbHkgb2YgZ2FzZW91cyBmdWVscy4gSXQgYWxzbyBzcGVjaWZpZXMgdGhlIHRlc3QgcGFyYW1ldGVycyBmb3IgdGhlIHRlc3QgbWV0aG9kcyByZWZlcnJlZCB0byBpbiB0aGlzIEludGVybmF0aW9uYWwgU3RhbmRhcmQuIEluIGNvbmp1bmN0aW9uIHdpdGggcGFydCBvZiBJU08gNDQzNy0xLCBJU08gNDQzNy0zLCBJU08gNDQzNy00LCBhbmQgSVNPIDQ0MzctNSwgaXQgaXMgYXBwbGljYWJsZSB0byBQRSBwaXBlcywgZml0dGluZ3MgYW5kIHZhbHZlcywgdGhlaXIgam9pbnRzLCBhbmQgam9pbnRzIHdpdGggY29tcG9uZW50cyBvZiBQRSBhbmQgb3RoZXIgbWF0ZXJpYWxzIGludGVuZGVkIHRvIGJlIHVzZWQgdW5kZXIgdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOiB0aGUgbWF4aW11bSBvcGVyYXRpbmcgcHJlc3N1cmUgKE1PUCkgaXMgYmFzZWQgb24gdGhlIGRlc2lnbiBzdHJlc3MgZGV0ZXJtaW5lZCBmcm9tIHRoZSBjb21wb3VuZCBtaW5pbXVtIHJlcXVpcmVkIHN0cmVuZ3RoIChNUlMpIGRpdmlkZWQgYnkgdGhlIEMgZmFjdG9yLCBhbmQgdGFraW5nIGludG8gYWNjb3VudCByYXBpZCBjcmFjayBwcm9wYWdhdGlvbiAoUkNQKSByZXF1aXJlbWVudHM7IGFuZCBhIHRlbXBlcmF0dXJlIG9mIDIwIMKwQyBpcyB0YWtlbiBhcyByZWZlcmVuY2UgdGVtcGVyYXR1cmUgZm9yIHRoZSBkZXNpZ24gYmFzaXMuIElTTyA0NDM3LTI6MjAxNCBjb3ZlcnMgdGhyZWUgdHlwZXMgb2YgcGlwZXM6IFBFIHBpcGVzIChvdXRzaWRlIGRpYW1ldGVyIGQgbiApIGluY2x1ZGluZyBhbnkgaWRlbnRpZmljYXRpb24gc3RyaXBlczsgUEUgcGlwZXMgd2l0aCBjby1leHRydWRlZCBsYXllcnMgb24gZWl0aGVyIG9yIGJvdGggdGhlIG91dHNpZGUgYW5kL29yIGluc2lkZSBvZiB0aGUgcGlwZSAodG90YWwgb3V0c2lkZSBkaWFtZXRlciBkIG4gKSwgd2hlcmUgYWxsIFBFIGxheWVycyBoYXZlIHRoZSBzYW1lIE1SUyByYXRpbmc7IGFuZCBQRSBwaXBlcyAob3V0c2lkZSBkaWFtZXRlciBkIG4gKSB3aXRoIGEgcGVlbGFibGUgYW5kIGNvbnRpZ3VvdXMgdGhlcm1vcGxhc3RpY3MgYWRkaXRpb25hbCBsYXllciBvbiB0aGUgb3V0c2lkZSAoY29hdGVkIHBpcGUpLiAiLCJvYmplY3RJRCI6IjU5MTI5XzAiLCJfaGlnaGxpZ2h0UmVzdWx0Ijp7InRpdGxlIjp7InZhbHVlIjoiSVNPIDQ0MzctMjoyMDE0IFBsYXN0aWNzIHBpcGluZyBzeXN0ZW1zIGZvciB0aGUgc3VwcGx5IG9mIGdhc2VvdXMgZnVlbHMgLSBQb2x5ZXRoeWxlbmUgKFBFKSDigJQgUGFydCAyOiBQaXBlcyIsIm1hdGNoTGV2ZWwiOiJub25lIiwibWF0Y2hlZFdvcmRzIjpbXX0sInRleHQiOnsidmFsdWUiOiJJU08gNDQzNy0yOjIwMTQgc3BlY2lmaWVzIHRoZSBjaGFyYWN0ZXJpc3RpY3Mgb2YgcGlwZXMgbWFkZSBmcm9tIHBvbHlldGh5bGVuZSAoUEUpIGZvciBwaXBpbmcgc3lzdGVtcyBpbiB0aGUgZmllbGQgb2YgdGhlIHN1cHBseSBvZiBnYXNlb3VzIGZ1ZWxzLiBJdCBhbHNvIHNwZWNpZmllcyB0aGUgdGVzdCBwYXJhbWV0ZXJzIGZvciB0aGUgdGVzdCBtZXRob2RzIHJlZmVycmVkIHRvIGluIHRoaXMgSW50ZXJuYXRpb25hbCBTdGFuZGFyZC4gSW4gY29uanVuY3Rpb24gd2l0aCBwYXJ0IG9mIElTTyA0NDM3LTEsIElTTyA0NDM3LTMsIElTTyA0NDM3LTQsIGFuZCBJU08gNDQzNy01LCBpdCBpcyBhcHBsaWNhYmxlIHRvIFBFIHBpcGVzLCBmaXR0aW5ncyBhbmQgdmFsdmVzLCB0aGVpciBqb2ludHMsIGFuZCBqb2ludHMgd2l0aCBjb21wb25lbnRzIG9mIFBFIGFuZCBvdGhlciBtYXRlcmlhbHMgaW50ZW5kZWQgdG8gYmUgdXNlZCB1bmRlciB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6IHRoZSBtYXhpbXVtIG9wZXJhdGluZyBwcmVzc3VyZSAoTU9QKSBpcyBiYXNlZCBvbiB0aGUgZGVzaWduIHN0cmVzcyBkZXRlcm1pbmVkIGZyb20gdGhlIGNvbXBvdW5kIG1pbmltdW0gcmVxdWlyZWQgc3RyZW5ndGggKE1SUykgZGl2aWRlZCBieSB0aGUgQyBmYWN0b3IsIGFuZCB0YWtpbmcgaW50byBhY2NvdW50IHJhcGlkIGNyYWNrIHByb3BhZ2F0aW9uIChSQ1ApIHJlcXVpcmVtZW50czsgYW5kIGEgdGVtcGVyYXR1cmUgb2YgMjAgwrBDIGlzIHRha2VuIGFzIHJlZmVyZW5jZSB0ZW1wZXJhdHVyZSBmb3IgdGhlIGRlc2lnbiBiYXNpcy4gSVNPIDQ0MzctMjoyMDE0IGNvdmVycyB0aHJlZSB0eXBlcyBvZiBwaXBlczogUEUgcGlwZXMgKG91dHNpZGUgZGlhbWV0ZXIgZCBuICkgaW5jbHVkaW5nIGFueSBpZGVudGlmaWNhdGlvbiBzdHJpcGVzOyBQRSBwaXBlcyB3aXRoIGNvLWV4dHJ1ZGVkIGxheWVycyBvbiBlaXRoZXIgb3IgYm90aCB0aGUgb3V0c2lkZSBhbmQvb3IgaW5zaWRlIG9mIHRoZSBwaXBlICh0b3RhbCBvdXRzaWRlIGRpYW1ldGVyIGQgbiApLCB3aGVyZSBhbGwgUEUgbGF5ZXJzIGhhdmUgdGhlIHNhbWUgTVJTIHJhdGluZzsgYW5kIFBFIHBpcGVzIChvdXRzaWRlIGRpYW1ldGVyIGQgbiApIHdpdGggYSBwZWVsYWJsZSBhbmQgY29udGlndW91cyB0aGVybW9wbGFzdGljcyBhZGRpdGlvbmFsIGxheWVyIG9uIHRoZSBvdXRzaWRlIChjb2F0ZWQgcGlwZSkuICIsIm1hdGNoTGV2ZWwiOiJub25lIiwibWF0Y2hlZFdvcmRzIjpbXX19fSx7ImNhdGVnb3J5Ijoic3RhbmRhcmQiLCJwYXRoIjoiL3NpdGVzL2lzb29yZy9jb250ZW50cy9kYXRhL3N0YW5kYXJkLzA1LzkxLzU5MTI4IiwidXVpZCI6IjNhNjc2YzMxLTIzYTYtNDI1ZC1iMjMzLTM5MmFjMjZjNTgyMSIsInRpdGxlIjoiSVNPIDQ0MzctMToyMDE0IFBsYXN0aWNzIHBpcGluZyBzeXN0ZW1zIGZvciB0aGUgc3VwcGx5IG9mIGdhc2VvdXMgZnVlbHMgLSBQb2x5ZXRoeWxlbmUgKFBFKSDigJQgUGFydCAxOiBHZW5lcmFsIiwic3RhdHVzIjoiUHVibGlzaGVkIiwieWVhciI6MjAxOSwib3JkZXIiOjExLCJ0ZXh0IjoiSVNPIDQ0MzctMToyMDE0IHNwZWNpZmllcyB0aGUgZ2VuZXJhbCBwcm9wZXJ0aWVzIG9mIHBvbHlldGh5bGVuZSAoUEUpIGNvbXBvdW5kcyBmb3IgdGhlIG1hbnVmYWN0dXJlIG9mIHBpcGVzIGFuZCBmaXR0aW5ncyBpbnRlbmRlZCB0byBiZSB1c2VkIGZvciB0aGUgc3VwcGx5IG9mIGdhc2VvdXMgZnVlbHMuIEl0IGFsc28gc3BlY2lmaWVzIHRoZSB0ZXN0IHBhcmFtZXRlcnMgZm9yIHRoZSB0ZXN0IG1ldGhvZHMgcmVmZXJyZWQgdG8gaW4gdGhpcyBJbnRlcm5hdGlvbmFsIFN0YW5kYXJkLiBJbiBjb25qdW5jdGlvbiB3aXRoIElTTyA0NDM3LTIsIElTTyA0NDM3LTMsIElTTyA0NDM3LTQsIGFuZCBJU08gNDQzNy01LCBpdCBpcyBhcHBsaWNhYmxlIHRvIFBFIHBpcGVzLCBmaXR0aW5ncyBhbmQgdmFsdmVzLCB0aGVpciBqb2ludHMsIGFuZCBqb2ludHMgd2l0aCBjb21wb25lbnRzIG9mIFBFIGFuZCBvdGhlciBtYXRlcmlhbHMgaW50ZW5kZWQgdG8gYmUgdXNlZCB1bmRlciB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6IHRoZSBtYXhpbXVtIG9wZXJhdGluZyBwcmVzc3VyZSAoTU9QKSBpcyBiYXNlZCBvbiB0aGUgZGVzaWduIHN0cmVzcyBkZXRlcm1pbmVkIGZyb20gdGhlIGNvbXBvdW5kIG1pbmltdW0gcmVxdWlyZWQgc3RyZW5ndGggKE1SUykgZGl2aWRlZCBieSB0aGUgQyBmYWN0b3IsIGFuZCB0YWtpbmcgaW50byBhY2NvdW50IHJhcGlkIGNyYWNrIHByb3BhZ2F0aW9uIChSQ1ApIHJlcXVpcmVtZW50czsgYW5kIGEgdGVtcGVyYXR1cmUgb2YgMjAgwrBDIGlzIHRha2VuIGFzIHJlZmVyZW5jZSB0ZW1wZXJhdHVyZSBmb3IgdGhlIGRlc2lnbiBiYXNpcy4gIiwib2JqZWN0SUQiOiI1OTEyOF8wIiwiX2hpZ2hsaWdodFJlc3VsdCI6eyJ0aXRsZSI6eyJ2YWx1ZSI6IklTTyA0NDM3LTE6MjAxNCBQbGFzdGljcyBwaXBpbmcgc3lzdGVtcyBmb3IgdGhlIHN1cHBseSBvZiBnYXNlb3VzIGZ1ZWxzIC0gUG9seWV0aHlsZW5lIChQRSkg4oCUIFBhcnQgMTogR2VuZXJhbCIsIm1hdGNoTGV2ZWwiOiJub25lIiwibWF0Y2hlZFdvcmRzIjpbXX0sInRleHQiOnsidmFsdWUiOiJJU08gNDQzNy0xOjIwMTQgc3BlY2lmaWVzIHRoZSBnZW5lcmFsIHByb3BlcnRpZXMgb2YgcG9seWV0aHlsZW5lIChQRSkgY29tcG91bmRzIGZvciB0aGUgbWFudWZhY3R1cmUgb2YgcGlwZXMgYW5kIGZpdHRpbmdzIGludGVuZGVkIHRvIGJlIHVzZWQgZm9yIHRoZSBzdXBwbHkgb2YgZ2FzZW91cyBmdWVscy4gSXQgYWxzbyBzcGVjaWZpZXMgdGhlIHRlc3QgcGFyYW1ldGVycyBmb3IgdGhlIHRlc3QgbWV0aG9kcyByZWZlcnJlZCB0byBpbiB0aGlzIEludGVybmF0aW9uYWwgU3RhbmRhcmQuIEluIGNvbmp1bmN0aW9uIHdpdGggSVNPIDQ0MzctMiwgSVNPIDQ0MzctMywgSVNPIDQ0MzctNCwgYW5kIElTTyA0NDM3LTUsIGl0IGlzIGFwcGxpY2FibGUgdG8gUEUgcGlwZXMsIGZpdHRpbmdzIGFuZCB2YWx2ZXMsIHRoZWlyIGpvaW50cywgYW5kIGpvaW50cyB3aXRoIGNvbXBvbmVudHMgb2YgUEUgYW5kIG90aGVyIG1hdGVyaWFscyBpbnRlbmRlZCB0byBiZSB1c2VkIHVuZGVyIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczogdGhlIG1heGltdW0gb3BlcmF0aW5nIHByZXNzdXJlIChNT1ApIGlzIGJhc2VkIG9uIHRoZSBkZXNpZ24gc3RyZXNzIGRldGVybWluZWQgZnJvbSB0aGUgY29tcG91bmQgbWluaW11bSByZXF1aXJlZCBzdHJlbmd0aCAoTVJTKSBkaXZpZGVkIGJ5IHRoZSBDIGZhY3RvciwgYW5kIHRha2luZyBpbnRvIGFjY291bnQgcmFwaWQgY3JhY2sgcHJvcGFnYXRpb24gKFJDUCkgcmVxdWlyZW1lbnRzOyBhbmQgYSB0ZW1wZXJhdHVyZSBvZiAyMCDCsEMgaXMgdGFrZW4gYXMgcmVmZXJlbmNlIHRlbXBlcmF0dXJlIGZvciB0aGUgZGVzaWduIGJhc2lzLiAiLCJtYXRjaExldmVsIjoibm9uZSIsIm1hdGNoZWRXb3JkcyI6W119fX0seyJjYXRlZ29yeSI6InN0YW5kYXJkIiwicGF0aCI6Ii9zaXRlcy9pc29vcmcvY29udGVudHMvZGF0YS9zdGFuZGFyZC8wNS8wOC81MDgyOCIsInV1aWQiOiI2YzgwNWJmMy0yM2Y2LTQwMTAtOWU1My1lNjhmOWIxYTU1YjQiLCJ0aXRsZSI6IklTTyA0MTI2LTU6MjAxMyBTYWZldHkgZGV2aWNlcyBmb3IgcHJvdGVjdGlvbiBhZ2FpbnN0IGV4Y2Vzc2l2ZSBwcmVzc3VyZSDigJQgUGFydCA1OiBDb250cm9sbGVkIHNhZmV0eSBwcmVzc3VyZSByZWxpZWYgc3lzdGVtcyAoQ1NQUlMpIiwic3RhdHVzIjoiUHVibGlzaGVkIiwieWVhciI6MjAxOSwib3JkZXIiOjExLCJ0ZXh0IjoiSVNPIDQxMjYtNToyMDEzIHNwZWNpZmllcyB0aGUgcmVxdWlyZW1lbnRzIGZvciBjb250cm9sbGVkIHNhZmV0eSBwcmVzc3VyZSByZWxpZWYgc3lzdGVtcyAoQ1NQUlMpIGlycmVzcGVjdGl2ZSBvZiB0aGUgZmx1aWQgZm9yIHdoaWNoIHRoZXkgYXJlIGRlc2lnbmVkLiBJdCBpcyBhcHBsaWNhYmxlIGZvciBtYWluIHZhbHZlcyBoYXZpbmcgYSBmbG93IGRpYW1ldGVyIG9mIDQgbW0gYW5kIGFib3ZlIHdoaWNoIGFyZSBmb3IgdXNlIGF0IHByZXNzdXJlcyBvZiAwLDEgYmFyIGdhdWdlIGFuZCBhYm92ZS4gTm8gbGltaXRhdGlvbiBpcyBwbGFjZWQgb24gdGVtcGVyYXR1cmUuIElTTyA0MTI2LTU6MjAxMyBpcyBhIHByb2R1Y3Qgc3RhbmRhcmQgYW5kIGlzIG5vdCBhcHBsaWNhYmxlIHRvIGFwcGxpY2F0aW9ucy4gIiwib2JqZWN0SUQiOiI1MDgyOF8wIiwiX2hpZ2hsaWdodFJlc3VsdCI6eyJ0aXRsZSI6eyJ2YWx1ZSI6IklTTyA0MTI2LTU6MjAxMyBTYWZldHkgZGV2aWNlcyBmb3IgcHJvdGVjdGlvbiBhZ2FpbnN0IGV4Y2Vzc2l2ZSBwcmVzc3VyZSDigJQgUGFydCA1OiBDb250cm9sbGVkIHNhZmV0eSBwcmVzc3VyZSByZWxpZWYgc3lzdGVtcyAoQ1NQUlMpIiwibWF0Y2hMZXZlbCI6Im5vbmUiLCJtYXRjaGVkV29yZHMiOltdfSwidGV4dCI6eyJ2YWx1ZSI6IklTTyA0MTI2LTU6MjAxMyBzcGVjaWZpZXMgdGhlIHJlcXVpcmVtZW50cyBmb3IgY29udHJvbGxlZCBzYWZldHkgcHJlc3N1cmUgcmVsaWVmIHN5c3RlbXMgKENTUFJTKSBpcnJlc3BlY3RpdmUgb2YgdGhlIGZsdWlkIGZvciB3aGljaCB0aGV5IGFyZSBkZXNpZ25lZC4gSXQgaXMgYXBwbGljYWJsZSBmb3IgbWFpbiB2YWx2ZXMgaGF2aW5nIGEgZmxvdyBkaWFtZXRlciBvZiA0IG1tIGFuZCBhYm92ZSB3aGljaCBhcmUgZm9yIHVzZSBhdCBwcmVzc3VyZXMgb2YgMCwxIGJhciBnYXVnZSBhbmQgYWJvdmUuIE5vIGxpbWl0YXRpb24gaXMgcGxhY2VkIG9uIHRlbXBlcmF0dXJlLiBJU08gNDEyNi01OjIwMTMgaXMgYSBwcm9kdWN0IHN0YW5kYXJkIGFuZCBpcyBub3QgYXBwbGljYWJsZSB0byBhcHBsaWNhdGlvbnMuICIsIm1hdGNoTGV2ZWwiOiJub25lIiwibWF0Y2hlZFdvcmRzIjpbXX19fSx7ImNhdGVnb3J5Ijoic3RhbmRhcmQiLCJwYXRoIjoiL3NpdGVzL2lzb29yZy9jb250ZW50cy9kYXRhL3N0YW5kYXJkLzA1LzA4LzUwODI3IiwidXVpZCI6IjBkOGQ5ODI4LWYxMjYtNGU3Yy05Yzk4LTBmMTQ0NjYzMDE3NyIsInRpdGxlIjoiSVNPIDQxMjYtNDoyMDEzIFNhZmV0eSBkZXZpY2VzIGZvciBwcm90ZWN0aW9uIGFnYWluc3QgZXhjZXNzaXZlIHByZXNzdXJlIOKAlCBQYXJ0IDQ6IFBpbG90IG9wZXJhdGVkIHNhZmV0eSB2YWx2ZXMiLCJzdGF0dXMiOiJQdWJsaXNoZWQiLCJ5ZWFyIjoyMDE5LCJvcmRlciI6MTEsInRleHQiOiJJU08gNDEyNi00OjIwMTMgc3BlY2lmaWVzIGdlbmVyYWwgcmVxdWlyZW1lbnRzIGZvciBwaWxvdCBvcGVyYXRlZCBzYWZldHkgdmFsdmVzLCBpcnJlc3BlY3RpdmUgb2YgdGhlIGZsdWlkIGZvciB3aGljaCB0aGV5IGFyZSBkZXNpZ25lZC4gSW4gYWxsIGNhc2VzLCB0aGUgb3BlcmF0aW9uIGlzIGNhcnJpZWQgb3V0IGJ5IHRoZSBmbHVpZCBpbiB0aGUgc3lzdGVtIHRvIGJlIHByb3RlY3RlZC4gSXQgaXMgYXBwbGljYWJsZSB0byBwaWxvdCBvcGVyYXRlZCBzYWZldHkgdmFsdmVzIGhhdmluZyBhIHZhbHZlIGZsb3cgZGlhbWV0ZXIgb2YgNCBtbSBhbmQgYWJvdmUgd2hpY2ggYXJlIGZvciB1c2UgYXQgc2V0IHByZXNzdXJlcyBvZiAwLDEgYmFyIGdhdWdlIGFuZCBhYm92ZS4gTm8gbGltaXRhdGlvbiBpcyBwbGFjZWQgb24gdGVtcGVyYXR1cmUuIElTTyA0MTI2LTQ6MjAxMyBpcyBhIHByb2R1Y3Qgc3RhbmRhcmQgYW5kIGl0IGlzIG5vdCBhcHBsaWNhYmxlIHRvIGFwcGxpY2F0aW9ucyBvZiBwaWxvdCBvcGVyYXRlZCBzYWZldHkgdmFsdmVzLiAiLCJvYmplY3RJRCI6IjUwODI3XzAiLCJfaGlnaGxpZ2h0UmVzdWx0Ijp7InRpdGxlIjp7InZhbHVlIjoiSVNPIDQxMjYtNDoyMDEzIFNhZmV0eSBkZXZpY2VzIGZvciBwcm90ZWN0aW9uIGFnYWluc3QgZXhjZXNzaXZlIHByZXNzdXJlIOKAlCBQYXJ0IDQ6IFBpbG90IG9wZXJhdGVkIHNhZmV0eSB2YWx2ZXMiLCJtYXRjaExldmVsIjoibm9uZSIsIm1hdGNoZWRXb3JkcyI6W119LCJ0ZXh0Ijp7InZhbHVlIjoiSVNPIDQxMjYtNDoyMDEzIHNwZWNpZmllcyBnZW5lcmFsIHJlcXVpcmVtZW50cyBmb3IgcGlsb3Qgb3BlcmF0ZWQgc2FmZXR5IHZhbHZlcywgaXJyZXNwZWN0aXZlIG9mIHRoZSBmbHVpZCBmb3Igd2hpY2ggdGhleSBhcmUgZGVzaWduZWQuIEluIGFsbCBjYXNlcywgdGhlIG9wZXJhdGlvbiBpcyBjYXJyaWVkIG91dCBieSB0aGUgZmx1aWQgaW4gdGhlIHN5c3RlbSB0byBiZSBwcm90ZWN0ZWQuIEl0IGlzIGFwcGxpY2FibGUgdG8gcGlsb3Qgb3BlcmF0ZWQgc2FmZXR5IHZhbHZlcyBoYXZpbmcgYSB2YWx2ZSBmbG93IGRpYW1ldGVyIG9mIDQgbW0gYW5kIGFib3ZlIHdoaWNoIGFyZSBmb3IgdXNlIGF0IHNldCBwcmVzc3VyZXMgb2YgMCwxIGJhciBnYXVnZSBhbmQgYWJvdmUuIE5vIGxpbWl0YXRpb24gaXMgcGxhY2VkIG9uIHRlbXBlcmF0dXJlLiBJU08gNDEyNi00OjIwMTMgaXMgYSBwcm9kdWN0IHN0YW5kYXJkIGFuZCBpdCBpcyBub3QgYXBwbGljYWJsZSB0byBhcHBsaWNhdGlvbnMgb2YgcGlsb3Qgb3BlcmF0ZWQgc2FmZXR5IHZhbHZlcy4gIiwibWF0Y2hMZXZlbCI6Im5vbmUiLCJtYXRjaGVkV29yZHMiOltdfX19LHsiY2F0ZWdvcnkiOiJzdGFuZGFyZCIsInBhdGgiOiIvc2l0ZXMvaXNvb3JnL2NvbnRlbnRzL2RhdGEvc3RhbmRhcmQvMDUvMDgvNTA4MjYiLCJ1dWlkIjoiOGEzZjlmNmMtNDQzMi00Mjk2LWE2YzQtODMwYzM5MDc5MmZhIiwidGl0bGUiOiJJU08gNDEyNi0xOjIwMTMgU2FmZXR5IGRldmljZXMgZm9yIHByb3RlY3Rpb24gYWdhaW5zdCBleGNlc3NpdmUgcHJlc3N1cmUg4oCUIFBhcnQgMTogU2FmZXR5IHZhbHZlcyIsInN0YXR1cyI6IlB1Ymxpc2hlZCIsInllYXIiOjIwMTksIm9yZGVyIjoxMSwidGV4dCI6IklTTyA0MTI2LTE6MjAxMyBzcGVjaWZpZXMgZ2VuZXJhbCByZXF1aXJlbWVudHMgZm9yIHNhZmV0eSB2YWx2ZXMgaXJyZXNwZWN0aXZlIG9mIHRoZSBmbHVpZCBmb3Igd2hpY2ggdGhleSBhcmUgZGVzaWduZWQuIEl0IGlzIGFwcGxpY2FibGUgdG8gc2FmZXR5IHZhbHZlcyBoYXZpbmcgYSBmbG93IGRpYW1ldGVyIG9mIDQgbW0gYW5kIGFib3ZlIHdoaWNoIGFyZSBmb3IgdXNlIGF0IHNldCBwcmVzc3VyZXMgb2YgMCwxIGJhciBnYXVnZSBhbmQgYWJvdmUuIE5vIGxpbWl0YXRpb24gaXMgcGxhY2VkIG9uIHRlbXBlcmF0dXJlLiBJU08gNDEyNi0xOjIwMTMgaXMgYSBwcm9kdWN0IHN0YW5kYXJkIGFuZCBpcyBub3QgYXBwbGljYWJsZSB0byBhcHBsaWNhdGlvbnMgb2Ygc2FmZXR5IHZhbHZlcy4gIiwib2JqZWN0SUQiOiI1MDgyNl8wIiwiX2hpZ2hsaWdodFJlc3VsdCI6eyJ0aXRsZSI6eyJ2YWx1ZSI6IklTTyA0MTI2LTE6MjAxMyBTYWZldHkgZGV2aWNlcyBmb3IgcHJvdGVjdGlvbiBhZ2FpbnN0IGV4Y2Vzc2l2ZSBwcmVzc3VyZSDigJQgUGFydCAxOiBTYWZldHkgdmFsdmVzIiwibWF0Y2hMZXZlbCI6Im5vbmUiLCJtYXRjaGVkV29yZHMiOltdfSwidGV4dCI6eyJ2YWx1ZSI6IklTTyA0MTI2LTE6MjAxMyBzcGVjaWZpZXMgZ2VuZXJhbCByZXF1aXJlbWVudHMgZm9yIHNhZmV0eSB2YWx2ZXMgaXJyZXNwZWN0aXZlIG9mIHRoZSBmbHVpZCBmb3Igd2hpY2ggdGhleSBhcmUgZGVzaWduZWQuIEl0IGlzIGFwcGxpY2FibGUgdG8gc2FmZXR5IHZhbHZlcyBoYXZpbmcgYSBmbG93IGRpYW1ldGVyIG9mIDQgbW0gYW5kIGFib3ZlIHdoaWNoIGFyZSBmb3IgdXNlIGF0IHNldCBwcmVzc3VyZXMgb2YgMCwxIGJhciBnYXVnZSBhbmQgYWJvdmUuIE5vIGxpbWl0YXRpb24gaXMgcGxhY2VkIG9uIHRlbXBlcmF0dXJlLiBJU08gNDEyNi0xOjIwMTMgaXMgYSBwcm9kdWN0IHN0YW5kYXJkIGFuZCBpcyBub3QgYXBwbGljYWJsZSB0byBhcHBsaWNhdGlvbnMgb2Ygc2FmZXR5IHZhbHZlcy4gIiwibWF0Y2hMZXZlbCI6Im5vbmUiLCJtYXRjaGVkV29yZHMiOltdfX19LHsiY2F0ZWdvcnkiOiJzdGFuZGFyZCIsInBhdGgiOiIvc2l0ZXMvaXNvb3JnL2NvbnRlbnRzL2RhdGEvc3RhbmRhcmQvMDQvMTQvNDE0NjMiLCJ1dWlkIjoiYTdmMmI5OTItZjA5Zi00ODE3LTk3YmEtMTlmZDRkMTg5MjNmIiwidGl0bGUiOiJJU08gNDY2NC0yOjIwMDYgUnViYmVyLCB2dWxjYW5pemVkIG9yIHRoZXJtb3BsYXN0aWMg4oCUIERldGVybWluYXRpb24gb2YgZHluYW1pYyBwcm9wZXJ0aWVzIOKAlCBQYXJ0IDI6IFRvcnNpb24gcGVuZHVsdW0gbWV0aG9kcyBhdCBsb3cgZnJlcXVlbmNpZXMiLCJzdGF0dXMiOiJQdWJsaXNoZWQiLCJ5ZWFyIjoyMDE5LCJvcmRlciI6MTEsInRleHQiOiJJU08gNDY2NC0yOjIwMDYgc3BlY2lmaWVzIG1ldGhvZHMsIHVzaW5nIGEgdG9yc2lvbiBwZW5kdWx1bSwgb2YgZGV0ZXJtaW5pbmcgdGhlIGR5bmFtaWMgcHJvcGVydGllcyBpbiBzaGVhciwgdGhhdCBpcyB0aGUgc2hlYXIgbW9kdWx1cyBhbmQgbWVjaGFuaWNhbCBkYW1waW5nLCBvZiB2dWxjYW5pemVkIG9yIHRoZXJtb3BsYXN0aWMgcnViYmVycyBvdmVyIGEgd2lkZSB0ZW1wZXJhdHVyZSByYW5nZSBhdCBsb3cgZnJlcXVlbmNpZXMgaW4gdGhlIHJhbmdlIDAsMSBIeiB0byAxMCBIeiBhbmQgYXQgY29tcGFyYXRpdmVseSBsb3cgc3RyYWlucyBvZiBsZXNzIHRoYW4gNSB4IDEwIC00IC4gIiwib2JqZWN0SUQiOiI0MTQ2M18wIiwiX2hpZ2hsaWdodFJlc3VsdCI6eyJ0aXRsZSI6eyJ2YWx1ZSI6IklTTyA0NjY0LTI6MjAwNiBSdWJiZXIsIHZ1bGNhbml6ZWQgb3IgdGhlcm1vcGxhc3RpYyDigJQgRGV0ZXJtaW5hdGlvbiBvZiBkeW5hbWljIHByb3BlcnRpZXMg4oCUIFBhcnQgMjogVG9yc2lvbiBwZW5kdWx1bSBtZXRob2RzIGF0IGxvdyBmcmVxdWVuY2llcyIsIm1hdGNoTGV2ZWwiOiJub25lIiwibWF0Y2hlZFdvcmRzIjpbXX0sInRleHQiOnsidmFsdWUiOiJJU08gNDY2NC0yOjIwMDYgc3BlY2lmaWVzIG1ldGhvZHMsIHVzaW5nIGEgdG9yc2lvbiBwZW5kdWx1bSwgb2YgZGV0ZXJtaW5pbmcgdGhlIGR5bmFtaWMgcHJvcGVydGllcyBpbiBzaGVhciwgdGhhdCBpcyB0aGUgc2hlYXIgbW9kdWx1cyBhbmQgbWVjaGFuaWNhbCBkYW1waW5nLCBvZiB2dWxjYW5pemVkIG9yIHRoZXJtb3BsYXN0aWMgcnViYmVycyBvdmVyIGEgd2lkZSB0ZW1wZXJhdHVyZSByYW5nZSBhdCBsb3cgZnJlcXVlbmNpZXMgaW4gdGhlIHJhbmdlIDAsMSBIeiB0byAxMCBIeiBhbmQgYXQgY29tcGFyYXRpdmVseSBsb3cgc3RyYWlucyBvZiBsZXNzIHRoYW4gNSB4IDEwIC00IC4gIiwibWF0Y2hMZXZlbCI6Im5vbmUiLCJtYXRjaGVkV29yZHMiOltdfX19LHsiY2F0ZWdvcnkiOiJzdGFuZGFyZCIsInBhdGgiOiIvc2l0ZXMvaXNvb3JnL2NvbnRlbnRzL2RhdGEvc3RhbmRhcmQvMDMvNDAvMzQwNzEiLCJ1dWlkIjoiMTM5YTUxOWItN2NjMC00ODVlLWFlNDItOTJlYzBmZjc2NGE1IiwidGl0bGUiOiJJU08gNDE5MC0yOjIwMDEgTGlmdCAoVVM6IEVsZXZhdG9yKSBpbnN0YWxsYXRpb24g4oCUIFBhcnQgMjogQ2xhc3MgSVYgbGlmdHMiLCJzdGF0dXMiOiJQdWJsaXNoZWQiLCJ5ZWFyIjoyMDE5LCJvcmRlciI6MTEsInRleHQiOiJUaGlzIHBhcnQgb2YgSVNPIDQxOTAgc3BlY2lmaWVzIHRoZSBuZWNlc3NhcnkgZGltZW5zaW9ucyB0byBwZXJtaXQgdGhlIGluc3RhbGxhdGlvbiBvZiBDbGFzcyBJViBsaWZ0cywgYXMgZGVmaW5lZCBpbiAzLjIuNCwgZ2VuZXJhbGx5IHVzZWQgZm9yIHRoZSB0cmFuc3BvcnQgb2YgZ29vZHMgKGZyZWlnaHQpLiBJdCBkZWFscyB3aXRoIGVsZWN0cmljIGFuZCBoeWRyYXVsaWMgbGlmdHMuIFRoZSBob3Jpem9udGFsIGRpbWVuc2lvbnMgb2YgdGhlIHdlbGxzIChVUzogaG9pc3R3YXlzKSBhcmUgZ2VuZXJhbGx5IGRlZmluZWQgYnkgdGhlIGVudHJhbmNlIGFuZCBkcml2ZSBjb25maWd1cmF0aW9ucy4gSXQgY292ZXJzIGxpZnRzIHdpdGggZWl0aGVyIGhvcml6b250YWwgb3IgdmVydGljYWwgcG93ZXItb3BlcmF0ZWQgc2xpZGluZyBkb29ycyBbc2VlIEZpZ3VyZXMgMSBhKSBhbmQgMSBiKV0uIEZvciBvdGhlciBjaGFyYWN0ZXJpc3RpY3MsIHRoZSBtYW51ZmFjdHVyZXJzIHNob3VsZCBiZSBjb25zdWx0ZWQuIFRoaXMgcGFydCBvZiBJU08gNDE5MCBpcyBhcHBsaWNhYmxlIHRvIG5ldyBsaWZ0IGluc3RhbGxhdGlvbnMsIHdpdGggYSBjYXIgd2l0aCBvbmUgb3IgdHdvIGVudHJhbmNlcywgdG8gYmUgaW5zdGFsbGVkIGluIGEgbmV3IGJ1aWxkaW5nLiBXaGVyZSByZWxldmFudCwgaXQgbWF5IGJlIHVzZWQgYXMgYSBiYXNpcyBmb3IgYW4gaW5zdGFsbGF0aW9uIGluIGFuIGV4aXN0aW5nIGJ1aWxkaW5nLiBUd28gdHlwZXMgb2YgbG9hZGluZyAobG9hZCBwZXIgdW5pdCBhcmVhKSBhcmUgYWRkcmVzc2VkOiBTZXJpZXMgQTogcGFzc2VuZ2VyIGFuZCBnb29kcyAoZnJlaWdodCkgbGlmdHMgd2l0aCBsb2FkaW5nIGNvbmZvcm1pbmcgdG8gRU4gODEtMSBvciBFTiA4MS0yOyBTZXJpZXMgQjogbGlmdHMgZm9yIGdvb2RzIChmcmVpZ2h0KSBvbmx5LCB3aGljaCBoYXZlIGEgZGlmZmVyZW50IGZsb29yIGxvYWRpbmcgaW4gY291bnRyaWVzIHdoaWNoIGFsbG93IHRoaXMgYnkgdmlydHVlIG9mIHRoZWlyIHNhZmV0eSBjb2Rlcy4gIiwib2JqZWN0SUQiOiIzNDA3MV8wIiwiX2hpZ2hsaWdodFJlc3VsdCI6eyJ0aXRsZSI6eyJ2YWx1ZSI6IklTTyA0MTkwLTI6MjAwMSBMaWZ0IChVUzogRWxldmF0b3IpIGluc3RhbGxhdGlvbiDigJQgUGFydCAyOiBDbGFzcyBJViBsaWZ0cyIsIm1hdGNoTGV2ZWwiOiJub25lIiwibWF0Y2hlZFdvcmRzIjpbXX0sInRleHQiOnsidmFsdWUiOiJUaGlzIHBhcnQgb2YgSVNPIDQxOTAgc3BlY2lmaWVzIHRoZSBuZWNlc3NhcnkgZGltZW5zaW9ucyB0byBwZXJtaXQgdGhlIGluc3RhbGxhdGlvbiBvZiBDbGFzcyBJViBsaWZ0cywgYXMgZGVmaW5lZCBpbiAzLjIuNCwgZ2VuZXJhbGx5IHVzZWQgZm9yIHRoZSB0cmFuc3BvcnQgb2YgZ29vZHMgKGZyZWlnaHQpLiBJdCBkZWFscyB3aXRoIGVsZWN0cmljIGFuZCBoeWRyYXVsaWMgbGlmdHMuIFRoZSBob3Jpem9udGFsIGRpbWVuc2lvbnMgb2YgdGhlIHdlbGxzIChVUzogaG9pc3R3YXlzKSBhcmUgZ2VuZXJhbGx5IGRlZmluZWQgYnkgdGhlIGVudHJhbmNlIGFuZCBkcml2ZSBjb25maWd1cmF0aW9ucy4gSXQgY292ZXJzIGxpZnRzIHdpdGggZWl0aGVyIGhvcml6b250YWwgb3IgdmVydGljYWwgcG93ZXItb3BlcmF0ZWQgc2xpZGluZyBkb29ycyBbc2VlIEZpZ3VyZXMgMSBhKSBhbmQgMSBiKV0uIEZvciBvdGhlciBjaGFyYWN0ZXJpc3RpY3MsIHRoZSBtYW51ZmFjdHVyZXJzIHNob3VsZCBiZSBjb25zdWx0ZWQuIFRoaXMgcGFydCBvZiBJU08gNDE5MCBpcyBhcHBsaWNhYmxlIHRvIG5ldyBsaWZ0IGluc3RhbGxhdGlvbnMsIHdpdGggYSBjYXIgd2l0aCBvbmUgb3IgdHdvIGVudHJhbmNlcywgdG8gYmUgaW5zdGFsbGVkIGluIGEgbmV3IGJ1aWxkaW5nLiBXaGVyZSByZWxldmFudCwgaXQgbWF5IGJlIHVzZWQgYXMgYSBiYXNpcyBmb3IgYW4gaW5zdGFsbGF0aW9uIGluIGFuIGV4aXN0aW5nIGJ1aWxkaW5nLiBUd28gdHlwZXMgb2YgbG9hZGluZyAobG9hZCBwZXIgdW5pdCBhcmVhKSBhcmUgYWRkcmVzc2VkOiBTZXJpZXMgQTogcGFzc2VuZ2VyIGFuZCBnb29kcyAoZnJlaWdodCkgbGlmdHMgd2l0aCBsb2FkaW5nIGNvbmZvcm1pbmcgdG8gRU4gODEtMSBvciBFTiA4MS0yOyBTZXJpZXMgQjogbGlmdHMgZm9yIGdvb2RzIChmcmVpZ2h0KSBvbmx5LCB3aGljaCBoYXZlIGEgZGlmZmVyZW50IGZsb29yIGxvYWRpbmcgaW4gY291bnRyaWVzIHdoaWNoIGFsbG93IHRoaXMgYnkgdmlydHVlIG9mIHRoZWlyIHNhZmV0eSBjb2Rlcy4gIiwibWF0Y2hMZXZlbCI6Im5vbmUiLCJtYXRjaGVkV29yZHMiOltdfX19LHsiY2F0ZWdvcnkiOiJzdGFuZGFyZCIsInBhdGgiOiIvc2l0ZXMvaXNvb3JnL2NvbnRlbnRzL2RhdGEvc3RhbmRhcmQvMDIvMjUvMjI1MzIiLCJ1dWlkIjoiNmVhZmI5MmMtZWJlYy00NjA5LTk2ZDAtYTc0YWVjYmM4MWFkIiwidGl0bGUiOiJJU08gNDQzMy00OjE5OTcgVGhlcm1vcGxhc3RpY3MgcGlwZXMg4oCUIFJlc2lzdGFuY2UgdG8gbGlxdWlkIGNoZW1pY2FscyDigJQgQ2xhc3NpZmljYXRpb24g4oCUIFBhcnQgNDogUG9seSh2aW55bGlkZW5lIGZsdW9yaWRlKSAoUFZERikgcGlwZXMiLCJzdGF0dXMiOiJQdWJsaXNoZWQiLCJ5ZWFyIjoyMDE5LCJvcmRlciI6MTEsIm9iamVjdElEIjoiMjI1MzJfMCIsIl9oaWdobGlnaHRSZXN1bHQiOnsidGl0bGUiOnsidmFsdWUiOiJJU08gNDQzMy00OjE5OTcgVGhlcm1vcGxhc3RpY3MgcGlwZXMg4oCUIFJlc2lzdGFuY2UgdG8gbGlxdWlkIGNoZW1pY2FscyDigJQgQ2xhc3NpZmljYXRpb24g4oCUIFBhcnQgNDogUG9seSh2aW55bGlkZW5lIGZsdW9yaWRlKSAoUFZERikgcGlwZXMiLCJtYXRjaExldmVsIjoibm9uZSIsIm1hdGNoZWRXb3JkcyI6W119fX0seyJjYXRlZ29yeSI6InN0YW5kYXJkIiwicGF0aCI6Ii9zaXRlcy9pc29vcmcvY29udGVudHMvZGF0YS9zdGFuZGFyZC8wMS8wNC8xMDQ2NCIsInV1aWQiOiIzZTNjNGJmYS04Y2NlLTRkMGItYjQ2Ny1iMTM5MzI1NmFkYmYiLCJ0aXRsZSI6IklTTyA0NTQ4LTQ6MTk5NyBNZXRob2RzIG9mIHRlc3QgZm9yIGZ1bGwtZmxvdyBsdWJyaWNhdGluZyBvaWwgZmlsdGVycyBmb3IgaW50ZXJuYWwgY29tYnVzdGlvbiBlbmdpbmVzIOKAlCBQYXJ0IDQ6IEluaXRpYWwgcGFydGljbGUgcmV0ZW50aW9uIGVmZmljaWVuY3ksIGxpZmUgYW5kIGN1bXVsYXRpdmUgZWZmaWNpZW5jeSAoZ3JhdmltZXRyaWMgbWV0aG9kKSIsInN0YXR1cyI6IlB1Ymxpc2hlZCIsInllYXIiOjIwMTksIm9yZGVyIjoxMSwib2JqZWN0SUQiOiIxMDQ2NF8wIiwiX2hpZ2hsaWdodFJlc3VsdCI6eyJ0aXRsZSI6eyJ2YWx1ZSI6IklTTyA0NTQ4LTQ6MTk5NyBNZXRob2RzIG9mIHRlc3QgZm9yIGZ1bGwtZmxvdyBsdWJyaWNhdGluZyBvaWwgZmlsdGVycyBmb3IgaW50ZXJuYWwgY29tYnVzdGlvbiBlbmdpbmVzIOKAlCBQYXJ0IDQ6IEluaXRpYWwgcGFydGljbGUgcmV0ZW50aW9uIGVmZmljaWVuY3ksIGxpZmUgYW5kIGN1bXVsYXRpdmUgZWZmaWNpZW5jeSAoZ3JhdmltZXRyaWMgbWV0aG9kKSIsIm1hdGNoTGV2ZWwiOiJub25lIiwibWF0Y2hlZFdvcmRzIjpbXX19fSx7ImNhdGVnb3J5Ijoic3RhbmRhcmQiLCJwYXRoIjoiL3NpdGVzL2lzb29yZy9jb250ZW50cy9kYXRhL3N0YW5kYXJkLzAxLzA0LzEwNDE2IiwidXVpZCI6Ijg3NTM5MmU3LWQ2N2EtNDY2MC1iNDA2LTZmZmFiNTY2Y2I5YSIsInRpdGxlIjoiSVNPIDQ1MTk6MTk4MCBFbGVjdHJvZGVwb3NpdGVkIG1ldGFsbGljIGNvYXRpbmdzIGFuZCByZWxhdGVkIGZpbmlzaGVzIOKAlCBTYW1wbGluZyBwcm9jZWR1cmVzIGZvciBpbnNwZWN0aW9uIGJ5IGF0dHJpYnV0ZXMiLCJzdGF0dXMiOiJQdWJsaXNoZWQiLCJ5ZWFyIjoyMDE5LCJvcmRlciI6MTEsInRleHQiOiJUaGUgc2FtcGxpbmcgcGxhbnMgYXJlIGFwcGxpY2FibGUgdG8gdGhlIGluc3BlY3Rpb24gb2YgZW5kIGl0ZW1zLCBjb21wb25lbnRzLCBtYXRlcmlhbHMgaW4gcHJvY2VzcyBhbmQgZmluaXNoZWQgcHJvZHVjdHMgaW4gc3RvcmFnZS4gVGhlIHBsYW4gYXJlIGludGVuZGVkIHRvIGJlIHVzZWQgZm9yIGEgY29udGludWluZyBzZXJpZXMgYW5kIGxvdHMsIGJ1dCB0aGV5IG1heSBhbHNvIGJlIHVzZWQgZm9yIGlzb2xhdGVkIGxvdHMuIElTTyA0NTEwIGlzIG5vdCBhcHBsaWNhYmxlIHRvIHRoZSBzYW1wbGluZyBhbmQgdGVzdGluZyBvZiBtZWNoYW5pY2FsIGZhc3RlbmVycyBoYXZpbmcgZWxlY3Ryb2RlcG9zaXRlZCBtZXRhbGxpYyBjb2F0aW5ncyBvciByZWxhdGVkIGZpbmlzaGVzLiBUaGVzZSBzYW1wbGluZyBwbGFucyBhcmUgYmFzZWQgb24gQVFMJ3Mgb2YgMSw1IGFuZCA0LDAgJS4gIiwib2JqZWN0SUQiOiIxMDQxNl8wIiwiX2hpZ2hsaWdodFJlc3VsdCI6eyJ0aXRsZSI6eyJ2YWx1ZSI6IklTTyA0NTE5OjE5ODAgRWxlY3Ryb2RlcG9zaXRlZCBtZXRhbGxpYyBjb2F0aW5ncyBhbmQgcmVsYXRlZCBmaW5pc2hlcyDigJQgU2FtcGxpbmcgcHJvY2VkdXJlcyBmb3IgaW5zcGVjdGlvbiBieSBhdHRyaWJ1dGVzIiwibWF0Y2hMZXZlbCI6Im5vbmUiLCJtYXRjaGVkV29yZHMiOltdfSwidGV4dCI6eyJ2YWx1ZSI6IlRoZSBzYW1wbGluZyBwbGFucyBhcmUgYXBwbGljYWJsZSB0byB0aGUgaW5zcGVjdGlvbiBvZiBlbmQgaXRlbXMsIGNvbXBvbmVudHMsIG1hdGVyaWFscyBpbiBwcm9jZXNzIGFuZCBmaW5pc2hlZCBwcm9kdWN0cyBpbiBzdG9yYWdlLiBUaGUgcGxhbiBhcmUgaW50ZW5kZWQgdG8gYmUgdXNlZCBmb3IgYSBjb250aW51aW5nIHNlcmllcyBhbmQgbG90cywgYnV0IHRoZXkgbWF5IGFsc28gYmUgdXNlZCBmb3IgaXNvbGF0ZWQgbG90cy4gSVNPIDQ1MTAgaXMgbm90IGFwcGxpY2FibGUgdG8gdGhlIHNhbXBsaW5nIGFuZCB0ZXN0aW5nIG9mIG1lY2hhbmljYWwgZmFzdGVuZXJzIGhhdmluZyBlbGVjdHJvZGVwb3NpdGVkIG1ldGFsbGljIGNvYXRpbmdzIG9yIHJlbGF0ZWQgZmluaXNoZXMuIFRoZXNlIHNhbXBsaW5nIHBsYW5zIGFyZSBiYXNlZCBvbiBBUUwncyBvZiAxLDUgYW5kIDQsMCAlLiAiLCJtYXRjaExldmVsIjoibm9uZSIsIm1hdGNoZWRXb3JkcyI6W119fX0seyJjYXRlZ29yeSI6InN0YW5kYXJkIiwicGF0aCI6Ii9zaXRlcy9pc29vcmcvY29udGVudHMvZGF0YS9zdGFuZGFyZC8wNy80NS83NDU0NyIsInV1aWQiOiI4MWQzNmZlYS1mYjRlLTQ5YzEtOWM3Ni00M2QyNjc2NGQyYTAiLCJ0aXRsZSI6IklTTyA0NzMwOjIwMTcvQW1kIDE6MjAxOCBFc3NlbnRpYWwgb2lsIG9mIE1lbGFsZXVjYSwgdGVycGluZW4tNC1vbCB0eXBlIChUZWEgVHJlZSBvaWwpIOKAlCBBbWVuZG1lbnQgMTogRW5hbnRpb21lcmljIGRpc3RyaWJ1dGlvbiIsInN0YXR1cyI6IlB1Ymxpc2hlZCIsInllYXIiOjIwMTgsIm9yZGVyIjoxMSwib2JqZWN0SUQiOiI3NDU0N18wIiwiX2hpZ2hsaWdodFJlc3VsdCI6eyJ0aXRsZSI6eyJ2YWx1ZSI6IklTTyA0NzMwOjIwMTcvQW1kIDE6MjAxOCBFc3NlbnRpYWwgb2lsIG9mIE1lbGFsZXVjYSwgdGVycGluZW4tNC1vbCB0eXBlIChUZWEgVHJlZSBvaWwpIOKAlCBBbWVuZG1lbnQgMTogRW5hbnRpb21lcmljIGRpc3RyaWJ1dGlvbiIsIm1hdGNoTGV2ZWwiOiJub25lIiwibWF0Y2hlZFdvcmRzIjpbXX19fSx7ImNhdGVnb3J5Ijoic3RhbmRhcmQiLCJwYXRoIjoiL3NpdGVzL2lzb29yZy9jb250ZW50cy9kYXRhL3N0YW5kYXJkLzA1Lzk5LzU5OTExIiwidXVpZCI6IjA1ZDM0MzQ0LWQ2NmQtNDMyMy04Zjc0LWY3OWI1YTI4ZWYyMSIsInRpdGxlIjoiSVNPIDQyMTAtNDoyMDE0IEN5Y2xlcyDigJQgU2FmZXR5IHJlcXVpcmVtZW50cyBmb3IgYmljeWNsZXMg4oCUIFBhcnQgNDogQnJha2luZyB0ZXN0IG1ldGhvZHMiLCJzdGF0dXMiOiJXaXRoZHJhd24iLCJ5ZWFyIjoyMDIzLCJvcmRlciI6MTAwLCJ0ZXh0IjoiSVNPIDQyMTAtNDoyMDE0IHNwZWNpZmllcyB0aGUgYnJha2luZyB0ZXN0IG1ldGhvZHMgZm9yIElTTyA0MjEw4oCRMi4gIiwib2JqZWN0SUQiOiI1OTkxMV8wIiwiX2hpZ2hsaWdodFJlc3VsdCI6eyJ0aXRsZSI6eyJ2YWx1ZSI6IklTTyA0MjEwLTQ6MjAxNCBDeWNsZXMg4oCUIFNhZmV0eSByZXF1aXJlbWVudHMgZm9yIGJpY3ljbGVzIOKAlCBQYXJ0IDQ6IEJyYWtpbmcgdGVzdCBtZXRob2RzIiwibWF0Y2hMZXZlbCI6Im5vbmUiLCJtYXRjaGVkV29yZHMiOltdfSwidGV4dCI6eyJ2YWx1ZSI6IklTTyA0MjEwLTQ6MjAxNCBzcGVjaWZpZXMgdGhlIGJyYWtpbmcgdGVzdCBtZXRob2RzIGZvciBJU08gNDIxMOKAkTIuICIsIm1hdGNoTGV2ZWwiOiJub25lIiwibWF0Y2hlZFdvcmRzIjpbXX19fSx7ImNhdGVnb3J5Ijoic3RhbmRhcmQiLCJwYXRoIjoiL3NpdGVzL2lzb29yZy9jb250ZW50cy9kYXRhL3N0YW5kYXJkLzAyLzc1LzI3NTg3IiwidXVpZCI6IjYyYTYzNWRlLTY2N2YtNDZmZS04MGRmLWUzZGVjNzBjNWJkZiIsInRpdGxlIjoiSVNPIDQyNjYtNDoyMDAyIFBldHJvbGV1bSBhbmQgbGlxdWlkIHBldHJvbGV1bSBwcm9kdWN0cyDigJQgTWVhc3VyZW1lbnQgb2YgbGV2ZWwgYW5kIHRlbXBlcmF0dXJlIGluIHN0b3JhZ2UgdGFua3MgYnkgYXV0b21hdGljIG1ldGhvZHMg4oCUIFBhcnQgNDogTWVhc3VyZW1lbnQgb2YgdGVtcGVyYXR1cmUgaW4gYXRtb3NwaGVyaWMgdGFua3MiLCJzdGF0dXMiOiJXaXRoZHJhd24iLCJ5ZWFyIjoyMDIzLCJvcmRlciI6MTAwLCJ0ZXh0IjoiSVNPIDQyNjYtNCBnaXZlcyBndWlkYW5jZSBvbiB0aGUgc2VsZWN0aW9uLCBhY2N1cmFjeSwgaW5zdGFsbGF0aW9uLCBjb21taXNzaW9uaW5nLCBjYWxpYnJhdGlvbiBhbmQgdmVyaWZpY2F0aW9uIG9mIGF1dG9tYXRpYyB0YW5rIHRoZXJtb21ldGVycyAoQVRUcykgaW4gZmlzY2FsL2N1c3RvZHkgdHJhbnNmZXIgYXBwbGljYXRpb25zIGluIHdoaWNoIHRoZSBBVFQgaXMgdXNlZCBmb3IgbWVhc3VyaW5nIHRoZSB0ZW1wZXJhdHVyZSBvZiBwZXRyb2xldW0gYW5kIGxpcXVpZCBwZXRyb2xldW0gcHJvZHVjdHMgaGF2aW5nIGEgUmVpZCB2YXBvdXIgcHJlc3N1cmUgbGVzcyB0aGFuIDEwMCBrUGEsIHN0b3JlZCBpbiBhdG1vc3BoZXJpYyBzdG9yYWdlIHRhbmtzLiBJU08gNDI2Ni00IGlzIG5vdCBhcHBsaWNhYmxlIHRvIHRoZSBtZWFzdXJlbWVudCBvZiB0ZW1wZXJhdHVyZSBpbiBjYXZlcm5zIG9yIGluIHJlZnJpZ2VyYXRlZCBzdG9yYWdlIHRhbmtzLiAiLCJvYmplY3RJRCI6IjI3NTg3XzAiLCJfaGlnaGxpZ2h0UmVzdWx0Ijp7InRpdGxlIjp7InZhbHVlIjoiSVNPIDQyNjYtNDoyMDAyIFBldHJvbGV1bSBhbmQgbGlxdWlkIHBldHJvbGV1bSBwcm9kdWN0cyDigJQgTWVhc3VyZW1lbnQgb2YgbGV2ZWwgYW5kIHRlbXBlcmF0dXJlIGluIHN0b3JhZ2UgdGFua3MgYnkgYXV0b21hdGljIG1ldGhvZHMg4oCUIFBhcnQgNDogTWVhc3VyZW1lbnQgb2YgdGVtcGVyYXR1cmUgaW4gYXRtb3NwaGVyaWMgdGFua3MiLCJtYXRjaExldmVsIjoibm9uZSIsIm1hdGNoZWRXb3JkcyI6W119LCJ0ZXh0Ijp7InZhbHVlIjoiSVNPIDQyNjYtNCBnaXZlcyBndWlkYW5jZSBvbiB0aGUgc2VsZWN0aW9uLCBhY2N1cmFjeSwgaW5zdGFsbGF0aW9uLCBjb21taXNzaW9uaW5nLCBjYWxpYnJhdGlvbiBhbmQgdmVyaWZpY2F0aW9uIG9mIGF1dG9tYXRpYyB0YW5rIHRoZXJtb21ldGVycyAoQVRUcykgaW4gZmlzY2FsL2N1c3RvZHkgdHJhbnNmZXIgYXBwbGljYXRpb25zIGluIHdoaWNoIHRoZSBBVFQgaXMgdXNlZCBmb3IgbWVhc3VyaW5nIHRoZSB0ZW1wZXJhdHVyZSBvZiBwZXRyb2xldW0gYW5kIGxpcXVpZCBwZXRyb2xldW0gcHJvZHVjdHMgaGF2aW5nIGEgUmVpZCB2YXBvdXIgcHJlc3N1cmUgbGVzcyB0aGFuIDEwMCBrUGEsIHN0b3JlZCBpbiBhdG1vc3BoZXJpYyBzdG9yYWdlIHRhbmtzLiBJU08gNDI2Ni00IGlzIG5vdCBhcHBsaWNhYmxlIHRvIHRoZSBtZWFzdXJlbWVudCBvZiB0ZW1wZXJhdHVyZSBpbiBjYXZlcm5zIG9yIGluIHJlZnJpZ2VyYXRlZCBzdG9yYWdlIHRhbmtzLiAiLCJtYXRjaExldmVsIjoibm9uZSIsIm1hdGNoZWRXb3JkcyI6W119fX0seyJjYXRlZ29yeSI6InN0YW5kYXJkIiwicGF0aCI6Ii9zaXRlcy9pc29vcmcvY29udGVudHMvZGF0YS9zdGFuZGFyZC8wMS8wMy8xMDM4NCIsInV1aWQiOiIzMmZlMmRiMy0xNWMyLTRhNWUtOTk5Ny02MzhkZjA0Y2M4YjAiLCJ0aXRsZSI6IklTTyA0NDkxLTE6MTk4OSBNZXRhbGxpYyBwb3dkZXJzIOKAlCBEZXRlcm1pbmF0aW9uIG9mIG94eWdlbiBjb250ZW50IGJ5IHJlZHVjdGlvbiBtZXRob2RzIOKAlCBQYXJ0IDE6IEdlbmVyYWwgZ3VpZGVsaW5lcyIsInN0YXR1cyI6IldpdGhkcmF3biIsInllYXIiOjIwMjMsIm9yZGVyIjoxMDAsInRleHQiOiJHaXZlcyBzb21lIHJlY29tbWVuZGF0aW9ucyBmb3IgdGhlIGNvcnJlY3QgaW50ZXJwcmV0YXRpb24gb2YgdGhlIHJlc3VsdHMgb2J0YWluZWQuIFRoZSB0ZXN0IG1ldGhvZHMgYXJlIGFwcGxpY2FibGUgZ2VuZXJhbGx5IHRvIGFsbCBwb3dkZXJzIG9mIG1ldGFscywgYWxsb3lzLCBjYXJiaWRlcyBhbmQgbWl4dHVyZXMgdGhlcmVvZi4gVGhlIGNvbnN0aXR1ZW50cyBvZiB0aGUgcG93ZGVyIHNoYWxsIGJlIG5vbi12b2xhdGlsZSBhbmQgZnJlZSBvZiBsdWJyaWNhbnQgb3Igb3JnYW5pYyBiaW5kZXIuIFRoZSBsaW1pdGF0aW9ucyBvZiB0aGUgbWV0aG9kcyB3aGljaCBkZXBlbmQgdXBvbiB0aGUgbmF0dXJlIG9mIHRoZSBhbmFseXNlZCBtZXRhbCBhcmUgZGlzY3Vzc2VkIGluIGNsYXVzZSA0LiAiLCJvYmplY3RJRCI6IjEwMzg0XzAiLCJfaGlnaGxpZ2h0UmVzdWx0Ijp7InRpdGxlIjp7InZhbHVlIjoiSVNPIDQ0OTEtMToxOTg5IE1ldGFsbGljIHBvd2RlcnMg4oCUIERldGVybWluYXRpb24gb2Ygb3h5Z2VuIGNvbnRlbnQgYnkgcmVkdWN0aW9uIG1ldGhvZHMg4oCUIFBhcnQgMTogR2VuZXJhbCBndWlkZWxpbmVzIiwibWF0Y2hMZXZlbCI6Im5vbmUiLCJtYXRjaGVkV29yZHMiOltdfSwidGV4dCI6eyJ2YWx1ZSI6IkdpdmVzIHNvbWUgcmVjb21tZW5kYXRpb25zIGZvciB0aGUgY29ycmVjdCBpbnRlcnByZXRhdGlvbiBvZiB0aGUgcmVzdWx0cyBvYnRhaW5lZC4gVGhlIHRlc3QgbWV0aG9kcyBhcmUgYXBwbGljYWJsZSBnZW5lcmFsbHkgdG8gYWxsIHBvd2RlcnMgb2YgbWV0YWxzLCBhbGxveXMsIGNhcmJpZGVzIGFuZCBtaXh0dXJlcyB0aGVyZW9mLiBUaGUgY29uc3RpdHVlbnRzIG9mIHRoZSBwb3dkZXIgc2hhbGwgYmUgbm9uLXZvbGF0aWxlIGFuZCBmcmVlIG9mIGx1YnJpY2FudCBvciBvcmdhbmljIGJpbmRlci4gVGhlIGxpbWl0YXRpb25zIG9mIHRoZSBtZXRob2RzIHdoaWNoIGRlcGVuZCB1cG9uIHRoZSBuYXR1cmUgb2YgdGhlIGFuYWx5c2VkIG1ldGFsIGFyZSBkaXNjdXNzZWQgaW4gY2xhdXNlIDQuICIsIm1hdGNoTGV2ZWwiOiJub25lIiwibWF0Y2hlZFdvcmRzIjpbXX19fSx7ImNhdGVnb3J5Ijoic3RhbmRhcmQiLCJwYXRoIjoiL3NpdGVzL2lzb29yZy9jb250ZW50cy9kYXRhL3N0YW5kYXJkLzA2LzkzLzY5MzQ4IiwidXVpZCI6IjExZDkyMjc0LTRkMjYtNGQ5Zi04OWM2LWU1MjA2MjYxZTUzOCIsInRpdGxlIjoiSVNPIDQwNDI6MjAxOCBGYXN0ZW5lcnMg4oCUIEVsZWN0cm9wbGF0ZWQgY29hdGluZyBzeXN0ZW1zIiwic3RhdHVzIjoiV2l0aGRyYXduIiwieWVhciI6MjAyMiwib3JkZXIiOjEwMCwidGV4dCI6IlRoaXMgZG9jdW1lbnQgc3BlY2lmaWVzIHJlcXVpcmVtZW50cyBmb3IgZWxlY3Ryb3BsYXRlZCBjb2F0aW5ncyBhbmQgY29hdGluZyBzeXN0ZW1zIG9uIHN0ZWVsIGZhc3RlbmVycy4gVGhlIHJlcXVpcmVtZW50cyByZWxhdGVkIHRvIGRpbWVuc2lvbmFsIHByb3BlcnRpZXMgYWxzbyBhcHBseSB0byBmYXN0ZW5lcnMgbWFkZSBvZiBjb3BwZXIgb3IgY29wcGVyIGFsbG95cy4gSXQgYWxzbyBzcGVjaWZpZXMgcmVxdWlyZW1lbnRzIGFuZCBnaXZlcyByZWNvbW1lbmRhdGlvbnMgdG8gbWluaW1pemUgdGhlIHJpc2sgb2YgaHlkcm9nZW4gZW1icml0dGxlbWVudDsgc2VlIDQuNCBhbmQgQW5uZXggQi4gSXQgbWFpbmx5IGFwcGxpZXMgdG8gemluYyBhbmQgemluYyBhbGxveSBjb2F0aW5nIHN5c3RlbXMgKHppbmMsIHppbmMtbmlja2VsLCB6aW5jLWlyb24pIGFuZCBjYWRtaXVtLCBwcmltYXJpbHkgaW50ZW5kZWQgZm9yIGNvcnJvc2lvbiBwcm90ZWN0aW9uIGFuZCBvdGhlciBmdW5jdGlvbmFsIHByb3BlcnRpZXM6IOKAlCAgICAgICAgICB3aXRoIG9yIHdpdGhvdXQgY29udmVyc2lvbiBjb2F0aW5nOyDigJQgICAgICAgICAgd2l0aCBvciB3aXRob3V0IHNlYWxhbnQ7IOKAlCAgICAgICAgICB3aXRoIG9yIHdpdGhvdXQgdG9wIGNvYXQ7IOKAlCAgICAgICAgICB3aXRoIG9yIHdpdGhvdXQgbHVicmljYW50IChpbnRlZ3JhbCBsdWJyaWNhbnQgYW5kL29yIHN1YnNlcXVlbnRseSBhZGRlZCBsdWJyaWNhbnQpLiBTcGVjaWZpY2F0aW9ucyBmb3Igb3RoZXIgZWxlY3Ryb3BsYXRlZCBjb2F0aW5ncyBhbmQgY29hdGluZyBzeXN0ZW1zICh0aW4sIHRpbi16aW5jLCBjb3BwZXItdGluLCBjb3BwZXItc2lsdmVyLCBjb3BwZXIsIHNpbHZlciwgY29wcGVyLXppbmMsIG5pY2tlbCwgbmlja2VsLWNocm9taXVtLCBjb3BwZXItbmlja2VsLCBjb3BwZXItbmlja2VsLWNocm9taXVtKSBhcmUgaW5jbHVkZWQgaW4gdGhpcyBkb2N1bWVudCBvbmx5IGZvciBkaW1lbnNpb25hbCByZXF1aXJlbWVudHMgcmVsYXRlZCB0byBmYXN0ZW5lcnMgd2l0aCBJU08gbWV0cmljIHRocmVhZHMuIFRoaXMgZG9jdW1lbnQgYXBwbGllcyB0byBib2x0cywgc2NyZXdzLCBzdHVkcyBhbmQgbnV0cyB3aXRoIElTTyBtZXRyaWMgdGhyZWFkLCB0byBmYXN0ZW5lcnMgd2l0aCBub24tSVNPIG1ldHJpYyB0aHJlYWQsIGFuZCB0byBub24tdGhyZWFkZWQgZmFzdGVuZXJzIHN1Y2ggYXMgd2FzaGVycywgcGlucywgY2xpcHMgYW5kIHJpdmV0cy4gSW5mb3JtYXRpb24gZm9yIGRlc2lnbiBhbmQgYXNzZW1ibHkgb2YgY29hdGVkIGZhc3RlbmVycyBpcyBnaXZlbiBpbiBBbm5leCBBLiBUaGlzIGRvY3VtZW50IGRvZXMgbm90IHNwZWNpZnkgcmVxdWlyZW1lbnRzIGZvciBwcm9wZXJ0aWVzIHN1Y2ggYXMgd2VsZGFiaWxpdHkgb3IgcGFpbnRhYmlsaXR5LiBOT1RFICAgICAgIE90aGVyIEludGVybmF0aW9uYWwgU3RhbmRhcmRzIHNwZWNpZnkgZGlmZmVyaW5nIGVsZWN0cm9wbGF0aW5nIHByb2Nlc3Nlcy4gRm9yIGVsZWN0cm9wbGF0aW5nIG9mIGZhc3RlbmVycywgdGhlIHJlcXVpcmVtZW50cyBvZiB0aGlzIGRvY3VtZW50IGFwcGx5LCB1bmxlc3Mgb3RoZXJ3aXNlIGFncmVlZC4gIiwib2JqZWN0SUQiOiI2OTM0OF8wIiwiX2hpZ2hsaWdodFJlc3VsdCI6eyJ0aXRsZSI6eyJ2YWx1ZSI6IklTTyA0MDQyOjIwMTggRmFzdGVuZXJzIOKAlCBFbGVjdHJvcGxhdGVkIGNvYXRpbmcgc3lzdGVtcyIsIm1hdGNoTGV2ZWwiOiJub25lIiwibWF0Y2hlZFdvcmRzIjpbXX0sInRleHQiOnsidmFsdWUiOiJUaGlzIGRvY3VtZW50IHNwZWNpZmllcyByZXF1aXJlbWVudHMgZm9yIGVsZWN0cm9wbGF0ZWQgY29hdGluZ3MgYW5kIGNvYXRpbmcgc3lzdGVtcyBvbiBzdGVlbCBmYXN0ZW5lcnMuIFRoZSByZXF1aXJlbWVudHMgcmVsYXRlZCB0byBkaW1lbnNpb25hbCBwcm9wZXJ0aWVzIGFsc28gYXBwbHkgdG8gZmFzdGVuZXJzIG1hZGUgb2YgY29wcGVyIG9yIGNvcHBlciBhbGxveXMuIEl0IGFsc28gc3BlY2lmaWVzIHJlcXVpcmVtZW50cyBhbmQgZ2l2ZXMgcmVjb21tZW5kYXRpb25zIHRvIG1pbmltaXplIHRoZSByaXNrIG9mIGh5ZHJvZ2VuIGVtYnJpdHRsZW1lbnQ7IHNlZSA0LjQgYW5kIEFubmV4IEIuIEl0IG1haW5seSBhcHBsaWVzIHRvIHppbmMgYW5kIHppbmMgYWxsb3kgY29hdGluZyBzeXN0ZW1zICh6aW5jLCB6aW5jLW5pY2tlbCwgemluYy1pcm9uKSBhbmQgY2FkbWl1bSwgcHJpbWFyaWx5IGludGVuZGVkIGZvciBjb3Jyb3Npb24gcHJvdGVjdGlvbiBhbmQgb3RoZXIgZnVuY3Rpb25hbCBwcm9wZXJ0aWVzOiDigJQgICAgICAgICAgd2l0aCBvciB3aXRob3V0IGNvbnZlcnNpb24gY29hdGluZzsg4oCUICAgICAgICAgIHdpdGggb3Igd2l0aG91dCBzZWFsYW50OyDigJQgICAgICAgICAgd2l0aCBvciB3aXRob3V0IHRvcCBjb2F0OyDigJQgICAgICAgICAgd2l0aCBvciB3aXRob3V0IGx1YnJpY2FudCAoaW50ZWdyYWwgbHVicmljYW50IGFuZC9vciBzdWJzZXF1ZW50bHkgYWRkZWQgbHVicmljYW50KS4gU3BlY2lmaWNhdGlvbnMgZm9yIG90aGVyIGVsZWN0cm9wbGF0ZWQgY29hdGluZ3MgYW5kIGNvYXRpbmcgc3lzdGVtcyAodGluLCB0aW4temluYywgY29wcGVyLXRpbiwgY29wcGVyLXNpbHZlciwgY29wcGVyLCBzaWx2ZXIsIGNvcHBlci16aW5jLCBuaWNrZWwsIG5pY2tlbC1jaHJvbWl1bSwgY29wcGVyLW5pY2tlbCwgY29wcGVyLW5pY2tlbC1jaHJvbWl1bSkgYXJlIGluY2x1ZGVkIGluIHRoaXMgZG9jdW1lbnQgb25seSBmb3IgZGltZW5zaW9uYWwgcmVxdWlyZW1lbnRzIHJlbGF0ZWQgdG8gZmFzdGVuZXJzIHdpdGggSVNPIG1ldHJpYyB0aHJlYWRzLiBUaGlzIGRvY3VtZW50IGFwcGxpZXMgdG8gYm9sdHMsIHNjcmV3cywgc3R1ZHMgYW5kIG51dHMgd2l0aCBJU08gbWV0cmljIHRocmVhZCwgdG8gZmFzdGVuZXJzIHdpdGggbm9uLUlTTyBtZXRyaWMgdGhyZWFkLCBhbmQgdG8gbm9uLXRocmVhZGVkIGZhc3RlbmVycyBzdWNoIGFzIHdhc2hlcnMsIHBpbnMsIGNsaXBzIGFuZCByaXZldHMuIEluZm9ybWF0aW9uIGZvciBkZXNpZ24gYW5kIGFzc2VtYmx5IG9mIGNvYXRlZCBmYXN0ZW5lcnMgaXMgZ2l2ZW4gaW4gQW5uZXggQS4gVGhpcyBkb2N1bWVudCBkb2VzIG5vdCBzcGVjaWZ5IHJlcXVpcmVtZW50cyBmb3IgcHJvcGVydGllcyBzdWNoIGFzIHdlbGRhYmlsaXR5IG9yIHBhaW50YWJpbGl0eS4gTk9URSAgICAgICBPdGhlciBJbnRlcm5hdGlvbmFsIFN0YW5kYXJkcyBzcGVjaWZ5IGRpZmZlcmluZyBlbGVjdHJvcGxhdGluZyBwcm9jZXNzZXMuIEZvciBlbGVjdHJvcGxhdGluZyBvZiBmYXN0ZW5lcnMsIHRoZSByZXF1aXJlbWVudHMgb2YgdGhpcyBkb2N1bWVudCBhcHBseSwgdW5sZXNzIG90aGVyd2lzZSBhZ3JlZWQuICIsIm1hdGNoTGV2ZWwiOiJub25lIiwibWF0Y2hlZFdvcmRzIjpbXX19fSx7ImNhdGVnb3J5Ijoic3RhbmRhcmQiLCJwYXRoIjoiL3NpdGVzL2lzb29yZy9jb250ZW50cy9kYXRhL3N0YW5kYXJkLzA2LzI2LzYyNjEzIiwidXVpZCI6IjZjN2U0MDgzLTdhYmMtNGJmMC04MTVlLTlhN2QxMWI5NGY5ZCIsInRpdGxlIjoiSVNPIDQ0MzctNDoyMDE1IFBsYXN0aWNzIHBpcGluZyBzeXN0ZW1zIGZvciB0aGUgc3VwcGx5IG9mIGdhc2VvdXMgZnVlbHMg4oCUIFBvbHlldGh5bGVuZSAoUEUpIOKAlCBQYXJ0IDQ6IFZhbHZlcyIsInN0YXR1cyI6IldpdGhkcmF3biIsInllYXIiOjIwMjIsIm9yZGVyIjoxMDAsInRleHQiOiJJU08gNDQzNy00OjIwMTUgc3BlY2lmaWVzIHRoZSBjaGFyYWN0ZXJpc3RpY3Mgb2YgdmFsdmVzIG1hZGUgZnJvbSBwb2x5ZXRoeWxlbmUgKFBFKSBmb3IgcGlwaW5nIHN5c3RlbXMgaW4gdGhlIGZpZWxkIG9mIHRoZSBzdXBwbHkgb2YgZ2FzZW91cyBmdWVscy4gSXQgYWxzbyBzcGVjaWZpZXMgdGhlIHRlc3QgcGFyYW1ldGVycyBmb3IgdGhlIHRlc3QgbWV0aG9kcyByZWZlcnJlZCB0byBpbiB0aGlzIHBhcnQgb2YgSVNPIDQ0MzcuICIsIm9iamVjdElEIjoiNjI2MTNfMCIsIl9oaWdobGlnaHRSZXN1bHQiOnsidGl0bGUiOnsidmFsdWUiOiJJU08gNDQzNy00OjIwMTUgUGxhc3RpY3MgcGlwaW5nIHN5c3RlbXMgZm9yIHRoZSBzdXBwbHkgb2YgZ2FzZW91cyBmdWVscyDigJQgUG9seWV0aHlsZW5lIChQRSkg4oCUIFBhcnQgNDogVmFsdmVzIiwibWF0Y2hMZXZlbCI6Im5vbmUiLCJtYXRjaGVkV29yZHMiOltdfSwidGV4dCI6eyJ2YWx1ZSI6IklTTyA0NDM3LTQ6MjAxNSBzcGVjaWZpZXMgdGhlIGNoYXJhY3RlcmlzdGljcyBvZiB2YWx2ZXMgbWFkZSBmcm9tIHBvbHlldGh5bGVuZSAoUEUpIGZvciBwaXBpbmcgc3lzdGVtcyBpbiB0aGUgZmllbGQgb2YgdGhlIHN1cHBseSBvZiBnYXNlb3VzIGZ1ZWxzLiBJdCBhbHNvIHNwZWNpZmllcyB0aGUgdGVzdCBwYXJhbWV0ZXJzIGZvciB0aGUgdGVzdCBtZXRob2RzIHJlZmVycmVkIHRvIGluIHRoaXMgcGFydCBvZiBJU08gNDQzNy4gIiwibWF0Y2hMZXZlbCI6Im5vbmUiLCJtYXRjaGVkV29yZHMiOltdfX19LHsiY2F0ZWdvcnkiOiJzdGFuZGFyZCIsInBhdGgiOiIvc2l0ZXMvaXNvb3JnL2NvbnRlbnRzL2RhdGEvc3RhbmRhcmQvMDEvMDcvMTA3NTciLCJ1dWlkIjoiNDA3MzY2ZjMtNjNlZC00OWNkLWFlNWQtZDcyOWNhYTQ2YTIxIiwidGl0bGUiOiJJU08gNDc3OToxOTg2IEZvcmdlZCBzdGVlbCBsaWZ0aW5nIGhvb2tzIHdpdGggcG9pbnQgYW5kIGV5ZSBmb3IgdXNlIHdpdGggc3RlZWwgY2hhaW5zIG9mIGdyYWRlIE0oNCkiLCJzdGF0dXMiOiJXaXRoZHJhd24iLCJ5ZWFyIjoyMDIxLCJvcmRlciI6MTAwLCJ0ZXh0IjoiU3BlY2lmaWVzIHJlcXVpcmVtZW50cyBmb3IgbGlmdGluZyBob29rcyBhcyBzaG93biBpbiB0aGUgZmlndXJlLCBpbiBhIHJhbmdlIG9mIHNpemVzIGhhdmluZyBwZXJmb3JtYW5jZSBjb21wYXRpYmlsaXR5IHdpdGggdGhlIGNvcnJlc3BvbmRpbmcgbm9taW5hbCBzaXplcyBvZiBncmFkZSBNKDQpIGNoYWluLiBQZXJmb3JtYW5jZSBjb21wYXRpYmlsaXR5IGVuY29tcGFzc2VzIGNvbXBvbmVudCBzdHJlbmd0aCBhbmQgdGhlIG5lY2Vzc2FyeSBwaHlzaWNhbCBkaW1lbnNpb25zLiAiLCJvYmplY3RJRCI6IjEwNzU3XzAiLCJfaGlnaGxpZ2h0UmVzdWx0Ijp7InRpdGxlIjp7InZhbHVlIjoiSVNPIDQ3Nzk6MTk4NiBGb3JnZWQgc3RlZWwgbGlmdGluZyBob29rcyB3aXRoIHBvaW50IGFuZCBleWUgZm9yIHVzZSB3aXRoIHN0ZWVsIGNoYWlucyBvZiBncmFkZSBNKDQpIiwibWF0Y2hMZXZlbCI6Im5vbmUiLCJtYXRjaGVkV29yZHMiOltdfSwidGV4dCI6eyJ2YWx1ZSI6IlNwZWNpZmllcyByZXF1aXJlbWVudHMgZm9yIGxpZnRpbmcgaG9va3MgYXMgc2hvd24gaW4gdGhlIGZpZ3VyZSwgaW4gYSByYW5nZSBvZiBzaXplcyBoYXZpbmcgcGVyZm9ybWFuY2UgY29tcGF0aWJpbGl0eSB3aXRoIHRoZSBjb3JyZXNwb25kaW5nIG5vbWluYWwgc2l6ZXMgb2YgZ3JhZGUgTSg0KSBjaGFpbi4gUGVyZm9ybWFuY2UgY29tcGF0aWJpbGl0eSBlbmNvbXBhc3NlcyBjb21wb25lbnQgc3RyZW5ndGggYW5kIHRoZSBuZWNlc3NhcnkgcGh5c2ljYWwgZGltZW5zaW9ucy4gIiwibWF0Y2hMZXZlbCI6Im5vbmUiLCJtYXRjaGVkV29yZHMiOltdfX19LHsiY2F0ZWdvcnkiOiJzdGFuZGFyZCIsInBhdGgiOiIvc2l0ZXMvaXNvb3JnL2NvbnRlbnRzL2RhdGEvc3RhbmRhcmQvMDEvMDcvMTA3MTAiLCJ1dWlkIjoiNzkxOWYxZDktMmYzZS00OTA3LTk1NzMtZDViMjM3YTdiNjMzIiwidGl0bGUiOiJJU08gNDcyNzoxOTg4IE9pbCBvZiBwYWxtYXJvc2EgKEN5bWJvcG9nb24gbWFydGluaWkgKFJveGJ1cmdoKSBXLiBXYXRzb24gdmFyLiBtb3RpYSkiLCJzdGF0dXMiOiJXaXRoZHJhd24iLCJ5ZWFyIjoyMDIxLCJvcmRlciI6MTAwLCJ0ZXh0IjoiVGhlIFN0YW5kYXJkIHNwZWNpZmllcyB0aGUgZm9sbG93aW5nIGNoYXJhY3RlcmlzdGljcyBvZiB0aGUgb2lsLiBBcHBlYXJhbmNlOiBDbGVhciwgbW9iaWxlIGxpcXVpZC4gQ29sb3VyOiBQYWxlIHllbGxvdy4gT2RvdXI6IENoYXJhY3RlcmlzdGljIHJvc2UgbGlrZSwgd2l0aCBncmFzc3kgbm90ZS4gUmVsYXRpdmUgZGVuc2l0eSBhdCAyMC8yMCDCsEM6IDAsODgwIC0gMCw4OTQuIFJlZnJhY3RpdmUgaW5kZXggYXQgMjAgwrBDOiAxLDQ3MTAgLSAxLDQ3ODAuIE9wdGljYWwgcm90YXRpb24gYXQgMjAgwrBDOiBSYW5nZSBmcm9tIC0gMSw0IHRvICsgMyAuIE1pc2NpYmlsaXR5IHdpdGggNzAgJSAoVi9WKSBldGhhbm9sIGF0IDIwIMKwQzogMSA6IDIuIEFjaWQgdmFsdWU6IE1heGltdW0gMSwwLiBGdXJ0aGVyIG9uIHBlcm1pc3NpYmxlIHZhbHVlcyBmb3IgZXN0ZXIgdmFsdWUsIGZyZWUgYWxjb2hvbHMgY29udGVudCBhbmQgZXN0ZXIgdmFsdWUgYWZ0ZXIgYWNldHlsYXRpb24gYXJlIGdpdmVuLiBUd28gdHlwaWNhbCBjaHJvbWF0b2dyYW1zIGFyZSBzaG93bi4gIiwib2JqZWN0SUQiOiIxMDcxMF8wIiwiX2hpZ2hsaWdodFJlc3VsdCI6eyJ0aXRsZSI6eyJ2YWx1ZSI6IklTTyA0NzI3OjE5ODggT2lsIG9mIHBhbG1hcm9zYSAoQ3ltYm9wb2dvbiBtYXJ0aW5paSAoUm94YnVyZ2gpIFcuIFdhdHNvbiB2YXIuIG1vdGlhKSIsIm1hdGNoTGV2ZWwiOiJub25lIiwibWF0Y2hlZFdvcmRzIjpbXX0sInRleHQiOnsidmFsdWUiOiJUaGUgU3RhbmRhcmQgc3BlY2lmaWVzIHRoZSBmb2xsb3dpbmcgY2hhcmFjdGVyaXN0aWNzIG9mIHRoZSBvaWwuIEFwcGVhcmFuY2U6IENsZWFyLCBtb2JpbGUgbGlxdWlkLiBDb2xvdXI6IFBhbGUgeWVsbG93LiBPZG91cjogQ2hhcmFjdGVyaXN0aWMgcm9zZSBsaWtlLCB3aXRoIGdyYXNzeSBub3RlLiBSZWxhdGl2ZSBkZW5zaXR5IGF0IDIwLzIwIMKwQzogMCw4ODAgLSAwLDg5NC4gUmVmcmFjdGl2ZSBpbmRleCBhdCAyMCDCsEM6IDEsNDcxMCAtIDEsNDc4MC4gT3B0aWNhbCByb3RhdGlvbiBhdCAyMCDCsEM6IFJhbmdlIGZyb20gLSAxLDQgdG8gKyAzIC4gTWlzY2liaWxpdHkgd2l0aCA3MCAlIChWL1YpIGV0aGFub2wgYXQgMjAgwrBDOiAxIDogMi4gQWNpZCB2YWx1ZTogTWF4aW11bSAxLDAuIEZ1cnRoZXIgb24gcGVybWlzc2libGUgdmFsdWVzIGZvciBlc3RlciB2YWx1ZSwgZnJlZSBhbGNvaG9scyBjb250ZW50IGFuZCBlc3RlciB2YWx1ZSBhZnRlciBhY2V0eWxhdGlvbiBhcmUgZ2l2ZW4uIFR3byB0eXBpY2FsIGNocm9tYXRvZ3JhbXMgYXJlIHNob3duLiAiLCJtYXRjaExldmVsIjoibm9uZSIsIm1hdGNoZWRXb3JkcyI6W119fX0seyJjYXRlZ29yeSI6InN0YW5kYXJkIiwicGF0aCI6Ii9zaXRlcy9pc29vcmcvY29udGVudHMvZGF0YS9zdGFuZGFyZC8wNy8wMy83MDM3NSIsInV1aWQiOiI4M2QzYzJjOS0wY2ZjLTRiNmMtYWVkZi00NDczOWVkMmM5NDciLCJ0aXRsZSI6IklTTyA0MDc5OjIwMTcgUnViYmVyIGhvc2VzIGFuZCBob3NlIGFzc2VtYmxpZXMg4oCUIFRleHRpbGUtcmVpbmZvcmNlZCBoeWRyYXVsaWMgdHlwZXMgZm9yIG9pbC1iYXNlZCBvciB3YXRlci1iYXNlZCBmbHVpZHMg4oCUIFNwZWNpZmljYXRpb24iLCJzdGF0dXMiOiJXaXRoZHJhd24iLCJ5ZWFyIjoyMDIwLCJvcmRlciI6MTAwLCJ0ZXh0IjoiSVNPIDQwNzk6MjAxNyBzcGVjaWZpZXMgcmVxdWlyZW1lbnRzIGZvciBmaXZlIHR5cGVzIG9mIHRleHRpbGUtcmVpbmZvcmNlZCBoeWRyYXVsaWMgaG9zZSBhbmQgaG9zZSBhc3NlbWJseSBvZiBub21pbmFsIHNpemUgZnJvbSA1IHRvIDEwMC4gVGhleSBhcmUgc3VpdGFibGUgZm9yIHVzZSB3aXRoOiAtICAgICAgb2lsLWJhc2VkIGh5ZHJhdWxpYyBmbHVpZHMgSEgsIEhMLCBITSwgSFIgYW5kIEhWIGFzIGRlZmluZWQgaW4gSVNPIDY3NDPigJE0IGF0IHRlbXBlcmF0dXJlcyByYW5naW5nIGZyb20g4oiSNDAgwrBDIHRvICsxMDAgwrBDOyAtICAgICAgd2F0ZXItYmFzZWQgZmx1aWRzIEhGQywgSEZBRSwgSEZBUyBhbmQgSEZCIGFzIGRlZmluZWQgaW4gSVNPIDY3NDPigJE0IGF0IHRlbXBlcmF0dXJlcyByYW5naW5nIGZyb20gMCDCsEMgdG8gKzYwIMKwQzsgLSAgICAgIHdhdGVyIGF0IHRlbXBlcmF0dXJlcyByYW5naW5nIGZyb20gMCDCsEMgdG8gKzYwIMKwQy4gSVNPIDQwNzk6MjAxNyBkb2VzIG5vdCBpbmNsdWRlIHJlcXVpcmVtZW50cyBmb3IgZW5kIGZpdHRpbmdzLiBJdCBpcyBsaW1pdGVkIHRvIHJlcXVpcmVtZW50cyBmb3IgaG9zZXMgYW5kIGhvc2UgYXNzZW1ibGllcy4gTk9URSAgICAgICAgICBJdCBpcyB0aGUgcmVzcG9uc2liaWxpdHkgb2YgdGhlIHVzZXIsIGluIGNvbnN1bHRhdGlvbiB3aXRoIHRoZSBob3NlIG1hbnVmYWN0dXJlciwgdG8gZXN0YWJsaXNoIHRoZSBjb21wYXRpYmlsaXR5IG9mIHRoZSBob3NlIHdpdGggdGhlIGZsdWlkIHRvIGJlIHVzZWQuICIsIm9iamVjdElEIjoiNzAzNzVfMCIsIl9oaWdobGlnaHRSZXN1bHQiOnsidGl0bGUiOnsidmFsdWUiOiJJU08gNDA3OToyMDE3IFJ1YmJlciBob3NlcyBhbmQgaG9zZSBhc3NlbWJsaWVzIOKAlCBUZXh0aWxlLXJlaW5mb3JjZWQgaHlkcmF1bGljIHR5cGVzIGZvciBvaWwtYmFzZWQgb3Igd2F0ZXItYmFzZWQgZmx1aWRzIOKAlCBTcGVjaWZpY2F0aW9uIiwibWF0Y2hMZXZlbCI6Im5vbmUiLCJtYXRjaGVkV29yZHMiOltdfSwidGV4dCI6eyJ2YWx1ZSI6IklTTyA0MDc5OjIwMTcgc3BlY2lmaWVzIHJlcXVpcmVtZW50cyBmb3IgZml2ZSB0eXBlcyBvZiB0ZXh0aWxlLXJlaW5mb3JjZWQgaHlkcmF1bGljIGhvc2UgYW5kIGhvc2UgYXNzZW1ibHkgb2Ygbm9taW5hbCBzaXplIGZyb20gNSB0byAxMDAuIFRoZXkgYXJlIHN1aXRhYmxlIGZvciB1c2Ugd2l0aDogLSAgICAgIG9pbC1iYXNlZCBoeWRyYXVsaWMgZmx1aWRzIEhILCBITCwgSE0sIEhSIGFuZCBIViBhcyBkZWZpbmVkIGluIElTTyA2NzQz4oCRNCBhdCB0ZW1wZXJhdHVyZXMgcmFuZ2luZyBmcm9tIOKIkjQwIMKwQyB0byArMTAwIMKwQzsgLSAgICAgIHdhdGVyLWJhc2VkIGZsdWlkcyBIRkMsIEhGQUUsIEhGQVMgYW5kIEhGQiBhcyBkZWZpbmVkIGluIElTTyA2NzQz4oCRNCBhdCB0ZW1wZXJhdHVyZXMgcmFuZ2luZyBmcm9tIDAgwrBDIHRvICs2MCDCsEM7IC0gICAgICB3YXRlciBhdCB0ZW1wZXJhdHVyZXMgcmFuZ2luZyBmcm9tIDAgwrBDIHRvICs2MCDCsEMuIElTTyA0MDc5OjIwMTcgZG9lcyBub3QgaW5jbHVkZSByZXF1aXJlbWVudHMgZm9yIGVuZCBmaXR0aW5ncy4gSXQgaXMgbGltaXRlZCB0byByZXF1aXJlbWVudHMgZm9yIGhvc2VzIGFuZCBob3NlIGFzc2VtYmxpZXMuIE5PVEUgICAgICAgICAgSXQgaXMgdGhlIHJlc3BvbnNpYmlsaXR5IG9mIHRoZSB1c2VyLCBpbiBjb25zdWx0YXRpb24gd2l0aCB0aGUgaG9zZSBtYW51ZmFjdHVyZXIsIHRvIGVzdGFibGlzaCB0aGUgY29tcGF0aWJpbGl0eSBvZiB0aGUgaG9zZSB3aXRoIHRoZSBmbHVpZCB0byBiZSB1c2VkLiAiLCJtYXRjaExldmVsIjoibm9uZSIsIm1hdGNoZWRXb3JkcyI6W119fX1dLCJuYkhpdHMiOjgzMTksInBhZ2UiOjAsIm5iUGFnZXMiOjEwLCJoaXRzUGVyUGFnZSI6MTAwLCJleGhhdXN0aXZlTmJIaXRzIjpmYWxzZSwiZXhoYXVzdGl2ZVR5cG8iOnRydWUsImV4aGF1c3RpdmUiOnsibmJIaXRzIjpmYWxzZSwidHlwbyI6dHJ1ZX0sInF1ZXJ5IjoiSVNPIDQiLCJwYXJhbXMiOiJxdWVyeT1JU08rNCZoaXRzUGVyUGFnZT0xMDAmZmlsdGVycz1jYXRlZ29yeSUzQXN0YW5kYXJkIiwicHJvY2Vzc2luZ1RpbWVNUyI6MTQsInByb2Nlc3NpbmdUaW1pbmdzTVMiOnsiX3JlcXVlc3QiOnsicm91bmRUcmlwIjoxMTN9LCJhZnRlckZldGNoIjp7ImZvcm1hdCI6eyJoaWdobGlnaHRpbmciOjQsInRvdGFsIjo1fSwibWVyZ2UiOnsiZGlzdGluY3QiOjF9LCJ0b3RhbCI6OH0sImZldGNoIjp7InNjYW5uaW5nIjo1LCJ0b3RhbCI6NX0sInRvdGFsIjoxNH0sInNlcnZlclRpbWVNUyI6MTR9
  recorded_at: Sat, 14 Oct 2023 18:04:37 GMT
- request:
    method: get
    uri: https://www.iso.org/contents/data/standard/00/35/3569.html
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - www.iso.org
  response:
    status:
      code: 301
      message: ''
    headers:
      Expires:
      - Wed, 09 May 1979 05:30:00 GMT
      Cache-Control:
      - no-cache, no-store, must-revalidate, proxy-revalidate, max-age=0
      Pragma:
      - no-cache
      Set-Cookie:
      - BIGipServerpool_prod_iso_www-jahia=730354058.36895.0000; path=/; Httponly;
        Secure
      - JSESSIONID=A3A41638D0167D28CDC4C2D161921E88; Path=/; Secure; HttpOnly
      Location:
      - "/standard/3569.html"
      Content-Length:
      - '0'
      Date:
      - Sat, 14 Oct 2023 18:04:50 GMT
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains
    body:
      encoding: UTF-8
      string: ''
  recorded_at: Sat, 14 Oct 2023 18:04:50 GMT
- request:
    method: get
    uri: https://www.iso.org/standard/3569.html
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - www.iso.org
  response:
    status:
      code: 200
      message: ''
    headers:
      Expires:
      - Wed, 09 May 1979 05:30:00 GMT
      Cache-Control:
      - no-cache, no-store, must-revalidate, proxy-revalidate, max-age=0
      Pragma:
      - no-cache
      Set-Cookie:
      - BIGipServerpool_prod_iso_www-jahia=730354058.36895.0000; path=/; Httponly;
        Secure
      - JSESSIONID=BC5DE6C564EAC7F556A8739CB97A2810; Path=/; Secure; HttpOnly
      Vary:
      - accept-encoding
      Content-Type:
      - text/html;charset=UTF-8
      Transfer-Encoding:
      - chunked
      Date:
      - Sat, 14 Oct 2023 18:04:51 GMT
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Sat, 14 Oct 2023 18:04:51 GMT
- request:
    method: get
    uri: https://www.iso.org/fr/standard/3569.html
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - www.iso.org
  response:
    status:
      code: 200
      message: ''
    headers:
      Expires:
      - Wed, 09 May 1979 05:30:00 GMT
      Cache-Control:
      - no-cache, no-store, must-revalidate, proxy-revalidate, max-age=0
      Pragma:
      - no-cache
      Set-Cookie:
      - BIGipServerpool_prod_iso_www-jahia=730354058.36895.0000; path=/; Httponly;
        Secure
      - JSESSIONID=B36417048B0F964FF7EDF4D50D9D8F1C; Path=/; Secure; HttpOnly
      Vary:
      - accept-encoding
      Content-Type:
      - text/html;charset=UTF-8
      Transfer-Encoding:
      - chunked
      Date:
      - Sat, 14 Oct 2023 18:04:52 GMT
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Sat, 14 Oct 2023 18:04:52 GMT
recorded_with: VCR 6.2.0
