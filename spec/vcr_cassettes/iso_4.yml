---
http_interactions:
- request:
    method: post
    uri: https://jcl49wv5ar-dsn.algolia.net/1/indexes/all_en/query
    body:
      encoding: UTF-8
      string: '{"query":"ISO 4","hitsPerPage":100,"filters":"category:standard"}'
    headers:
      User-Agent:
      - Algolia for Ruby (2.1.1), Ruby (3.0.0)
      X-Algolia-Api-Key:
      - dd1b9e1ab383f4d4817d29cd5e96d3f0
      X-Algolia-Application-Id:
      - JCL49WV5AR
      Content-Type:
      - application/json; charset=utf-8
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      Connection:
      - keep-alive
      Keep-Alive:
      - '30'
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx
      Date:
      - Mon, 23 Aug 2021 12:10:40 GMT
      Content-Type:
      - application/json; charset=UTF-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      X-Alg-Pt:
      - '10'
      Accept-Encoding:
      - deflate, gzip
      Cache-Control:
      - no-store
      Access-Control-Allow-Origin:
      - "*"
      Timing-Allow-Origin:
      - "*"
      X-Content-Type-Options:
      - nosniff
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      Content-Disposition:
      - inline; filename=a.txt
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 23 Aug 2021 12:10:40 GMT
- request:
    method: get
    uri: https://www.iso.org/contents/data/standard/00/35/3569.html
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - www.iso.org
  response:
    status:
      code: 301
      message: ''
    headers:
      Expires:
      - Wed, 09 May 1979 05:30:00 GMT
      Cache-Control:
      - no-cache, no-store, must-revalidate, proxy-revalidate, max-age=0
      Pragma:
      - no-cache
      Set-Cookie:
      - BIGipServerpool_prod_iso_www-jahia=730354058.36895.0000; path=/; Httponly;
        Secure
      - JSESSIONID=8E2C0D4C532A2B6AF08ED95A89562547; Path=/; Secure; HttpOnly
      Location:
      - "/standard/3569.html"
      Content-Length:
      - '0'
      Date:
      - Mon, 23 Aug 2021 09:10:40 BRT
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains
    body:
      encoding: UTF-8
      string: ''
  recorded_at: Mon, 23 Aug 2021 12:10:41 GMT
- request:
    method: get
    uri: https://www.iso.org/standard/3569.html
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - www.iso.org
  response:
    status:
      code: 200
      message: ''
    headers:
      Expires:
      - Wed, 09 May 1979 05:30:00 GMT
      Cache-Control:
      - no-cache, no-store, must-revalidate, proxy-revalidate, max-age=0
      Pragma:
      - no-cache
      Set-Cookie:
      - BIGipServerpool_prod_iso_www-jahia=730354058.36895.0000; path=/; Httponly;
        Secure
      - JSESSIONID=55AF6297FFDCC0DC079F5797AA98B593; Path=/; Secure; HttpOnly
      Vary:
      - accept-encoding
      Content-Type:
      - text/html;charset=UTF-8
      Transfer-Encoding:
      - chunked
      Date:
      - Mon, 23 Aug 2021 09:10:41 BRT
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 23 Aug 2021 12:10:42 GMT
- request:
    method: get
    uri: https://www.iso.org/fr/standard/3569.html
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - www.iso.org
  response:
    status:
      code: 200
      message: ''
    headers:
      Expires:
      - Wed, 09 May 1979 05:30:00 GMT
      Cache-Control:
      - no-cache, no-store, must-revalidate, proxy-revalidate, max-age=0
      Pragma:
      - no-cache
      Set-Cookie:
      - BIGipServerpool_prod_iso_www-jahia=747131274.36895.0000; path=/; Httponly;
        Secure
      - JSESSIONID=EAB91FA278E681AAE80102491709A6FD; Path=/; Secure; HttpOnly
      Vary:
      - accept-encoding
      Content-Type:
      - text/html;charset=UTF-8
      Transfer-Encoding:
      - chunked
      Date:
      - Mon, 23 Aug 2021 09:10:43 BRT
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        PCFET0NUWVBFIGh0bWw+CgoKPGh0bWwgbGFuZz0iZnIiPgogIDxoZWFkPgogICAgCiAgICA8c2NyaXB0PgogICAgICBkYXRhTGF5ZXIgPSBbewogICAgICAgICdwYWdlVHlwZSc6ICdpdHM6c3RhbmRhcmQnLAogICAgICAgICdwYWdlTGFuZ3VhZ2UnOiAnZnInCiAgICAgIH1dOwogICAgPC9zY3JpcHQ+CgogICAgPCEtLSBHb29nbGUgVGFnIE1hbmFnZXIgLS0+CiAgICA8c2NyaXB0PihmdW5jdGlvbih3LGQscyxsLGkpe3dbbF09d1tsXXx8W107d1tsXS5wdXNoKHsnZ3RtLnN0YXJ0JzoKICAgICAgICBuZXcgRGF0ZSgpLmdldFRpbWUoKSxldmVudDonZ3RtLmpzJ30pO3ZhciBmPWQuZ2V0RWxlbWVudHNCeVRhZ05hbWUocylbMF0sCiAgICAgIGo9ZC5jcmVhdGVFbGVtZW50KHMpLGRsPWwhPSdkYXRhTGF5ZXInPycmbD0nK2w6Jyc7ai5hc3luYz10cnVlO2ouc3JjPQogICAgICAnaHR0cHM6Ly93d3cuZ29vZ2xldGFnbWFuYWdlci5jb20vZ3RtLmpzP2lkPScraStkbDtmLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGosZik7CiAgICB9KSh3aW5kb3csZG9jdW1lbnQsJ3NjcmlwdCcsJ2RhdGFMYXllcicsJ0dUTS1URkdLUVFCJyk7PC9zY3JpcHQ+CiAgICA8IS0tIEVuZCBHb29nbGUgVGFnIE1hbmFnZXIgLS0+CgogICAgPG1ldGEgY2hhcnNldD0idXRmLTgiPgogICAgPG1ldGEgbmFtZT0idmlld3BvcnQiIGNvbnRlbnQ9IndpZHRoPWRldmljZS13aWR0aCwgaW5pdGlhbC1zY2FsZT0xIj4KICAgIDxtZXRhIGh0dHAtZXF1aXY9IlgtVUEtQ29tcGF0aWJsZSIgY29udGVudD0iSUU9ZWRnZSI+CiAgICA8dGl0bGU+SVNPIC0gSVNPIDQ6MTk5NyAtIEluZm9ybWF0aW9uIGV0IGRvY3VtZW50YXRpb24g4oCUIFLDqGdsZXMgcG91ciBsJiMwMzk7YWJyw6l2aWF0aW9uIGRlcyBtb3RzIGRhbnMgbGVzIHRpdHJlcyBldCBkZXMgdGl0cmVzIGRlcyBwdWJsaWNhdGlvbnM8L3RpdGxlPgoKICAgIAogICAgICA8IS0tCiAgICAgIDxsaW5rIHJlbD0icHJlY29ubmVjdCIgaHJlZj0iaHR0cHM6Ly9jZG4uaXNvLm9yZy8iIGNyb3Nzb3JpZ2luIC8+CiAgICAgIDxsaW5rIHJlbD0icHJlbG9hZCIgYXM9InNjcmlwdCIgaHJlZj0iaHR0cHM6Ly9jZG4uaXNvLm9yZy9yZXNvdXJjZXMvd29vZC8zLjMuMy93b29kLmZ1bGwubWluLmpzIiBjcm9zc29yaWdpbiAvPgogICAgICA8bGluayByZWw9InByZWxvYWQiIGFzPSJzdHlsZSIgaHJlZj0iaHR0cHM6Ly9jZG4uaXNvLm9yZy9yZXNvdXJjZXMvd29vZC8zLjMuMy93b29kLmZ1bGwubWluLmNzcyIgY3Jvc3NvcmlnaW4gLz4KICAgICAgPGxpbmsgcmVsPSJwcmVsb2FkIiBhcz0iZm9udCIgaHJlZj0iaHR0cHM6Ly9jZG4uaXNvLm9yZy9yZXNvdXJjZXMvZm9udHMvYm9vdHN0cmFwLzMuMy4yL2dseXBoaWNvbnMtaGFsZmxpbmdzLXJlZ3VsYXIud29mZjIiIGNyb3Nzb3JpZ2luIC8+CiAgICAgIDxsaW5rIHJlbD0icHJlbG9hZCIgYXM9ImZvbnQiIGhyZWY9Imh0dHBzOi8vY2RuLmlzby5vcmcvcmVzb3VyY2VzL2ZvbnRzL21ldGF3ZWJwcm8vNy41MDQvTWV0YVdlYlByby1Cb2xkLndvZmYiIGNyb3Nzb3JpZ2luIC8+CiAgICAgIDxsaW5rIHJlbD0icHJlbG9hZCIgYXM9ImZvbnQiIGhyZWY9Imh0dHBzOi8vY2RuLmlzby5vcmcvcmVzb3VyY2VzL2ZvbnRzL21ldGF3ZWJwcm8vNy41MDQvTWV0YVdlYlByby1Ob3JtYWwud29mZiIgY3Jvc3NvcmlnaW4gLz4KICAgICAgPGxpbmsgcmVsPSJwcmVsb2FkIiBhcz0iZm9udCIgaHJlZj0iaHR0cHM6Ly9jZG4uaXNvLm9yZy9yZXNvdXJjZXMvZm9udHMvbWV0YXdlYnByby83LjUwNC9NZXRhV2ViUHJvLU5vcm1hbEl0YS53b2ZmIiBjcm9zc29yaWdpbiAvPgogICAgICAtLT4KCiAgICAKCiAgICA8bGluayByZWw9ImNhbm9uaWNhbCIgaHJlZj0iaHR0cHM6Ly93d3cuaXNvLm9yZy9mci9zdGFuZGFyZC8zNTY5Lmh0bWwiIC8+CgogICAgPCEtLSBzdGFydCBmYXZpY29ucyAtLT4KICAgIDxsaW5rIHJlbD0iYXBwbGUtdG91Y2gtaWNvbi1wcmVjb21wb3NlZCIgaHJlZj0iaHR0cHM6Ly9jZG4uaXNvLm9yZy9yZXNvdXJjZXMvd29vZC8zLjMuMy9pbWcvaXNvL2Zhdmljb24vcmVkL2FwcGxlLXRvdWNoLWljb24tMTUyeDE1Mi1wcmVjb21wb3NlZC5wbmciPgogICAgPGxpbmsgcmVsPSJzaG9ydGN1dCBpY29uIiBocmVmPSJodHRwczovL2Nkbi5pc28ub3JnL3Jlc291cmNlcy93b29kLzMuMy4zL2ltZy9pc28vZmF2aWNvbi9yZWQvZmF2aWNvbi5pY28iPgogICAgPG1ldGEgbmFtZT0ibXNhcHBsaWNhdGlvbi1UaWxlQ29sb3IiIGNvbnRlbnQ9IiNlZWUiPgogICAgPG1ldGEgbmFtZT0ibXNhcHBsaWNhdGlvbi1UaWxlSW1hZ2UiIGNvbnRlbnQ9Imh0dHBzOi8vY2RuLmlzby5vcmcvcmVzb3VyY2VzL3dvb2QvMy4zLjMvaW1nL2lzby9mYXZpY29uL3JlZC9tc3RpbGUtMTQ0eDE0NC5wbmciPgogICAgPCEtLSBlbmQgZmF2aWNvbnMgLS0+CgogICAgCiAgICA8bWV0YSBuYW1lPSJ0aGVtZS1jb2xvciIgY29udGVudD0iIzMzMyI+CgogIAo8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+CnZhciBjb250ZXh0SnNQYXJhbWV0ZXJzPXtjb250ZXh0UGF0aDoiIixsYW5nOiJmciIsdWlsYW5nOiJmciIsc2l0ZVV1aWQ6IjQzOTE0NmY4LTY3N2UtNGRkZS1iNmM2LWI2OTJiNzUzNGY1MiIsd2NhZzpmYWxzZSxja2VDZmc6IiJ9OyB2YXIgQ0tFRElUT1JfQkFTRVBBVEg9Ii9tb2R1bGVzL2NrZWRpdG9yL2phdmFzY3JpcHQvIjsgdmFyIHNjYXl0X2N1c3RvbV9wYXJhbXM9bmV3IEFycmF5KCk7IHNjYXl0X2N1c3RvbV9wYXJhbXNbJ3NMYW5nJ109J2ZyX0ZSJzsKPC9zY3JpcHQ+CjxsaW5rIGlkPSJzdGF0aWNBc3NldENTUzAiIHJlbD0ic3R5bGVzaGVldCIgaHJlZj0iaHR0cHM6Ly9jZG4uaXNvLm9yZy9yZXNvdXJjZXMvd29vZC8zLjMuMy93b29kLmZ1bGwubWluLmNzcyIgbWVkaWE9InNjcmVlbixwcmludCxoYW5kaGVsZCIgdHlwZT0idGV4dC9jc3MiLz4KPGxpbmsgaWQ9InN0YXRpY0Fzc2V0Q1NTMSIgcmVsPSJzdHlsZXNoZWV0IiBocmVmPSIvbW9kdWxlcy9hc3NldHMvY3NzL2xhbmd1YWdlU3dpdGNoaW5nTGlua3MuY3NzPzE1MzIwMDM1MDU3NjYiIG1lZGlhPSJzY3JlZW4iIHR5cGU9InRleHQvY3NzIi8+CjxsaW5rIGlkPSJzdGF0aWNBc3NldENTUzIiIHJlbD0ic3R5bGVzaGVldCIgaHJlZj0iL21vZHVsZXMvaXNvLWphaGlhLXNlcnZpY2UtbW9kdWxlL2Nzcy9jYXRhbG9ndWUuY3NzPzE2Mjc0NTczMjEzMTAiIG1lZGlhPSJzY3JlZW4iIHR5cGU9InRleHQvY3NzIi8+CjxzY3JpcHQgaWQ9InN0YXRpY0Fzc2V0SmF2YXNjcmlwdDAiIHR5cGU9InRleHQvamF2YXNjcmlwdCIgc3JjPSJodHRwczovL2Nkbi5pc28ub3JnL3Jlc291cmNlcy93b29kLzMuMy4zL3dvb2QuZnVsbC5taW4uanMiICA+PC9zY3JpcHQ+CjxzY3JpcHQgaWQ9InN0YXRpY0Fzc2V0SmF2YXNjcmlwdDEiIHR5cGU9InRleHQvamF2YXNjcmlwdCIgc3JjPSIvbW9kdWxlcy9pc28tamFoaWEtc2VydmljZS1tb2R1bGUvamF2YXNjcmlwdC9jYXRhbG9ndWUuanM/MTYyNzQ1NzMyMTMxMCIgID48L3NjcmlwdD4KPHNjcmlwdCBpZD0ic3RhdGljQXNzZXRKYXZhc2NyaXB0MiIgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBzcmM9Ii9tb2R1bGVzL2lzb29yZy10ZW1wbGF0ZS9qYXZhc2NyaXB0L2N1c3RvbS5qcz8xNjI3NDU3MjEwNDQ1IiAgPjwvc2NyaXB0PgoKICAgIDxtZXRhIG5hbWU9ImNhdGVnb3J5IiBjb250ZW50PSJwIiAvPgogIAogICAgPG1ldGEgbmFtZT0icHViZGF0ZSIgY29udGVudD0iMjAyMDAzMTciIC8+CiAgCgogIDwhLS0gVHdpdHRlciBDYXJkIGRhdGEgLS0+CiAgPG1ldGEgbmFtZT0idHdpdHRlcjpzaXRlIiBjb250ZW50PSJAaXNvc3RhbmRhcmRzIiAvPgoKICA8IS0tIE9wZW4gR3JhcGggZGF0YSAtLT4KICA8bWV0YSBwcm9wZXJ0eT0ib2c6c2l0ZV9uYW1lIiBjb250ZW50PSJJU08iIC8+CiAgPG1ldGEgcHJvcGVydHk9Im9nOnVybCIgY29udGVudD0iaHR0cHM6Ly93d3cuaXNvLm9yZy9jbXMvcmVuZGVyL2xpdmUvZnIvc2l0ZXMvaXNvb3JnL2NvbnRlbnRzL2RhdGEvc3RhbmRhcmQvMDAvMzUvMzU2OS5odG1sIiAvPgogIAogICAgPG1ldGEgcHJvcGVydHk9Im9nOnR5cGUiIGNvbnRlbnQ9IndlYnNpdGUiIC8+CiAgCiAgICA8IS0tIFRodW1ibmFpbCBpbWFnZSAoZm9yIHR3aXR0ZXIgYW5kIE9wZW4gR3JhcGgpIC0tPgogICAgPG1ldGEgbmFtZT0idGh1bWJuYWlsIiBjb250ZW50PSJodHRwczovL2Nkbi5pc28ub3JnL3Jlc291cmNlcy93b29kLzMuMy4zL2ltZy9pc28vaXNvLWxvZ28tcHJpbnQuZ2lmIiAvPgogICAgPG1ldGEgbmFtZT0idHdpdHRlcjpjYXJkIiBjb250ZW50PSJzdW1tYXJ5IiAvPgogICAgPG1ldGEgbmFtZT0idHdpdHRlcjppbWFnZSIgY29udGVudD0iaHR0cHM6Ly9jZG4uaXNvLm9yZy9yZXNvdXJjZXMvd29vZC8zLjMuMy9pbWcvaXNvL2lzby1sb2dvLXByaW50LmdpZiIgLz4KICAgIDxtZXRhIHByb3BlcnR5PSJvZzppbWFnZSIgY29udGVudD0iaHR0cHM6Ly9jZG4uaXNvLm9yZy9yZXNvdXJjZXMvd29vZC8zLjMuMy9pbWcvaXNvL2lzby1sb2dvLXByaW50LmdpZiIgLz4KICAgIDxtZXRhIHByb3BlcnR5PSJvZzppbWFnZTphbHQiIGNvbnRlbnQ9IklTTyBsb2dvIiAvPgogIAogICAgPCEtLSBUaXRsZSAoZm9yIHR3aXR0ZXIgYW5kIE9wZW4gR3JhcGgpIC0tPgogICAgPG1ldGEgbmFtZT0idHdpdHRlcjp0aXRsZSIgY29udGVudD0iSVNPIDQ6MTk5NyIgLz4KICAgIDxtZXRhIHByb3BlcnR5PSJvZzp0aXRsZSIgY29udGVudD0iSVNPIDQ6MTk5NyIgLz4KICAKICAgIDwhLS0gRGVzY3JpcHRpb24gKGZvciBnb29nbGUsIHR3aXR0ZXIgYW5kIE9wZW4gR3JhcGgpIC0tPgogICAgPG1ldGEgbmFtZT0idHdpdHRlcjpkZXNjcmlwdGlvbiIgY29udGVudD0iSW5mb3JtYXRpb24gZXQgZG9jdW1lbnRhdGlvbiDigJQgUsOoZ2xlcyBwb3VyIGwmIzAzOTthYnLDqXZpYXRpb24gZGVzIG1vdHMgZGFucyBsZXMgdGl0cmVzIGV0IGRlcyB0aXRyZXMgZGVzIHB1YmxpY2F0aW9ucyIgLz4KICAgIDxtZXRhIHByb3BlcnR5PSJvZzpkZXNjcmlwdGlvbiIgY29udGVudD0iSW5mb3JtYXRpb24gZXQgZG9jdW1lbnRhdGlvbiDigJQgUsOoZ2xlcyBwb3VyIGwmIzAzOTthYnLDqXZpYXRpb24gZGVzIG1vdHMgZGFucyBsZXMgdGl0cmVzIGV0IGRlcyB0aXRyZXMgZGVzIHB1YmxpY2F0aW9ucyIgLz4KICAgIDxtZXRhIG5hbWU9ImRlc2NyaXB0aW9uIiBjb250ZW50PSJJbmZvcm1hdGlvbiBldCBkb2N1bWVudGF0aW9uIOKAlCBSw6hnbGVzIHBvdXIgbCYjMDM5O2FicsOpdmlhdGlvbiBkZXMgbW90cyBkYW5zIGxlcyB0aXRyZXMgZXQgZGVzIHRpdHJlcyBkZXMgcHVibGljYXRpb25zIiAvPgogIAoKICA8IS0tIEZhY2Vib29rIGFkbWlucyA6IExpb25lbCxNYXJpYSAtLT4KICA8bWV0YSBwcm9wZXJ0eT0iZmI6YWRtaW5zIiBjb250ZW50PSIxMDAwMDExMTYwNzk2NzYsMTAwMDAxNDQwMDAzMzA1IiAvPgoKICAKCjwvaGVhZD4KICA8Ym9keSBjbGFzcz0idGhlbWUtcmVkIiBpZD0ib2ZmY2FudmFzLWNvbnRlbnQiPgogICAgPCEtLSBHb29nbGUgVGFnIE1hbmFnZXIgKG5vc2NyaXB0KSAtLT4KICAgIDxub3NjcmlwdCBhcmlhLWhpZGRlbj0idHJ1ZSI+PGlmcmFtZSBzcmM9Imh0dHBzOi8vd3d3Lmdvb2dsZXRhZ21hbmFnZXIuY29tL25zLmh0bWw/aWQ9R1RNLVRGR0tRUUIiIGhlaWdodD0iMCIgd2lkdGg9IjAiIHN0eWxlPSJkaXNwbGF5Om5vbmU7dmlzaWJpbGl0eTpoaWRkZW4iPjwvaWZyYW1lPjwvbm9zY3JpcHQ+CiAgICA8IS0tIEVuZCBHb29nbGUgVGFnIE1hbmFnZXIgKG5vc2NyaXB0KSAtLT4KICAgIDxhIGNsYXNzPSJza2lwLW5hdmlnYXRpb24gYnRuIGJ0bi1pbmZvIHNyLW9ubHkgc3Itb25seS1mb2N1c2FibGUiIGhyZWY9IiNjb250ZW50Ij5QYXNzZXIgYXUgY29udGVudSBwcmluY2lwYWw8L2E+CiAgICA8IS0tIEhlYWRlciBJU08uT1JHIC0tPgogICAgPGhlYWRlciByb2xlPSJiYW5uZXIiIGFyaWEtbGFiZWw9IkhlYWRlciIgY2xhc3M9InRoZW1lLXJlZCBoZWFkZXItYWNlciAiIGlkPSJwYWdlLXRvcCI+CiAgICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lciI+CiAgICAgICAgPGRpdiBjbGFzcz0ibmF2YmFyIG5hdmJhci1pbnZlcnNlIG5hdmJhci1maXhlZC10b3AgbmF2YmFyLWRlZmF1bHQgbmF2YmFyLWFjZXIgdGhlbWUtcmVkIiBkYXRhLXNweT0iYWZmaXgiIGRhdGEtb2Zmc2V0LXRvcD0iMjAwIj4KICAgICAgICAgIDxidXR0b24gcm9sZT0iYnV0dG9uIiBpZD0ib2ZmY2FudmFzLWJ0biIgY2xhc3M9ImJ0biBidG4tdHJhbnNwYXJlbnQgcHVsbC1yaWdodCIgZGF0YS10b2dnbGU9Im9wZW4tb2ZmY2FudmFzIj48c3BhbiBjbGFzcz0iZ2x5cGhpY29uIGdseXBoaWNvbi1tZW51LWhhbWJ1cmdlciI+PC9zcGFuPjxzcGFuIGNsYXNzPSJoaWRkZW4teHhzIj4gTWVudTwvc3Bhbj48L2J1dHRvbj4KCiAgICAgICAgICA8IS0tIFNJREUgTkFWSUdBVElPTiAtLT4KICAgICAgICAgIDxuYXYgcm9sZT0ibmF2aWdhdGlvbiIgYXJpYS1sYWJlbD0iU2lkZSBOYXZpZ2F0aW9uIiBjbGFzcz0ic2lkZW5hdiIgaWQ9Im9mZmNhbnZhcy1wYW5lbCI+PHVsIHJvbGU9Im1lbnViYXIiIGNsYXNzPSJuYXYgbmF2YmFyLW5hdiBuYXYtbGV2ZWwxIj48bGkgcm9sZT0ibm9uZSIgY2xhc3M9Imhhc0NoaWxkcmVuIGRyb3Bkb3duIGZpcnN0SW5MZXZlbCI+PGEgcm9sZT0ibWVudWl0ZW0iIGhyZWY9Ii9mci9zdGFuZGFyZHMuaHRtbCIgY2xhc3M9ImRyb3Bkb3duLXRvZ2dsZSIgcm9sZT0iYnV0dG9uIj5Ob3JtZXM8L2E+PHVsIHJvbGU9Im1lbnUiIGNsYXNzPSJuYXYgbmF2YmFyLW5hdiBuYXYtbGV2ZWwyIGRyb3Bkb3duLW1lbnUiPjxsaSByb2xlPSJub25lIiBjbGFzcz0iaGFzQ2hpbGRyZW4gZHJvcGRvd24gZmlyc3RJbkxldmVsIj48YSByb2xlPSJtZW51aXRlbSIgaHJlZj0iL2ZyL2JlbmVmaXRzLW9mLXN0YW5kYXJkcy5odG1sIiBjbGFzcz0iZHJvcGRvd24tdG9nZ2xlIiByb2xlPSJidXR0b24iPkF2YW50YWdlczwvYT48dWwgcm9sZT0ibWVudSIgY2xhc3M9Im5hdiBuYXZiYXItbmF2IG5hdi1sZXZlbDMgZHJvcGRvd24tbWVudSI+PGxpIHJvbGU9Im5vbmUiIGNsYXNzPSJub0NoaWxkcmVuIGZpcnN0SW5MZXZlbCI+PGEgcm9sZT0ibWVudWl0ZW0iIGhyZWY9Ii9mci9pc28tYW5kLXNtZXMuaHRtbCIgY2xhc3M9ImRyb3Bkb3duLXRvZ2dsZSIgcm9sZT0iYnV0dG9uIj5QTUU8L2E+PC9saT48bGkgcm9sZT0ibm9uZSIgY2xhc3M9Im5vQ2hpbGRyZW4iPjxhIHJvbGU9Im1lbnVpdGVtIiBocmVmPSIvZnIvaXNvLWFuZC1jb25zdW1lcnMuaHRtbCIgY2xhc3M9ImRyb3Bkb3duLXRvZ2dsZSIgcm9sZT0iYnV0dG9uIj5Db25zb21tYXRldXJzPC9hPjwvbGk+PGxpIHJvbGU9Im5vbmUiIGNsYXNzPSJub0NoaWxkcmVuIj48YSByb2xlPSJtZW51aXRlbSIgaHJlZj0iL2ZyL2lzby1hbmQtcG9saWN5LW1ha2Vycy5odG1sIiBjbGFzcz0iZHJvcGRvd24tdG9nZ2xlIiByb2xlPSJidXR0b24iPkzigJlJU08gZXQgbGVzIG9yZ2FuaXNtZXMgZGUgcsOpZ2xlbWVudGF0aW9uPC9hPjwvbGk+PGxpIHJvbGU9Im5vbmUiIGNsYXNzPSJub0NoaWxkcmVuIGxhc3RJbkxldmVsIj48YSByb2xlPSJtZW51aXRlbSIgaHJlZj0iL2ZyL3N0YW5kYXJkcy1pbi1hY3Rpb24uaHRtbCIgY2xhc3M9ImRyb3Bkb3duLXRvZ2dsZSIgcm9sZT0iYnV0dG9uIj5Ob3JtZXMgZW4gYWN0aW9uPC9hPjwvbGk+PC91bD48IS0tIGNsb3NlIG9mIHVsIGxldmVsIC0tPjwvbGk+PGxpIHJvbGU9Im5vbmUiIGNsYXNzPSJub0NoaWxkcmVuIj48YSByb2xlPSJtZW51aXRlbSIgaHJlZj0iL2ZyL3BvcHVsYXItc3RhbmRhcmRzLmh0bWwiIGNsYXNzPSJkcm9wZG93bi10b2dnbGUiIHJvbGU9ImJ1dHRvbiI+TGVzIG5vcm1lcyBsZXMgcGx1cyBjb25udWVzPC9hPjwvbGk+PGxpIHJvbGU9Im5vbmUiIGNsYXNzPSJoYXNDaGlsZHJlbiBkcm9wZG93biI+PGEgcm9sZT0ibWVudWl0ZW0iIGhyZWY9Ii9mci9jb25mb3JtaXR5LWFzc2Vzc21lbnQuaHRtbCIgY2xhc3M9ImRyb3Bkb3duLXRvZ2dsZSIgcm9sZT0iYnV0dG9uIj5DZXJ0aWZpY2F0aW9uICYgY29uZm9ybWl0w6k8L2E+PHVsIHJvbGU9Im1lbnUiIGNsYXNzPSJuYXYgbmF2YmFyLW5hdiBuYXYtbGV2ZWwzIGRyb3Bkb3duLW1lbnUiPjxsaSByb2xlPSJub25lIiBjbGFzcz0ibm9DaGlsZHJlbiBmaXJzdEluTGV2ZWwiPjxhIHJvbGU9Im1lbnVpdGVtIiBocmVmPSIvZnIvY2VydGlmaWNhdGlvbi5odG1sIiBjbGFzcz0iZHJvcGRvd24tdG9nZ2xlIiByb2xlPSJidXR0b24iPkNlcnRpZmljYXRpb248L2E+PC9saT48bGkgcm9sZT0ibm9uZSIgY2xhc3M9Im5vQ2hpbGRyZW4iPjxhIHJvbGU9Im1lbnVpdGVtIiBocmVmPSIvZnIvY2FzY28uaHRtbCIgY2xhc3M9ImRyb3Bkb3duLXRvZ2dsZSIgcm9sZT0iYnV0dG9uIj5DQVNDTzwvYT48L2xpPjxsaSByb2xlPSJub25lIiBjbGFzcz0ibm9DaGlsZHJlbiI+PGEgcm9sZT0ibWVudWl0ZW0iIGhyZWY9Ii9mci90aGUtaXNvLXN1cnZleS5odG1sIiBjbGFzcz0iZHJvcGRvd24tdG9nZ2xlIiByb2xlPSJidXR0b24iPkwnw4l0dWRlIElTTzwvYT48L2xpPjxsaSByb2xlPSJub25lIiBjbGFzcz0ibm9DaGlsZHJlbiBsYXN0SW5MZXZlbCI+PGEgcm9sZT0ibWVudWl0ZW0iIGhyZWY9Ii9mci9yZXNvdXJjZXMtZm9yLWNvbmZvcm1pdHktYXNzZXNzbWVudC5odG1sIiBjbGFzcz0iZHJvcGRvd24tdG9nZ2xlIiByb2xlPSJidXR0b24iPlJlc3NvdXJjZXM8L2E+PC9saT48L3VsPjwhLS0gY2xvc2Ugb2YgdWwgbGV2ZWwgLS0+PC9saT48bGkgcm9sZT0ibm9uZSIgY2xhc3M9Im5vQ2hpbGRyZW4gbGFzdEluTGV2ZWwiPjxhIHJvbGU9Im1lbnVpdGVtIiBocmVmPSIvZnIvc2Rncy5odG1sIiBjbGFzcz0iZHJvcGRvd24tdG9nZ2xlIiByb2xlPSJidXR0b24iPk9ERDwvYT48L2xpPjwvdWw+PCEtLSBjbG9zZSBvZiB1bCBsZXZlbCAtLT48L2xpPjxsaSByb2xlPSJub25lIiBjbGFzcz0iaGFzQ2hpbGRyZW4gZHJvcGRvd24iPjxhIHJvbGU9Im1lbnVpdGVtIiBocmVmPSIvZnIvYWJvdXQtdXMuaHRtbCIgY2xhc3M9ImRyb3Bkb3duLXRvZ2dsZSIgcm9sZT0iYnV0dG9uIj7DgCBwcm9wb3MgZGUgbCdJU088L2E+PHVsIHJvbGU9Im1lbnUiIGNsYXNzPSJuYXYgbmF2YmFyLW5hdiBuYXYtbGV2ZWwyIGRyb3Bkb3duLW1lbnUiPjxsaSByb2xlPSJub25lIiBjbGFzcz0iaGFzQ2hpbGRyZW4gZHJvcGRvd24gZmlyc3RJbkxldmVsIj48YSByb2xlPSJtZW51aXRlbSIgaHJlZj0iL2ZyL3doYXQtd2UtZG8uaHRtbCIgY2xhc3M9ImRyb3Bkb3duLXRvZ2dsZSIgcm9sZT0iYnV0dG9uIj5Ob3MgYWN0aXZpdMOpczwvYT48dWwgcm9sZT0ibWVudSIgY2xhc3M9Im5hdiBuYXZiYXItbmF2IG5hdi1sZXZlbDMgZHJvcGRvd24tbWVudSI+PGxpIHJvbGU9Im5vbmUiIGNsYXNzPSJub0NoaWxkcmVuIGZpcnN0SW5MZXZlbCI+PGEgcm9sZT0ibWVudWl0ZW0iIGhyZWY9Ii9mci9kZXZlbG9waW5nLXN0YW5kYXJkcy5odG1sIiAgY2xhc3M9ImRyb3Bkb3duLXRvZ2dsZSIgcm9sZT0iYnV0dG9uIj5FbGFib3JhdGlvbiBkZXMgbm9ybWVzPC9hPjwvbGk+PGxpIHJvbGU9Im5vbmUiIGNsYXNzPSJub0NoaWxkcmVuIj48YSByb2xlPSJtZW51aXRlbSIgaHJlZj0iL2ZyL3Jlc2VhcmNoLWFuZC1lZHVjYXRpb24uaHRtbCIgY2xhc3M9ImRyb3Bkb3duLXRvZ2dsZSIgcm9sZT0iYnV0dG9uIj5SZWNoZXJjaGU8L2E+PC9saT48bGkgcm9sZT0ibm9uZSIgY2xhc3M9Im5vQ2hpbGRyZW4iPjxhIHJvbGU9Im1lbnVpdGVtIiBocmVmPSIvZnIvY2FwYWNpdHktYnVpbGRpbmcuaHRtbCIgY2xhc3M9ImRyb3Bkb3duLXRvZ2dsZSIgcm9sZT0iYnV0dG9uIj5SZW5mb3JjZW1lbnQgZGVzIGNhcGFjaXTDqXM8L2E+PC9saT48bGkgcm9sZT0ibm9uZSIgY2xhc3M9Im5vQ2hpbGRyZW4gbGFzdEluTGV2ZWwiPjxhIHJvbGU9Im1lbnVpdGVtIiBocmVmPSIvZnIvZWR1Y2F0aW9uLWFib3V0LXN0YW5kYXJkcy5odG1sIiBjbGFzcz0iZHJvcGRvd24tdG9nZ2xlIiByb2xlPSJidXR0b24iPkVuc2VpZ25lbWVudCBzdXIgbGVzIG5vcm1lczwvYT48L2xpPjwvdWw+PCEtLSBjbG9zZSBvZiB1bCBsZXZlbCAtLT48L2xpPjxsaSByb2xlPSJub25lIiBjbGFzcz0ibm9DaGlsZHJlbiI+PGEgcm9sZT0ibWVudWl0ZW0iIGhyZWY9Ii9mci9zdHJ1Y3R1cmUuaHRtbCIgY2xhc3M9ImRyb3Bkb3duLXRvZ2dsZSIgcm9sZT0iYnV0dG9uIj5TdHJ1Y3R1cmU8L2E+PC9saT48bGkgcm9sZT0ibm9uZSIgY2xhc3M9Im5vQ2hpbGRyZW4iPjxhIHJvbGU9Im1lbnVpdGVtIiBocmVmPSIvZnIvbWVtYmVycy5odG1sIiBjbGFzcz0iZHJvcGRvd24tdG9nZ2xlIiByb2xlPSJidXR0b24iPk1lbWJyZXM8L2E+PC9saT48bGkgcm9sZT0ibm9uZSIgY2xhc3M9Im5vQ2hpbGRyZW4iPjxhIHJvbGU9Im1lbnVpdGVtIiBocmVmPSIvZnIvYW5ub3VuY2VtZW50cy5odG1sIiBjbGFzcz0iZHJvcGRvd24tdG9nZ2xlIiByb2xlPSJidXR0b24iPkNvbW11bmlxdcOpczwvYT48L2xpPjxsaSByb2xlPSJub25lIiBjbGFzcz0iaGFzQ2hpbGRyZW4gZHJvcGRvd24gbGFzdEluTGV2ZWwiPjxhIHJvbGU9Im1lbnVpdGVtIiBocmVmPSIvZnIvc3RyYXRlZ3kyMDMwLmh0bWwiIGNsYXNzPSJkcm9wZG93bi10b2dnbGUiIHJvbGU9ImJ1dHRvbiI+U3RyYXTDqWdpZSAyMDMwPC9hPjx1bCByb2xlPSJtZW51IiBjbGFzcz0ibmF2IG5hdmJhci1uYXYgbmF2LWxldmVsMyBkcm9wZG93bi1tZW51Ij48bGkgcm9sZT0ibm9uZSIgY2xhc3M9Im5vQ2hpbGRyZW4iPjxhIHJvbGU9Im1lbnVpdGVtIiBocmVmPSIvZnIvaG9tZS9hYm91dC11cy9zdHJhdGVneS0yMDMwL2RyaXZlcnMtb2YtY2hhbmdlLmh0bWwiIGNsYXNzPSJkcm9wZG93bi10b2dnbGUiIHJvbGU9ImJ1dHRvbiI+RmFjdGV1cnMgZGUgY2hhbmdlbWVudDwvYT48L2xpPjxsaSByb2xlPSJub25lIiBjbGFzcz0ibm9DaGlsZHJlbiI+PGEgcm9sZT0ibWVudWl0ZW0iIGhyZWY9Ii9mci9ob21lL2Fib3V0LXVzL3N0cmF0ZWd5LTIwMzAvb3VyLWdvYWxzLmh0bWwiIGNsYXNzPSJkcm9wZG93bi10b2dnbGUiIHJvbGU9ImJ1dHRvbiI+Tm9zIG9iamVjdGlmczwvYT48L2xpPjxsaSByb2xlPSJub25lIiBjbGFzcz0ibm9DaGlsZHJlbiI+PGEgcm9sZT0ibWVudWl0ZW0iIGhyZWY9Ii9mci9ob21lL2Fib3V0LXVzL3N0cmF0ZWd5LTIwMzAvcHJpb3JpdGllcy5odG1sIiBjbGFzcz0iZHJvcGRvd24tdG9nZ2xlIiByb2xlPSJidXR0b24iPlByaW9yaXTDqXM8L2E+PC9saT48bGkgcm9sZT0ibm9uZSIgY2xhc3M9Im5vQ2hpbGRyZW4gbGFzdEluTGV2ZWwiPjxhIHJvbGU9Im1lbnVpdGVtIiBocmVmPSIvZnIvaG9tZS9hYm91dC11cy9zdHJhdGVneS0yMDMwL21lYXN1cmluZy1zdWNjZXNzLmh0bWwiIGNsYXNzPSJkcm9wZG93bi10b2dnbGUiIHJvbGU9ImJ1dHRvbiI+TWVzdXJlciBsZSBzdWNjw6hzPC9hPjwvbGk+PC91bD48IS0tIGNsb3NlIG9mIHVsIGxldmVsIC0tPjwvbGk+PC91bD48IS0tIGNsb3NlIG9mIHVsIGxldmVsIC0tPjwvbGk+PGxpIHJvbGU9Im5vbmUiIGNsYXNzPSJoYXNDaGlsZHJlbiBkcm9wZG93biI+PGEgcm9sZT0ibWVudWl0ZW0iIGhyZWY9Ii9mci9uZXdzLmh0bWwiIGNsYXNzPSJkcm9wZG93bi10b2dnbGUiIHJvbGU9ImJ1dHRvbiI+QWN0dWFsaXTDqXM8L2E+PHVsIHJvbGU9Im1lbnUiIGNsYXNzPSJuYXYgbmF2YmFyLW5hdiBuYXYtbGV2ZWwyIGRyb3Bkb3duLW1lbnUiPjxsaSByb2xlPSJub25lIiBjbGFzcz0ibm9DaGlsZHJlbiI+PGEgcm9sZT0ibWVudWl0ZW0iIGhyZWY9Ii9mci9ldmVudHMuaHRtbCIgY2xhc3M9ImRyb3Bkb3duLXRvZ2dsZSIgcm9sZT0iYnV0dG9uIj5NYW5pZmVzdGF0aW9uczwvYT48L2xpPjxsaSByb2xlPSJub25lIiBjbGFzcz0ibm9DaGlsZHJlbiI+PGEgcm9sZT0ibWVudWl0ZW0iIGhyZWY9Ii9mci9tZWRpYS1raXQuaHRtbCIgY2xhc3M9ImRyb3Bkb3duLXRvZ2dsZSIgcm9sZT0iYnV0dG9uIj5Eb3NzaWVyIG3DqWRpYXM8L2E+PC9saT48L3VsPjwhLS0gY2xvc2Ugb2YgdWwgbGV2ZWwgLS0+PC9saT48bGkgcm9sZT0ibm9uZSIgY2xhc3M9Imhhc0NoaWxkcmVuIGRyb3Bkb3duIj48YSByb2xlPSJtZW51aXRlbSIgaHJlZj0iL2ZyL2RldmVsb3Bpbmctc3RhbmRhcmRzLmh0bWwiIGNsYXNzPSJkcm9wZG93bi10b2dnbGUiIHJvbGU9ImJ1dHRvbiI+UGFydGljaXBlcjwvYT48dWwgcm9sZT0ibWVudSIgY2xhc3M9Im5hdiBuYXZiYXItbmF2IG5hdi1sZXZlbDIgZHJvcGRvd24tbWVudSI+PGxpIHJvbGU9Im5vbmUiIGNsYXNzPSJoYXNDaGlsZHJlbiBkcm9wZG93biBmaXJzdEluTGV2ZWwiPjxhIHJvbGU9Im1lbnVpdGVtIiBocmVmPSIvZnIvd2hvLWRldmVsb3BzLXN0YW5kYXJkcy5odG1sIiBjbGFzcz0iZHJvcGRvd24tdG9nZ2xlIiByb2xlPSJidXR0b24iPlF1aSDDqWxhYm9yZSBsZXMgbm9ybWVzPC9hPjx1bCByb2xlPSJtZW51IiBjbGFzcz0ibmF2IG5hdmJhci1uYXYgbmF2LWxldmVsMyBkcm9wZG93bi1tZW51Ij48bGkgcm9sZT0ibm9uZSIgY2xhc3M9Im5vQ2hpbGRyZW4gZmlyc3RJbkxldmVsIj48YSByb2xlPSJtZW51aXRlbSIgaHJlZj0iL2ZyL3RlY2huaWNhbC1jb21taXR0ZWVzLmh0bWwiIGNsYXNzPSJkcm9wZG93bi10b2dnbGUiIHJvbGU9ImJ1dHRvbiI+Q29taXTDqXMgdGVjaG5pcXVlczwvYT48L2xpPjxsaSByb2xlPSJub25lIiBjbGFzcz0ibm9DaGlsZHJlbiI+PGEgcm9sZT0ibWVudWl0ZW0iIGhyZWY9Ii9mci9vdGhlci1ib2RpZXMtZGV2ZWxvcGluZy1zdGFuZGFyZHMuaHRtbCIgY2xhc3M9ImRyb3Bkb3duLXRvZ2dsZSIgcm9sZT0iYnV0dG9uIj5BdXRyZXMgb3JnYW5pc21lczwvYT48L2xpPjxsaSByb2xlPSJub25lIiBjbGFzcz0ibm9DaGlsZHJlbiBsYXN0SW5MZXZlbCI+PGEgcm9sZT0ibWVudWl0ZW0iIGhyZWY9Ii9mci9vcmdhbml6YXRpb25zLWluLWNvb3BlcmF0aW9uLXdpdGgtaXNvLmh0bWwiIGNsYXNzPSJkcm9wZG93bi10b2dnbGUiIHJvbGU9ImJ1dHRvbiI+T3JnYW5pc2F0aW9ucyBlbiBjb29ww6lyYXRpb248L2E+PC9saT48L3VsPjwhLS0gY2xvc2Ugb2YgdWwgbGV2ZWwgLS0+PC9saT48bGkgcm9sZT0ibm9uZSIgY2xhc3M9Im5vQ2hpbGRyZW4iPjxhIHJvbGU9Im1lbnVpdGVtIiBocmVmPSIvZnIvZGVsaXZlcmFibGVzLWFsbC5odG1sIiBjbGFzcz0iZHJvcGRvd24tdG9nZ2xlIiByb2xlPSJidXR0b24iPkxpdnJhYmxlczwvYT48L2xpPjxsaSByb2xlPSJub25lIiBjbGFzcz0ibm9DaGlsZHJlbiI+PGEgcm9sZT0ibWVudWl0ZW0iIGhyZWY9Ii9mci9nZXQtaW52b2x2ZWQuaHRtbCIgY2xhc3M9ImRyb3Bkb3duLXRvZ2dsZSIgcm9sZT0iYnV0dG9uIj5Qb3VycXVvaSBz4oCZZW5nYWdlciA/PC9hPjwvbGk+PGxpIHJvbGU9Im5vbmUiIGNsYXNzPSJub0NoaWxkcmVuIGxhc3RJbkxldmVsIj48YSByb2xlPSJtZW51aXRlbSIgaHJlZj0iL2ZyL3Jlc291cmNlcy5odG1sIiBjbGFzcz0iZHJvcGRvd24tdG9nZ2xlIiByb2xlPSJidXR0b24iPlJlc3NvdXJjZXM8L2E+PC9saT48L3VsPjwhLS0gY2xvc2Ugb2YgdWwgbGV2ZWwgLS0+PC9saT48bGkgcm9sZT0ibm9uZSIgY2xhc3M9Imhhc0NoaWxkcmVuIGRyb3Bkb3duIGluUGF0aCBsYXN0SW5MZXZlbCI+PGEgcm9sZT0ibWVudWl0ZW0iIGhyZWY9Ii9mci9zdG9yZS5odG1sIiBjbGFzcz0iZHJvcGRvd24tdG9nZ2xlIiByb2xlPSJidXR0b24iPlN0b3JlPC9hPjx1bCByb2xlPSJtZW51IiBjbGFzcz0ibmF2IG5hdmJhci1uYXYgbmF2LWxldmVsMiBkcm9wZG93bi1tZW51Ij48bGkgcm9sZT0ibm9uZSIgY2xhc3M9Im5vQ2hpbGRyZW4gaW5QYXRoIGFjdGl2ZSBmaXJzdEluTGV2ZWwiPjxhIHJvbGU9Im1lbnVpdGVtIiBocmVmPSIvZnIvc3RhbmRhcmRzLWNhdGFsb2d1ZS9icm93c2UtYnktaWNzLmh0bWwiICBjbGFzcz0iZHJvcGRvd24tdG9nZ2xlIiByb2xlPSJidXR0b24iPkNhdGFsb2d1ZSBkZSBub3JtZXM8L2E+PC9saT48bGkgcm9sZT0ibm9uZSIgY2xhc3M9Im5vQ2hpbGRyZW4iPjxhIHJvbGU9Im1lbnVpdGVtIiBocmVmPSIvZnIvcHVibGljYXRpb24tbGlzdC5odG1sIiBjbGFzcz0iZHJvcGRvd24tdG9nZ2xlIiByb2xlPSJidXR0b24iPlB1YmxpY2F0aW9ucyBldCBwcm9kdWl0czwvYT48L2xpPjxsaSByb2xlPSJub25lIiBjbGFzcz0ibm9DaGlsZHJlbiBsYXN0SW5MZXZlbCI+PGEgcm9sZT0ibWVudWl0ZW0iIGhyZWY9Imh0dHBzOi8vd3d3Lmlzby5vcmcvb2JwL3VpL2ZyLyNhY2NvdW50L3Byb2R1Y3RzIiAgdGFyZ2V0PSJfYmxhbmsiIGNsYXNzPSJkcm9wZG93bi10b2dnbGUiIHJvbGU9ImJ1dHRvbiI+TW9uIGNvbXB0ZTwvYT48L2xpPjwvdWw+PCEtLSBjbG9zZSBvZiB1bCBsZXZlbCAtLT48L2xpPjwvdWw+PCEtLSBjbG9zZSBvZiB1bCBsZXZlbCAtLT48L25hdj48ZGl2IGNsYXNzPSJjbGVhciI+PC9kaXY+CgogICAgICAgICAgPGRpdiBjbGFzcz0iY29udGFpbmVyIG9mZmNhbnZhcy1yaWdpZCI+CiAgICAgICAgICAgIDxhIGNsYXNzPSJsb2dvIGlzb2xvZ28iIGhyZWY9Ii9mci9ob21lLmh0bWwiIHRpdGxlPSJPcmdhbmlzYXRpb24gaW50ZXJuYXRpb25hbGUgZGUgbm9ybWFsaXNhdGlvbiIgYWx0PSJMb2dvIElTTyI+PC9hPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJpc29sb2dvLXByaW50Ij48aW1nIHNyYz0iaHR0cHM6Ly9jZG4uaXNvLm9yZy9yZXNvdXJjZXMvd29vZC8zLjMuMy9pbWcvaXNvL2lzby1sb2dvLXByaW50LmdpZiIgYWx0PSJMb2dvIElTTyBwb3VyIGltcHJlc3Npb24iLz48L2Rpdj4KCiAgICAgICAgICAgIDx1bCBpZD0idXRpbGl0eU5hdiIgYXJpYS1sYWJlbD0iVXRpbGl0aWVzIE5hdmlnYXRpb24iIGNsYXNzPSJuYXYgbmF2YmFyLW5hdiBuYXZiYXItcmlnaHQiPgogICAgICAgICAgICAgIDxsaSBjbGFzcz0ibmF2LWdseXBoaWNvbiBuYXYtc2VhcmNoIiBpZD0ibmF2LXNlYXJjaCI+CiAgICAgICAgICAgICAgICA8Zm9ybSBjbGFzcz0iZXhwYW5kYWJsZSBpc29zZWFyY2giIHJvbGU9InNlYXJjaCI+CiAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJoaWRkZW4iIGRhdGEtdXJsYmFzZT0iL2Ntcy9yZW5kZXIvbGl2ZS9mciI+PC9zcGFuPgogICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iaGlkZGVuIiBkYXRhLXNlYXJjaHBhZ2VwYXRoPSIvc2l0ZXMvaXNvb3JnL3NlYXJjaCI+PC9zcGFuPgogICAgICAgICAgICAgICAgICA8bGFiZWwgaWQ9ImlucHV0LXNlYXJjaCIgY2xhc3M9ImNvbnRyb2wtbGFiZWwgaGlkZGVuLXhzIiBmb3I9ImlucHV0LXNlYXJjaCI+UmVjaGVyY2hlPC9sYWJlbD4KICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9InNlYXJjaCIgcGxhY2Vob2xkZXI9IiIgYXJpYS1sYWJlbGxlZGJ5PSJpbnB1dC1zZWFyY2giPgogICAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPSJnbHlwaGljb24gZ2x5cGhpY29uLXNlYXJjaCIgdHlwZT0ic3VibWl0IiBhcmlhLWxhYmVsbGVkYnk9ImlucHV0LXNlYXJjaCI+PC9idXR0b24+CiAgICAgICAgICAgICAgICA8L2Zvcm0+CiAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICA8bGkgY2xhc3M9Im5hdi1nbHlwaGljb24iPgogICAgICAgICAgICAgICAgPGEgY2xhc3M9InNob3BwaW5nLWNhcnQtbGluayIgaHJlZj0iL3dlYnN0b3JlL3Nob3BwaW5nYmFza2V0P21lbWJlcklkPUlTTyZndWlsYW5nPWZyIiB0aXRsZT0iUGFuaWVyIGQnYWNoYXQiIGFyaWEtbGFiZWw9IlBhbmllciBkJ2FjaGF0Ij4KICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImdseXBoaWNvbiBnbHlwaGljb24tc2hvcHBpbmctY2FydCIgaWQ9InNob3BwaW5nSXRlbXMiPjwvc3Bhbj4KICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgIAoKPGxpIGNsYXNzPSJkcm9wZG93biIgaWQ9Imxhbmctc3dpdGNoZXIiPgogIDxhIGNsYXNzPSJkcm9wZG93bi10b2dnbGUiIGRhdGEtdG9nZ2xlPSJkcm9wZG93biIgaHJlZj0iIyI+RlIgPHNwYW4gY2xhc3M9ImNhcmV0Ij48L3NwYW4+PC9hPgogIDx1bCBjbGFzcz0iZHJvcGRvd24tbWVudSI+CiAgICA8bGk+PGEgaHJlZj0iL3N0YW5kYXJkLzM1NjkuaHRtbCI+RW5nbGlzaDwvYT48L2xpPjxsaT48YSBocmVmPSIvcnUvc3RhbmRhcmQvMzU2OS5odG1sIj7RgNGD0YHRgdC60LjQuTwvYT48L2xpPgogIDwvdWw+CjwvbGk+PGRpdiBjbGFzcz0iY2xlYXIiPjwvZGl2PgogICAgICAgICAgICA8L3VsPgogICAgICAgICAgICA8IS0tIFRPUCBMRVZFTDEgTkFWSUdBVElPTiAtLT4KICAgICAgICAgICAgPG5hdiByb2xlPSJuYXZpZ2F0aW9uIiBhcmlhLWxhYmVsPSJNYWluIE5hdmlnYXRpb24iIGNsYXNzPSJzaWRlbmF2IiBpZD0ibWFpbk5hdiI+PHVsIHJvbGU9Im1lbnViYXIiIGNsYXNzPSJuYXYgbmF2YmFyLW5hdiBuYXZiYXItcmlnaHQgYWZmaXgtdG9wbmF2LWxldmVsMSI+PGxpIHJvbGU9Im5vbmUiIGNsYXNzPSJub0NoaWxkcmVuIGZpcnN0SW5MZXZlbCI+PGEgcm9sZT0ibWVudWl0ZW0iIGhyZWY9Ii9mci9zdGFuZGFyZHMuaHRtbCI+Tm9ybWVzPC9hPjwvbGk+PGxpIHJvbGU9Im5vbmUiIGNsYXNzPSJub0NoaWxkcmVuIj48YSByb2xlPSJtZW51aXRlbSIgaHJlZj0iL2ZyL2Fib3V0LXVzLmh0bWwiPsOAIHByb3BvcyBkZSBsJ0lTTzwvYT48L2xpPjxsaSByb2xlPSJub25lIiBjbGFzcz0ibm9DaGlsZHJlbiI+PGEgcm9sZT0ibWVudWl0ZW0iIGhyZWY9Ii9mci9uZXdzLmh0bWwiPkFjdHVhbGl0w6lzPC9hPjwvbGk+PGxpIHJvbGU9Im5vbmUiIGNsYXNzPSJub0NoaWxkcmVuIj48YSByb2xlPSJtZW51aXRlbSIgaHJlZj0iL2ZyL2RldmVsb3Bpbmctc3RhbmRhcmRzLmh0bWwiPlBhcnRpY2lwZXI8L2E+PC9saT48bGkgcm9sZT0ibm9uZSIgY2xhc3M9Im5vQ2hpbGRyZW4gaW5QYXRoIGxhc3RJbkxldmVsIj48YSByb2xlPSJtZW51aXRlbSIgaHJlZj0iL2ZyL3N0b3JlLmh0bWwiPlN0b3JlPC9hPjwvbGk+PC91bD48IS0tIGNsb3NlIG9mIHVsIGxldmVsIC0tPjwvbmF2PjxkaXYgY2xhc3M9ImNsZWFyIj48L2Rpdj4KICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgICAgIDxkaXYgaWQ9InNlYXJjaC1jdXJ0YWluIj48L2Rpdj4KICAgICAgPC9kaXY+CgogICAgICAKCiAgICA8L2hlYWRlcj4KICAgIDwhLS0gTUFJTiBDT05URU5UIC0tPgogICAgPG1haW4gcm9sZT0ibWFpbiIgaWQ9ImNvbnRlbnQiIGNsYXNzPSJhY2VyIiBhcmlhLWxhYmVsPSJDb250ZW50IiB0YWJpbmRleD0iLTEiPgogICAgICAKCgoKCgo8c3BhbiBjbGFzcz0iaGlkZGVuIiBpZD0iaW5kZXhSZWZlcmVuY2UiIGRhdGEtaW5kZXg9IjM1NjkgLSBJU08gNDoxOTk3IC0gSW5mb3JtYXRpb24gZXQgZG9jdW1lbnRhdGlvbiDigJQgUsOoZ2xlcyBwb3VyIGwnYWJyw6l2aWF0aW9uIGRlcyBtb3RzIGRhbnMgbGVzIHRpdHJlcyBldCBkZXMgdGl0cmVzIGRlcyBwdWJsaWNhdGlvbnMiPjwvc3Bhbj4KCiAgPHNwYW4gY2xhc3M9ImhpZGRlbiIgaWQ9Iml0ZW1SZWZlcmVuY2UiPklTTyA0OjE5OTc8L3NwYW4+Cgo8c2VjdGlvbiBpdGVtc2NvcGUgaXRlbXR5cGU9Imh0dHBzOi8vc2NoZW1hLm9yZy9Qcm9kdWN0IiBjbGFzcz0ic2VjdGlvbi1uYXZpZ2F0aW9uIj4KICA8ZGl2IGNsYXNzPSJjb250YWluZXIiPgogICAgPGRpdiBjbGFzcz0icm93Ij4KICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTEyIj4KICAgICAgICA8ZGl2IGNsYXNzPSJoaWRkZW4iIGl0ZW1wcm9wPSJjYXRlZ29yeSI+cDwvZGl2PgogICAgICAgIDxkaXYgY2xhc3M9ImhpZGRlbiIgaXRlbXByb3A9InByb2R1Y3RJRCIgaWQ9ImNzTnVtYmVyIj4zNTY5PC9kaXY+CiAgICAgICAgPGRpdiBjbGFzcz0iaGlkZGVuIiBpdGVtcHJvcD0iYnJhbmQiIGl0ZW1zY29wZSBpdGVtdHlwZT0iaHR0cHM6Ly9zY2hlbWEub3JnL09yZ2FuaXphdGlvbiI+CiAgICAgICAgICA8ZGl2IGl0ZW1wcm9wPSJsb2dvIiBpdGVtc2NvcGUgaXRlbXR5cGU9Imh0dHBzOi8vc2NoZW1hLm9yZy9JbWFnZU9iamVjdCI+CiAgICAgICAgICAgIDxtZXRhIGl0ZW1wcm9wPSJ1cmwiIGNvbnRlbnQ9Imh0dHBzOi8vY2RuLmlzby5vcmcvcmVzb3VyY2VzL3dvb2QvMy4zLjMvaW1nL2lzby9pc28tbG9nby1wcmludC5naWYiLz4KICAgICAgICAgICAgPG1ldGEgaXRlbXByb3A9IndpZHRoIiBjb250ZW50PSIyODMiPgogICAgICAgICAgICA8bWV0YSBpdGVtcHJvcD0iaGVpZ2h0IiBjb250ZW50PSIyNjEiPgogICAgICAgICAgPC9kaXY+CiAgICAgICAgICA8bWV0YSBpdGVtcHJvcD0ibmFtZSIgY29udGVudD0iT3JnYW5pc2F0aW9uIGludGVybmF0aW9uYWxlIGRlIG5vcm1hbGlzYXRpb24iPgogICAgICAgIDwvZGl2PgoKICAgICAgICA8bmF2IHJvbGU9Im5hdmlnYXRpb24iIGFyaWEtbGFiZWw9IkNoaWxkcmVuIE5hdmlnYXRpb24iIGNsYXNzPSJoZWFkaW5nLWNvbmRlbnNlZCBuYXYtcmVsYXRpdmVzIj4KCiAgCiAgPGRpdiBjbGFzcz0ic2VjdGlvbi1oZWFkIHdyYXBwZWQtZGFuZ2VyIHdyYXBwZWQtaDEiPjxzcGFuIGNsYXNzPSJpY29uICI+PC9zcGFuPjxhIHRhcmdldD0iIiBocmVmPSIvZnIvc3RhbmRhcmRzLWNhdGFsb2d1ZS9icm93c2UtYnktaWNzLmh0bWwidGl0bGU9IkV4cGxvcmV6IGxhIGNvbGxlY3Rpb24gZGUgbm9ybWVzIElTTyBkYW5zIHNvbiBpbnTDqWdyYWxpdMOpIGV0IHRyb3V2ZXogY2VsbGVzIHF1aSBz4oCZYXBwbGlxdWVudCDDoCB2b3RyZSBzZWN0ZXVyLiI+SUNTPC9hPiA+Jm5ic3A7PGEgaHJlZj0iL2ZyL2ljcy8wMS5odG1sIj4wMTwvYT4gPiZuYnNwOzxhIGhyZWY9Ii9mci9pY3MvMDEuMTQwLmh0bWwiPjAxLjE0MDwvYT4gPiZuYnNwOzxhIGhyZWY9Ii9mci9pY3MvMDEuMTQwLjQwLmh0bWwiPjAxLjE0MC40MDwvYT48L2Rpdj4KICAKCiAgPGgxPklTTyA0OjE5OTc8L2gxPgogIDxoMiBjbGFzcz0ibm8tdXBwZXJjYXNlIj5JbmZvcm1hdGlvbiBldCBkb2N1bWVudGF0aW9uIOKAlCBSw6hnbGVzIHBvdXIgbCdhYnLDqXZpYXRpb24gZGVzIG1vdHMgZGFucyBsZXMgdGl0cmVzIGV0IGRlcyB0aXRyZXMgZGVzIHB1YmxpY2F0aW9uczwvaDI+CjwvbmF2PgogICAgICA8L2Rpdj4KICAgIDwvZGl2PgogIDwvZGl2Pgo8L3NlY3Rpb24+CgoKICA8c2VjdGlvbiBjbGFzcz0ic2VjdGlvbi1zbSBiZy1wcmltYXJ5IHZpc2libGUteHMtYmxvY2siPgogICAgPGRpdiBjbGFzcz0iY29udGFpbmVyIj4KICAgICAgPGRpdiBjbGFzcz0icm93Ij4KICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtMTIiPgogICAgICAgICAgPGg0IGNsYXNzPSJ0ZXh0LWNlbnRlciI+CiAgICAgICAgICAgIDxhIGhyZWY9IiNzdG9yZS1ib3giIGNsYXNzPSJwYWdlLXNjcm9sbCI+CiAgICAgICAgICAgICAgQWNoZXRlciBjZXR0ZSBub3JtZQogICAgICAgICAgICA8L2E+CiAgICAgICAgICA8L2g0PgogICAgICAgIDwvZGl2PgogICAgICA8L2Rpdj4KICAgIDwvZGl2PgogIDwvc2VjdGlvbj4KCiAgICA8c2VjdGlvbiBjbGFzcz0iYmctbGlnaHRncmF5IHNlY3Rpb24tc20iPgogICAgICA8ZGl2IGNsYXNzPSJjb250YWluZXIiPgogICAgICAgIDxkaXYgY2xhc3M9InJvdyI+CiAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtNyI+CiAgICAgICAgICAgIDxoMyByb2xlPSJhbGVydCIgY2xhc3M9Im5vLW1hcmdpbiI+CiAgICAgICAgICAgICAgTGUgZGVybmllciBleGFtZW4gZGUgY2V0dGUgbm9ybWUgZGF0ZSBkZSZuYnNwOzIwMjAuCiAgICAgICAgICAgICAgQ2V0dGUgw6lkaXRpb24gcmVzdGUgZG9uYyBk4oCZYWN0dWFsaXTDqS4KICAgICAgICAgICAgPC9oMz4KICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgICA8L2Rpdj4KICAgIDwvc2VjdGlvbj4KICAKPHNlY3Rpb24gaWQ9InByb2R1Y3QtZGV0YWlscyI+CiAgPGRpdiBjbGFzcz0iY29udGFpbmVyIj4KICAgIDxkaXYgY2xhc3M9InJvdyI+CiAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC03Ij4KICAgICAgICAKICAgICAgICAgIDxoMz5Sw6lzdW3DqSZuYnNwOzxhIGNsYXNzPSJidG4gYnRuLXByaW1hcnkgYnRuLW91dGxpbmUiIGlkPSJvYnAtcHJldmlldyIgdGFyZ2V0PSJfYmxhbmsiIGhyZWY9Imh0dHBzOi8vd3d3Lmlzby5vcmcvb2JwL3VpLyMhaXNvOnN0ZDozNTY5OmZyIj5QcsOpdmlzdWFsaXNlcjwvYT48L2gzPgogICAgICAgICAgPGRpdiBpdGVtcHJvcD0iZGVzY3JpcHRpb24iPgogICAgICAgICAgICA8cD48cD5MYSBwcsOpc2VudGUgTm9ybWUgaW50ZXJuYXRpb25hbGUgZG9ubmUgZGVzIHLDqGdsZXMgcG91ciBsJ2FicsOpdmlhdGlvbiBkZXMgdGl0cmVzIGRlcyBwdWJsaWNhdGlvbnMgZW4gc8OpcmllIGV0LCBzaSBjZWxhPC9wPgo8cD5lc3QgYXBwcm9wcmnDqSwgZGVzIHB1YmxpY2F0aW9ucyBub24gcMOpcmlvZGlxdWVzIGRhbnMgbGVzIGxhbmd1ZXMgdXRpbGlzYW50IGxlcyBhbHBoYWJldHMgbGF0aW4sIGN5cmlsbGlxdWUgZXQgZ3JlYy4gTGE8L3A+CjxwPnByw6lzZW50ZSBOb3JtZSBpbnRlcm5hdGlvbmFsZSBzZXJ0IMOpZ2FsZW1lbnQgZGUgYmFzZSBwb3VyIGwnw6l0YWJsaXNzZW1lbnQgZGVzIGFicsOpdmlhdGlvbnMgZGVzIG1vdHMgZGVzIHRpdHJlczwvcD4KPHA+cGFyIGxlIHLDqXNlYXUgSVNTTi48L3A+PC9wPgogICAgICAgICAgPC9kaXY+CiAgICAgICAgICA8YnIvPgogICAgICAgIDxoMz4KICBJbmZvcm1hdGlvbnMgZ8OpbsOpcmFsZXMKICA8c3VwPjxhIGhyZWY9Ii9mci9jb250ZW50cy9kYXRhL3N0YW5kYXJkLzAwLzM1LzM1NjkuZGV0YWlsLnJzcyIgY2xhc3M9InNzLWljb24gc3Mtc29jaWFsLWNpcmNsZSB0ZXh0LXdhcm5pbmcgdGV4dC1zbSIgZGF0YS10b2dnbGU9Imlzby10b29sdGlwIiBkYXRhLW9yaWdpbmFsLXRpdGxlPSJTJ2Fib25uZXImbmJzcDthdXgmbmJzcDttaXNlcyZuYnNwO8OgJm5ic3A7am91ciI+JiN4RTMxMDs8L2E+PC9zdXA+CiAgCjwvaDM+CgogIDxwIGNsYXNzPSJoZWxwLWJsb2NrIj48c3Ryb25nPk5vdGU6IDwvc3Ryb25nPkNldHRlIG5vcm1lIGVzdCBtaXNlIMOgIGpvdXIgcGFyIHVuZSA8YSBocmVmPSIvZnIvbWFpbnRlbmFuY2VfYWdlbmNpZXMuaHRtbCMzNTY5Ij5hdXRvcml0w6kgZGUgbWlzZSDDoCBqb3VyIG91IHVuIG9yZ2FuaXNtZSBkJ2VucmVnaXN0cmVtZW50PC9hPjwvcD4KCgo8dWwgY2xhc3M9InJlZmluZSI+CiAgPGxpPgogICAgPGRpdiBjbGFzcz0icm93Ij4KICAgICAgPGRpdiBjbGFzcz0iY29sLXNtLTYiPgogICAgICAgIAoKICAgICAgICAgIDxzdHJvbmc+w4l0YXQgYWN0dWVsJm5ic3A7OiZuYnNwOyZuYnNwOzwvc3Ryb25nPjxzcGFuPjxzcGFuIGNsYXNzPSJnbHlwaGljb24gZ2x5cGhpY29uLW9rLWNpcmNsZSIgdGl0bGU9IlB1Ymxpw6llIj48L3NwYW4+UHVibGnDqWU8L3NwYW4+CiAgICAgICAgCiAgICAgIDwvZGl2PgogICAgICA8ZGl2IGNsYXNzPSJjb2wtc20tNiI+CiAgICAgICAgCiAgICAgICAgICA8c3Ryb25nPkRhdGUgZGUgcHVibGljYXRpb24mbmJzcDs6IDwvc3Ryb25nPjxzcGFuIGl0ZW1wcm9wPSJyZWxlYXNlRGF0ZSI+MTk5Ny0xMjwvc3Bhbj4KICAgICAgICAKICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KICA8L2xpPgogIDxsaT4KICAgIDxkaXYgY2xhc3M9InJvdyI+CiAgICAgIDxkaXYgY2xhc3M9ImNvbC1zbS02Ij4KICAgICAgICAKICAgICAgICAgIDxzdHJvbmc+RWRpdGlvbiZuYnNwOzo8L3N0cm9uZz4gMwogICAgICA8L2Rpdj4KICAgICAgPGRpdiBjbGFzcz0iY29sLXNtLTYiPgogICAgICAgIAogICAgICAgICAgPHN0cm9uZz5Ob21icmUgZGUgcGFnZXMmbmJzcDs6PC9zdHJvbmc+IDEyCiAgICAgIDwvZGl2PgogICAgPC9kaXY+CiAgPC9saT4KICAKICAgIDxsaT4KICAgICAgPGRpdiBjbGFzcz0iY2xlYXJmaXgiPgogICAgICAgIDxkaXYgY2xhc3M9ImVudHJ5LWxhYmVsIj5Db21pdMOpIHRlY2huaXF1ZTwvZGl2PiA6CiAgICAgICAgPGRpdiBjbGFzcz0iZW50cnktbmFtZSBlbnRyeS1ibG9jayI+CiAgICAgICAgICA8YSBocmVmPSIvZnIvY29tbWl0dGVlLzQ4ODM2Lmh0bWwiPklTTy9UQyA0Ni9TQyA5PC9hPgogICAgICAgIDwvZGl2PgogICAgICAgIDxkaXYgY2xhc3M9ImVudHJ5LXRpdGxlIj5JZGVudGlmaWNhdGlvbiBldCBkZXNjcmlwdGlvbjwvZGl2PgogICAgICA8L2Rpdj4KICAgIDwvbGk+CiAgCiAgPGxpPgogICAgPGRsIGNsYXNzPSJkbC1pbmxpbmUgbm8tYm90dG9tLW1hcmdpbiI+CiAgICAgIDxkdCBjbGFzcz0iZW50cnktbGFiZWwgZW50cnktYmxvY2siPjxzdHJvbmc+SUNTIDogPC9zdHJvbmc+PC9kdD4KICAgICAgCiAgICAgICAgPGRkPgogICAgICAgICAgPGRpdiBjbGFzcz0iZW50cnktbmFtZSBlbnRyeS1ibG9jayI+CiAgICAgICAgICAgIDxhIGhyZWY9Ii9mci9pY3MvMDEuMTQwLjQwLmh0bWwiPgogICAgICAgICAgICAgICAgMDEuMTQwLjQwCiAgICAgICAgICAgIDwvYT4KICAgICAgICAgIDwvZGl2PgogICAgICAgICAgPGRpdiBjbGFzcz0iZW50cnktdGl0bGUiPsOJZGl0aW9uPC9kaXY+CiAgICAgICAgPC9kZD4KICAgICAgCiAgICA8L2RsPgogIDwvbGk+CjwvdWw+CgogICAgPGRpdiBjbGFzcz0ic2RnLWJveCI+CiAgICAgIAogICAgICA8cD4KICAgICAgICA8aW1nIGxvYWRpbmc9ImxhenkiIHNyYz0iL2ZpbGVzL2xpdmUvc2l0ZXMvaXNvb3JnL2ZpbGVzL2RhdGEvc2RnL2ZyL3NkZy1sb2dvLnBuZyIgY2xhc3M9ImltZy1yZXNwb25zaXZlIHdpZHRoLTEwMHBjdCB3aWR0aC0zMDAiIGFsdD0iT2JqZWN0aWZzIGRlIGTDqXZlbG9wcGVtZW50IGR1cmFibGUiIC8+CiAgICAgIDwvcD4KICAgICAgPHA+CiAgICAgICAgQ2V0dGUgbm9ybWUgY29udHJpYnVlIMOgIGwnPGEgaHJlZj0iL2ZyL3NkZ3MuaHRtbCI+T2JqZWN0aWYgZGUgZMOpdmVsb3BwZW1lbnQgZHVyYWJsZTwvYT4mbmJzcDtzdWl2YW50Jm5ic3A7OgogICAgICA8cD4KICAgICAgPGRpdiBjbGFzcz0iY2xlYXJmaXgiPgogICAgICAgIAogICAgICAgICAgPGEgaHJlZj0iL2ZyL3NkZy9TREcwOS5odG1sIiB0aXRsZT0iSW5kdXN0cmllLCBpbm5vdmF0aW9uIGV0IGluZnJhc3RydWN0dXJlIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0ic2RnIHNkZy1zbSBzZGctMDkiPgogICAgICAgICAgICAgIDxkaXYgY2xhc3M9InNkZy1pY29uIj48L2Rpdj4KICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzZGctbGFiZWwiPjk8L2Rpdj4KICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzZGctdGV4dCI+SW5kdXN0cmllLCBpbm5vdmF0aW9uIGV0IGluZnJhc3RydWN0dXJlPC9kaXY+CiAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic2RnLWxvZ28iPjwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgIDwvYT4KICAgICAgICAKICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KICAKICAgICAgPC9kaXY+CgogICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtNCBjb2wtbWQtb2Zmc2V0LTEiPgogICAgICAgIAogIDxkaXYgY2xhc3M9IndlbGwgc2hhZG93LWxpZ2h0IHN0b3JlLWJveCBwcm9kdWN0LWJveCB0b3AtbWQtcHVzaC0zIiBpZD0ic3RvcmUtYm94Ij4KICAgIDxkaXYgY2xhc3M9ImJveC10ZXh0Ij4KICAgICAgPGgzPkFjaGV0ZXImbmJzcDtjZXR0ZSBub3JtZTwvaDM+CiAgICAgIDxkaXYgY2xhc3M9ImZpdC10by1ib3giPgogICAgICAgIDxzcGFuIGNsYXNzPSJsYW5ndWFnZS1wYXRoIGhpZGRlbiI+ZnI8L3NwYW4+CiAgICAgICAgPHRhYmxlIGNsYXNzPSJ0YWJsZSBvcmRlclByb2R1Y3QiPgogICAgICAgICAgPHRoZWFkPgogICAgICAgICAgPHRyPgogICAgICAgICAgICA8dGg+PC90aD4KICAgICAgICAgICAgPHRoPkZvcm1hdDwvdGg+CiAgICAgICAgICAgIDx0aCBpZD0ibGFuZ3VhZ2UiPkxhbmd1ZTwvdGg+CiAgICAgICAgICA8L3RyPgogICAgICAgICAgPC90aGVhZD4KICAgICAgICAgIDx0Ym9keT4KICAgICAgICAgIAoKICAgICAgICAgICAgPHRyIGNsYXNzPSJhY3RpdmUiPgogICAgICAgICAgICAgIDx0ZCBjbGFzcz0ic2VsZWN0aW9uIGNvbC14cy0xIj4KICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJ0eXBlIGhpZGRlbiI+c3RkPC9zcGFuPgogICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImNvdW50ZXIgaGlkZGVuIj4xPC9zcGFuPgogICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InByaWNlIGhpZGRlbiI+NTg8L3NwYW4+CiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iY2hvb3NlRm9ybWF0IGFjdGl2ZSI+PHNwYW4gY2xhc3M9ImdseXBoaWNvbiBnbHlwaGljb24tb2siPjwvc3Bhbj48L3NwYW4+CiAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICA8dGQgaWQ9ImJraWZtdF8xIiBjbGFzcz0iY29sLXhzLTEwIj4KICAgICAgICAgICAgICAgIFBERgogICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgPHRkIGNsYXNzPSJvcmRlckxhbmd1YWdlIGNvbC14cy0xIj4KICAgICAgICAgICAgICAgIDxzZWxlY3QgaWQ9ImJraV8xIiBhcmlhLWxhYmVsbGVkYnk9Imxhbmd1YWdlIj4KICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT0iMDF1YjAwMDAwMDI4THZPQUFVfmEwNWIwMDAwMDA1V1YyUkFBV35hMGZiMDAwMDAwMGVoWnVBQUl+YTBjYjAwMDAwMDFRbGhqQUFDIiBsYW5nPSJlbiI+CiAgICAgICAgICAgICAgICAgICAgICBBbmdsYWlzCiAgICAgICAgICAgICAgICAgICAgPC9vcHRpb24+CiAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9IjAxdWIwMDAwMDAyOEx2T0FBVX5hMDViMDAwMDAwNVdWMlJBQVd+YTBmYjAwMDAwMDBlaGJKQUFRfmEwY2IwMDAwMDAxUWxYM0FBSyIgbGFuZz0iZnIiIHNlbGVjdGVkPgogICAgICAgICAgICAgICAgICAgICAgRnJhbsOnYWlzCiAgICAgICAgICAgICAgICAgICAgPC9vcHRpb24+CiAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPC9zZWxlY3Q+CiAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgPC90cj4KICAgICAgICAgIAoKICAgICAgICAgICAgPHRyIGNsYXNzPSIiPgogICAgICAgICAgICAgIDx0ZCBjbGFzcz0ic2VsZWN0aW9uIGNvbC14cy0xIj4KICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJ0eXBlIGhpZGRlbiI+c3RkPC9zcGFuPgogICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImNvdW50ZXIgaGlkZGVuIj4yPC9zcGFuPgogICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InByaWNlIGhpZGRlbiI+NTg8L3NwYW4+CiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iY2hvb3NlRm9ybWF0Ij48c3BhbiBjbGFzcz0iZ2x5cGhpY29uIGdseXBoaWNvbi1vayBoaWRkZW4iPjwvc3Bhbj48L3NwYW4+CiAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICA8dGQgaWQ9ImJraWZtdF8yIiBjbGFzcz0iY29sLXhzLTEwIj4KICAgICAgICAgICAgICAgIFBhcGllcgogICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgPHRkIGNsYXNzPSJvcmRlckxhbmd1YWdlIGNvbC14cy0xIj4KICAgICAgICAgICAgICAgIDxzZWxlY3QgaWQ9ImJraV8yIiBkaXNhYmxlZCBhcmlhLWxhYmVsbGVkYnk9Imxhbmd1YWdlIj4KICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT0iMDF1YjAwMDAwMDI4THZPQUFVfmEwNWIwMDAwMDA1V1YyV0FBV35hMGZiMDAwMDAwMGVoYkVBQVF+YTBjYjAwMDAwMDFRbGhlQUFDIiBsYW5nPSJlbiI+CiAgICAgICAgICAgICAgICAgICAgICBBbmdsYWlzCiAgICAgICAgICAgICAgICAgICAgPC9vcHRpb24+CiAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9IjAxdWIwMDAwMDAyOEx2T0FBVX5hMDViMDAwMDAwNVdWMldBQVd+YTBmYjAwMDAwMDBlaGFxQUFBfmEwY2IwMDAwMDAxUWxBVUFBMCIgbGFuZz0iZnIiIHNlbGVjdGVkPgogICAgICAgICAgICAgICAgICAgICAgRnJhbsOnYWlzCiAgICAgICAgICAgICAgICAgICAgPC9vcHRpb24+CiAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPC9zZWxlY3Q+CiAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgPC90cj4KICAgICAgICAgIAogICAgICAgICAgPC90Ym9keT4KICAgICAgICA8L3RhYmxlPgogICAgICA8L2Rpdj4KICAgIDwvZGl2PgogICAgPGRpdiBjbGFzcz0iY2xlYXJmaXgiIGl0ZW1wcm9wPSJvZmZlcnMiIGl0ZW1zY29wZSBpdGVtdHlwZT0iaHR0cHM6Ly9zY2hlbWEub3JnL09mZmVyIj4KICAgICAgPHVsIGNsYXNzPSJsaXN0LWlubGluZSBwdWxsLXJpZ2h0IG9yZGVyQmFza2V0IiBpZD0iYmtpYW5jaG9yXzEiPgogICAgICAgIDxsaSBjbGFzcz0icHJpY2Ugb3JkZXIiPgogICAgICAgICAgPHNwYW4gY2xhc3M9ImN1cnJlbmN5IiBpdGVtcHJvcD0icHJpY2VDdXJyZW5jeSI+Q0hGPC9zcGFuPjxzcGFuIGNsYXNzPSJhbW91bnQiIGlkPSJwcm9kdWN0UHJpY2UiIGl0ZW1wcm9wPSJwcmljZSI+NTg8L3NwYW4+CiAgICAgICAgPC9saT4KICAgICAgICA8bGk+CiAgICAgICAgICA8YnV0dG9uIGNsYXNzPSJidG4gYnRuLXByaW1hcnkiIGlkPSJzdGFuZGFyZC1idXkiIGRhdGEtdG9nZ2xlPSJtb2RhbCIgZGF0YS10YXJnZXQ9IiNpc28tb3B0b3V0IiBvbmNsaWNrPSJqYXZhc2NyaXB0OmFkZFRvQmFza2V0KCcxJywgJ2ZyJywgJ3N0ZCcpIj4KICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImdseXBoaWNvbiBnbHlwaGljb24tc2hvcHBpbmctY2FydCI+PC9zcGFuPkFjaGV0ZXIKICAgICAgICAgIDwvYnV0dG9uPgogICAgICAgIDwvbGk+CiAgICAgIDwvdWw+CiAgICA8L2Rpdj4KICA8L2Rpdj4KCiAgPCEtLSBTVEFSVCBPRiBNT0RBTCAoQnV5IElTTy5PUkcgd2l0aCBPUFRPVVQpIC0tPgogIDxkaXYgY2xhc3M9Im1vZGFsIGZhZGUiIHRhYmluZGV4PSItMSIgcm9sZT0iZGlhbG9nIiBpZD0iaXNvLW9wdG91dCI+CiAgICA8ZGl2IGNsYXNzPSJtb2RhbC1kaWFsb2ciPgogICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1jb250ZW50Ij4KICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1ib2R5Ij4KICAgICAgICAgIDxidXR0b24gdHlwZT0iYnV0dG9uIiBjbGFzcz0iY2xvc2UiIGRhdGEtZGlzbWlzcz0ibW9kYWwiIGFyaWEtbGFiZWw9IkNsb3NlIj48c3BhbiBhcmlhLWhpZGRlbj0idHJ1ZSI+JnRpbWVzOzwvc3Bhbj48L2J1dHRvbj4KICAgICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWJvZHkgY2xlYXJmaXgiPgogICAgICAgICAgICA8ZGl2IGlkPSJtb2RhbE9wdE91dCI+PC9kaXY+CiAgICAgICAgICAgIDxkaXYgaWQ9Im1vZGFsTm9PcHRPdXQiPjwvZGl2PgogICAgICAgICAgICA8c3BhbiBpZD0icHJvY2VlZFRvQ2hlY2tvdXQiIGNsYXNzPSJoaWRkZW4iIGRhdGEtbGFiZWw9IlZhbGlkZXIgbW9uIHBhbmllciI+PC9zcGFuPgogICAgICAgICAgICA8c3BhbiBpZD0iY29udGludWVTaG9wcGluZyIgY2xhc3M9ImhpZGRlbiIgZGF0YS1sYWJlbD0iQWpvdXRlciBhdSBwYW5pZXIgZXQgY29udGludWVyIG1lcyBhY2hhdHMiPjwvc3Bhbj4KICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgICA8L2Rpdj4KICAgIDwvZGl2PgogIDwvZGl2PgogIDwhLS0gRU5EIE9GIE1PREFMIC0tPgoKCiAgICAgIDwvZGl2PgogICAgPC9kaXY+CiAgPC9kaXY+Cjwvc2VjdGlvbj4KCgo8c2VjdGlvbiBpZD0ibGlmZWN5Y2xlIj4KICA8ZGl2IGNsYXNzPSJjb250YWluZXIiPgogICAgPGRpdiBjbGFzcz0icm93Ij4KICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTEyIj4KICAgICAgICA8aDM+Q3ljbGUgZGUgdmllPC9oMz4KICAgICAgICA8YnIvPgogICAgICAgIDxkaXYgY2xhc3M9ImxpZmVjeWNsZSI+CiAgICAgICAgICA8dWwgY2xhc3M9InN0ZXBzIj4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ0aW1lLXN0ZXAiPgogICAgICAgICAgICAgICAgPGg0IGNsYXNzPSJ0ZXh0LWhlbHAiPlByw6ljw6lkZW1tZW50PC9oND4KICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3RlcCBzdGVwLW11dGVkIj4KICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InN0ZXAtaXRlbSI+CiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic2VjdGlvbi1oZWFkIj5Bbm51bMOpZTwvZGl2PgogICAgICAgICAgICAgICAgICAgIDxoNT48YSBocmVmPSIvZnIvc3RhbmRhcmQvMzU2OC5odG1sIj5JU08gNDoxOTg0PC9hPjwvaDU+CiAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAKICAgICAgICAgICAgPGxpIGNsYXNzPSJ0aW1lLXN0ZXAiPgogICAgICAgICAgICAgIDxoNCBjbGFzcz0idGV4dC1oZWxwIj5BY3R1ZWxsZW1lbnQ8L2g0PgogICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzdGVwIHN0ZXAtc3VjY2VzcyBhY3RpdmUiPgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InNlY3Rpb24taGVhZCI+UHVibGnDqWU8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICA8aDU+SVNPIDQ6MTk5NzwvaDU+CiAgICAgICAgICAgICAgICAgIDxici8+TGVzIG5vcm1lcyBJU08gc29udCByw6lleGFtaW7DqWVzIHRvdXMgbGVzIGNpbnEgYW5zPGJyLz4KICAgICAgICAgICAgICA8YSBkYXRhLXRvZ2dsZT0iY29sbGFwc2UiIHJvbGU9ImJ1dHRvbiIgYXJpYS1leHBhbmRlZD0iZmFsc2UiIGRhdGEtdGFyZ2V0PSIjc3RhZ2VzIiBjbGFzcz0iZHJvcGRvd24tdG9nZ2xlIGN1cnJlbnQtc3RhZ2UgdGV4dC1zbSI+U3RhZGU6IDxzdHJvbmc+OTAuOTM8L3N0cm9uZz4gKENvbmZpcm3DqWUpPHNwYW4gY2xhc3M9ImNhcmV0Ij48L3NwYW4+PC9hPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICA8dWwgY2xhc3M9Im5hdiBuYXZiYXItbmF2IHN0YWdlcyBjb2xsYXBzZSIgaWQ9InN0YWdlcyI+CiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJkcm9wZG93biBzdGF0ZS1pbmZvIj4KICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKSIgY2xhc3M9ImRyb3Bkb3duLXRvZ2dsZSIgZGF0YS10b2dnbGU9ImRyb3Bkb3duIiByb2xlPSJidXR0b24iIGFyaWEtaGFzcG9wdXA9InRydWUiIGFyaWEtZXhwYW5kZWQ9ImZhbHNlIj4KICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJzdGFnZS1jb2RlIj48c3Ryb25nPjAwPC9zdHJvbmc+PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzdGFnZS10aXRsZSI+UHLDqWxpbWluYWlyZTwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgIDwvYT4KCiAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJkcm9wZG93biBzdGF0ZS1pbmZvIj4KICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKSIgY2xhc3M9ImRyb3Bkb3duLXRvZ2dsZSIgZGF0YS10b2dnbGU9ImRyb3Bkb3duIiByb2xlPSJidXR0b24iIGFyaWEtaGFzcG9wdXA9InRydWUiIGFyaWEtZXhwYW5kZWQ9ImZhbHNlIj4KICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJzdGFnZS1jb2RlIj48c3Ryb25nPjEwPC9zdHJvbmc+PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzdGFnZS10aXRsZSI+UHJvcG9zaXRpb248L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICA8L2E+CgogICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZHJvcGRvd24gc3RhdGUtaW5mbyI+CiAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCkiIGNsYXNzPSJkcm9wZG93bi10b2dnbGUiIGRhdGEtdG9nZ2xlPSJkcm9wZG93biIgcm9sZT0iYnV0dG9uIiBhcmlhLWhhc3BvcHVwPSJ0cnVlIiBhcmlhLWV4cGFuZGVkPSJmYWxzZSI+CiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ic3RhZ2UtY29kZSI+PHN0cm9uZz4yMDwvc3Ryb25nPjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3RhZ2UtdGl0bGUiPlByw6lwYXJhdGlvbjwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iY2FyZXQiPjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICA8L2E+CgogICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZHJvcGRvd24tbWVudSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL2ZyL3N0YWdlLWNvZGVzLmh0bWwjMjBfMDAiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ic3RhZ2UtY29kZSI+MjAuMDA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJzdGFnZS1kYXRlIj4xOTkxLTA0LTAxPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzdGFnZS10aXRsZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTm91dmVhdSBwcm9qZXQgZW5yZWdpc3Ryw6kgYXUgcHJvZ3JhbW1lIGRlIHRyYXZhaWwgZHUgVEMvU0MKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImRyb3Bkb3duIHN0YXRlLWluZm8iPgogICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApIiBjbGFzcz0iZHJvcGRvd24tdG9nZ2xlIiBkYXRhLXRvZ2dsZT0iZHJvcGRvd24iIHJvbGU9ImJ1dHRvbiIgYXJpYS1oYXNwb3B1cD0idHJ1ZSIgYXJpYS1leHBhbmRlZD0iZmFsc2UiPgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InN0YWdlLWNvZGUiPjxzdHJvbmc+MzA8L3N0cm9uZz48L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InN0YWdlLXRpdGxlIj5Db21pdMOpPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJjYXJldCI+PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgIDwvYT4KCiAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJkcm9wZG93bi1tZW51Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvZnIvc3RhZ2UtY29kZXMuaHRtbCMzMF8wMCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJzdGFnZS1jb2RlIj4zMC4wMDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InN0YWdlLWRhdGUiPjE5OTEtMDktMDE8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InN0YWdlLXRpdGxlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBQcm9qZXQgZGUgY29taXTDqSAoQ0QpIGVucmVnaXN0csOpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9mci9zdGFnZS1jb2Rlcy5odG1sIzMwXzIwIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InN0YWdlLWNvZGUiPjMwLjIwPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ic3RhZ2UtZGF0ZSI+MTk5MS0wOS0wMTwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3RhZ2UtdGl0bGUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE1pc2Ugw6AgbCfDqXR1ZGUvYXUgdm90ZSBkdSBDRAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvZnIvc3RhZ2UtY29kZXMuaHRtbCMzMF85OSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJzdGFnZS1jb2RlIj4zMC45OTwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InN0YWdlLWRhdGUiPjE5OTItMDUtMjE8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InN0YWdlLXRpdGxlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBDRCBhcHByb3V2w6kgcG91ciBlbnJlZ2lzdHJlbWVudCBjb21tZSBESVMKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImRyb3Bkb3duIHN0YXRlLWluZm8iPgogICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApIiBjbGFzcz0iZHJvcGRvd24tdG9nZ2xlIiBkYXRhLXRvZ2dsZT0iZHJvcGRvd24iIHJvbGU9ImJ1dHRvbiIgYXJpYS1oYXNwb3B1cD0idHJ1ZSIgYXJpYS1leHBhbmRlZD0iZmFsc2UiPgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InN0YWdlLWNvZGUiPjxzdHJvbmc+NDA8L3N0cm9uZz48L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InN0YWdlLXRpdGxlIj5FbnF1w6p0ZTwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iY2FyZXQiPjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICA8L2E+CgogICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZHJvcGRvd24tbWVudSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL2ZyL3N0YWdlLWNvZGVzLmh0bWwjNDBfMDAiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ic3RhZ2UtY29kZSI+NDAuMDA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJzdGFnZS1kYXRlIj4xOTkzLTA3LTA1PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzdGFnZS10aXRsZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRElTIGVucmVnaXN0csOpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9mci9zdGFnZS1jb2Rlcy5odG1sIzQwXzIwIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InN0YWdlLWNvZGUiPjQwLjIwPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ic3RhZ2UtZGF0ZSI+MTk5My0wNy0yOTwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3RhZ2UtdGl0bGUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE1pc2UgYXUgdm90ZSBkdSBESVM6ICAxMiBzZW1haW5lcwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvZnIvc3RhZ2UtY29kZXMuaHRtbCM0MF82MCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJzdGFnZS1jb2RlIj40MC42MDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InN0YWdlLWRhdGUiPjE5OTQtMDMtMDI8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InN0YWdlLXRpdGxlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBDbMO0dHVyZSBkdSB2b3RlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJkcm9wZG93biBzdGF0ZS1pbmZvIj4KICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKSIgY2xhc3M9ImRyb3Bkb3duLXRvZ2dsZSIgZGF0YS10b2dnbGU9ImRyb3Bkb3duIiByb2xlPSJidXR0b24iIGFyaWEtaGFzcG9wdXA9InRydWUiIGFyaWEtZXhwYW5kZWQ9ImZhbHNlIj4KICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJzdGFnZS1jb2RlIj48c3Ryb25nPjUwPC9zdHJvbmc+PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzdGFnZS10aXRsZSI+QXBwcm9iYXRpb248L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImNhcmV0Ij48L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgPC9hPgoKICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImRyb3Bkb3duLW1lbnUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9mci9zdGFnZS1jb2Rlcy5odG1sIzUwXzAwIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InN0YWdlLWNvZGUiPjUwLjAwPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ic3RhZ2UtZGF0ZSI+MTk5Ny0wMi0yMTwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3RhZ2UtdGl0bGUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFRleHRlIGZpbmFsIHJlw6d1IG91IEZESVMgZW5yZWdpc3Ryw6kgcG91ciBhcHByb2JhdGlvbiBmb3JtZWxsZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvZnIvc3RhZ2UtY29kZXMuaHRtbCM1MF8yMCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJzdGFnZS1jb2RlIj41MC4yMDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InN0YWdlLWRhdGUiPjE5OTctMDYtMTk8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InN0YWdlLXRpdGxlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBFcHJldXZlIGVudm95w6llIGF1IHNlY3LDqXRhcmlhdCBvdSBtaXNlIGF1IHZvdGUgZHUgRkRJUzogOCBzZW1haW5lcwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvZnIvc3RhZ2UtY29kZXMuaHRtbCM1MF82MCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJzdGFnZS1jb2RlIj41MC42MDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InN0YWdlLWRhdGUiPjE5OTctMTAtMTY8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InN0YWdlLXRpdGxlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBDbMO0dHVyZSBkdSB2b3RlIEVwcmV1dmUgcmV0b3VybsOpZSBwYXIgbGUgc2VjcsOpdGFyaWF0CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJkcm9wZG93biBzdGF0ZS1zdWNjZXNzIj4KICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKSIgY2xhc3M9ImRyb3Bkb3duLXRvZ2dsZSIgZGF0YS10b2dnbGU9ImRyb3Bkb3duIiByb2xlPSJidXR0b24iIGFyaWEtaGFzcG9wdXA9InRydWUiIGFyaWEtZXhwYW5kZWQ9ImZhbHNlIj4KICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJzdGFnZS1jb2RlIj48c3Ryb25nPjYwPC9zdHJvbmc+PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzdGFnZS10aXRsZSI+UHVibGljYXRpb248L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImNhcmV0Ij48L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgPC9hPgoKICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImRyb3Bkb3duLW1lbnUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9mci9zdGFnZS1jb2Rlcy5odG1sIzYwXzYwIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InN0YWdlLWNvZGUiPjYwLjYwPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ic3RhZ2UtZGF0ZSI+MTk5Ny0xMi0xODwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3RhZ2UtdGl0bGUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE5vcm1lIGludGVybmF0aW9uYWxlIHB1Ymxpw6llCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJkcm9wZG93biBiZy1zdWNjZXNzIGFjdGl2ZSI+CiAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCkiIGNsYXNzPSJkcm9wZG93bi10b2dnbGUiIGRhdGEtdG9nZ2xlPSJkcm9wZG93biIgcm9sZT0iYnV0dG9uIiBhcmlhLWhhc3BvcHVwPSJ0cnVlIiBhcmlhLWV4cGFuZGVkPSJmYWxzZSI+CiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ic3RhZ2UtY29kZSI+PHN0cm9uZz45MDwvc3Ryb25nPjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3RhZ2UtdGl0bGUiPkV4YW1lbjwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iY2FyZXQiPjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICA8L2E+CgogICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZHJvcGRvd24tbWVudSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgIGNsYXNzPSdsaXN0LXNlcGFyYXRpb24nPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL2ZyL3N0YWdlLWNvZGVzLmh0bWwjOTBfMjAiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ic3RhZ2UtY29kZSI+OTAuMjA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJzdGFnZS1kYXRlIj4yMDAxLTExLTE1PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzdGFnZS10aXRsZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTm9ybWUgaW50ZXJuYXRpb25hbGUgZW4gY291cnMgZCdleGFtZW4gc3lzdMOpbWF0aXF1ZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvZnIvc3RhZ2UtY29kZXMuaHRtbCM5MF82MCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJzdGFnZS1jb2RlIj45MC42MDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InN0YWdlLWRhdGUiPjIwMDItMTItMDE8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InN0YWdlLXRpdGxlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBDbMO0dHVyZSBkZSBsJ2V4YW1lbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvZnIvc3RhZ2UtY29kZXMuaHRtbCM5MF85MyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJzdGFnZS1jb2RlIj45MC45Mzwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InN0YWdlLWRhdGUiPjIwMDMtMTItMDE8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InN0YWdlLXRpdGxlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBOb3JtZSBpbnRlcm5hdGlvbmFsZSBjb25maXJtw6llCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpICBjbGFzcz0nbGlzdC1zZXBhcmF0aW9uJz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9mci9zdGFnZS1jb2Rlcy5odG1sIzkwXzIwIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InN0YWdlLWNvZGUiPjkwLjIwPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ic3RhZ2UtZGF0ZSI+MjAwOC0xMC0xNTwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3RhZ2UtdGl0bGUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE5vcm1lIGludGVybmF0aW9uYWxlIGVuIGNvdXJzIGQnZXhhbWVuIHN5c3TDqW1hdGlxdWUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL2ZyL3N0YWdlLWNvZGVzLmh0bWwjOTBfNjAiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ic3RhZ2UtY29kZSI+OTAuNjA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJzdGFnZS1kYXRlIj4yMDA5LTAzLTE4PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzdGFnZS10aXRsZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQ2zDtHR1cmUgZGUgbCdleGFtZW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL2ZyL3N0YWdlLWNvZGVzLmh0bWwjOTBfOTMiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ic3RhZ2UtY29kZSI+OTAuOTM8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJzdGFnZS1kYXRlIj4yMDA5LTA3LTEwPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzdGFnZS10aXRsZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTm9ybWUgaW50ZXJuYXRpb25hbGUgY29uZmlybcOpZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSAgY2xhc3M9J2xpc3Qtc2VwYXJhdGlvbic+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvZnIvc3RhZ2UtY29kZXMuaHRtbCM5MF8yMCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJzdGFnZS1jb2RlIj45MC4yMDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InN0YWdlLWRhdGUiPjIwMTQtMDctMTU8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InN0YWdlLXRpdGxlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBOb3JtZSBpbnRlcm5hdGlvbmFsZSBlbiBjb3VycyBkJ2V4YW1lbiBzeXN0w6ltYXRpcXVlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9mci9zdGFnZS1jb2Rlcy5odG1sIzkwXzYwIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InN0YWdlLWNvZGUiPjkwLjYwPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ic3RhZ2UtZGF0ZSI+MjAxNC0xMi0xNzwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3RhZ2UtdGl0bGUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIENsw7R0dXJlIGRlIGwnZXhhbWVuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9mci9zdGFnZS1jb2Rlcy5odG1sIzkwXzkzIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InN0YWdlLWNvZGUiPjkwLjkzPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ic3RhZ2UtZGF0ZSI+MjAxNC0xMi0yMzwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3RhZ2UtdGl0bGUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE5vcm1lIGludGVybmF0aW9uYWxlIGNvbmZpcm3DqWUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgIGNsYXNzPSdsaXN0LXNlcGFyYXRpb24nPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL2ZyL3N0YWdlLWNvZGVzLmh0bWwjOTBfMjAiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ic3RhZ2UtY29kZSI+OTAuMjA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJzdGFnZS1kYXRlIj4yMDE5LTEwLTE1PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzdGFnZS10aXRsZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTm9ybWUgaW50ZXJuYXRpb25hbGUgZW4gY291cnMgZCdleGFtZW4gc3lzdMOpbWF0aXF1ZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvZnIvc3RhZ2UtY29kZXMuaHRtbCM5MF82MCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJzdGFnZS1jb2RlIj45MC42MDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InN0YWdlLWRhdGUiPjIwMjAtMDMtMDQ8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InN0YWdlLXRpdGxlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBDbMO0dHVyZSBkZSBsJ2V4YW1lbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iYWN0aXZlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9mci9zdGFnZS1jb2Rlcy5odG1sIzkwXzkzIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InN0YWdlLWNvZGUiPjkwLjkzPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ic3RhZ2UtZGF0ZSI+MjAyMC0wMy0xNzwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3RhZ2UtdGl0bGUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE5vcm1lIGludGVybmF0aW9uYWxlIGNvbmZpcm3DqWUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL2ZyL3N0YWdlLWNvZGVzLmh0bWwjOTBfOTkiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ic3RhZ2UtY29kZSI+OTAuOTk8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJzdGFnZS1kYXRlIj48L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InN0YWdlLXRpdGxlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBbm51bGF0aW9uIGRlIGxhIE5vcm1lIGludGVybmF0aW9uYWxlIHByb3Bvc8OpZSBwYXIgbGUgVEMgb3UgU0MKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImRyb3Bkb3duIHN0YXRlLW11dGVkIj4KICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKSIgY2xhc3M9ImRyb3Bkb3duLXRvZ2dsZSIgZGF0YS10b2dnbGU9ImRyb3Bkb3duIiByb2xlPSJidXR0b24iIGFyaWEtaGFzcG9wdXA9InRydWUiIGFyaWEtZXhwYW5kZWQ9ImZhbHNlIj4KICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJzdGFnZS1jb2RlIj48c3Ryb25nPjk1PC9zdHJvbmc+PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzdGFnZS10aXRsZSI+QW5udWxhdGlvbjwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iY2FyZXQiPjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICA8L2E+CgogICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZHJvcGRvd24tbWVudSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL2ZyL3N0YWdlLWNvZGVzLmh0bWwjOTVfOTkiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ic3RhZ2UtY29kZSI+OTUuOTk8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJzdGFnZS1kYXRlIj48L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InN0YWdlLXRpdGxlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBbm51bGF0aW9uIGRlIGxhIE5vcm1lIGludGVybmF0aW9uYWxlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICA8L3VsPgoKICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgIAogICAgICAgICAgPC91bD4KICAgICAgICA8L2Rpdj4KICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KICA8L2Rpdj4KPC9zZWN0aW9uPgo8c2VjdGlvbiBjbGFzcz0iYmctaW5mbyIgaWQ9ImNvbnRhY3QiPgogIDxkaXYgY2xhc3M9ImNvbnRhaW5lciI+CiAgICA8ZGl2IGNsYXNzPSJyb3ciPgogICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtNCI+CiAgICAgICAgPGg0PlZvdXMgYXZleiB1bmUgcXVlc3Rpb24/PC9oND4KCjxwPkNvbnN1bHRlciBub3RyZSZuYnNwOzxhIGhyZWY9Ii9mci9mcmVxdWVudGx5LWFza2VkLXF1ZXN0aW9ucy1mYXFzLmh0bWwiIHRpdGxlPSJGb2lyZSBBdXggUXVlc3Rpb25zIChGQVFzKSI+RkFRPC9hPjwvcD4KICAgICAgPC9kaXY+CiAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC00Ij4KICAgICAgICA8ZGl2IGNsYXNzPSJ2Y2FyZCBjb250YWN0IG5vLWZpZ3VyZSBjbGVhcmZpeCIgaXRlbXNjb3BlPSIiIGl0ZW10eXBlPSJodHRwOi8vc2NoZW1hLm9yZy9QZXJzb24iPgo8ZGl2IGNsYXNzPSJjb250ZW50LWJveCBuby1pbWFnZSI+CjxkaXYgY2xhc3M9ImZuIG4iPjxzcGFuIGNsYXNzPSJnaXZlbi1uYW1lIiBpdGVtcHJvcD0iZ2l2ZW5OYW1lIj5TZXJ2aWNlICZhZ3JhdmU7IGxhIGNsaWVudCZlZ3JhdmU7bGU8L3NwYW4+PC9kaXY+Cgo8ZGl2IGNsYXNzPSJ0ZWwiIGl0ZW1wcm9wPSJ0ZWxlcGhvbmUiPis0MSAyMiA3NDkgMDggODg8L2Rpdj4KCjxkaXYgY2xhc3M9ImVtYWlsIiBpdGVtcHJvcD0iZW1haWwiPjxhIGhyZWY9Im1haWx0bzpjdXN0b21lcnNlcnZpY2VAaXNvLm9yZyI+Y3VzdG9tZXJzZXJ2aWNlQGlzby5vcmc8L2E+PC9kaXY+Cgo8aHIgLz4KPGRpdiBjbGFzcz0ibm90ZSI+CjxwIGNsYXNzPSJzbWFsbCI+SG9yYWlyZXMgZCZyc3F1bztvdXZlcnR1cmU6PGJyIC8+CkRlIGx1bmRpICZhZ3JhdmU7IHZlbmRyZWRpIC0gMDk6MDAtMTI6MDAsIDE0OjAwLTE3OjAwIChVVEMrMSk8L3A+CjwvZGl2Pgo8L2Rpdj4KPC9kaXY+CiAgICAgIDwvZGl2PgogICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtNCI+CiAgICAgICAgPGRpdiBjbGFzcz0id2VsbCB0ZXh0LWNlbnRlciBjbGVhcmZpeCI+CiAgPGg0PlN1aXZleiBsJiMzOTthY3R1YWxpdCZlYWN1dGU7IGRlIGwmIzM5O0lTTzwvaDQ+Cgo8cD5JbnNjcml2ZXotdm91cyAmYWdyYXZlOyBub3RyZSBOZXdzbGV0dGVyIChlbiBhbmdsYWlzKSBwb3VyIHN1aXZyZSBub3MgYWN0dWFsaXQmZWFjdXRlO3MsIHBvaW50cyBkZSB2dWUgZXQgaW5mb3JtYXRpb25zIHN1ciBub3MgcHJvZHVpdHMuPC9wPjxkaXY+PGEgY2xhc3M9ImJ0biBidG4tcHJpbWFyeSIgZGF0YS1mYW5jeWJveD0iIiBkYXRhLXR5cGU9ImlmcmFtZSIgaHJlZj0iaHR0cHM6Ly9jb25maXJtc3Vic2NyaXB0aW9uLmNvbS9oL2QvMzQxMkRBNzk5M0FDM0I3QyI+U3Vic2NyaWJlPC9hPjwvZGl2Pgo8c3R5bGUgdHlwZT0idGV4dC9jc3MiPi5mYW5jeWJveC1zbGlkZS0taWZyYW1lIC5mYW5jeWJveC1jb250ZW50IHsKIHdpZHRoICA6IDUwMHB4OwogaGVpZ2h0IDogNjAwcHg7CiBtYXgtd2lkdGggIDogODAlOwogbWF4LWhlaWdodCA6IDgwJTsKIG1hcmdpbjogMDsKfQouZmFuY3lib3gtc2xpZGUtLWlmcmFtZSAuZmFuY3lib3gtY29udGVudCAubC1wYWdlLWNvbnRhaW5lciB7CnBhZGRpbmctdG9wOiAxLjVyZW0gIWltcG9ydGFudDsKfQo8L3N0eWxlPgo8L2Rpdj4KICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KICA8L2Rpdj4KPC9zZWN0aW9uPjxkaXYgY2xhc3M9ImNsZWFyIj48L2Rpdj4KICAgICAgPGRpdiBjbGFzcz0ibmF2LWJyZWFkY3J1bWIgcHJpbnQtZm9vdGVyIGJnLWRhcmtncmF5Ij4KICAgICAgICA8ZGl2IGNsYXNzPSJjb250YWluZXIiPgogICAgICAgICAgPGRpdiBjbGFzcz0icm93Ij4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLXNtLTggc21hbGwiPgogICAgICAgICAgICAgIDwhLS0gQlJFQURDUlVNQiAtLT4KICAgICAgICAgICAgICA8b2wgY2xhc3M9ImJyZWFkY3J1bWIiPgogICAgCiAgICAgIDxsaT48YSBocmVmPSIvZnIvaG9tZS5odG1sIiB0aXRsZT0iUGFnZSBkJ2FjY3VlaWwiPjxzcGFuIGNsYXNzPSJnbHlwaGljb24gZ2x5cGhpY29uLWhvbWUiIGFyaWEtaGlkZGVuPSJ0cnVlIj48L3NwYW4+PC9hPjwvbGk+CiAgICAKICAgICAgICA8bGk+CiAgICAgICAgICAKICAgICAgICAgICAgICA8YSBocmVmPSIvZnIvc3RvcmUuaHRtbCI+U3RvcmU8L2E+CiAgICAgICAgICAgIAogICAgICAgIDwvbGk+CiAgICAgIAogICAgICAgIDxsaT4KICAgICAgICAgIAo8YSBocmVmPSIvZnIvc3RhbmRhcmRzLWNhdGFsb2d1ZS9icm93c2UtYnktaWNzLmh0bWwiID5DYXRhbG9ndWUgZGUgbm9ybWVzPC9hPgoKICAgICAgICA8L2xpPgogICAgICAKICAgICAgICA8bGk+CiAgICAgICAgICAKICAgICAgICAgICAgICA8YSBocmVmPSIvZnIvc3RhbmRhcmRzLWNhdGFsb2d1ZS9icm93c2UtYnktaWNzLmh0bWwiPklDUzwvYT4KICAgICAgICAgICAgCiAgICAgICAgPC9saT4KICAgICAgPGxpPjxhIGhyZWY9Ii9mci9pY3MvMDEuaHRtbCI+MDE8L2E+PC9saT4KICAgIAogICAgICA8bGk+PGEgaHJlZj0iL2ZyL2ljcy8wMS4xNDAuaHRtbCI+MDEuMTQwPC9hPjwvbGk+CiAgICAKICAgICAgPGxpPjxhIGhyZWY9Ii9mci9pY3MvMDEuMTQwLjQwLmh0bWwiPjAxLjE0MC40MDwvYT48L2xpPgogICAgPGxpPklTTyA0OjE5OTc8L2xpPgogIDwvb2w+PGRpdiBjbGFzcz0iY2xlYXIiPjwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLXNtLTQgaGlkZGVuLXByaW50IHRleHQtcmlnaHQgc21hbGwiPgogICAgICAgICAgICAgIDxhIHJvbGU9ImJ1dHRvbiIgY2xhc3M9ImFjY29yZGlvbi10b2dnbGUgY29sbGFwc2VkIiBkYXRhLXRvZ2dsZT0iY29sbGFwc2UiIGhyZWY9IiNjb2xsYXBzZVNpdGVtYXAiIHRhcmdldD0iX3NlbGYiIGFyaWEtZXhwYW5kZWQ9ImZhbHNlIgogICAgICAgICAgICAgICAgIGFyaWEtY29udHJvbHM9ImNvbGxhcHNlU2l0ZW1hcCI+UGxhbiBkdSBzaXRlPC9hPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbGxhcHNlIGJvcmRlci10b3AiIGlkPSJjb2xsYXBzZVNpdGVtYXAiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3ciPgogICAgICAgICAgICAgIDwhLS0gU0lURU1BUCAtLT4KICAgICAgICAgICAgICA8bmF2IHJvbGU9Im5hdmlnYXRpb24iIGFyaWEtbGFiZWw9IlNpdGVtYXAiIGNsYXNzPSJzaXRlbWFwLWZvb3RlciBjbGVhcmZpeCBzbWFsbCIgaWQ9Im5hdi1zaXRlbWFwIj48dWwgcm9sZT0ibWVudWJhciIgY2xhc3M9Im5hdi1sZXZlbDEgbGlzdC1pbmxpbmUtNSBjbGVhcmZpeCI+PGxpIHJvbGU9Im5vbmUiIGNsYXNzPSJoYXNDaGlsZHJlbiBmaXJzdEluTGV2ZWwiPjxhIHJvbGU9Im1lbnVpdGVtIiBocmVmPSIvZnIvc3RhbmRhcmRzLmh0bWwiPk5vcm1lczwvYT48dWwgcm9sZT0ibWVudSIgY2xhc3M9Im5hdi1sZXZlbDIgbGlzdC11bnN0eWxlZCI+PGxpIHJvbGU9Im5vbmUiIGNsYXNzPSJub0NoaWxkcmVuIGZpcnN0SW5MZXZlbCI+PGEgcm9sZT0ibWVudWl0ZW0iIGhyZWY9Ii9mci9iZW5lZml0cy1vZi1zdGFuZGFyZHMuaHRtbCI+QXZhbnRhZ2VzPC9hPjwvbGk+PGxpIHJvbGU9Im5vbmUiIGNsYXNzPSJub0NoaWxkcmVuIj48YSByb2xlPSJtZW51aXRlbSIgaHJlZj0iL2ZyL3BvcHVsYXItc3RhbmRhcmRzLmh0bWwiPkxlcyBub3JtZXMgbGVzIHBsdXMgY29ubnVlczwvYT48L2xpPjxsaSByb2xlPSJub25lIiBjbGFzcz0ibm9DaGlsZHJlbiI+PGEgcm9sZT0ibWVudWl0ZW0iIGhyZWY9Ii9mci9jb25mb3JtaXR5LWFzc2Vzc21lbnQuaHRtbCI+Q2VydGlmaWNhdGlvbiAmIGNvbmZvcm1pdMOpPC9hPjwvbGk+PGxpIHJvbGU9Im5vbmUiIGNsYXNzPSJub0NoaWxkcmVuIGxhc3RJbkxldmVsIj48YSByb2xlPSJtZW51aXRlbSIgaHJlZj0iL2ZyL3NkZ3MuaHRtbCI+T0REPC9hPjwvbGk+PC91bD48IS0tIGNsb3NlIG9mIHVsIGxldmVsIC0tPjwvbGk+PGxpIHJvbGU9Im5vbmUiIGNsYXNzPSJoYXNDaGlsZHJlbiI+PGEgcm9sZT0ibWVudWl0ZW0iIGhyZWY9Ii9mci9hYm91dC11cy5odG1sIj7DgCBwcm9wb3MgZGUgbCdJU088L2E+PHVsIHJvbGU9Im1lbnUiIGNsYXNzPSJuYXYtbGV2ZWwyIGxpc3QtdW5zdHlsZWQiPjxsaSByb2xlPSJub25lIiBjbGFzcz0ibm9DaGlsZHJlbiBmaXJzdEluTGV2ZWwiPjxhIHJvbGU9Im1lbnVpdGVtIiBocmVmPSIvZnIvd2hhdC13ZS1kby5odG1sIj5Ob3MgYWN0aXZpdMOpczwvYT48L2xpPjxsaSByb2xlPSJub25lIiBjbGFzcz0ibm9DaGlsZHJlbiI+PGEgcm9sZT0ibWVudWl0ZW0iIGhyZWY9Ii9mci9zdHJ1Y3R1cmUuaHRtbCI+U3RydWN0dXJlPC9hPjwvbGk+PGxpIHJvbGU9Im5vbmUiIGNsYXNzPSJub0NoaWxkcmVuIj48YSByb2xlPSJtZW51aXRlbSIgaHJlZj0iL2ZyL21lbWJlcnMuaHRtbCI+TWVtYnJlczwvYT48L2xpPjxsaSByb2xlPSJub25lIiBjbGFzcz0ibm9DaGlsZHJlbiBsYXN0SW5MZXZlbCI+PGEgcm9sZT0ibWVudWl0ZW0iIGhyZWY9Ii9mci9zdHJhdGVneTIwMzAuaHRtbCI+U3RyYXTDqWdpZSAyMDMwPC9hPjwvbGk+PC91bD48IS0tIGNsb3NlIG9mIHVsIGxldmVsIC0tPjwvbGk+PGxpIHJvbGU9Im5vbmUiIGNsYXNzPSJoYXNDaGlsZHJlbiI+PGEgcm9sZT0ibWVudWl0ZW0iIGhyZWY9Ii9mci9uZXdzLmh0bWwiPkFjdHVhbGl0w6lzPC9hPjx1bCByb2xlPSJtZW51IiBjbGFzcz0ibmF2LWxldmVsMiBsaXN0LXVuc3R5bGVkIj48bGkgcm9sZT0ibm9uZSIgY2xhc3M9Im5vQ2hpbGRyZW4iPjxhIHJvbGU9Im1lbnVpdGVtIiBocmVmPSIvZnIvZXZlbnRzLmh0bWwiPk1hbmlmZXN0YXRpb25zPC9hPjwvbGk+PGxpIHJvbGU9Im5vbmUiIGNsYXNzPSJub0NoaWxkcmVuIj48YSByb2xlPSJtZW51aXRlbSIgaHJlZj0iL2ZyL21lZGlhLWtpdC5odG1sIj5Eb3NzaWVyIG3DqWRpYXM8L2E+PC9saT48L3VsPjwhLS0gY2xvc2Ugb2YgdWwgbGV2ZWwgLS0+PC9saT48bGkgcm9sZT0ibm9uZSIgY2xhc3M9Imhhc0NoaWxkcmVuIj48YSByb2xlPSJtZW51aXRlbSIgaHJlZj0iL2ZyL2RldmVsb3Bpbmctc3RhbmRhcmRzLmh0bWwiPlBhcnRpY2lwZXI8L2E+PHVsIHJvbGU9Im1lbnUiIGNsYXNzPSJuYXYtbGV2ZWwyIGxpc3QtdW5zdHlsZWQiPjxsaSByb2xlPSJub25lIiBjbGFzcz0ibm9DaGlsZHJlbiBmaXJzdEluTGV2ZWwiPjxhIHJvbGU9Im1lbnVpdGVtIiBocmVmPSIvZnIvd2hvLWRldmVsb3BzLXN0YW5kYXJkcy5odG1sIj5RdWkgw6lsYWJvcmUgbGVzIG5vcm1lczwvYT48L2xpPjxsaSByb2xlPSJub25lIiBjbGFzcz0ibm9DaGlsZHJlbiI+PGEgcm9sZT0ibWVudWl0ZW0iIGhyZWY9Ii9mci9kZWxpdmVyYWJsZXMtYWxsLmh0bWwiPkxpdnJhYmxlczwvYT48L2xpPjxsaSByb2xlPSJub25lIiBjbGFzcz0ibm9DaGlsZHJlbiI+PGEgcm9sZT0ibWVudWl0ZW0iIGhyZWY9Ii9mci9nZXQtaW52b2x2ZWQuaHRtbCI+UG91cnF1b2kgc+KAmWVuZ2FnZXIgPzwvYT48L2xpPjxsaSByb2xlPSJub25lIiBjbGFzcz0ibm9DaGlsZHJlbiBsYXN0SW5MZXZlbCI+PGEgcm9sZT0ibWVudWl0ZW0iIGhyZWY9Ii9mci9yZXNvdXJjZXMuaHRtbCI+UmVzc291cmNlczwvYT48L2xpPjwvdWw+PCEtLSBjbG9zZSBvZiB1bCBsZXZlbCAtLT48L2xpPjxsaSByb2xlPSJub25lIiBjbGFzcz0iaGFzQ2hpbGRyZW4gaW5QYXRoIGxhc3RJbkxldmVsIj48YSByb2xlPSJtZW51aXRlbSIgaHJlZj0iL2ZyL3N0b3JlLmh0bWwiPlN0b3JlPC9hPjx1bCByb2xlPSJtZW51IiBjbGFzcz0ibmF2LWxldmVsMiBsaXN0LXVuc3R5bGVkIj48bGkgcm9sZT0ibm9uZSIgY2xhc3M9Im5vQ2hpbGRyZW4gaW5QYXRoIGFjdGl2ZSBmaXJzdEluTGV2ZWwiPjxhIHJvbGU9Im1lbnVpdGVtIiBocmVmPSIvZnIvc3RhbmRhcmRzLWNhdGFsb2d1ZS9icm93c2UtYnktaWNzLmh0bWwiID5DYXRhbG9ndWUgZGUgbm9ybWVzPC9hPjwvbGk+PGxpIHJvbGU9Im5vbmUiIGNsYXNzPSJub0NoaWxkcmVuIj48YSByb2xlPSJtZW51aXRlbSIgaHJlZj0iL2ZyL3B1YmxpY2F0aW9uLWxpc3QuaHRtbCI+UHVibGljYXRpb25zIGV0IHByb2R1aXRzPC9hPjwvbGk+PC91bD48IS0tIGNsb3NlIG9mIHVsIGxldmVsIC0tPjwvbGk+PC91bD48IS0tIGNsb3NlIG9mIHVsIGxldmVsIC0tPjwvbmF2PjxkaXYgY2xhc3M9ImNsZWFyIj48L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgICAgPC9kaXY+CgogICAgICAKICAgICAgPGZvb3RlciByb2xlPSJjb250ZW50aW5mbyIgYXJpYS1sYWJlbD0iRm9vdGVyIiBjbGFzcz0iZm9vdGVyLWlzbyBmb290ZXItZGFyayBiZy1kYXJrZXJncmF5Ij4KICAgICAgICA8ZGl2IGNsYXNzPSJjb250YWluZXIiPgogICAgICAgICAgPGRpdiBjbGFzcz0iZm9vdGVyLWxpbmtzIGNlbnRlci1ibG9jayI+CiAgICAgICAgICAgIDwhLS0gRk9PVEVSIExJTktTIC0tPgogICAgICAgICAgICA8bmF2IHJvbGU9Im5hdmlnYXRpb24iIGFyaWEtbGFiZWw9IklubGluZSBOYXZpZ2F0aW9uIiAgPjx1bCByb2xlPSJtZW51YmFyIiBjbGFzcz0ibGlzdC1pbmxpbmUgY2xlYXJmaXggbmF2LWxldmVsMSI+PGxpIHJvbGU9Im5vbmUiIGNsYXNzPSJub0NoaWxkcmVuIGZpcnN0SW5MZXZlbCI+PGEgcm9sZT0ibWVudWl0ZW0iIGhyZWY9Ii9mci9pc28tbmFtZS1hbmQtbG9nby5odG1sIj5Ob20gZXQgbG9nbyBkZSBsJ0lTTzwvYT48L2xpPjxsaSByb2xlPSJub25lIiBjbGFzcz0ibm9DaGlsZHJlbiI+PGEgcm9sZT0ibWVudWl0ZW0iIGhyZWY9Ii9mci9wcml2YWN5LWFuZC1jb3B5cmlnaHQuaHRtbCI+Q29uZmlkZW50aWFsaXTDqSBldCBkcm9pdCBkJ2F1dGV1cjwvYT48L2xpPjxsaSByb2xlPSJub25lIiBjbGFzcz0ibm9DaGlsZHJlbiI+PGEgcm9sZT0ibWVudWl0ZW0iIGhyZWY9Ii9mci93b3JraW5nLXdpdGgtaXNvLmh0bWwiID5FbXBsb2k8L2E+PC9saT48bGkgcm9sZT0ibm9uZSIgY2xhc3M9Im5vQ2hpbGRyZW4iPjxhIHJvbGU9Im1lbnVpdGVtIiBocmVmPSIvZnIvZnJlcXVlbnRseS1hc2tlZC1xdWVzdGlvbnMtZmFxcy5odG1sIj5GQVE8L2E+PC9saT48bGkgcm9sZT0ibm9uZSIgY2xhc3M9Im5vQ2hpbGRyZW4gbGFzdEluTGV2ZWwiPjxhIHJvbGU9Im1lbnVpdGVtIiBocmVmPSIvZnIvY29udGFjdC1pc28uaHRtbCI+Q29udGFjdGVyIGwnSVNPPC9hPjwvbGk+PC91bD48IS0tIGNsb3NlIG9mIHVsIGxldmVsIC0tPjwvbmF2PjxkaXYgY2xhc3M9ImNsZWFyIj48L2Rpdj4KICAgICAgICAgIDwvZGl2PgogICAgICAgICAgPGRpdiBjbGFzcz0iZm9vdGVyLXNvY2lhbCBzcy1pY29uIGNsZWFyZml4Ij4KICAgICAgICAgICAgPHVsIGl0ZW1zY29wZSBpdGVtdHlwZT0iaHR0cHM6Ly9zY2hlbWEub3JnL09yZ2FuaXphdGlvbiI+CiAgICAgICAgICAgICAgPGxpbmsgaXRlbXByb3A9InVybCIgaHJlZj0iaHR0cHM6Ly93d3cuaXNvLm9yZy8iPgogICAgICAgICAgICAgIDxsaT48YSBpdGVtcHJvcD0ic2FtZUFzIiB0YXJnZXQ9Il9ibGFuayIgcmVsPSJub29wZW5lciIgaHJlZj0iaHR0cHM6Ly93d3cuZmFjZWJvb2suY29tL2lzb3N0YW5kYXJkcyIgdGl0bGU9IkZhY2Vib29rIj7vmJA8L2E+PC9saT4KICAgICAgICAgICAgICA8bGk+PGEgaXRlbXByb3A9InNhbWVBcyIgdGFyZ2V0PSJfYmxhbmsiIHJlbD0ibm9vcGVuZXIiIGhyZWY9Imh0dHBzOi8vdHdpdHRlci5jb20vaXNvc3RhbmRhcmRzIiB0aXRsZT0iVHdpdHRlciI+75iRPC9hPjwvbGk+CiAgICAgICAgICAgICAgPGxpPjxhIGl0ZW1wcm9wPSJzYW1lQXMiIHRhcmdldD0iX2JsYW5rIiByZWw9Im5vb3BlbmVyIiBocmVmPSJodHRwczovL3d3dy55b3V0dWJlLmNvbS91c2VyL1BsYW5ldElTTyIgdGl0bGU9IllvdVR1YmUiPu+YsDwvYT48L2xpPgogICAgICAgICAgICAgIDxsaT48YSBpdGVtcHJvcD0ic2FtZUFzIiB0YXJnZXQ9Il9ibGFuayIgcmVsPSJub29wZW5lciIgaHJlZj0iaHR0cHM6Ly93d3cubGlua2VkaW4uY29tL2NvbXBhbnkvaXNvc3RhbmRhcmRzIiB0aXRsZT0iTGlua2VkaW4iPu+YkjwvYT48L2xpPgogICAgICAgICAgICAgIDxsaT48YSBpdGVtcHJvcD0ic2FtZUFzIiB0YXJnZXQ9Il9ibGFuayIgcmVsPSJub29wZW5lciIgaHJlZj0iaHR0cHM6Ly93d3cuaW5zdGFncmFtLmNvbS9pc29zdGFuZGFyZHMiIHRpdGxlPSJJbnN0YWdyYW0iPu+ZgTwvYT48L2xpPgogICAgICAgICAgICAgIDxsaT48YSBpdGVtcHJvcD0ic2FtZUFzIiB0YXJnZXQ9Il9ibGFuayIgcmVsPSJub29wZW5lciIgaHJlZj0iaHR0cHM6Ly93d3cuZmxpY2tyLmNvbS9waG90b3MvaXNvc3RhbmRhcmRzIiB0aXRsZT0iRmxpY2tyIj7vmYA8L2E+PC9saT4KICAgICAgICAgICAgPC91bD4KICAgICAgICAgIDwvZGl2PgogICAgICAgICAgPHAgY2xhc3M9ImxlYWQiPkxlIG1vbmRlIHZhIGxvaW4gcXVhbmQgaWwgcydhY2NvcmRlPC9wPgogICAgICAgICAgPGRpdiBjbGFzcz0icm93Ij4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTggY29sLW1kLW9mZnNldC0yIHB1bGwtbGVmdCI+CiAgICAgICAgICAgICAgPHAgY2xhc3M9InRleHQteHMiPk5vdXMgbm91cyBlbmdhZ2VvbnMgw6AgY2UgcXVlIG5vdHJlIHNpdGUgV2ViIHNvaXQgYWNjZXNzaWJsZSDDoCB0b3VzLiBQb3VyIHRvdXRlIHF1ZXN0aW9uIG91IHN1Z2dlc3Rpb24gY29uY2VybmFudCBsJ2FjY2Vzc2liaWxpdMOpIGR1IHNpdGUsIDxhIGhyZWY9Im1haWx0bzp3ZWJtYXN0ZXJAaXNvLm9yZz9zdWJqZWN0PUFjY2Vzc2liaWxpdHkiIHN0eWxlPSJ3aGl0ZS1zcGFjZTogbm93cmFwIj5jb250YWN0ZXotbm91czwvYT4uPC9wPgogICAgICAgICAgICAgIDxwIGNsYXNzPSJ0ZXh0LXNtIj48YSBocmVmPSIjY29weXJpZ2h0IiB0YXJnZXQ9Il9zZWxmIiBkYXRhLXRvZ2dsZT0iY29sbGFwc2UiIGFyaWEtZXhwYW5kZWQ9ImZhbHNlIiBhcmlhLWNvbnRyb2xzPSJjb3B5cmlnaHQiPsKpIFRvdXMgZHJvaXRzIHLDqXNlcnbDqXM8L2E+IDxzcGFuIGlkPSJjb3B5cmlnaHQiIGNsYXNzPSJjb2xsYXBzZSI+TGUgbWF0w6lyaWVsIHB1Ymxpw6kgc3VyIElTTy5vcmcgZXN0IHN1amV0IGF1eCBtw6ptZXMgY29uZGl0aW9ucyBlbiBtYXRpw6hyZSBkZSBkcm9pdHMgZOKAmWF1dGV1ciBxdWUgbGVzIHB1YmxpY2F0aW9ucyBkZSBs4oCZSVNPIGV0IHNvbiBlbXBsb2kgZXN0IGNvbmRpdGlvbm7DqSBwYXIgbOKAmWFjY2VwdGF0aW9uLCBwYXIgbOKAmXV0aWxpc2F0ZXVyLCBkZXMgY29uZGl0aW9ucyBkZSBs4oCZSVNPIGVuIG1hdGnDqHJlIGRlIGRyb2l0cyBk4oCZYXV0ZXVyIHLDqWdpc3NhbnQgbGVzIHB1YmxpY2F0aW9ucyBkZSBs4oCZSVNPLiBUb3V0ZSB1dGlsaXNhdGlvbiBkdSBtYXTDqXJpZWwgY29uY2VybsOpLCB5IGNvbXByaXMgc2EgcmVwcm9kdWN0aW9uIGludMOpZ3JhbGUgb3UgcGFydGllbGxlIHZlcnMgdW4gYXV0cmUgc2l0ZSBJbnRlcm5ldCwgcmVxdWllcnQgbOKAmWF1dG9yaXNhdGlvbiDDqWNyaXRlIGRlIGzigJlJU08uIFRvdXRlIGRlbWFuZGUgw6AgY2V0IGVmZmV0IGRvaXQgw6p0cmUgYWRyZXNzw6llIMOgIDxhIGhyZWY9Im1haWx0bzpjb3B5cmlnaHRAaXNvLm9yZyI+Y29weXJpZ2h0QGlzby5vcmc8L2E+Ljwvc3Bhbj48L3A+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICAgICAgPGRpdiBjbGFzcz0idG9wYmFyIj4KICAgICAgICAgIDxkaXYgY2xhc3M9InRvcGJhci1jb250ZW50Ij4KICAgICAgICAgICAgPGEgY2xhc3M9ImxvZ28gaXNvbG9nbyBsb2dvLXhzIHRoZW1lLXJlZCBwb3dlcmVkYnkgcGFnZS1zY3JvbGwgbG9nby1zY3JvbGxUb3AiIGhyZWY9IiNwYWdlLXRvcCIgdGl0bGU9IlJldG91ciBlbiBoYXV0IGRlIHBhZ2UiPjwvYT4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iaXNvbG9nby1wcmludCI+PGltZyBzcmM9Imh0dHBzOi8vY2RuLmlzby5vcmcvcmVzb3VyY2VzL3dvb2QvMy4zLjMvaW1nL2lzby9pc28tbG9nby1wcmludC5naWYiIGFsdD0iTG9nbyBJU08gcG91ciBpbXByZXNzaW9uIiAvPjwvZGl2PgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwb3dlcmVkYnktdHh0Ij5Ew6l2ZWxvcHDDqSBwYXI8L2Rpdj4KICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgICAgIDxkaXYgY2xhc3M9InJ1YmJlciI+PC9kaXY+CiAgICAgIDwvZm9vdGVyPgoKICAgIDwvbWFpbj4KCiAgICAKCgogIDwvYm9keT4KPC9odG1sPg==
  recorded_at: Mon, 23 Aug 2021 12:10:43 GMT
recorded_with: VCR 6.0.0
