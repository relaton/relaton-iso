---
http_interactions:
- request:
    method: get
    uri: https://raw.githubusercontent.com/relaton/relaton-data-iso/main/data/iso-iec-ieee-9945-2009.yaml
    body:
      encoding: US-ASCII
      base64_string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - raw.githubusercontent.com
  response:
    status:
      code: 200
      message: OK
    headers:
<<<<<<< HEAD
      Connection:
      - keep-alive
      Content-Length:
      - '9648'
=======
      Server:
      - nginx
      Date:
      - Fri, 02 Feb 2024 19:23:11 GMT
      Content-Type:
      - application/json; charset=UTF-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      X-Alg-Pt:
      - '1'
      Accept-Encoding:
      - deflate, gzip
>>>>>>> main
      Cache-Control:
      - max-age=300
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Etag:
      - W/"c69779a7a538e0e90a5552346ea2d494a1817dda6d6855d22bd12a95bf0a24eb"
      Strict-Transport-Security:
      - max-age=31536000
      X-Content-Type-Options:
      - nosniff
<<<<<<< HEAD
      X-Frame-Options:
      - deny
      X-Xss-Protection:
      - 1; mode=block
      X-Github-Request-Id:
      - 2720:583A:DC67:10691:65BD3A85
      Accept-Ranges:
      - bytes
      Date:
      - Fri, 02 Feb 2024 18:55:01 GMT
      Via:
      - 1.1 varnish
      X-Served-By:
      - cache-pdk-kpdk1780073-PDK
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Timer:
      - S1706900102.804279,VS0,VE109
      Vary:
      - Authorization,Accept-Encoding,Origin
      Access-Control-Allow-Origin:
      - "*"
      Cross-Origin-Resource-Policy:
      - cross-origin
      X-Fastly-Request-Id:
      - b709428f6886b6bb41fde3cc576628682f9d72bf
      Expires:
      - Fri, 02 Feb 2024 19:00:01 GMT
      Source-Age:
      - '0'
    body:
      encoding: ASCII-8BIT
      base64_string: |
        LS0tCnNjaGVtYS12ZXJzaW9uOiB2MS4yLjgKaWQ6IElTTy9JRUMvSUVFRTk5
        NDUtMjAwOQp0aXRsZToKLSBjb250ZW50OiBJbmZvcm1hdGlvbiB0ZWNobm9s
        b2d5CiAgbGFuZ3VhZ2U6CiAgLSBlbgogIHNjcmlwdDoKICAtIExhdG4KICBm
        b3JtYXQ6IHRleHQvcGxhaW4KICB0eXBlOiB0aXRsZS1pbnRybwotIGNvbnRl
        bnQ6IFBvcnRhYmxlIE9wZXJhdGluZyBTeXN0ZW0gSW50ZXJmYWNlIChQT1NJ
        WMKuKSBCYXNlIFNwZWNpZmljYXRpb25zLCBJc3N1ZQogICAgNwogIGxhbmd1
        YWdlOgogIC0gZW4KICBzY3JpcHQ6CiAgLSBMYXRuCiAgZm9ybWF0OiB0ZXh0
        L3BsYWluCiAgdHlwZTogdGl0bGUtbWFpbgotIGNvbnRlbnQ6IEluZm9ybWF0
        aW9uIHRlY2hub2xvZ3kgLSBQb3J0YWJsZSBPcGVyYXRpbmcgU3lzdGVtIElu
        dGVyZmFjZSAoUE9TSVjCrikgQmFzZQogICAgU3BlY2lmaWNhdGlvbnMsIElz
        c3VlIDcKICBsYW5ndWFnZToKICAtIGVuCiAgc2NyaXB0OgogIC0gTGF0bgog
        IGZvcm1hdDogdGV4dC9wbGFpbgogIHR5cGU6IG1haW4KLSBjb250ZW50OiBU
        ZWNobm9sb2dpZXMgZGUgbCdpbmZvcm1hdGlvbgogIGxhbmd1YWdlOgogIC0g
        ZnIKICBzY3JpcHQ6CiAgLSBMYXRuCiAgZm9ybWF0OiB0ZXh0L3BsYWluCiAg
        dHlwZTogdGl0bGUtaW50cm8KLSBjb250ZW50OiBTcMOpY2lmaWNhdGlvbnMg
        ZGUgYmFzZSBkZSBsJ2ludGVyZmFjZSBwb3VyIGxhIHBvcnRhYmlsaXTDqSBk
        ZXMgc3lzdMOobWVzCiAgICAoUE9TSVjCriksIElzc3VlIDcKICBsYW5ndWFn
        ZToKICAtIGZyCiAgc2NyaXB0OgogIC0gTGF0bgogIGZvcm1hdDogdGV4dC9w
        bGFpbgogIHR5cGU6IHRpdGxlLW1haW4KLSBjb250ZW50OiBUZWNobm9sb2dp
        ZXMgZGUgbCdpbmZvcm1hdGlvbiAtIFNww6ljaWZpY2F0aW9ucyBkZSBiYXNl
        IGRlIGwnaW50ZXJmYWNlIHBvdXIKICAgIGxhIHBvcnRhYmlsaXTDqSBkZXMg
        c3lzdMOobWVzIChQT1NJWMKuKSwgSXNzdWUgNwogIGxhbmd1YWdlOgogIC0g
        ZnIKICBzY3JpcHQ6CiAgLSBMYXRuCiAgZm9ybWF0OiB0ZXh0L3BsYWluCiAg
        dHlwZTogbWFpbgpsaW5rOgotIGNvbnRlbnQ6IGh0dHBzOi8vd3d3Lmlzby5v
        cmcvc3RhbmRhcmQvNTA1MTYuaHRtbAogIHR5cGU6IHNyYwotIGNvbnRlbnQ6
        IGh0dHBzOi8vd3d3Lmlzby5vcmcvb2JwL3VpL2VuLyMhaXNvOnN0ZDo1MDUx
        NjplbgogIHR5cGU6IG9icAotIGNvbnRlbnQ6IGh0dHBzOi8vd3d3Lmlzby5v
        cmcvY29udGVudHMvZGF0YS9zdGFuZGFyZC8wNS8wNS81MDUxNi5kZXRhaWwu
        cnNzCiAgdHlwZTogcnNzCnR5cGU6IHN0YW5kYXJkCmRvY2lkOgotIGlkOiBJ
        U08vSUVDL0lFRUUgOTk0NToyMDA5CiAgdHlwZTogSVNPCiAgcHJpbWFyeTog
        dHJ1ZQotIGlkOiBJU08vSUVDL0lFRUUgOTk0NToyMDA5KEUpCiAgdHlwZTog
        aXNvLXJlZmVyZW5jZQotIGlkOiB1cm46aXNvOnN0ZDppc28taWVjLWllZWU6
        OTk0NTpzdGFnZS05MC45MgogIHR5cGU6IFVSTgpkb2NudW1iZXI6ICc5OTQ1
        JwpkYXRlOgotIHR5cGU6IHB1Ymxpc2hlZAogIHZhbHVlOiAyMDA5LTA5CmNv
        bnRyaWJ1dG9yOgotIG9yZ2FuaXphdGlvbjoKICAgIG5hbWU6CiAgICAtIGNv
        bnRlbnQ6IEludGVybmF0aW9uYWwgT3JnYW5pemF0aW9uIGZvciBTdGFuZGFy
        ZGl6YXRpb24KICAgIGFiYnJldmlhdGlvbjoKICAgICAgY29udGVudDogSVNP
        CiAgICB1cmw6IHd3dy5pc28ub3JnCiAgcm9sZToKICAtIHR5cGU6IHB1Ymxp
        c2hlcgotIG9yZ2FuaXphdGlvbjoKICAgIG5hbWU6CiAgICAtIGNvbnRlbnQ6
        IEludGVybmF0aW9uYWwgRWxlY3Ryb3RlY2huaWNhbCBDb21taXNzaW9uCiAg
        ICBhYmJyZXZpYXRpb246CiAgICAgIGNvbnRlbnQ6IElFQwogICAgdXJsOiB3
        d3cuaWVjLmNoCiAgcm9sZToKICAtIHR5cGU6IHB1Ymxpc2hlcgotIG9yZ2Fu
        aXphdGlvbjoKICAgIG5hbWU6CiAgICAtIGNvbnRlbnQ6IEluc3RpdHV0ZSBv
        ZiBFbGVjdHJpY2FsIGFuZCBFbGVjdHJvbmljcyBFbmdpbmVlcnMKICAgIGFi
        YnJldmlhdGlvbjoKICAgICAgY29udGVudDogSUVFRQogICAgdXJsOiB3d3cu
        aWVlZS5vcmcKICByb2xlOgogIC0gdHlwZTogcHVibGlzaGVyCmVkaXRpb246
        CiAgY29udGVudDogJzEnCnJldmRhdGU6IDIwMDktMDkKbGFuZ3VhZ2U6Ci0g
        ZW4KLSBmcgpzY3JpcHQ6Ci0gTGF0bgphYnN0cmFjdDoKLSBjb250ZW50OiB8
        LQogICAgSVNPL0lFQy9JRUVFIDk5NDU6MjAwOSBkZWZpbmVzIGEgc3RhbmRh
        cmQgb3BlcmF0aW5nIHN5c3RlbSBpbnRlcmZhY2UgYW5kIGVudmlyb25tZW50
        LCBpbmNsdWRpbmcgYSBjb21tYW5kIGludGVycHJldGVyIChvciAic2hlbGwi
        KSwgYW5kIGNvbW1vbiB1dGlsaXR5IHByb2dyYW1zIHRvIHN1cHBvcnQgYXBw
        bGljYXRpb25zIHBvcnRhYmlsaXR5IGF0IHRoZSBzb3VyY2UgY29kZSBsZXZl
        bC4gSVNPL0lFQy9JRUVFIDk5NDU6MjAwOSBpcyBpbnRlbmRlZCB0byBiZSB1
        c2VkIGJ5IGJvdGggYXBwbGljYXRpb24gZGV2ZWxvcGVycyBhbmQgc3lzdGVt
        IGltcGxlbWVudGVycyBhbmQgY29tcHJpc2VzIGZvdXIgbWFqb3IgY29tcG9u
        ZW50cyAoZWFjaCBpbiBhbiBhc3NvY2lhdGVkIHZvbHVtZSkuCiAgICAtIEdl
        bmVyYWwgdGVybXMsIGNvbmNlcHRzLCBhbmQgaW50ZXJmYWNlcyBjb21tb24g
        dG8gYWxsIHZvbHVtZXMgb2YgdGhpcyBzdGFuZGFyZCwgaW5jbHVkaW5nIHV0
        aWxpdHkgY29udmVudGlvbnMgYW5kIEMtbGFuZ3VhZ2UgaGVhZGVyIGRlZmlu
        aXRpb25zLCBhcmUgaW5jbHVkZWQgaW4gdGhlIEJhc2UgRGVmaW5pdGlvbnMg
        dm9sdW1lLgogICAgLSBEZWZpbml0aW9ucyBmb3Igc3lzdGVtIHNlcnZpY2Ug
        ZnVuY3Rpb25zIGFuZCBzdWJyb3V0aW5lcywgbGFuZ3VhZ2Utc3BlY2lmaWMg
        c3lzdGVtIHNlcnZpY2VzIGZvciB0aGUgQyBwcm9ncmFtbWluZyBsYW5ndWFn
        ZSwgZnVuY3Rpb24gaXNzdWVzLCBpbmNsdWRpbmcgcG9ydGFiaWxpdHksIGVy
        cm9yIGhhbmRsaW5nLCBhbmQgZXJyb3IgcmVjb3ZlcnksIGFyZSBpbmNsdWRl
        ZCBpbiB0aGUgU3lzdGVtIEludGVyZmFjZXMgdm9sdW1lLgogICAgLSBEZWZp
        bml0aW9ucyBmb3IgYSBzdGFuZGFyZCBzb3VyY2UgY29kZS1sZXZlbCBpbnRl
        cmZhY2UgdG8gY29tbWFuZCBpbnRlcnByZXRhdGlvbiBzZXJ2aWNlcyAoYSAi
        c2hlbGwiKSBhbmQgY29tbW9uIHV0aWxpdHkgcHJvZ3JhbXMgZm9yIGFwcGxp
        Y2F0aW9uIHByb2dyYW1zIGFyZSBpbmNsdWRlZCBpbiB0aGUgU2hlbGwgYW5k
        IFV0aWxpdGllcyB2b2x1bWUuCiAgICAtIEV4dGVuZGVkIHJhdGlvbmFsZSB0
        aGF0IGRpZCBub3QgZml0IHdlbGwgaW50byB0aGUgcmVzdCBvZiB0aGUgZG9j
        dW1lbnQgc3RydWN0dXJlLCB3aGljaCBjb250YWlucyBoaXN0b3JpY2FsIGlu
        Zm9ybWF0aW9uIGNvbmNlcm5pbmcgdGhlIGNvbnRlbnRzIG9mIElTTy9JRUMv
        SUVFRSA5OTQ1OjIwMDkgYW5kIHdoeSBmZWF0dXJlcyB3ZXJlIGluY2x1ZGVk
        IG9yIGRpc2NhcmRlZCBieSB0aGUgSVNPL0lFQy9JRUVFIDk5NDU6MjAwOSBk
        ZXZlbG9wZXJzLCBpcyBpbmNsdWRlZCBpbiB0aGUgUmF0aW9uYWxlIChJbmZv
        cm1hdGl2ZSkgdm9sdW1lLgogICAgVGhlIGZvbGxvd2luZyBhcmVhcyBhcmUg
        b3V0c2lkZSB0aGUgc2NvcGUgb2YgSVNPL0lFQy9JRUVFIDk5NDU6MjAwOToK
        ICAgIC0gZ3JhcGhpY3MgaW50ZXJmYWNlczsKICAgIC0gZGF0YWJhc2UgbWFu
        YWdlbWVudCBzeXN0ZW0gaW50ZXJmYWNlczsKICAgIC0gcmVjb3JkIEkvTyBj
        b25zaWRlcmF0aW9uczsKICAgIC0gb2JqZWN0IG9yIGJpbmFyeSBjb2RlIHBv
        cnRhYmlsaXR5OwogICAgLSBzeXN0ZW0gY29uZmlndXJhdGlvbiBhbmQgcmVz
        b3VyY2UgYXZhaWxhYmlsaXR5LgogICAgSVNPL0lFQy9JRUVFIDk5NDU6MjAw
        OSBkZXNjcmliZXMgdGhlIGV4dGVybmFsIGNoYXJhY3RlcmlzdGljcyBhbmQg
        ZmFjaWxpdGllcyB0aGF0IGFyZSBvZiBpbXBvcnRhbmNlIHRvIGFwcGxpY2F0
        aW9uIGRldmVsb3BlcnMsIHJhdGhlciB0aGFuIHRoZSBpbnRlcm5hbCBjb25z
        dHJ1Y3Rpb24gdGVjaG5pcXVlcyBlbXBsb3llZCB0byBhY2hpZXZlIHRoZXNl
        IGNhcGFiaWxpdGllcy4gU3BlY2lhbCBlbXBoYXNpcyBpcyBwbGFjZWQgb24g
        dGhvc2UgZnVuY3Rpb25zIGFuZCBmYWNpbGl0aWVzIHRoYXQgYXJlIG5lZWRl
        ZCBpbiBhIHdpZGUgdmFyaWV0eSBvZiBjb21tZXJjaWFsIGFwcGxpY2F0aW9u
        cy4KICBsYW5ndWFnZToKICAtIGVuCiAgc2NyaXB0OgogIC0gTGF0bgogIGZv
        cm1hdDogdGV4dC9wbGFpbgotIGNvbnRlbnQ6IHwtCiAgICBJU08vSUVDL0lF
        RUUgOTk0NToyMDA5IGRlZmluZXMgYSBzdGFuZGFyZCBvcGVyYXRpbmcgc3lz
        dGVtIGludGVyZmFjZSBhbmQgZW52aXJvbm1lbnQsIGluY2x1ZGluZyBhIGNv
        bW1hbmQgaW50ZXJwcmV0ZXIgKG9yICJzaGVsbCIpLCBhbmQgY29tbW9uIHV0
        aWxpdHkgcHJvZ3JhbXMgdG8gc3VwcG9ydCBhcHBsaWNhdGlvbnMgcG9ydGFi
        aWxpdHkgYXQgdGhlIHNvdXJjZSBjb2RlIGxldmVsLiBJU08vSUVDL0lFRUUg
        OTk0NToyMDA5IGlzIGludGVuZGVkIHRvIGJlIHVzZWQgYnkgYm90aCBhcHBs
        aWNhdGlvbiBkZXZlbG9wZXJzIGFuZCBzeXN0ZW0gaW1wbGVtZW50ZXJzIGFu
        ZCBjb21wcmlzZXMgZm91ciBtYWpvciBjb21wb25lbnRzIChlYWNoIGluIGFu
        IGFzc29jaWF0ZWQgdm9sdW1lKS4KICAgIC0gR2VuZXJhbCB0ZXJtcywgY29u
        Y2VwdHMsIGFuZCBpbnRlcmZhY2VzIGNvbW1vbiB0byBhbGwgdm9sdW1lcyBv
        ZiB0aGlzIHN0YW5kYXJkLCBpbmNsdWRpbmcgdXRpbGl0eSBjb252ZW50aW9u
        cyBhbmQgQy1sYW5ndWFnZSBoZWFkZXIgZGVmaW5pdGlvbnMsIGFyZSBpbmNs
        dWRlZCBpbiB0aGUgQmFzZSBEZWZpbml0aW9ucyB2b2x1bWUuCiAgICAtIERl
        ZmluaXRpb25zIGZvciBzeXN0ZW0gc2VydmljZSBmdW5jdGlvbnMgYW5kIHN1
        YnJvdXRpbmVzLCBsYW5ndWFnZS1zcGVjaWZpYyBzeXN0ZW0gc2VydmljZXMg
        Zm9yIHRoZSBDIHByb2dyYW1taW5nIGxhbmd1YWdlLCBmdW5jdGlvbiBpc3N1
        ZXMsIGluY2x1ZGluZyBwb3J0YWJpbGl0eSwgZXJyb3IgaGFuZGxpbmcsIGFu
        ZCBlcnJvciByZWNvdmVyeSwgYXJlIGluY2x1ZGVkIGluIHRoZSBTeXN0ZW0g
        SW50ZXJmYWNlcyB2b2x1bWUuCiAgICAtIERlZmluaXRpb25zIGZvciBhIHN0
        YW5kYXJkIHNvdXJjZSBjb2RlLWxldmVsIGludGVyZmFjZSB0byBjb21tYW5k
        IGludGVycHJldGF0aW9uIHNlcnZpY2VzIChhICJzaGVsbCIpIGFuZCBjb21t
        b24gdXRpbGl0eSBwcm9ncmFtcyBmb3IgYXBwbGljYXRpb24gcHJvZ3JhbXMg
        YXJlIGluY2x1ZGVkIGluIHRoZSBTaGVsbCBhbmQgVXRpbGl0aWVzIHZvbHVt
        ZS4KICAgIC0gRXh0ZW5kZWQgcmF0aW9uYWxlIHRoYXQgZGlkIG5vdCBmaXQg
        d2VsbCBpbnRvIHRoZSByZXN0IG9mIHRoZSBkb2N1bWVudCBzdHJ1Y3R1cmUs
        IHdoaWNoIGNvbnRhaW5zIGhpc3RvcmljYWwgaW5mb3JtYXRpb24gY29uY2Vy
        bmluZyB0aGUgY29udGVudHMgb2YgSVNPL0lFQy9JRUVFIDk5NDU6MjAwOSBh
        bmQgd2h5IGZlYXR1cmVzIHdlcmUgaW5jbHVkZWQgb3IgZGlzY2FyZGVkIGJ5
        IHRoZSBJU08vSUVDL0lFRUUgOTk0NToyMDA5IGRldmVsb3BlcnMsIGlzIGlu
        Y2x1ZGVkIGluIHRoZSBSYXRpb25hbGUgKEluZm9ybWF0aXZlKSB2b2x1bWUu
        CiAgICBUaGUgZm9sbG93aW5nIGFyZWFzIGFyZSBvdXRzaWRlIHRoZSBzY29w
        ZSBvZiBJU08vSUVDL0lFRUUgOTk0NToyMDA5OgogICAgLSBncmFwaGljcyBp
        bnRlcmZhY2VzOwogICAgLSBkYXRhYmFzZSBtYW5hZ2VtZW50IHN5c3RlbSBp
        bnRlcmZhY2VzOwogICAgLSByZWNvcmQgSS9PIGNvbnNpZGVyYXRpb25zOwog
        ICAgLSBvYmplY3Qgb3IgYmluYXJ5IGNvZGUgcG9ydGFiaWxpdHk7CiAgICAt
        IHN5c3RlbSBjb25maWd1cmF0aW9uIGFuZCByZXNvdXJjZSBhdmFpbGFiaWxp
        dHkuCiAgICBJU08vSUVDL0lFRUUgOTk0NToyMDA5IGRlc2NyaWJlcyB0aGUg
        ZXh0ZXJuYWwgY2hhcmFjdGVyaXN0aWNzIGFuZCBmYWNpbGl0aWVzIHRoYXQg
        YXJlIG9mIGltcG9ydGFuY2UgdG8gYXBwbGljYXRpb24gZGV2ZWxvcGVycywg
        cmF0aGVyIHRoYW4gdGhlIGludGVybmFsIGNvbnN0cnVjdGlvbiB0ZWNobmlx
        dWVzIGVtcGxveWVkIHRvIGFjaGlldmUgdGhlc2UgY2FwYWJpbGl0aWVzLiBT
        cGVjaWFsIGVtcGhhc2lzIGlzIHBsYWNlZCBvbiB0aG9zZSBmdW5jdGlvbnMg
        YW5kIGZhY2lsaXRpZXMgdGhhdCBhcmUgbmVlZGVkIGluIGEgd2lkZSB2YXJp
        ZXR5IG9mIGNvbW1lcmNpYWwgYXBwbGljYXRpb25zLgogIGxhbmd1YWdlOgog
        IC0gZnIKICBzY3JpcHQ6CiAgLSBMYXRuCiAgZm9ybWF0OiB0ZXh0L3BsYWlu
        CmRvY3N0YXR1czoKICBzdGFnZToKICAgIHZhbHVlOiAnOTAnCiAgc3Vic3Rh
        Z2U6CiAgICB2YWx1ZTogJzkyJwpjb3B5cmlnaHQ6Ci0gb3duZXI6CiAgLSBu
        YW1lOgogICAgLSBjb250ZW50OiBJU08vSUVDL0lFRUUKICBmcm9tOiAnMjAw
        OScKcmVsYXRpb246Ci0gdHlwZTogb2Jzb2xldGVzCiAgYmliaXRlbToKICAg
        IGlkOiBJU08vSUVDOTk0NS0xLTIwMDMKICAgIHR5cGU6IHN0YW5kYXJkCiAg
        ICBkb2NpZDoKICAgIC0gaWQ6IElTTy9JRUMgOTk0NS0xOjIwMDMKICAgICAg
        dHlwZTogSVNPCiAgICAgIHByaW1hcnk6IHRydWUKICAgIGZvcm1hdHRlZHJl
        ZjoKICAgICAgY29udGVudDogSVNPL0lFQyA5OTQ1LTE6MjAwMwogICAgICBm
        b3JtYXQ6IHRleHQvcGxhaW4KLSB0eXBlOiBvYnNvbGV0ZXMKICBiaWJpdGVt
        OgogICAgaWQ6IElTTy9JRUM5OTQ1LTEtMjAwMy9Db3IxLTIwMDQKICAgIHR5
        cGU6IHN0YW5kYXJkCiAgICBkb2NpZDoKICAgIC0gaWQ6IElTTy9JRUMgOTk0
        NS0xOjIwMDMvQ29yIDE6MjAwNAogICAgICB0eXBlOiBJU08KICAgICAgcHJp
        bWFyeTogdHJ1ZQogICAgZm9ybWF0dGVkcmVmOgogICAgICBjb250ZW50OiBJ
        U08vSUVDIDk5NDUtMToyMDAzL0NvciAxOjIwMDQKICAgICAgZm9ybWF0OiB0
        ZXh0L3BsYWluCi0gdHlwZTogb2Jzb2xldGVzCiAgYmliaXRlbToKICAgIGlk
        OiBJU08vSUVDOTk0NS0yLTIwMDMKICAgIHR5cGU6IHN0YW5kYXJkCiAgICBk
        b2NpZDoKICAgIC0gaWQ6IElTTy9JRUMgOTk0NS0yOjIwMDMKICAgICAgdHlw
        ZTogSVNPCiAgICAgIHByaW1hcnk6IHRydWUKICAgIGZvcm1hdHRlZHJlZjoK
        ICAgICAgY29udGVudDogSVNPL0lFQyA5OTQ1LTI6MjAwMwogICAgICBmb3Jt
        YXQ6IHRleHQvcGxhaW4KLSB0eXBlOiBvYnNvbGV0ZXMKICBiaWJpdGVtOgog
        ICAgaWQ6IElTTy9JRUM5OTQ1LTItMjAwMy9Db3IxLTIwMDQKICAgIHR5cGU6
        IHN0YW5kYXJkCiAgICBkb2NpZDoKICAgIC0gaWQ6IElTTy9JRUMgOTk0NS0y
        OjIwMDMvQ29yIDE6MjAwNAogICAgICB0eXBlOiBJU08KICAgICAgcHJpbWFy
        eTogdHJ1ZQogICAgZm9ybWF0dGVkcmVmOgogICAgICBjb250ZW50OiBJU08v
        SUVDIDk5NDUtMjoyMDAzL0NvciAxOjIwMDQKICAgICAgZm9ybWF0OiB0ZXh0
        L3BsYWluCi0gdHlwZTogb2Jzb2xldGVzCiAgYmliaXRlbToKICAgIGlkOiBJ
        U08vSUVDOTk0NS0zLTIwMDMKICAgIHR5cGU6IHN0YW5kYXJkCiAgICBkb2Np
        ZDoKICAgIC0gaWQ6IElTTy9JRUMgOTk0NS0zOjIwMDMKICAgICAgdHlwZTog
        SVNPCiAgICAgIHByaW1hcnk6IHRydWUKICAgIGZvcm1hdHRlZHJlZjoKICAg
        ICAgY29udGVudDogSVNPL0lFQyA5OTQ1LTM6MjAwMwogICAgICBmb3JtYXQ6
        IHRleHQvcGxhaW4KLSB0eXBlOiBvYnNvbGV0ZXMKICBiaWJpdGVtOgogICAg
        aWQ6IElTTy9JRUM5OTQ1LTMtMjAwMy9Db3IxLTIwMDQKICAgIHR5cGU6IHN0
        YW5kYXJkCiAgICBkb2NpZDoKICAgIC0gaWQ6IElTTy9JRUMgOTk0NS0zOjIw
        MDMvQ29yIDE6MjAwNAogICAgICB0eXBlOiBJU08KICAgICAgcHJpbWFyeTog
        dHJ1ZQogICAgZm9ybWF0dGVkcmVmOgogICAgICBjb250ZW50OiBJU08vSUVD
        IDk5NDUtMzoyMDAzL0NvciAxOjIwMDQKICAgICAgZm9ybWF0OiB0ZXh0L3Bs
        YWluCi0gdHlwZTogb2Jzb2xldGVzCiAgYmliaXRlbToKICAgIGlkOiBJU08v
        SUVDOTk0NS00LTIwMDMKICAgIHR5cGU6IHN0YW5kYXJkCiAgICBkb2NpZDoK
        ICAgIC0gaWQ6IElTTy9JRUMgOTk0NS00OjIwMDMKICAgICAgdHlwZTogSVNP
        CiAgICAgIHByaW1hcnk6IHRydWUKICAgIGZvcm1hdHRlZHJlZjoKICAgICAg
        Y29udGVudDogSVNPL0lFQyA5OTQ1LTQ6MjAwMwogICAgICBmb3JtYXQ6IHRl
        eHQvcGxhaW4KLSB0eXBlOiBvYnNvbGV0ZXMKICBiaWJpdGVtOgogICAgaWQ6
        IElTTy9JRUM5OTQ1LTQtMjAwMy9Db3IxLTIwMDQKICAgIHR5cGU6IHN0YW5k
        YXJkCiAgICBkb2NpZDoKICAgIC0gaWQ6IElTTy9JRUMgOTk0NS00OjIwMDMv
        Q29yIDE6MjAwNAogICAgICB0eXBlOiBJU08KICAgICAgcHJpbWFyeTogdHJ1
        ZQogICAgZm9ybWF0dGVkcmVmOgogICAgICBjb250ZW50OiBJU08vSUVDIDk5
        NDUtNDoyMDAzL0NvciAxOjIwMDQKICAgICAgZm9ybWF0OiB0ZXh0L3BsYWlu
        Ci0gdHlwZTogb2Jzb2xldGVzCiAgYmliaXRlbToKICAgIGlkOiBJU08vSUVD
        Q0Q5OTQ1CiAgICB0eXBlOiBzdGFuZGFyZAogICAgZG9jaWQ6CiAgICAtIGlk
        OiBJU08vSUVDIENEIDk5NDUKICAgICAgdHlwZTogSVNPCiAgICAgIHByaW1h
        cnk6IHRydWUKICAgIGZvcm1hdHRlZHJlZjoKICAgICAgY29udGVudDogSVNP
        L0lFQyBDRCA5OTQ1CiAgICAgIGZvcm1hdDogdGV4dC9wbGFpbgotIHR5cGU6
        IHVwZGF0ZXMKICBiaWJpdGVtOgogICAgaWQ6IElTTy9JRUMvSUVFRTk5NDUt
        MjAwOS9Db3IxLTIwMTMKICAgIHR5cGU6IHN0YW5kYXJkCiAgICBkb2NpZDoK
        ICAgIC0gaWQ6IElTTy9JRUMvSUVFRSA5OTQ1OjIwMDkvQ29yIDE6MjAxMwog
        ICAgICB0eXBlOiBJU08KICAgICAgcHJpbWFyeTogdHJ1ZQogICAgZGF0ZToK
        ICAgIC0gdHlwZTogY2lyY3VsYXRlZAogICAgICB2YWx1ZTogJzIwMjMtMDIt
        MTQnCiAgICBmb3JtYXR0ZWRyZWY6CiAgICAgIGNvbnRlbnQ6IElTTy9JRUMv
        SUVFRSA5OTQ1OjIwMDkvQ29yIDE6MjAxMwogICAgICBmb3JtYXQ6IHRleHQv
        cGxhaW4KLSB0eXBlOiB1cGRhdGVzCiAgYmliaXRlbToKICAgIGlkOiBJU08v
        SUVDL0lFRUU5OTQ1LTIwMDkvQ29yMi0yMDE3CiAgICB0eXBlOiBzdGFuZGFy
        ZAogICAgZG9jaWQ6CiAgICAtIGlkOiBJU08vSUVDL0lFRUUgOTk0NToyMDA5
        L0NvciAyOjIwMTcKICAgICAgdHlwZTogSVNPCiAgICAgIHByaW1hcnk6IHRy
        dWUKICAgIGRhdGU6CiAgICAtIHR5cGU6IGNpcmN1bGF0ZWQKICAgICAgdmFs
        dWU6ICcyMDIzLTAyLTE0JwogICAgZm9ybWF0dGVkcmVmOgogICAgICBjb250
        ZW50OiBJU08vSUVDL0lFRUUgOTk0NToyMDA5L0NvciAyOjIwMTcKICAgICAg
        Zm9ybWF0OiB0ZXh0L3BsYWluCnBsYWNlOgotIEdlbmV2YQpkb2N0eXBlOgog
        IHR5cGU6IGludGVybmF0aW9uYWwtc3RhbmRhcmQKZWRpdG9yaWFsZ3JvdXA6
        CiAgdGVjaG5pY2FsX2NvbW1pdHRlZToKICAtIG5hbWU6IFByb2dyYW1taW5n
        IGxhbmd1YWdlcywgdGhlaXIgZW52aXJvbm1lbnRzIGFuZCBzeXN0ZW0gc29m
        dHdhcmUgaW50ZXJmYWNlcwogICAgbnVtYmVyOiAxCiAgICB0eXBlOiBJRUMK
        ICAgIGlkZW50aWZpZXI6IElTTy9JRUMgSlRDIDEvU0MgMjIKaWNzOgotIGNv
        ZGU6ICczNS4wNjAnCiAgdGV4dDogTGFuZ3VhZ2VzIHVzZWQgaW4gaW5mb3Jt
        YXRpb24gdGVjaG5vbG9neQpzdHJ1Y3R1cmVkaWRlbnRpZmllcjoKICBwcm9q
        ZWN0X251bWJlcjogSVNPIDk5NDUKICB0eXBlOiBJU08KZXh0OgogIHNjaGVt
        YS12ZXJzaW9uOiB2MS4wLjAK
  recorded_at: Fri, 02 Feb 2024 18:55:01 GMT
=======
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      Content-Disposition:
      - inline; filename=a.txt
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Fri, 02 Feb 2024 19:23:11 GMT
- request:
    method: get
    uri: https://www.iso.org/contents/data/standard/05/05/50516.html
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - www.iso.org
  response:
    status:
      code: 301
      message: ''
    headers:
      Expires:
      - Wed, 09 May 1979 05:30:00 GMT
      Cache-Control:
      - no-cache, no-store, must-revalidate, proxy-revalidate, max-age=0
      Pragma:
      - no-cache
      Set-Cookie:
      - BIGipServerpool_prod_iso_www-jahia=713576842.36895.0000; path=/; Httponly;
        Secure
      - JSESSIONID=16EAF91741C5B4C844EDD3BAD18E3747; Path=/; Secure; HttpOnly
      Location:
      - "/standard/50516.html"
      Content-Length:
      - '0'
      Date:
      - Fri, 02 Feb 2024 19:23:14 GMT
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains
    body:
      encoding: UTF-8
      string: ''
  recorded_at: Fri, 02 Feb 2024 19:23:14 GMT
- request:
    method: get
    uri: https://www.iso.org/standard/50516.html
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - www.iso.org
  response:
    status:
      code: 200
      message: ''
    headers:
      Expires:
      - Wed, 09 May 1979 05:30:00 GMT
      Cache-Control:
      - no-cache, no-store, must-revalidate, proxy-revalidate, max-age=0
      Pragma:
      - no-cache
      Set-Cookie:
      - BIGipServerpool_prod_iso_www-jahia=713576842.36895.0000; path=/; Httponly;
        Secure
      - JSESSIONID=FB4E6B002C17FF1602E5B00B844F0E55; Path=/; Secure; HttpOnly
      Vary:
      - accept-encoding
      Content-Type:
      - text/html;charset=UTF-8
      Transfer-Encoding:
      - chunked
      Date:
      - Fri, 02 Feb 2024 19:23:15 GMT
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Fri, 02 Feb 2024 19:23:15 GMT
- request:
    method: get
    uri: https://www.iso.org/fr/standard/50516.html
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - www.iso.org
  response:
    status:
      code: 200
      message: ''
    headers:
      Expires:
      - Wed, 09 May 1979 05:30:00 GMT
      Cache-Control:
      - no-cache, no-store, must-revalidate, proxy-revalidate, max-age=0
      Pragma:
      - no-cache
      Set-Cookie:
      - BIGipServerpool_prod_iso_www-jahia=713576842.36895.0000; path=/; Httponly;
        Secure
      - JSESSIONID=7E968433209F9BE3EFA0DD7B78CE89CB; Path=/; Secure; HttpOnly
      Vary:
      - accept-encoding
      Content-Type:
      - text/html;charset=UTF-8
      Transfer-Encoding:
      - chunked
      Date:
      - Fri, 02 Feb 2024 19:23:16 GMT
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Fri, 02 Feb 2024 19:23:16 GMT
>>>>>>> main
recorded_with: VCR 6.2.0
