---
http_interactions:
- request:
    method: post
    uri: https://jcl49wv5ar-dsn.algolia.net/1/indexes/all_en/query
    body:
      encoding: UTF-8
      string: '{"query":"ISO/IEC/IEEE 9945","hitsPerPage":100,"filters":"category:standard"}'
    headers:
      User-Agent:
      - Algolia for Ruby (2.3.2), Ruby (3.2.0)
      X-Algolia-Api-Key:
      - dd1b9e1ab383f4d4817d29cd5e96d3f0
      X-Algolia-Application-Id:
      - JCL49WV5AR
      Content-Type:
      - application/json; charset=utf-8
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      Connection:
      - keep-alive
      Keep-Alive:
      - '30'
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx
      Date:
      - Sat, 02 Sep 2023 01:37:20 GMT
      Content-Type:
      - application/json; charset=UTF-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      X-Alg-Pt:
      - '1'
      Accept-Encoding:
      - deflate, gzip
      Cache-Control:
      - no-store
      Access-Control-Allow-Origin:
      - "*"
      Timing-Allow-Origin:
      - "*"
      X-Content-Type-Options:
      - nosniff
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      Content-Disposition:
      - inline; filename=a.txt
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Sat, 02 Sep 2023 01:37:20 GMT
- request:
    method: get
    uri: https://www.iso.org/contents/data/standard/05/05/50516.html
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - www.iso.org
  response:
    status:
      code: 301
      message: ''
    headers:
      Expires:
      - Wed, 09 May 1979 05:30:00 GMT
      Cache-Control:
      - no-cache, no-store, must-revalidate, proxy-revalidate, max-age=0
      Pragma:
      - no-cache
      Set-Cookie:
      - BIGipServerpool_prod_iso_www-jahia=713576842.36895.0000; path=/; Httponly;
        Secure
      - JSESSIONID=0A682FF256F30C809EEAAB91340D77FB; Path=/; Secure; HttpOnly
      Location:
      - "/standard/50516.html"
      Content-Length:
      - '0'
      Date:
      - Sat, 02 Sep 2023 01:37:22 GMT
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains
    body:
      encoding: UTF-8
      string: ''
  recorded_at: Sat, 02 Sep 2023 01:37:22 GMT
- request:
    method: get
    uri: https://www.iso.org/standard/50516.html
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - www.iso.org
  response:
    status:
      code: 200
      message: ''
    headers:
      Expires:
      - Wed, 09 May 1979 05:30:00 GMT
      Cache-Control:
      - no-cache, no-store, must-revalidate, proxy-revalidate, max-age=0
      Pragma:
      - no-cache
      Set-Cookie:
      - BIGipServerpool_prod_iso_www-jahia=730354058.36895.0000; path=/; Httponly;
        Secure
      - JSESSIONID=E97E1B244127974395FBA9504E1220F8; Path=/; Secure; HttpOnly
      Vary:
      - accept-encoding
      Content-Type:
      - text/html;charset=UTF-8
      Transfer-Encoding:
      - chunked
      Date:
      - Sat, 02 Sep 2023 01:37:23 GMT
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Sat, 02 Sep 2023 01:37:23 GMT
- request:
    method: get
    uri: https://www.iso.org/fr/standard/50516.html
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - www.iso.org
  response:
    status:
      code: 200
      message: ''
    headers:
      Expires:
      - Wed, 09 May 1979 05:30:00 GMT
      Cache-Control:
      - no-cache, no-store, must-revalidate, proxy-revalidate, max-age=0
      Pragma:
      - no-cache
      Set-Cookie:
      - BIGipServerpool_prod_iso_www-jahia=730354058.36895.0000; path=/; Httponly;
        Secure
      - JSESSIONID=3AB425150A3C852C1973B4CE4F36A266; Path=/; Secure; HttpOnly
      Vary:
      - accept-encoding
      Content-Type:
      - text/html;charset=UTF-8
      Transfer-Encoding:
      - chunked
      Date:
      - Sat, 02 Sep 2023 01:37:24 GMT
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        PCFET0NUWVBFIGh0bWw+CjxodG1sIGxhbmc9ImZyIj4KICA8aGVhZD48bGluayByZWw9ImNhbm9uaWNhbCIgaHJlZj0iaHR0cHM6Ly93d3cuaXNvLm9yZy9mci9zdGFuZGFyZC81MDUxNi5odG1sIiAvPgo8bGluayByZWw9ImFsdGVybmF0ZSIgaHJlZmxhbmc9ImVuIiBocmVmPSJodHRwczovL3d3dy5pc28ub3JnL3N0YW5kYXJkLzUwNTE2Lmh0bWwiIC8+CiAgICA8c2NyaXB0PgogICAgICBkYXRhTGF5ZXIgPSBbewogICAgICAgICdwYWdlVHlwZSc6ICdpdHM6c3RhbmRhcmQnLAogICAgICAgICdwYWdlTGFuZ3VhZ2UnOiAnZnInCiAgICAgIH1dOwogICAgPC9zY3JpcHQ+CgogICAgPHN0eWxlPgovKiBFYXJseSBydWxlcyB0byBtaXRpZ2F0ZSBDTFMgKi8KLm5hdi11dGlsaXR5IHsgcGFkZGluZzogNXB4OyB6LWluZGV4OiAxMDI0OyBwb3NpdGlvbjogcmVsYXRpdmU7IH0KLnRleHQtc20geyBmb250LXNpemU6IC44NzVlbTsgfQoubmF2LXV0aWxpdHkgbGkubmF2LWl0ZW0gYS5uYXYtbGluayB7IHBhZGRpbmc6IDA7IHRleHQtZGVjb3JhdGlvbjogbm9uZTsgfQouZHJvcGRvd24tdG9nZ2xlOjphZnRlciB7IGZvbnQtc2l6ZTogLjc1ZW07IHZlcnRpY2FsLWFsaWduOiBiYXNlbGluZTsgfQoubG9nby5pc29sb2dvLmxvZ28tc20geyBoZWlnaHQ6IDUwcHg7IHdpZHRoOiA1MHB4OyB9Ci5uYXYtaXNvIC5uYXZiYXItdG9nZ2xlciB7IG1hcmdpbi1sZWZ0OiAwLjVyZW07IG9yZGVyOiA0OyB9Ci5uYXZiYXItdG9nZ2xlci1pY29uLWFuaW1hdGVkIHsgd2lkdGg6IDIwcHg7IGhlaWdodDogMTVweDsgcG9zaXRpb246IHJlbGF0aXZlOyBtYXJnaW46IDA7IHRyYW5zZm9ybTogcm90YXRlKDApOyBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7IH0KLm5hdi1pc28gLm5hdmJhci1mb3JtIHsgb3JkZXI6IDI7IGZsZXg6IDE7IH0KLm5hdmJhci1mb3JtIHsgbWFyZ2luLWxlZnQ6IDAuNXJlbTsgfQouaGVpZ2h0LTMwMCB7IGhlaWdodDogMzAwcHg7IH0Kc2VjdGlvbi5zZWN0aW9uLW1kIHsgcGFkZGluZy10b3A6IDMuNzVyZW07IHBhZGRpbmctYm90dG9tOiAzLjc1cmVtOyB9Ci5uYXYtcmVsYXRpdmVzIC5uYXYtY2hpbGRyZW4sIC5uYXYtcmVsYXRpdmVzIC5zZWN0aW9uLWhlYWQgeyBmb250LXNpemU6IGNhbGMoMS4yNTVyZW0gKyAuMDZ2dyk7IH0KLnByZXZpb3VzIGE6OmJlZm9yZSwgLnNlY3Rpb24tYmFjayBhOjpiZWZvcmUgeyB2ZXJ0aWNhbC1hbGlnbjogYm90dG9tOyBwYWRkaW5nLXJpZ2h0OiAuM2VtOyB0cmFuc2l0aW9uOiBhbGwgMDsgfQpAbWVkaWEgc2NyZWVuIGFuZCAobWF4LXdpZHRoOjUwMHB4KSB7IC5zZWN0aW9uLWJhY2sgeyBmbGV4LXdyYXA6IG5vd3JhcDsgb3ZlcmZsb3cteDogaGlkZGVuOyB9IC5zZWN0aW9uLWJhY2sgPiBhOm5vdCg6Zmlyc3Qtb2YtdHlwZSk6bm90KDpsYXN0LW9mLXR5cGUpIHsgZGlzcGxheTogbm9uZTsgfSAuaGVhZGluZy1jb25kZW5zZWQgPiBoMSB7IGZvbnQtc2l6ZTogMzEuNjU4OHB4OyBsaW5lLWhlaWdodDogMzkuNTczNXB4OyB9IC5oZWFkaW5nLWNvbmRlbnNlZCA+IGgyIHsgZm9udC1zaXplOiAyNi4xNzEzcHg7IGxpbmUtaGVpZ2h0OiAzMi43MTQxcHg7IH0gfQpAbWVkaWEgKG1heC13aWR0aDogMTE5OS45OHB4KSB7IHNlY3Rpb24uc2VjdGlvbi1uYXZpZ2F0aW9uIHsgcGFkZGluZy10b3A6IDEuODc1cmVtOyB9IH0KPC9zdHlsZT4KPCEtLSBPbmVUcnVzdCBDb29raWVzIENvbnNlbnQgTm90aWNlIHN0YXJ0IGZvciB3d3cuaXNvLm9yZyAtLT4KPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0iaHR0cHM6Ly9jZG4uY29va2llbGF3Lm9yZy9jb25zZW50LzAyMTdiYTlhLTg5MzUtNDRkNi04NzJkLTFmMjIzMzA0ZTExNy9PdEF1dG9CbG9jay5qcyIgPjwvc2NyaXB0Pgo8c2NyaXB0IHNyYz0iaHR0cHM6Ly9jZG4uY29va2llbGF3Lm9yZy9zY3JpcHR0ZW1wbGF0ZXMvb3RTREtTdHViLmpzIiBkYXRhLWRvY3VtZW50LWxhbmd1YWdlPSJ0cnVlIiB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIGNoYXJzZXQ9IlVURi04IiBkYXRhLWRvbWFpbi1zY3JpcHQ9IjAyMTdiYTlhLTg5MzUtNDRkNi04NzJkLTFmMjIzMzA0ZTExNyIgPjwvc2NyaXB0Pgo8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+Ci8vIGZ1bmN0aW9uIHRvIHB1bGwgY29va2llIHZhbHVlCmZ1bmN0aW9uIGdldENvb2tpZShuYW1lKSB7CiAgICB2YXIgdmFsdWUgPSAiOyAiICsgZG9jdW1lbnQuY29va2llOwogICAgdmFyIHBhcnRzID0gdmFsdWUuc3BsaXQoIjsgIiArIG5hbWUgKyAiPSIpOwogICAgaWYgKHBhcnRzLmxlbmd0aCA9PSAyKSByZXR1cm4gcGFydHMucG9wKCkuc3BsaXQoIjsiKS5zaGlmdCgpOwp9CmZ1bmN0aW9uIE9wdGFub25XcmFwcGVyKCkgewogICAgY29uc29sZS5sb2coIk9wdGFub25XcmFwcGVyIGNhbGxlZCIpOwogICAgdmFyIE9BQkNjb29raWVOYW1lID0gIk9wdGFub25BbGVydEJveENsb3NlZCI7CiAgICB2YXIgYmFubmVyQWNjZXB0QnRuID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoIm9uZXRydXN0LWFjY2VwdC1idG4taGFuZGxlciIpOwogICAgdmFyIHBjQWxsb3dBbGxCdG4gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiYWNjZXB0LXJlY29tbWVuZGVkLWJ0bi1oYW5kbGVyIik7CiAgICB2YXIgcGNTYXZlQnRuID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgic2F2ZS1wcmVmZXJlbmNlLWJ0bi1oYW5kbGVyIG9uZXRydXN0LWNsb3NlLWJ0bi1oYW5kbGVyIilbMF07CiAgICB2YXIgT0FCQ2Nvb2tpZSA9IGdldENvb2tpZShPQUJDY29va2llTmFtZSk7CiAgIAogICAgLy8gSUYgbG9naWMgbmVlZGVkIGhlcmUgYmVjYXVzZSBvdC1iYW5uZXItc2RrIERJViBpcyBub3QgaW5qZWN0ZWQgb24gcGFnZSBsb2FkcyBpZiBiYW5uZXIgaXMgbm90IGV4cG9zZWQKICAgIGlmICghT0FCQ2Nvb2tpZSAmJiBiYW5uZXJBY2NlcHRCdG4pIHsKICAgICAgICBiYW5uZXJBY2NlcHRCdG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbigpIHsKICAgICAgICAgICAgY29uc29sZS5sb2coIkFsbG93ZWQgYWxsIHZpYSBCYW5uZXIiKTsKICAgICAgICAgICAgbG9jYXRpb24ucmVsb2FkKCk7CiAgICAgICAgfSk7CiAgICB9CiAgICBpZiAocGNBbGxvd0FsbEJ0bikgewogICAgICAgIHBjQWxsb3dBbGxCdG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbigpIHsKICAgICAgICAgICAgY29uc29sZS5sb2coIkFsbG93ZWQgYWxsIHZpYSBQcmVmZXJlbmNlIENlbnRlciIpOwogICAgICAgICAgICBsb2NhdGlvbi5yZWxvYWQoKTsKICAgICAgICB9KTsKICAgIH0KICAgIGlmKHBjU2F2ZUJ0bil7CiAgICAgICAgcGNTYXZlQnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHNldFRpbWVvdXQoKCk9PiB7CiAgICAgICAgICAgIGNvbnNvbGUubG9nKCJTZXQgY3VzdG9tIHNldHRpbmdzIHZpYSBQcmVmZXJlbmNlIENlbnRlciIpOwogICAgICAgICAgICBsb2NhdGlvbi5yZWxvYWQoKTsKICAgICAgICB9LCAxMDAwKSAvL3F1aWNrIHRpbWVvdXQgc28gdGhhdCB0aGUgY29uc2VudCByZWNlaXB0IGNhbiBiZSBzZW50IGFuZCB0aGUgY29va2llIGNhbiBiZSB1cGRhdGVkCiAgICAgICAgfSk7CiAgICB9Cn0KPC9zY3JpcHQ+CjwhLS0gT25lVHJ1c3QgQ29va2llcyBDb25zZW50IE5vdGljZSBlbmQgZm9yIHd3dy5pc28ub3JnIC0tPgo8bWV0YSBuYW1lPSJnb29nbGUtc2l0ZS12ZXJpZmljYXRpb24iIGNvbnRlbnQ9Im1RdXFXUGJXcnVaZFFnWlI4UXdieE9XbmpqeGtjRml5SkxIV1ktY09PSGsiIC8+Cgo8IS0tIE1hdG9tbyBUYWcgTWFuYWdlciAtLT4KPHNjcmlwdCAgdHlwZT0idGV4dC9wbGFpbiIgY2xhc3M9Im9wdGFub24tY2F0ZWdvcnktQzAwMDIiPgp2YXIgX210bSA9IHdpbmRvdy5fbXRtID0gd2luZG93Ll9tdG0gfHwgW107Cl9tdG0ucHVzaCh7J210bS5zdGFydFRpbWUnOiAobmV3IERhdGUoKS5nZXRUaW1lKCkpLCAnZXZlbnQnOiAnbXRtLlN0YXJ0J30pOwp2YXIgZD1kb2N1bWVudCwgZz1kLmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpLCBzPWQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ3NjcmlwdCcpWzBdOwpnLmFzeW5jPXRydWU7IGcuc3JjPSdodHRwczovL2Nkbi5tYXRvbW8uY2xvdWQvaXNvLm1hdG9tby5jbG91ZC9jb250YWluZXJfZElOd1lLZXguanMnOyBzLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGcscyk7Cjwvc2NyaXB0Pgo8IS0tIEVuZCBNYXRvbW8gVGFnIE1hbmFnZXIgLS0+CjxtZXRhIGNoYXJzZXQ9InV0Zi04Ij4KICAgIDxtZXRhIG5hbWU9InZpZXdwb3J0IiBjb250ZW50PSJ3aWR0aD1kZXZpY2Utd2lkdGgsIGluaXRpYWwtc2NhbGU9MSI+CiAgICA8bWV0YSBodHRwLWVxdWl2PSJYLVVBLUNvbXBhdGlibGUiIGNvbnRlbnQ9IklFPWVkZ2UiPgoKICAgIDx0aXRsZT4gSVNPL0lFQy9JRUVFIDk5NDU6MjAwOSAtIFRlY2hub2xvZ2llcyBkZSBsJiMwMzk7aW5mb3JtYXRpb24g4oCUIFNww6ljaWZpY2F0aW9ucyBkZSBiYXNlIGRlIGwmIzAzOTtpbnRlcmZhY2UgcG91ciBsYSBwb3J0YWJpbGl0w6kgZGVzIHN5c3TDqG1lcyAoUE9TSVjCriksIElzc3VlIDc8L3RpdGxlPgoKICAgIDxsaW5rIHJlbD0icHJlbG9hZCIgYXM9ImZvbnQiIHR5cGU9ImZvbnQvd29mZjIiIGhyZWY9Ii9tb2R1bGVzL2lzb29yZy10ZW1wbGF0ZS9mb250cy9pbnRlci9JbnRlci52YXIud29mZjI/dj0zLjE5IiBjcm9zc29yaWdpbi8+CgogICAgPGxpbmsgcmVsPSJzdHlsZXNoZWV0IiBocmVmPSIvbW9kdWxlcy9pc29vcmctdGVtcGxhdGUvY3NzL3dvb2QuYm9vdHN0cmFwLm1pbi5jc3MiIG1lZGlhPSJzY3JlZW4scHJpbnQsaGFuZGhlbGQiIHR5cGU9InRleHQvY3NzIi8+CiAgICA8bGluayByZWw9InByZWxvYWQiIGhyZWY9Ii9tb2R1bGVzL2lzb29yZy10ZW1wbGF0ZS9jc3Mvd29vZC5pc28ubWluLmNzcyIgYXM9InN0eWxlIiBvbmxvYWQ9InRoaXMub25sb2FkPW51bGw7dGhpcy5yZWw9J3N0eWxlc2hlZXQnIj4KCiAgICAKCjwhLS0gc3RhcnQgZmF2aWNvbnMgLS0+CiAgICA8bGluayByZWw9ImFwcGxlLXRvdWNoLWljb24tcHJlY29tcG9zZWQiIGhyZWY9Ii9tb2R1bGVzL2lzb29yZy10ZW1wbGF0ZS9pbWcvaXNvL2Zhdmljb24vcmVkL2FwcGxlLXRvdWNoLWljb24tMTUyeDE1Mi1wcmVjb21wb3NlZC5wbmciPgogICAgPGxpbmsgcmVsPSJzaG9ydGN1dCBpY29uIiBocmVmPSIvbW9kdWxlcy9pc29vcmctdGVtcGxhdGUvaW1nL2lzby9mYXZpY29uL3JlZC9mYXZpY29uLmljbyI+CiAgICA8bWV0YSBuYW1lPSJtc2FwcGxpY2F0aW9uLVRpbGVDb2xvciIgY29udGVudD0iI2VlZSI+CiAgICA8bWV0YSBuYW1lPSJtc2FwcGxpY2F0aW9uLVRpbGVJbWFnZSIgY29udGVudD0iL21vZHVsZXMvaXNvb3JnLXRlbXBsYXRlL2ltZy9pc28vZmF2aWNvbi9yZWQvbXN0aWxlLTE0NHgxNDQucG5nIj4KICAgIDwhLS0gZW5kIGZhdmljb25zIC0tPgoKICAgIDxtZXRhIG5hbWU9InRoZW1lLWNvbG9yIiBjb250ZW50PSIjMzMzIj4KCiAgCjxzY3JpcHQgdHlwZT0iYXBwbGljYXRpb24vanNvbiIgaWQ9ImphaGlhLWRhdGEtY3R4Ij57ImNvbnRleHRQYXRoIjoiIiwibGFuZyI6ImZyIiwidWlsYW5nIjoiZnIiLCJzaXRlVXVpZCI6IjQzOTE0NmY4LTY3N2UtNGRkZS1iNmM2LWI2OTJiNzUzNGY1MiIsIndjYWciOmZhbHNlLCJja2VDZmciOiIifTwvc2NyaXB0Pgo8c2NyaXB0IHR5cGU9ImFwcGxpY2F0aW9uL2pzb24iIGlkPSJqYWhpYS1kYXRhLWNrIj57InBhdGgiOiIvbW9kdWxlcy9ja2VkaXRvci9qYXZhc2NyaXB0LyIsImxuZyI6ImZyX0ZSIn08L3NjcmlwdD4KPHNjcmlwdCBzcmM9Ii9qYXZhc2NyaXB0L2luaXRKYWhpYUNvbnRleHQuanMiPjwvc2NyaXB0Pgo8c2NyaXB0IGlkPSJzdGF0aWNBc3NldEphdmFzY3JpcHQwIiBzcmM9Ii9tb2R1bGVzL2lzb29yZy10ZW1wbGF0ZS9qYXZhc2NyaXB0L3dvb2QuZnVsbC5taW4uanM/MTY5Mjc3NDI3OTkzNSIgIGRlZmVyPjwvc2NyaXB0Pgo8c2NyaXB0IGlkPSJzdGF0aWNBc3NldEphdmFzY3JpcHQxIiBzcmM9Ii9tb2R1bGVzL2lzb29yZy10ZW1wbGF0ZS9qYXZhc2NyaXB0L2N1c3RvbS5qcz8xNjkyNzc0Mjc5OTM1IiAgZGVmZXI+PC9zY3JpcHQ+CjxzY3JpcHQgc3JjPSIvbW9kdWxlcy9pc28tamFoaWEtc2VydmljZS1tb2R1bGUvamF2YXNjcmlwdC9jYXRhbG9ndWUuanMiIGRlZmVyID48L3NjcmlwdD4KCjxtZXRhIG5hbWU9ImNhdGVnb3J5IiBjb250ZW50PSJwIiAvPgogIDxtZXRhIG5hbWU9InB1YmRhdGUiIGNvbnRlbnQ9IjIwMjMwMjE0IiAvPgogIAo8IS0tIFR3aXR0ZXIgQ2FyZCBkYXRhIC0tPgogIDxtZXRhIG5hbWU9InR3aXR0ZXI6c2l0ZSIgY29udGVudD0iQGlzb3N0YW5kYXJkcyIgLz4KCiAgPCEtLSBPcGVuIEdyYXBoIGRhdGEgLS0+CiAgPG1ldGEgcHJvcGVydHk9Im9nOnNpdGVfbmFtZSIgY29udGVudD0iSVNPIiAvPgogIDxtZXRhIHByb3BlcnR5PSJvZzp1cmwiIGNvbnRlbnQ9Imh0dHBzOi8vd3d3Lmlzby5vcmcvZnIvc3RhbmRhcmQvNTA1MTYuaHRtbCIgLz4KICA8bWV0YSBwcm9wZXJ0eT0ib2c6dHlwZSIgY29udGVudD0id2Vic2l0ZSIgLz4KICA8IS0tIFRodW1ibmFpbCBpbWFnZSAoZm9yIHR3aXR0ZXIgYW5kIE9wZW4gR3JhcGgpIC0tPgogICAgPG1ldGEgbmFtZT0idGh1bWJuYWlsIiBjb250ZW50PSIvbW9kdWxlcy9pc28tamFoaWEtc2VydmljZS1tb2R1bGUvaW1nL2lzby9pc28tbG9nby1wcmludC5naWYiIC8+CiAgICA8bWV0YSBuYW1lPSJ0d2l0dGVyOmNhcmQiIGNvbnRlbnQ9InN1bW1hcnkiIC8+CiAgICA8bWV0YSBuYW1lPSJ0d2l0dGVyOmltYWdlIiBjb250ZW50PSIvbW9kdWxlcy9pc28tamFoaWEtc2VydmljZS1tb2R1bGUvaW1nL2lzby9pc28tbG9nby1wcmludC5naWYiIC8+CiAgICA8bWV0YSBwcm9wZXJ0eT0ib2c6aW1hZ2UiIGNvbnRlbnQ9Ii9tb2R1bGVzL2lzby1qYWhpYS1zZXJ2aWNlLW1vZHVsZS9pbWcvaXNvL2lzby1sb2dvLXByaW50LmdpZiIgLz4KICAgIDxtZXRhIHByb3BlcnR5PSJvZzppbWFnZTphbHQiIGNvbnRlbnQ9IklTTyBsb2dvIiAvPgogIDwhLS0gVGl0bGUgKGZvciB0d2l0dGVyIGFuZCBPcGVuIEdyYXBoKSAtLT4KICAgIDxtZXRhIG5hbWU9InR3aXR0ZXI6dGl0bGUiIGNvbnRlbnQ9IklTTy9JRUMvSUVFRSA5OTQ1OjIwMDkiIC8+CiAgICA8bWV0YSBwcm9wZXJ0eT0ib2c6dGl0bGUiIGNvbnRlbnQ9IklTTy9JRUMvSUVFRSA5OTQ1OjIwMDkiIC8+CiAgPCEtLSBEZXNjcmlwdGlvbiAoZm9yIGdvb2dsZSwgdHdpdHRlciBhbmQgT3BlbiBHcmFwaCkgLS0+CiAgICA8bWV0YSBuYW1lPSJ0d2l0dGVyOmRlc2NyaXB0aW9uIiBjb250ZW50PSJUZWNobm9sb2dpZXMgZGUgbCYjMDM5O2luZm9ybWF0aW9uIOKAlCBTcMOpY2lmaWNhdGlvbnMgZGUgYmFzZSBkZSBsJiMwMzk7aW50ZXJmYWNlIHBvdXIgbGEgcG9ydGFiaWxpdMOpIGRlcyBzeXN0w6htZXMgKFBPU0lYwq4pLCBJc3N1ZSA3IiAvPgogICAgPG1ldGEgcHJvcGVydHk9Im9nOmRlc2NyaXB0aW9uIiBjb250ZW50PSJUZWNobm9sb2dpZXMgZGUgbCYjMDM5O2luZm9ybWF0aW9uIOKAlCBTcMOpY2lmaWNhdGlvbnMgZGUgYmFzZSBkZSBsJiMwMzk7aW50ZXJmYWNlIHBvdXIgbGEgcG9ydGFiaWxpdMOpIGRlcyBzeXN0w6htZXMgKFBPU0lYwq4pLCBJc3N1ZSA3IiAvPgogICAgPG1ldGEgbmFtZT0iZGVzY3JpcHRpb24iIGNvbnRlbnQ9IlRlY2hub2xvZ2llcyBkZSBsJiMwMzk7aW5mb3JtYXRpb24g4oCUIFNww6ljaWZpY2F0aW9ucyBkZSBiYXNlIGRlIGwmIzAzOTtpbnRlcmZhY2UgcG91ciBsYSBwb3J0YWJpbGl0w6kgZGVzIHN5c3TDqG1lcyAoUE9TSVjCriksIElzc3VlIDciIC8+CiAgPCEtLSBGYWNlYm9vayBhZG1pbnMgOiBMaW9uZWwsTWFyaWEgLS0+CiAgPG1ldGEgcHJvcGVydHk9ImZiOmFkbWlucyIgY29udGVudD0iMTAwMDAxMTE2MDc5Njc2LDEwMDAwMTQ0MDAwMzMwNSIgLz4KCiAgCgo8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCIgc3JjPSIvbW9kdWxlcy9Dc3JmU2VydmxldCI+PC9zY3JpcHQ+CjwvaGVhZD4KICA8Ym9keSBjbGFzcz0idGhlbWUtcmVkIGxhbmctZnIiIGlkPSJwYWdlLXRvcCI+CiAgICA8YSBjbGFzcz0ic2tpcC1uYXZpZ2F0aW9uIGJ0biBidG4taW5mbyB2aXN1YWxseS1oaWRkZW4gdmlzdWFsbHktaGlkZGVuLWZvY3VzYWJsZSIgaHJlZj0iI2NvbnRlbnQiPlBhc3NlciBhdSBjb250ZW51IHByaW5jaXBhbDwvYT4KCiAgICA8IS0tIFRvcGJhciB1dGlsaXR5IC0tPgogICAgPG5hdiByb2xlPSJuYXZpZ2F0aW9uIiBhcmlhLWxhYmVsPSJVdGlsaXR5IE5hdmlnYXRpb24iIGNsYXNzPSJuYXYtdXRpbGl0eSBuYXZiYXItZXhwYW5kLWxnIHRleHQtc20gbmF2YmFyLWRhcmsgYmctZGFya2VyZ3JheSB0ZXh0LWxpZ2h0Ij4KICAgICAgPGRpdiBjbGFzcz0iY29udGFpbmVyIGQtZmxleCBqdXN0aWZ5LWNvbnRlbnQtYmV0d2VlbiI+CiAgICAgICAgPGRpdiBjbGFzcz0idGlja2VyIHRleHQtdHJ1bmNhdGUgZmxvYXQtc3RhcnQiPjxhIGhyZWY9Ii9mci9hbm51YWxtZWV0aW5nIiB0aXRsZT0iUsOpdW5pb24gYW5udWVsbGUgMjAyMyIgPlLDqXVuaW9uIGFubnVlbGxlIDIwMjM8L2E+PC9kaXY+CiAgICAgICAgPHVsIGNsYXNzPSJuYXYgZC1mbGV4IGp1c3RpZnktY29udGVudC1lbmQganVzdGlmeS1jb250ZW50LXNtLWFyb3VuZCBqdXN0aWZ5LWNvbnRlbnQtbWQtZW5kIiBpZD0idXRpbGl0aWVzIj4KICAgICAgICAgIDxsaSBjbGFzcz0ibmF2LWl0ZW0gZC1ub25lIGQtc20tYmxvY2siPgogICAgICAgICAgICA8YSBocmVmPSJodHRwczovL2xvZ2luLmlzby5vcmciIGNsYXNzPSJuYXYtbGluayBkLWZsZXggYWxpZ24taXRlbXMtY2VudGVyIiB0aXRsZT0iUG9ydGFpbCBkZXMgYXBwbGljYXRpb25zIGRlIGwnSVNPIj48aSBjbGFzcz0iYmktZ3JpZC0zeDMtZ2FwLWZpbGwiPjwvaT4mbmJzcDtBcHBsaWNhdGlvbnM8L2E+CiAgICAgICAgICA8L2xpPgogICAgICAgICAgPGxpIGNsYXNzPSJuYXYtaXRlbSBkLW5vbmUgZC1zbS1ibG9jayI+CiAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vd3d3Lmlzby5vcmcvb2JwL3VpL2ZyLyIgY2xhc3M9Im5hdi1saW5rIGQtZmxleCBhbGlnbi1pdGVtcy1jZW50ZXIiIHRpdGxlPSJQbGF0ZWZvcm1lIGRlIGNvbnN1bHRhdGlvbiBlbiBsaWduZSI+PGkgY2xhc3M9ImJpLWpvdXJuYWwtdGV4dCI+PC9pPiZuYnNwO09CUDwvYT4KICAgICAgICAgIDwvbGk+CiAgICAgICAgICA8bGkgY2xhc3M9Im5hdi1pdGVtIGRyb3Bkb3duIiBpZD0ibGFuZy1zd2l0Y2hlciI+CiAgPGEgaWQ9ImxhbmctZHJvcGRvd24iIGNsYXNzPSJuYXYtbGluayBkcm9wZG93bi10b2dnbGUiIGRhdGEtYnMtdG9nZ2xlPSJkcm9wZG93biIgaHJlZj0iIyIgYXJpYS1leHBhbmRlZD0iZmFsc2UiPmZyYW7Dp2FpczwvYT4KICA8dWwgY2xhc3M9ImRyb3Bkb3duLW1lbnUgZHJvcGRvd24tbWVudS1lbmQiIHJvbGU9Im1lbnUiIGFyaWEtbGFiZWxsZWRieT0ibGFuZy1kcm9wZG93biI+CiAgICA8bGkgY2xhc3M9ImxhbmctZW4gIj48YSBjbGFzcz0iZHJvcGRvd24taXRlbSAiIGhyZWY9Ii9zdGFuZGFyZC81MDUxNi5odG1sIj5FbmdsaXNoPC9hPjwvbGk+PGxpIGNsYXNzPSJsYW5nLXJ1ICI+PGEgY2xhc3M9ImRyb3Bkb3duLWl0ZW0gIiBocmVmPSIvcnUvc3RhbmRhcmQvNTA1MTYuaHRtbCI+0YDRg9GB0YHQutC40Lk8L2E+PC9saT48L3VsPgo8L2xpPjwvdWw+CiAgICAgIDwvZGl2PgogICAgPC9uYXY+CgogICAgPCEtLSBIZWFkZXIgSVNPLk9SRyAtLT4KICAgIDxoZWFkZXIgY2xhc3M9ImhlYWRlci1ib290c3RyYXAgc3RpY2t5LXRvcCI+CiAgICAgIDwhLS0gTWFpbiBuYXZpZ2F0aW9uIC0tPgogICAgICA8bmF2IGNsYXNzPSJuYXZiYXIgbmF2LWlzbyBuYXZiYXItZXhwYW5kLW1kIG5hdmJhci1saWdodCBzaGFkb3ctbWQgYmctd2hpdGUgdGV4dC1kYXJrIj4KICAgICAgICA8ZGl2IGNsYXNzPSJjb250YWluZXIiPgogICAgICAgICAgPGEgY2xhc3M9ImxvZ28gbG9nby1zcXVhcmUgaXNvbG9nbyBsb2dvLXNtIiBocmVmPSIvZnIvaG9tZS5odG1sIiB0aXRsZT0iT3JnYW5pc2F0aW9uIGludGVybmF0aW9uYWxlIGRlIG5vcm1hbGlzYXRpb24iIGFsdD0iTG9nbyBJU08iPjwvYT4KICAgICAgICAgIDxkaXYgY2xhc3M9Imlzb2xvZ28tcHJpbnQiPjxpbWcgbG9hZGluZz0ibGF6eSIgZmV0Y2hwcmlvcml0eT0ibG93IiBzcmM9Ii9tb2R1bGVzL2lzb29yZy10ZW1wbGF0ZS9pbWcvaXNvL2lzby1sb2dvLXByaW50LmdpZiIgYWx0PSJMb2dvIElTTyBwb3VyIGltcHJlc3Npb24iLz48L2Rpdj4KICAgICAgICAgIDxidXR0b24gY2xhc3M9ImJ0biBidG4tbGlnaHQgbmF2YmFyLXRvZ2dsZXIiIHR5cGU9ImJ1dHRvbiIgZGF0YS1icy10b2dnbGU9ImNvbGxhcHNlIiBkYXRhLWJzLXRhcmdldD0iI21haW5OYXYiIGFyaWEtY29udHJvbHM9Im1haW5OYXYiIGFyaWEtZXhwYW5kZWQ9ImZhbHNlIiBhcmlhLWxhYmVsPSJUb2dnbGUgbmF2aWdhdGlvbiI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9Im5hdmJhci10b2dnbGVyLWljb24tYW5pbWF0ZWQiPjxzcGFuPjwvc3Bhbj48c3Bhbj48L3NwYW4+PHNwYW4+PC9zcGFuPjxzcGFuPjwvc3Bhbj48L2Rpdj48c3BhbiBjbGFzcz0idmlzdWFsbHktaGlkZGVuLXhzIj4mbmJzcDtNZW51PC9zcGFuPgogICAgICAgICAgPC9idXR0b24+CiAgICAgICAgICA8IS0tIFRPUCBMRVZFTDEgTkFWSUdBVElPTiAtLT4KICAgICAgICAgIDxuYXYgcm9sZT0ibmF2aWdhdGlvbiIgYXJpYS1sYWJlbD0iTWFpbiBOYXZpZ2F0aW9uIiBjbGFzcz0ibmF2LW1lZ2FtZW51IGNvbGxhcHNlIG5hdmJhci1jb2xsYXBzZSIgaWQ9Im1haW5OYXYiPjx1bCByb2xlPSdtZW51YmFyJyBjbGFzcz0nbmF2YmFyLW5hdiBtZS1hdXRvIG1iLWxnLTAgcHMtMiBwZS0yIG5hdi1sZXZlbDEnID48bGkgcm9sZT0nbWVudWl0ZW0nIGNsYXNzPSduYXYtaXRlbSBkcm9wZG93biBwb3NpdGlvbi1zdGF0aWMgbm9DaGlsZHJlbiBmaXJzdEluTGV2ZWwnID48YSBjbGFzcz0nbmF2LWxpbmsgZHJvcGRvd24tdG9nZ2xlIG1lZ2FtZW51LXRvZ2dsZSAgJyAgIHRpdGxlPSJQYXJjZSBxdeKAmWVsbGVzIGNvdXZyZW50IHByYXRpcXVlbWVudCB0b3VzIGxlcyBwcm9kdWl0cywgcHJvY2Vzc3VzIGV0IHNlcnZpY2VzIHBvc3NpYmxlcyBldCBpbWFnaW5hYmxlcywgbGVzIG5vcm1lcyBJU08gcGV1dmVudCDDqnRyZSB1dGlsaXPDqWVzIHBhcnRvdXQuIiAgaHJlZj0nL2ZyL3N0YW5kYXJkcy5odG1sJz5Ob3JtZXM8L2E+PC9saT48IS0tIGNsb3NlIG9mIGxpc3QgaXRlbSBsZXZlbCAxIC0tPjxsaSByb2xlPSdtZW51aXRlbScgY2xhc3M9J25hdi1pdGVtIGRyb3Bkb3duIHBvc2l0aW9uLXN0YXRpYyBub0NoaWxkcmVuJyA+PGEgY2xhc3M9J25hdi1saW5rIGRyb3Bkb3duLXRvZ2dsZSBtZWdhbWVudS10b2dnbGUgICcgICB0aXRsZT0iTOKAmUlTTyByw6l1bml0IGRlcyBleHBlcnRzIGR1IG1vbmRlIGVudGllciBwb3VyIMOpbGFib3JlciBkZXMgTm9ybWVzIGludGVybmF0aW9uYWxlcyBxdWkgYWlkZW50IMOgIHLDqXNvdWRyZSBsZXMgcHJvYmzDqG1lcyBldCBlbmNvdXJhZ2VudCBs4oCZaW5ub3ZhdGlvbi4iICBocmVmPScvZnIvYWJvdXQtdXMuaHRtbCc+w4AgcHJvcG9zIGRlIGzigJlJU088L2E+PC9saT48IS0tIGNsb3NlIG9mIGxpc3QgaXRlbSBsZXZlbCAxIC0tPjxsaSByb2xlPSdtZW51aXRlbScgY2xhc3M9J25hdi1pdGVtIGRyb3Bkb3duIHBvc2l0aW9uLXN0YXRpYyBub0NoaWxkcmVuJyA+PGEgY2xhc3M9J25hdi1saW5rIGRyb3Bkb3duLXRvZ2dsZSBtZWdhbWVudS10b2dnbGUgICcgICB0aXRsZT0iUmVzdGV6IGluZm9ybcOpIGRlcyBkZXJuacOocmVzIG5vdXZlYXV0w6lzIGVuIG1hdGnDqHJlIGRlIG5vcm1hbGlzYXRpb24gb3UgcGFyY291cmV6IG5vcyByaWNoZXMgYXJjaGl2ZXMiICBocmVmPScvZnIvbmV3cy5odG1sJz5BY3R1YWxpdMOpczwvYT48L2xpPjwhLS0gY2xvc2Ugb2YgbGlzdCBpdGVtIGxldmVsIDEgLS0+PGxpIHJvbGU9J21lbnVpdGVtJyBjbGFzcz0nbmF2LWl0ZW0gZHJvcGRvd24gcG9zaXRpb24tc3RhdGljIG5vQ2hpbGRyZW4nID48YSBjbGFzcz0nbmF2LWxpbmsgZHJvcGRvd24tdG9nZ2xlIG1lZ2FtZW51LXRvZ2dsZSAgJyAgIHRpdGxlPSJEw6ljb3V2cmV6IGNvbW1lbnQgbGUgcHJvY2Vzc3VzIGRlIGzigJlJU08gcsOpdW5pIGRlcyBleHBlcnRzIGR1IG1vbmRlIGVudGllciBwb3VyIGNyw6llciBkZXMgbm9ybWVzIGFkb3B0w6llcyBwYXJ0b3V0IGRhbnMgbGUgbW9uZGUuIiAgaHJlZj0nL2ZyL2RldmVsb3Bpbmctc3RhbmRhcmRzLmh0bWwnPlBhcnRpY2lwZXI8L2E+PC9saT48IS0tIGNsb3NlIG9mIGxpc3QgaXRlbSBsZXZlbCAxIC0tPjxsaSByb2xlPSdtZW51aXRlbScgY2xhc3M9J25hdi1pdGVtIGRyb3Bkb3duIHBvc2l0aW9uLXN0YXRpYyBub0NoaWxkcmVuIGluUGF0aCAgbGFzdEluTGV2ZWwnID48YSBjbGFzcz0nbmF2LWxpbmsgZHJvcGRvd24tdG9nZ2xlIG1lZ2FtZW51LXRvZ2dsZSAgJyAgIHRpdGxlPSJWb3VzIHZvdWxleiBhY2hldGVyIGRlcyBOb3JtZXMgaW50ZXJuYXRpb25hbGVzLCBkZXMgbGlnbmVzIGRpcmVjdHJpY2VzLCBkZXMgY29sbGVjdGlvbnMgb3UgZGVzIGxpc3RlcyBkZSBjb250csO0bGU/IEVsbGVzIHNvbnQgdG91dGVzIHN1ciBs4oCZSVNPIFN0b3JlLiIgIGhyZWY9Jy9mci9zdG9yZS5odG1sJz5TdG9yZTwvYT48L2xpPjwhLS0gY2xvc2Ugb2YgbGlzdCBpdGVtIGxldmVsIDEgLS0+PC91bD48IS0tIGNsb3NlIG9mIGNvbnRhaW5lciBsZXZlbCAxIC0tPjwvbmF2Pjxmb3JtIGNsYXNzPSJuYXZiYXItZm9ybSBkLWZsZXggaXNvc2VhcmNoIG1zLXNtLTIiIHJvbGU9InNlYXJjaCIgaWQ9InNpdGVTZWFyY2giPgogICAgICAgICAgICA8c3BhbiBjbGFzcz0iaGlkZGVuIiBkYXRhLXNlYXJjaHBhZ2V1cmw9Ii9mci9zZWFyY2guaHRtbCI+PC9zcGFuPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJpbnB1dC1ncm91cCI+CiAgICAgICAgICAgICAgPGlucHV0IHR5cGU9InNlYXJjaCIgY2xhc3M9ImZvcm0tY29udHJvbCIgcGxhY2Vob2xkZXI9IlJlY2hlcmNoZSIgYXJpYS1sYWJlbGxlZGJ5PSJpbnB1dC1zZWFyY2giPgogICAgICAgICAgICAgIDxidXR0b24gaWQ9ImlucHV0LXNlYXJjaCIgY2xhc3M9ImJ0biBidG4tcHJpbWFyeSIgdHlwZT0ic3VibWl0Ij48aSBjbGFzcz0iYmktc2VhcmNoIHRleHQtbXV0ZWQiPjwvaT48c3BhbiBjbGFzcz0idmlzdWFsbHktaGlkZGVuIj5SZWNoZXJjaGU8L3NwYW4+PC9idXR0b24+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgPC9mb3JtPgogICAgICAgICAgPGEgcm9sZT0iYnV0dG9uIiBpZD0ic2hvcHBpbmdDYXJ0IiBjbGFzcz0iYnRuIGJ0bi1saWdodCBzaG9wcGluZy1jYXJ0LWxpbmsgYmctd2hpdGUgYm9yZGVyLTAgdGV4dC1tdXRlZCBkLW5vbmUgZC1sZy1ibG9jayIgaHJlZj0iL3dlYnN0b3JlL3Nob3BwaW5nYmFza2V0P21lbWJlcklkPUlTTyZndWlsYW5nPWZyIiB0aXRsZT0iUGFuaWVyIGQnYWNoYXQiIGFyaWEtbGFiZWw9IlBhbmllciBkJ2FjaGF0IiBzdHlsZS09ImRpc3BsYXk6bm9uZTsiPgogICAgICAgICAgICA8aSBjbGFzcz0iYmktY2FydCI+PC9pPjxzcGFuIGlkPSJjYXJ0VGV4dCIgY2xhc3M9InZpc3VhbGx5LWhpZGRlbi14cyBtcy0xIiBzdHlsZT0iZGlzcGxheTogbm9uZTsiPiBQYW5pZXI8L3NwYW4+CiAgICAgICAgICA8L2E+CiAgICAgICAgPC9kaXY+CiAgICAgIDwvbmF2PgoKICAgIDwvaGVhZGVyPgoKICAgIDwhLS0gTUFJTiBDT05URU5UIC0tPgogICAgPG1haW4gcm9sZT0ibWFpbiIgaWQ9ImNvbnRlbnQiIGNsYXNzPSJhY2VyIiBhcmlhLWxhYmVsPSJDb250ZW50IiB0YWJpbmRleD0iLTEiPgogICAgICAKCgo8c3BhbiBjbGFzcz0idmlzdWFsbHktaGlkZGVuIiBpZD0iaW5kZXhSZWZlcmVuY2UiIGRhdGEtaW5kZXg9IjUwNTE2IC0gSVNPL0lFQy9JRUVFIDk5NDU6MjAwOSAtIFRlY2hub2xvZ2llcyBkZSBsJ2luZm9ybWF0aW9uIOKAlCBTcMOpY2lmaWNhdGlvbnMgZGUgYmFzZSBkZSBsJ2ludGVyZmFjZSBwb3VyIGxhIHBvcnRhYmlsaXTDqSBkZXMgc3lzdMOobWVzIChQT1NJWMKuKSwgSXNzdWUgNyI+PC9zcGFuPgo8c3BhbiBjbGFzcz0idmlzdWFsbHktaGlkZGVuIiBpZD0iaXRlbVJlZmVyZW5jZSI+SVNPL0lFQy9JRUVFIDk5NDU6MjAwOTwvc3Bhbj4KPGRpdiBpdGVtc2NvcGUgaXRlbXR5cGU9Imh0dHBzOi8vc2NoZW1hLm9yZy9Qcm9kdWN0Ij4KICA8bGluayBpdGVtcHJvcD0iaW1hZ2UiIGhyZWY9Ii9tb2R1bGVzL2lzb29yZy10ZW1wbGF0ZS9pbWcvaXNvL2lzby1sb2dvLXByaW50LmdpZiIgLz48c2VjdGlvbiBjbGFzcz0ic2VjdGlvbi1uYXZpZ2F0aW9uIj4KICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lciI+CiAgICAgIDxkaXYgY2xhc3M9InJvdyI+CiAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTEyIj4KICAgICAgICAgIDxkaXYgY2xhc3M9InZpc3VhbGx5LWhpZGRlbiIgaXRlbXByb3A9ImNhdGVnb3J5Ij5wPC9kaXY+CiAgICAgICAgICA8ZGl2IGNsYXNzPSJ2aXN1YWxseS1oaWRkZW4iIGl0ZW1wcm9wPSJuYW1lIiBpZD0iZG9jUmVmIj5JU08vSUVDL0lFRUUgOTk0NToyMDA5PC9kaXY+CiAgICAgICAgICA8ZGl2IGNsYXNzPSJ2aXN1YWxseS1oaWRkZW4iIGl0ZW1wcm9wPSJwcm9kdWN0SUQiIGlkPSJjc051bWJlciI+NTA1MTY8L2Rpdj4KCiAgICAgICAgICA8ZGl2IGNsYXNzPSJ2aXN1YWxseS1oaWRkZW4iIGl0ZW1wcm9wPSJicmFuZCIgaXRlbXNjb3BlIGl0ZW10eXBlPSJodHRwczovL3NjaGVtYS5vcmcvQnJhbmQiPgogICAgICAgICAgICA8ZGl2IGl0ZW1wcm9wPSJsb2dvIiBpdGVtc2NvcGUgaXRlbXR5cGU9Imh0dHBzOi8vc2NoZW1hLm9yZy9JbWFnZU9iamVjdCI+CiAgICAgICAgICAgICAgPG1ldGEgaXRlbXByb3A9InVybCIgY29udGVudD0iL21vZHVsZXMvaXNvb3JnLXRlbXBsYXRlL2ltZy9pc28vaXNvLWxvZ28tcHJpbnQuZ2lmIi8+CiAgICAgICAgICAgICAgPG1ldGEgaXRlbXByb3A9IndpZHRoIiBjb250ZW50PSIyODMiPgogICAgICAgICAgICAgIDxtZXRhIGl0ZW1wcm9wPSJoZWlnaHQiIGNvbnRlbnQ9IjI2MSI+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8bWV0YSBpdGVtcHJvcD0ibmFtZSIgY29udGVudD0iT3JnYW5pc2F0aW9uIGludGVybmF0aW9uYWxlIGRlIG5vcm1hbGlzYXRpb24iPgogICAgICAgICAgPC9kaXY+CgogICAgICAgICAgPG5hdiByb2xlPSJuYXZpZ2F0aW9uIiBhcmlhLWxhYmVsPSJDaGlsZHJlbiBOYXZpZ2F0aW9uIiBjbGFzcz0iaGVhZGluZy1jb25kZW5zZWQgbmF2LXJlbGF0aXZlcyI+CgogIDxkaXYgY2xhc3M9InNlY3Rpb24taGVhZCBzZWN0aW9uLWJhY2siPjxzcGFuIGNsYXNzPSJpY29uICI+PC9zcGFuPjxhIHRhcmdldD0iIiBocmVmPSIvZnIvc3RhbmRhcmRzLWNhdGFsb2d1ZS9icm93c2UtYnktaWNzLmh0bWwidGl0bGU9IkV4cGxvcmV6IGxhIGNvbGxlY3Rpb24gZGUgbm9ybWVzIElTTyBkYW5zIHNvbiBpbnTDqWdyYWxpdMOpIGV0IHRyb3V2ZXogY2VsbGVzIHF1aSBz4oCZYXBwbGlxdWVudCDDoCB2b3RyZSBzZWN0ZXVyLiI+SUNTPC9hPjxhIGhyZWY9Ii9mci9pY3MvMzUuaHRtbCI+MzU8L2E+PGEgaHJlZj0iL2ZyL2ljcy8zNS4wNjAuaHRtbCI+MzUuMDYwPC9hPjwvZGl2PgogIDxoMT5JU08vSUVDL0lFRUUgOTk0NToyMDA5PC9oMT4KICA8aDIgY2xhc3M9Im10LTAgIj5UZWNobm9sb2dpZXMgZGUgbCdpbmZvcm1hdGlvbiDigJQgU3DDqWNpZmljYXRpb25zIGRlIGJhc2UgZGUgbCdpbnRlcmZhY2UgcG91ciBsYSBwb3J0YWJpbGl0w6kgZGVzIHN5c3TDqG1lcyAoUE9TSVjCriksIElzc3VlIDc8L2gyPjwvbmF2PjxoNSBjbGFzcz0idGV4dC1tdXRlZCI+SW5kaXNwb25pYmxlIGVuIGZyYW7Dp2FpczwvaDU+CiAgICAgICAgICA8L2Rpdj4KICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KICA8L3NlY3Rpb24+CgogIDxzZWN0aW9uIGNsYXNzPSJiZy1saWdodGdyYXkgc2VjdGlvbi1zbSI+CiAgICAgICAgPGRpdiBjbGFzcz0iY29udGFpbmVyIj4KICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC03IHB0LTAiPgogICAgICAgICAgICAgIDxkaXYgcm9sZT0iYWxlcnQiIGNsYXNzPSJoNCBtYi0wIj4KICAgICAgICAgICAgICAgIExlIGRlcm5pZXIgZXhhbWVuIGRlIGNldHRlIG5vcm1lIGRhdGUgZGUmbmJzcDsyMDIxLgogICAgICAgICAgICAgICAgQ2V0dGUgw6lkaXRpb24gcmVzdGUgZG9uYyBk4oCZYWN0dWFsaXTDqS48L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgICAgPC9zZWN0aW9uPgogICAgPHNlY3Rpb24gaWQ9InByb2R1Y3QtZGV0YWlscyI+CiAgICA8ZGl2IGNsYXNzPSJjb250YWluZXIiPgogICAgICA8ZGl2IGNsYXNzPSJyb3ciPgogICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC03Ij4KICAgICAgICAgIDxkaXYgY2xhc3M9ImQtZmxleCBqdXN0aWZ5LWNvbnRlbnQtYmV0d2VlbiBhbGlnbi1pdGVtcy1jZW50ZXIiPjxoMz5Sw6lzdW3DqTwvaDM+PGEgY2xhc3M9ImJ0biBidG4tb3V0bGluZS1wcmltYXJ5IGZsb2F0LWVuZCBtYi0xIiBpZD0ib2JwLXByZXZpZXciIHRhcmdldD0iX2JsYW5rIiBocmVmPSJodHRwczovL3d3dy5pc28ub3JnL29icC91aS9mci8jIWlzbzpzdGQ6NTA1MTY6ZnIiPjxpIGNsYXNzPSJiaS1qb3VybmFsLXRleHQiPjwvaT4mbmJzcDtQcsOpdmlzdWFsaXNlcjwvYT48L2Rpdj4KICAgICAgICAgICAgPGRpdiBpdGVtcHJvcD0iZGVzY3JpcHRpb24iPgogICAgICAgICAgICAgIDxwPjxwPklTTy9JRUMvSUVFRSA5OTQ1OjIwMDkgZGVmaW5lcyBhIHN0YW5kYXJkIG9wZXJhdGluZyBzeXN0ZW0gaW50ZXJmYWNlIGFuZCBlbnZpcm9ubWVudCwgaW5jbHVkaW5nIGEgY29tbWFuZCBpbnRlcnByZXRlciAob3IgInNoZWxsIiksIGFuZCBjb21tb24gdXRpbGl0eSBwcm9ncmFtcyB0byBzdXBwb3J0IGFwcGxpY2F0aW9ucyBwb3J0YWJpbGl0eSBhdCB0aGUgc291cmNlIGNvZGUgbGV2ZWwuIElTTy9JRUMvSUVFRSA5OTQ1OjIwMDkgaXMgaW50ZW5kZWQgdG8gYmUgdXNlZCBieSBib3RoIGFwcGxpY2F0aW9uIGRldmVsb3BlcnMgYW5kIHN5c3RlbSBpbXBsZW1lbnRlcnMgYW5kIGNvbXByaXNlcyBmb3VyIG1ham9yIGNvbXBvbmVudHMgKGVhY2ggaW4gYW4gYXNzb2NpYXRlZCB2b2x1bWUpLjwvcD4KPHVsPgo8bGk+R2VuZXJhbCB0ZXJtcywgY29uY2VwdHMsIGFuZCBpbnRlcmZhY2VzIGNvbW1vbiB0byBhbGwgdm9sdW1lcyBvZiB0aGlzIHN0YW5kYXJkLCBpbmNsdWRpbmcgdXRpbGl0eSBjb252ZW50aW9ucyBhbmQgQy1sYW5ndWFnZSBoZWFkZXIgZGVmaW5pdGlvbnMsIGFyZSBpbmNsdWRlZCBpbiB0aGUgQmFzZSBEZWZpbml0aW9ucyB2b2x1bWUuPC9saT4KPGxpPkRlZmluaXRpb25zIGZvciBzeXN0ZW0gc2VydmljZSBmdW5jdGlvbnMgYW5kIHN1YnJvdXRpbmVzLCBsYW5ndWFnZS1zcGVjaWZpYyBzeXN0ZW0gc2VydmljZXMgZm9yIHRoZSBDIHByb2dyYW1taW5nIGxhbmd1YWdlLCBmdW5jdGlvbiBpc3N1ZXMsIGluY2x1ZGluZyBwb3J0YWJpbGl0eSwgZXJyb3IgaGFuZGxpbmcsIGFuZCBlcnJvciByZWNvdmVyeSwgYXJlIGluY2x1ZGVkIGluIHRoZSBTeXN0ZW0gSW50ZXJmYWNlcyB2b2x1bWUuPC9saT4KPGxpPkRlZmluaXRpb25zIGZvciBhIHN0YW5kYXJkIHNvdXJjZSBjb2RlLWxldmVsIGludGVyZmFjZSB0byBjb21tYW5kIGludGVycHJldGF0aW9uIHNlcnZpY2VzIChhICJzaGVsbCIpIGFuZCBjb21tb24gdXRpbGl0eSBwcm9ncmFtcyBmb3IgYXBwbGljYXRpb24gcHJvZ3JhbXMgYXJlIGluY2x1ZGVkIGluIHRoZSBTaGVsbCBhbmQgVXRpbGl0aWVzIHZvbHVtZS48L2xpPgo8bGk+RXh0ZW5kZWQgcmF0aW9uYWxlIHRoYXQgZGlkIG5vdCBmaXQgd2VsbCBpbnRvIHRoZSByZXN0IG9mIHRoZSBkb2N1bWVudCBzdHJ1Y3R1cmUsIHdoaWNoIGNvbnRhaW5zIGhpc3RvcmljYWwgaW5mb3JtYXRpb24gY29uY2VybmluZyB0aGUgY29udGVudHMgb2YgSVNPL0lFQy9JRUVFIDk5NDU6MjAwOSBhbmQgd2h5IGZlYXR1cmVzIHdlcmUgaW5jbHVkZWQgb3IgZGlzY2FyZGVkIGJ5IHRoZSBJU08vSUVDL0lFRUUgOTk0NToyMDA5IGRldmVsb3BlcnMsIGlzIGluY2x1ZGVkIGluIHRoZSBSYXRpb25hbGUgKEluZm9ybWF0aXZlKSB2b2x1bWUuPC9saT4KPC91bD4KPHA+VGhlIGZvbGxvd2luZyBhcmVhcyBhcmUgb3V0c2lkZSB0aGUgc2NvcGUgb2YgSVNPL0lFQy9JRUVFIDk5NDU6MjAwOTo8L3A+Cjx1bD4KPGxpPmdyYXBoaWNzIGludGVyZmFjZXM7PC9saT4KPGxpPmRhdGFiYXNlIG1hbmFnZW1lbnQgc3lzdGVtIGludGVyZmFjZXM7PC9saT4KPGxpPnJlY29yZCBJL08gY29uc2lkZXJhdGlvbnM7PC9saT4KPGxpPm9iamVjdCBvciBiaW5hcnkgY29kZSBwb3J0YWJpbGl0eTs8L2xpPgo8bGk+c3lzdGVtIGNvbmZpZ3VyYXRpb24gYW5kIHJlc291cmNlIGF2YWlsYWJpbGl0eS48L2xpPgo8L3VsPgo8cD5JU08vSUVDL0lFRUUgOTk0NToyMDA5IGRlc2NyaWJlcyB0aGUgZXh0ZXJuYWwgY2hhcmFjdGVyaXN0aWNzIGFuZCBmYWNpbGl0aWVzIHRoYXQgYXJlIG9mIGltcG9ydGFuY2UgdG8gYXBwbGljYXRpb24gZGV2ZWxvcGVycywgcmF0aGVyIHRoYW4gdGhlIGludGVybmFsIGNvbnN0cnVjdGlvbiB0ZWNobmlxdWVzIGVtcGxveWVkIHRvIGFjaGlldmUgdGhlc2UgY2FwYWJpbGl0aWVzLiBTcGVjaWFsIGVtcGhhc2lzIGlzIHBsYWNlZCBvbiB0aG9zZSBmdW5jdGlvbnMgYW5kIGZhY2lsaXRpZXMgdGhhdCBhcmUgbmVlZGVkIGluIGEgd2lkZSB2YXJpZXR5IG9mIGNvbW1lcmNpYWwgYXBwbGljYXRpb25zLjwvcD48L3A+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8YnIvPgogICAgICAgICAgPGRpdiBjbGFzcz0iZC1mbGV4IGp1c3RpZnktY29udGVudC1iZXR3ZWVuIGFsaWduLWl0ZW1zLWNlbnRlciI+CiAgPGgzPgogICAgSW5mb3JtYXRpb25zIGfDqW7DqXJhbGVzPHN1cD4mbmJzcDs8YSBocmVmPSIvZnIvY29udGVudHMvZGF0YS9zdGFuZGFyZC8wNS8wNS81MDUxNi5kZXRhaWwucnNzIiBjbGFzcz0iYmktcnNzLWZpbGwgdGV4dC13YXJuaW5nIGZzLTYiIGRhdGEtYnMtdG9nZ2xlPSJpc28tdG9vbHRpcCIgZGF0YS1vcmlnaW5hbC10aXRsZT0iUydhYm9ubmVyJm5ic3A7YXV4Jm5ic3A7bWlzZXMmbmJzcDvDoCZuYnNwO2pvdXIiPjwvYT48L3N1cD4KICA8L2gzPgogIDwvZGl2Pgo8dWwgY2xhc3M9InJlZmluZSI+CiAgPGxpPgogICAgPGRpdiBjbGFzcz0icm93Ij4KICAgICAgPGRpdiBjbGFzcz0iY29sLXNtLTYiPgogICAgICAgIDxkaXYgY2xhc3M9ImVudHJ5LWxhYmVsIj7DiXRhdCBhY3R1ZWw8L2Rpdj4mbmJzcDs6Jm5ic3A7PHNwYW4+UHVibGnDqWU8L3NwYW4+CiAgICAgICAgPC9kaXY+CiAgICAgIDxkaXYgY2xhc3M9ImNvbC1zbS02Ij4KICAgICAgICA8ZGl2IGNsYXNzPSJlbnRyeS1sYWJlbCI+RGF0ZSBkZSBwdWJsaWNhdGlvbjwvZGl2PiZuYnNwOzombmJzcDs8c3BhbiBpdGVtcHJvcD0icmVsZWFzZURhdGUiPjIwMDktMDk8L3NwYW4+CiAgICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KICA8L2xpPgogIDxsaT4KICAgIDxkaXYgY2xhc3M9InJvdyI+CiAgICAgIDxkaXYgY2xhc3M9ImNvbC1zbS02Ij4KICAgICAgICA8ZGl2IGNsYXNzPSJlbnRyeS1sYWJlbCI+RWRpdGlvbjwvZGl2PiZuYnNwOzombmJzcDsxPC9kaXY+CiAgICAgIDxkaXYgY2xhc3M9ImNvbC1zbS02Ij4KICAgICAgICA8L2Rpdj4KICAgIDwvZGl2PgogIDwvbGk+CiAgPGxpPgogICAgICA8ZGl2IGNsYXNzPSJjbGVhcmZpeCI+CiAgICAgICAgPGRpdiBjbGFzcz0iZW50cnktbGFiZWwiPkNvbWl0w6kgdGVjaG5pcXVlPC9kaXY+Jm5ic3A7OgogICAgICAgIDxzcGFuIGNsYXNzPSJlbnRyeS1uYW1lIGVudHJ5LWJsb2NrIj4KICAgICAgICAgIDxhIGhyZWY9Ii9mci9jb21taXR0ZWUvNDUyMDIuaHRtbCI+SVNPL0lFQyBKVEMgMS9TQyAyMjwvYT48L3NwYW4+CiAgICAgICAgPHNwYW4gY2xhc3M9ImVudHJ5LXRpdGxlIj5MYW5nYWdlcyBkZSBwcm9ncmFtbWF0aW9uLCBsZXVyIGVudmlyb25uZW1lbnQgZXQgaW50ZXJmYWNlcyBkZXMgbG9naWNpZWxzIGRlIHN5c3TDqG1lczwvc3Bhbj4KICAgICAgPC9kaXY+CiAgICA8L2xpPgogIDxsaT4KICAgIDxkbCBjbGFzcz0iZGwtaW5saW5lIG5vLWJvdHRvbS1tYXJnaW4iPgogICAgICA8ZHQgY2xhc3M9ImVudHJ5LWxhYmVsIGVudHJ5LWJsb2NrIj48c3Ryb25nPklDUzwvc3Ryb25nPjwvZHQ+Jm5ic3A7OgogICAgICA8ZGQ+CiAgICAgICAgICA8c3BhbiBjbGFzcz0iZW50cnktbmFtZSBlbnRyeS1ibG9jayI+CiAgICAgICAgICAgIDxhIGhyZWY9Ii9mci9pY3MvMzUuMDYwLmh0bWwiPgogICAgICAgICAgICAgICAgMzUuMDYwPC9hPgogICAgICAgICAgPC9zcGFuPgogICAgICAgICAgPHNwYW4gY2xhc3M9ImVudHJ5LXRpdGxlIj5MYW5nYWdlcyB1dGlsaXPDqXMgZGFucyBsZXMgdGVjaG5vbG9naWVzIGRlIGwnaW5mb3JtYXRpb248L3NwYW4+CiAgICAgICAgPC9kZD4KICAgICAgPC9kbD4KICA8L2xpPgo8L3VsPgo8L2Rpdj4KCiAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTQgY29sLW1kLW9mZnNldC0xIj4KICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQgc3RvcmUtYm94IHByb2R1Y3QtYm94IHNoYWRvdyIgaWQ9InN0b3JlLWJveCI+CiAgICA8ZGl2IGNsYXNzPSJjYXJkLWJvZHkiPgogICAgICA8aDMgY2xhc3M9InRleHQtY2VudGVyIj5BY2hldGVyIGNldHRlIG5vcm1lPC9oMz4KICAgICAgPGRpdiBjbGFzcz0iZml0LXRvLWJveCI+CiAgICAgICAgPHNwYW4gY2xhc3M9Imxhbmd1YWdlLXBhdGggdmlzdWFsbHktaGlkZGVuIj5mcjwvc3Bhbj4KICAgICAgICA8dGFibGUgY2xhc3M9InRhYmxlIG9yZGVyUHJvZHVjdCBhbGlnbi1taWRkbGUiPgogICAgICAgICAgPHRoZWFkPgogICAgICAgICAgPHRyPgogICAgICAgICAgICA8dGg+PC90aD4KICAgICAgICAgICAgPHRoPkZvcm1hdDwvdGg+CiAgICAgICAgICAgIDx0aCBpZD0ibGFuZ3VhZ2UiPkxhbmd1ZTwvdGg+CiAgICAgICAgICA8L3RyPgogICAgICAgICAgPC90aGVhZD4KICAgICAgICAgIDx0Ym9keT4KICAgICAgICAgIDx0ciBjbGFzcz0iYWN0aXZlIj4KICAgICAgICAgICAgICA8dGQgY2xhc3M9InNlbGVjdGlvbiI+CiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0idHlwZSB2aXN1YWxseS1oaWRkZW4iPnN0ZDwvc3Bhbj4KICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJjb3VudGVyIHZpc3VhbGx5LWhpZGRlbiI+MTwvc3Bhbj4KICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJwcmljZSB2aXN1YWxseS1oaWRkZW4iPjIwODwvc3Bhbj4KICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJjaG9vc2VGb3JtYXQgYWN0aXZlIj48aSBjbGFzcz0iYmkgYmktY2hlY2stbGciPjwvaT48L3NwYW4+CiAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICA8dGQgaWQ9ImJraWZtdF8xIj4KICAgICAgICAgICAgICAgIFBERjwvdGQ+CiAgICAgICAgICAgICAgPHRkIGNsYXNzPSJvcmRlckxhbmd1YWdlIiBzdHlsZT0ibWluLXdpZHRoOiAxNDBweDsiPgogICAgICAgICAgICAgICAgPHNlbGVjdCBpZD0iYmtpXzEiIGFyaWEtbGFiZWxsZWRieT0ibGFuZ3VhZ2UiIGNsYXNzPSJmb3JtLXNlbGVjdCI+CiAgICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9IjAxdWIwMDAwMDAyOVBqRUFBVX5hMDViMDAwMDAwNVdWM3dBQUd+YTBmYjAwMDAwMDBmTkYzQUFNfmEwY2IwMDAwMDAxUmlFbUFBSyIgbGFuZz0iZW4iPgogICAgICAgICAgICAgICAgICAgICAgQW5nbGFpczwvb3B0aW9uPgogICAgICAgICAgICAgICAgICA8L3NlbGVjdD4KICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICA8L3RyPgogICAgICAgICAgPHRyIGNsYXNzPSIiPgogICAgICAgICAgICAgIDx0ZCBjbGFzcz0ic2VsZWN0aW9uIj4KICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJ0eXBlIHZpc3VhbGx5LWhpZGRlbiI+c3RkPC9zcGFuPgogICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImNvdW50ZXIgdmlzdWFsbHktaGlkZGVuIj4yPC9zcGFuPgogICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InByaWNlIHZpc3VhbGx5LWhpZGRlbiI+MjA4PC9zcGFuPgogICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImNob29zZUZvcm1hdCI+PGkgY2xhc3M9ImJpIGJpLWNoZWNrLWxnIHZpc3VhbGx5LWhpZGRlbiI+PC9pPjwvc3Bhbj4KICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgIDx0ZCBpZD0iYmtpZm10XzIiPgogICAgICAgICAgICAgICAgUERGIHN1ciBDRDwvdGQ+CiAgICAgICAgICAgICAgPHRkIGNsYXNzPSJvcmRlckxhbmd1YWdlIiBzdHlsZT0ibWluLXdpZHRoOiAxNDBweDsiPgogICAgICAgICAgICAgICAgPHNlbGVjdCBpZD0iYmtpXzIiIGRpc2FibGVkIGFyaWEtbGFiZWxsZWRieT0ibGFuZ3VhZ2UiIGNsYXNzPSJmb3JtLXNlbGVjdCI+CiAgICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9IjAxdWIwMDAwMDAyOVBqRUFBVX5hMDViMDAwMDAwNVdWNDNBQUd+YTBmYjAwMDAwMDBmTkY4QUFNfmEwY2IwMDAwMDAxUmlFckFBSyIgbGFuZz0iZW4iPgogICAgICAgICAgICAgICAgICAgICAgQW5nbGFpczwvb3B0aW9uPgogICAgICAgICAgICAgICAgICA8L3NlbGVjdD4KICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICA8L3RyPgogICAgICAgICAgPC90Ym9keT4KICAgICAgICA8L3RhYmxlPgogICAgICA8L2Rpdj4KCiAgICAgIDxkaXYgY2xhc3M9ImNsZWFyZml4IiBpdGVtcHJvcD0ib2ZmZXJzIiBpdGVtc2NvcGUgaXRlbXR5cGU9Imh0dHBzOi8vc2NoZW1hLm9yZy9PZmZlciI+CiAgICAgICAgPGxpbmsgaXRlbXByb3A9InVybCIgaHJlZj0iaHR0cHM6Ly93d3cuaXNvLm9yZy9mci9zdGFuZGFyZC81MDUxNi5odG1sIiAvPgogICAgICAgIDxtZXRhIGl0ZW1wcm9wPSJhdmFpbGFiaWxpdHkiIGNvbnRlbnQ9Imh0dHBzOi8vc2NoZW1hLm9yZy9JblN0b2NrIiAvPgogICAgICAgIDx1bCBjbGFzcz0ibGlzdC1pbmxpbmUgb3JkZXJCYXNrZXQiIGlkPSJia2lhbmNob3JfMSI+CiAgICAgICAgICA8bGkgY2xhc3M9InByaWNlIG9yZGVyIj4KICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImN1cnJlbmN5IiBpdGVtcHJvcD0icHJpY2VDdXJyZW5jeSI+Q0hGPC9zcGFuPjxzcGFuIGNsYXNzPSJhbW91bnQiIGlkPSJwcm9kdWN0UHJpY2UiIGl0ZW1wcm9wPSJwcmljZSI+MjA4PC9zcGFuPgogICAgICAgICAgPC9saT4KICAgICAgICAgIDxsaT4KICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz0iYnRuIGJ0bi1wcmltYXJ5IGJ0bi1sZyIgaWQ9InN0YW5kYXJkLWJ1eSIgZGF0YS1icy10b2dnbGU9Im1vZGFsIiBkYXRhLWJzLXRhcmdldD0iI2lzby1vcHRvdXQiIG9uY2xpY2s9ImphdmFzY3JpcHQ6YWRkVG9CYXNrZXQoJzEnLCAnZnInLCAnc3RkJykiPgogICAgICAgICAgICAgIDxpIGNsYXNzPSJiaS1jYXJ0Ij48L2k+Jm5ic3A7QWNoZXRlcjwvYnV0dG9uPgogICAgICAgICAgPC9saT4KICAgICAgICA8L3VsPgogICAgICA8L2Rpdj4KICAgIDwvZGl2PgogIDwvZGl2Pgo8L2Rpdj4KICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KICA8L3NlY3Rpb24+CgogIDwhLS0gU1RBUlQgT0YgTU9EQUwgKEJ1eSBJU08uT1JHIHdpdGggT1BUT1VUKSAtLT4KICA8ZGl2IGNsYXNzPSJtb2RhbCBmYWRlIiB0YWJpbmRleD0iLTEiIHJvbGU9ImRpYWxvZyIgaWQ9Imlzby1vcHRvdXQiIGFyaWEtaGlkZGVuPSJ0cnVlIiBhcmlhLWxhYmVsbGVkYnk9Im1vZGFsTGFiZWwiPgogICAgPGRpdiBjbGFzcz0ibW9kYWwtZGlhbG9nIG1vZGFsLWRpYWxvZy1jZW50ZXJlZCI+CiAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWNvbnRlbnQiPgogICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWhlYWRlciI+CiAgICAgICAgICA8aDQgY2xhc3M9Im1vZGFsLXRpdGxlIiBpZD0ibW9kYWxMYWJlbCI+QWNoZXRlciZuYnNwO2NldHRlIG5vcm1lPC9oND4KICAgICAgICAgIDxidXR0b24gdHlwZT0iYnV0dG9uIiBjbGFzcz0iYnRuLWNsb3NlIiBkYXRhLWJzLWRpc21pc3M9Im1vZGFsIiBhcmlhLWxhYmVsPSJDbG9zZSI+PC9idXR0b24+CiAgICAgICAgPC9kaXY+CiAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtYm9keSI+CiAgICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1ib2R5IGNsZWFyZml4Ij4KICAgICAgICAgICAgPGRpdiBpZD0ibW9kYWxPcHRPdXQiPjwvZGl2PgogICAgICAgICAgICA8ZGl2IGlkPSJtb2RhbE5vT3B0T3V0Ij48L2Rpdj4KICAgICAgICAgICAgPHNwYW4gaWQ9InByb2NlZWRUb0NoZWNrb3V0IiBjbGFzcz0idmlzdWFsbHktaGlkZGVuIiBkYXRhLWxhYmVsPSJQYW5pZXIiPjwvc3Bhbj4KICAgICAgICAgICAgPHNwYW4gaWQ9ImNvbnRpbnVlU2hvcHBpbmciIGNsYXNzPSJ2aXN1YWxseS1oaWRkZW4iIGRhdGEtbGFiZWw9IkNvbnRpbnVlciBtZXMgYWNoYXRzIj48L3NwYW4+CiAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KICA8L2Rpdj4KICA8IS0tIEVORCBPRiBNT0RBTCAtLT4KCjwvZGl2PiA8c2VjdGlvbiBpZD0ibGlmZWN5Y2xlIj4KICA8ZGl2IGNsYXNzPSJjb250YWluZXIiPgogICAgPGRpdiBjbGFzcz0icm93Ij4KICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTEyIj4KICAgICAgICA8aDM+Q3ljbGUgZGUgdmllPC9oMz4KICAgICAgICA8ZGl2IGNsYXNzPSJsaWZlY3ljbGUiPgogICAgICAgICAgPHVsIGNsYXNzPSJzdGVwcyI+CiAgICAgICAgICAgIDxsaSBjbGFzcz0idGltZS1zdGVwIj4KICAgICAgICAgICAgICAgIDxoNCBjbGFzcz0ibXMtc20tMyB0ZXh0LW11dGVkIj5QcsOpY8OpZGVtbWVudDwvaDQ+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzdGVwIHN0ZXAtZGFyayI+CiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InN0ZXAtaXRlbSI+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic2VjdGlvbi1oZWFkIj5Bbm51bMOpZTwvZGl2PgogICAgICAgICAgICAgICAgICAgIDxoNT48YSBocmVmPSIvZnIvc3RhbmRhcmQvMzg3ODkuaHRtbCI+SVNPL0lFQyA5OTQ1LTE6MjAwMzwvYT48L2g1PgogICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InN0ZXAtaXRlbSI+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic2VjdGlvbi1oZWFkIj5Bbm51bMOpZTwvZGl2PgogICAgICAgICAgICAgICAgICAgIDxoNT48YSBocmVmPSIvZnIvc3RhbmRhcmQvNDA2ODcuaHRtbCI+SVNPL0lFQyA5OTQ1LTE6MjAwMy9Db3IgMToyMDA0PC9hPjwvaDU+CiAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3RlcC1pdGVtIj4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzZWN0aW9uLWhlYWQiPkFubnVsw6llPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPGg1PjxhIGhyZWY9Ii9mci9zdGFuZGFyZC8zODc5MC5odG1sIj5JU08vSUVDIDk5NDUtMjoyMDAzPC9hPjwvaDU+CiAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3RlcC1pdGVtIj4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzZWN0aW9uLWhlYWQiPkFubnVsw6llPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPGg1PjxhIGhyZWY9Ii9mci9zdGFuZGFyZC80MDY4OC5odG1sIj5JU08vSUVDIDk5NDUtMjoyMDAzL0NvciAxOjIwMDQ8L2E+PC9oNT4KICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzdGVwLWl0ZW0iPgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InNlY3Rpb24taGVhZCI+QW5udWzDqWU8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8aDU+PGEgaHJlZj0iL2ZyL3N0YW5kYXJkLzM4NzkxLmh0bWwiPklTTy9JRUMgOTk0NS0zOjIwMDM8L2E+PC9oNT4KICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzdGVwLWl0ZW0iPgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InNlY3Rpb24taGVhZCI+QW5udWzDqWU8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8aDU+PGEgaHJlZj0iL2ZyL3N0YW5kYXJkLzQwNjkwLmh0bWwiPklTTy9JRUMgOTk0NS0zOjIwMDMvQ29yIDE6MjAwNDwvYT48L2g1PgogICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InN0ZXAtaXRlbSI+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic2VjdGlvbi1oZWFkIj5Bbm51bMOpZTwvZGl2PgogICAgICAgICAgICAgICAgICAgIDxoNT48YSBocmVmPSIvZnIvc3RhbmRhcmQvMzg3OTIuaHRtbCI+SVNPL0lFQyA5OTQ1LTQ6MjAwMzwvYT48L2g1PgogICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InN0ZXAtaXRlbSI+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic2VjdGlvbi1oZWFkIj5Bbm51bMOpZTwvZGl2PgogICAgICAgICAgICAgICAgICAgIDxoNT48YSBocmVmPSIvZnIvc3RhbmRhcmQvNDA2OTEuaHRtbCI+SVNPL0lFQyA5OTQ1LTQ6MjAwMy9Db3IgMToyMDA0PC9hPjwvaDU+CiAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgPGxpIGNsYXNzPSJ0aW1lLXN0ZXAiPgogICAgICAgICAgICAgIDxoNCBjbGFzcz0ibXMtc20tMyB0ZXh0LW11dGVkIj5BY3R1ZWxsZW1lbnQ8L2g0PgoKICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzdGVwIHN0ZXAtc3VjY2VzcyBhY3RpdmUiPgogICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzZWN0aW9uLWhlYWQiPlB1Ymxpw6llPC9kaXY+CiAgICAgICAgICAgICAgICAgIDxoNT5JU08vSUVDL0lFRUUgOTk0NToyMDA5PC9oNT4KICAgICAgICAgICAgICAgICAgPGJyLz5MZXMgbm9ybWVzIElTTyBzb250IHLDqWV4YW1pbsOpZXMgdG91cyBsZXMgY2lucSBhbnM8YnIvPjxhIGRhdGEtYnMtdG9nZ2xlPSJjb2xsYXBzZSIgcm9sZT0iYnV0dG9uIiBhcmlhLWV4cGFuZGVkPSJmYWxzZSIgaHJlZj0iI3N0YWdlcyIgY2xhc3M9ImRyb3Bkb3duLXRvZ2dsZSBjdXJyZW50LXN0YWdlIHRleHQtc20gY29sbGFwc2VkIj5TdGFkZTogPHN0cm9uZz45MC45Mjwvc3Ryb25nPiAoU2VyYSByw6l2aXPDqWUpPC9hPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICA8dWwgY2xhc3M9InN0YWdlcyBjb2xsYXBzZSIgaWQ9InN0YWdlcyI+CiAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImRyb3Bkb3duIGFsZXJ0LWluZm8iPgoKICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKSIgIHJvbGU9ImJ1dHRvbiIgYXJpYS1oYXNwb3B1cD0idHJ1ZSIgYXJpYS1leHBhbmRlZD0iZmFsc2UiPgogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ic3RhZ2UtY29kZSI+MDA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InN0YWdlLXRpdGxlIj5QcsOpbGltaW5haXJlPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICA8L2E+CgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJkcm9wZG93biBhbGVydC1pbmZvIj4KCiAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCkiIGNsYXNzPSJkcm9wZG93bi10b2dnbGUiIGRhdGEtYnMtZGlzcGxheT0ic3RhdGljIiBkYXRhLWJzLXRvZ2dsZT0iZHJvcGRvd24iIHJvbGU9ImJ1dHRvbiIgYXJpYS1oYXNwb3B1cD0idHJ1ZSIgYXJpYS1leHBhbmRlZD0iZmFsc2UiPgogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ic3RhZ2UtY29kZSI+MTA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InN0YWdlLXRpdGxlIj5Qcm9wb3NpdGlvbjwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgPC9hPgoKICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZHJvcGRvd24tbWVudSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL2ZyL3N0YWdlLWNvZGVzLmh0bWwjMTBfOTkiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ic3RhZ2UtY29kZSI+MTAuOTk8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJzdGFnZS1kYXRlIj4yMDA3LTA2LTI1PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzdGFnZS10aXRsZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTm91dmVhdSBwcm9qZXQgYXBwcm91dsOpPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT48L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJkcm9wZG93biBhbGVydC1pbmZvIj4KCiAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCkiICByb2xlPSJidXR0b24iIGFyaWEtaGFzcG9wdXA9InRydWUiIGFyaWEtZXhwYW5kZWQ9ImZhbHNlIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InN0YWdlLWNvZGUiPjIwPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzdGFnZS10aXRsZSI+UHLDqXBhcmF0aW9uPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICA8L2E+CgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJkcm9wZG93biBhbGVydC1pbmZvIj4KCiAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCkiIGNsYXNzPSJkcm9wZG93bi10b2dnbGUiIGRhdGEtYnMtZGlzcGxheT0ic3RhdGljIiBkYXRhLWJzLXRvZ2dsZT0iZHJvcGRvd24iIHJvbGU9ImJ1dHRvbiIgYXJpYS1oYXNwb3B1cD0idHJ1ZSIgYXJpYS1leHBhbmRlZD0iZmFsc2UiPgogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ic3RhZ2UtY29kZSI+MzA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InN0YWdlLXRpdGxlIj5Db21pdMOpPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICA8L2E+CgogICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJkcm9wZG93bi1tZW51Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvZnIvc3RhZ2UtY29kZXMuaHRtbCMzMF85OSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJzdGFnZS1jb2RlIj4zMC45OTwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InN0YWdlLWRhdGUiPjIwMDctMDctMDI8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InN0YWdlLXRpdGxlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBDRCBhcHByb3V2w6kgcG91ciBlbnJlZ2lzdHJlbWVudCBjb21tZSBESVM8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPjwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImRyb3Bkb3duIGFsZXJ0LWluZm8iPgoKICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKSIgY2xhc3M9ImRyb3Bkb3duLXRvZ2dsZSIgZGF0YS1icy1kaXNwbGF5PSJzdGF0aWMiIGRhdGEtYnMtdG9nZ2xlPSJkcm9wZG93biIgcm9sZT0iYnV0dG9uIiBhcmlhLWhhc3BvcHVwPSJ0cnVlIiBhcmlhLWV4cGFuZGVkPSJmYWxzZSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJzdGFnZS1jb2RlIj40MDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3RhZ2UtdGl0bGUiPkVucXXDqnRlPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICA8L2E+CgogICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJkcm9wZG93bi1tZW51Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvZnIvc3RhZ2UtY29kZXMuaHRtbCM0MF8wMCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJzdGFnZS1jb2RlIj40MC4wMDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InN0YWdlLWRhdGUiPjIwMDctMDctMDI8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InN0YWdlLXRpdGxlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBESVMgZW5yZWdpc3Ryw6k8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPjxsaSA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvZnIvc3RhZ2UtY29kZXMuaHRtbCM0MF8yMCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJzdGFnZS1jb2RlIj40MC4yMDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InN0YWdlLWRhdGUiPjIwMDctMDctMDI8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InN0YWdlLXRpdGxlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBNaXNlIGF1IHZvdGUgZHUgRElTOiAgMTIgc2VtYWluZXM8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPjxsaSA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvZnIvc3RhZ2UtY29kZXMuaHRtbCM0MF82MCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJzdGFnZS1jb2RlIj40MC42MDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InN0YWdlLWRhdGUiPjIwMDctMTEtMDI8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InN0YWdlLXRpdGxlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBDbMO0dHVyZSBkdSB2b3RlPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT48bGkgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL2ZyL3N0YWdlLWNvZGVzLmh0bWwjNDBfOTkiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ic3RhZ2UtY29kZSI+NDAuOTk8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJzdGFnZS1kYXRlIj4yMDA3LTExLTMwPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzdGFnZS10aXRsZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUmFwcG9ydCBjb21wbGV0IGRpZmZ1c8OpOiBESVMgYXBwcm91dsOpIHBvdXIgZW5yZWdpc3RyZW1lbnQgY29tbWUgRkRJUzwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+PC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZHJvcGRvd24gYWxlcnQtaW5mbyI+CgogICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApIiBjbGFzcz0iZHJvcGRvd24tdG9nZ2xlIiBkYXRhLWJzLWRpc3BsYXk9InN0YXRpYyIgZGF0YS1icy10b2dnbGU9ImRyb3Bkb3duIiByb2xlPSJidXR0b24iIGFyaWEtaGFzcG9wdXA9InRydWUiIGFyaWEtZXhwYW5kZWQ9ImZhbHNlIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InN0YWdlLWNvZGUiPjUwPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzdGFnZS10aXRsZSI+QXBwcm9iYXRpb248L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgIDwvYT4KCiAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImRyb3Bkb3duLW1lbnUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9mci9zdGFnZS1jb2Rlcy5odG1sIzUwXzAwIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InN0YWdlLWNvZGUiPjUwLjAwPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ic3RhZ2UtZGF0ZSI+MjAwOC0wOS0yNTwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3RhZ2UtdGl0bGUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFRleHRlIGZpbmFsIHJlw6d1IG91IEZESVMgZW5yZWdpc3Ryw6kgcG91ciBhcHByb2JhdGlvbiBmb3JtZWxsZTwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+PGxpID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9mci9zdGFnZS1jb2Rlcy5odG1sIzUwXzIwIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InN0YWdlLWNvZGUiPjUwLjIwPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ic3RhZ2UtZGF0ZSI+MjAwOC0xMC0wOTwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3RhZ2UtdGl0bGUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEVwcmV1dmUgZW52b3nDqWUgYXUgc2VjcsOpdGFyaWF0IG91IG1pc2UgYXUgdm90ZSBkdSBGRElTOiA4IHNlbWFpbmVzPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT48bGkgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL2ZyL3N0YWdlLWNvZGVzLmh0bWwjNTBfNjAiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ic3RhZ2UtY29kZSI+NTAuNjA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJzdGFnZS1kYXRlIj4yMDA4LTEyLTExPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzdGFnZS10aXRsZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQ2zDtHR1cmUgZHUgdm90ZSBFcHJldXZlIHJldG91cm7DqWUgcGFyIGxlIHNlY3LDqXRhcmlhdDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+PC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZHJvcGRvd24gYWxlcnQtc3VjY2VzcyI+CgogICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApIiBjbGFzcz0iZHJvcGRvd24tdG9nZ2xlIiBkYXRhLWJzLWRpc3BsYXk9InN0YXRpYyIgZGF0YS1icy10b2dnbGU9ImRyb3Bkb3duIiByb2xlPSJidXR0b24iIGFyaWEtaGFzcG9wdXA9InRydWUiIGFyaWEtZXhwYW5kZWQ9ImZhbHNlIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InN0YWdlLWNvZGUiPjYwPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzdGFnZS10aXRsZSI+UHVibGljYXRpb248L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgIDwvYT4KCiAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImRyb3Bkb3duLW1lbnUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9mci9zdGFnZS1jb2Rlcy5odG1sIzYwXzAwIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InN0YWdlLWNvZGUiPjYwLjAwPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ic3RhZ2UtZGF0ZSI+MjAwOS0wNS0xNDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3RhZ2UtdGl0bGUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE5vcm1lIGludGVybmF0aW9uYWxlIGVuIGNvdXJzIGRlIHB1YmxpY2F0aW9uPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT48bGkgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL2ZyL3N0YWdlLWNvZGVzLmh0bWwjNjBfNjAiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ic3RhZ2UtY29kZSI+NjAuNjA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJzdGFnZS1kYXRlIj4yMDA5LTA5LTE1PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzdGFnZS10aXRsZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTm9ybWUgaW50ZXJuYXRpb25hbGUgcHVibGnDqWU8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPjwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImRyb3Bkb3duIGJnLXN1Y2Nlc3MgYWN0aXZlIj4KCiAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCkiIGNsYXNzPSJkcm9wZG93bi10b2dnbGUiIGRhdGEtYnMtZGlzcGxheT0ic3RhdGljIiBkYXRhLWJzLXRvZ2dsZT0iZHJvcGRvd24iIHJvbGU9ImJ1dHRvbiIgYXJpYS1oYXNwb3B1cD0idHJ1ZSIgYXJpYS1leHBhbmRlZD0iZmFsc2UiPgogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ic3RhZ2UtY29kZSI+OTA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InN0YWdlLXRpdGxlIj5FeGFtZW48L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgIDwvYT4KCiAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImRyb3Bkb3duLW1lbnUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpICBjbGFzcz0nbGlzdC1zZXBhcmF0aW9uJz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9mci9zdGFnZS1jb2Rlcy5odG1sIzkwXzIwIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InN0YWdlLWNvZGUiPjkwLjIwPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ic3RhZ2UtZGF0ZSI+MjAxNC0wNy0xNTwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3RhZ2UtdGl0bGUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE5vcm1lIGludGVybmF0aW9uYWxlIGVuIGNvdXJzIGQnZXhhbWVuIHN5c3TDqW1hdGlxdWU8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPjxsaSA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvZnIvc3RhZ2UtY29kZXMuaHRtbCM5MF82MCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJzdGFnZS1jb2RlIj45MC42MDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InN0YWdlLWRhdGUiPjIwMTQtMTItMTc8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InN0YWdlLXRpdGxlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBDbMO0dHVyZSBkZSBsJ2V4YW1lbjwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+PGxpICBjbGFzcz0nbGlzdC1zZXBhcmF0aW9uJz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9mci9zdGFnZS1jb2Rlcy5odG1sIzkwXzIwIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InN0YWdlLWNvZGUiPjkwLjIwPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ic3RhZ2UtZGF0ZSI+MjAxOS0xMC0yMTwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3RhZ2UtdGl0bGUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE5vcm1lIGludGVybmF0aW9uYWxlIGVuIGNvdXJzIGQnZXhhbWVuIHN5c3TDqW1hdGlxdWU8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPjxsaSA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvZnIvc3RhZ2UtY29kZXMuaHRtbCM5MF82MCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJzdGFnZS1jb2RlIj45MC42MDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InN0YWdlLWRhdGUiPjIwMjAtMDMtMDQ8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InN0YWdlLXRpdGxlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBDbMO0dHVyZSBkZSBsJ2V4YW1lbjwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+PGxpID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9mci9zdGFnZS1jb2Rlcy5odG1sIzkwXzkzIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InN0YWdlLWNvZGUiPjkwLjkzPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ic3RhZ2UtZGF0ZSI+MjAyMS0wNC0yOTwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3RhZ2UtdGl0bGUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE5vcm1lIGludGVybmF0aW9uYWxlIGNvbmZpcm3DqWU8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPjxsaSBjbGFzcz0iYWN0aXZlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9mci9zdGFnZS1jb2Rlcy5odG1sIzkwXzkyIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InN0YWdlLWNvZGUiPjkwLjkyPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ic3RhZ2UtZGF0ZSI+MjAyMy0wMi0xNDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3RhZ2UtdGl0bGUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE5vcm1lIGludGVybmF0aW9uYWxlIMOgIHLDqXZpc2VyPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT48bGkgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL2ZyL3N0YWdlLWNvZGVzLmh0bWwjOTBfOTMiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ic3RhZ2UtY29kZSI+OTAuOTM8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJzdGFnZS1kYXRlIj48L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InN0YWdlLXRpdGxlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBOb3JtZSBpbnRlcm5hdGlvbmFsZSBjb25maXJtw6llPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT48bGkgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL2ZyL3N0YWdlLWNvZGVzLmh0bWwjOTBfOTkiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ic3RhZ2UtY29kZSI+OTAuOTk8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJzdGFnZS1kYXRlIj48L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InN0YWdlLXRpdGxlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBbm51bGF0aW9uIGRlIGxhIE5vcm1lIGludGVybmF0aW9uYWxlIHByb3Bvc8OpZSBwYXIgbGUgVEMgb3UgU0M8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPjwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImRyb3Bkb3duIGFsZXJ0LW11dGVkIj4KCiAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCkiIGNsYXNzPSJkcm9wZG93bi10b2dnbGUiIGRhdGEtYnMtZGlzcGxheT0ic3RhdGljIiBkYXRhLWJzLXRvZ2dsZT0iZHJvcGRvd24iIHJvbGU9ImJ1dHRvbiIgYXJpYS1oYXNwb3B1cD0idHJ1ZSIgYXJpYS1leHBhbmRlZD0iZmFsc2UiPgogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ic3RhZ2UtY29kZSI+OTU8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InN0YWdlLXRpdGxlIj5Bbm51bGF0aW9uPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICA8L2E+CgogICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJkcm9wZG93bi1tZW51Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvZnIvc3RhZ2UtY29kZXMuaHRtbCM5NV85OSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJzdGFnZS1jb2RlIj45NS45OTwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InN0YWdlLWRhdGUiPjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3RhZ2UtdGl0bGUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFubnVsYXRpb24gZGUgbGEgTm9ybWUgaW50ZXJuYXRpb25hbGU8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPjwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICA8L3VsPgoKICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3ViLXN0ZXAiPgogICAgICAgICAgICAgICAgPGg1PlJlY3RpZmljYXRpZnMgdGVjaG5pcXVlcyAvIEFtZW5kZW1lbnRzPC9oNT4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InN0ZXAgc3RlcC1zdWNjZXNzIj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InN0ZXAtaXRlbSI+CiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InNlY3Rpb24taGVhZCI+UHVibGnDqWU8L2Rpdj4KICAgICAgICAgICAgICAgICAgPGg1PjxhIGhyZWY9Ii9mci9zdGFuZGFyZC82MjAwNS5odG1sIj5JU08vSUVDL0lFRUUgOTk0NToyMDA5L0NvciAxOjIwMTM8L2E+PC9oNT4KICAgICAgICAgICAgICAgIDwvZGl2PjxkaXYgY2xhc3M9InN0ZXAtaXRlbSI+CiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InNlY3Rpb24taGVhZCI+UHVibGnDqWU8L2Rpdj4KICAgICAgICAgICAgICAgICAgPGg1PjxhIGhyZWY9Ii9mci9zdGFuZGFyZC83MzMxNC5odG1sIj5JU08vSUVDL0lFRUUgOTk0NToyMDA5L0NvciAyOjIwMTc8L2E+PC9oNT4KICAgICAgICAgICAgICAgIDwvZGl2PjwvZGl2PjwvZGl2PjwvbGk+CiAgICAgICAgICAgIDxsaSBjbGFzcz0idGltZS1zdGVwIj4KCiAgICAgICAgICAgICAgPGg0IGNsYXNzPSJtcy1zbS0zIHRleHQtbXV0ZWQiPlNlcmEgcmVtcGxhY8OpZSBwYXI8L2g0PgogICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzdGVwIHN0ZXAtaW5mbyI+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzdGVwLWl0ZW0iPgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InNlY3Rpb24taGVhZCI+UHJvamV0PC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPGg1PjxhIGhyZWY9Ii9mci9zdGFuZGFyZC84NjUzOS5odG1sIj5JU08vSUVDIENEIDk5NDU8L2E+PC9oNT4KICAgICAgICAgICAgICAgICAgPC9kaXY+PC9kaXY+PC9saT4KICAgICAgICAgICAgPC91bD4KICAgICAgICA8L2Rpdj4KICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KICA8L2Rpdj4KPC9zZWN0aW9uPgo8ZGl2IGNsYXNzPSJzZWN0aW9uIHRleHQtY2VudGVyIj4KICA8ZGl2IGNsYXNzPSJjb250YWluZXIiPgogICAgPGRpdiBjbGFzcz0icm93IHJvdy1jb2xzLTEgcm93LWNvbHMtc20tMiByb3ctY29scy14bC0zIGctNCI+CiAgICAgIDxkaXYgY2xhc3M9ImNvbCI+CiAgICAgIDxkaXYgY2xhc3M9ImNhcmQgaC0xMDAgbWItMCI+CiAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1ib2R5Ij4KICAgICAgICAgIDxwPgogICAgICAgICAgICA8aW1nIGxvYWRpbmc9ImxhenkiIHNyYz0iL2ZpbGVzL2xpdmUvc2l0ZXMvaXNvb3JnL2ZpbGVzL2RhdGEvc2RnL2ZyL3NkZy1sb2dvLnBuZyIgY2xhc3M9ImltZy1mbHVpZCB3aWR0aC0xMDBwY3Qgcm91bmRlZC0wIG14LWF1dG8gZC1ibG9jayIgc3R5bGU9Im1heC13aWR0aDogMjUwcHg7IiBhbHQ9Ik9iamVjdGlmcyBkZSBkw6l2ZWxvcHBlbWVudCBkdXJhYmxlIiAvPgogICAgICAgICAgPC9wPgogICAgICAgICAgPHA+CiAgICAgICAgICAgIENldHRlIG5vcm1lIGNvbnRyaWJ1ZSDDoCBsJzxhIGhyZWY9Ii9mci9zZGdzLmh0bWwiPk9iamVjdGlmIGRlIGTDqXZlbG9wcGVtZW50IGR1cmFibGU8L2E+Jm5ic3A7c3VpdmFudDxwPgogICAgICAgICAgPGRpdiBjbGFzcz0iY2xlYXJmaXggZC1mbGV4IGp1c3RpZnktY29udGVudC1jZW50ZXIiPgogICAgICAgICAgICA8YSBocmVmPSIvZnIvc2RnL1NERzA5Lmh0bWwiIHRpdGxlPSJJbmR1c3RyaWUsIGlubm92YXRpb24gZXQgaW5mcmFzdHJ1Y3R1cmUiPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic2RnIHNkZy1zbSBzZGctMDkiPgogICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzZGctaWNvbiI+PC9kaXY+CiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InNkZy1sYWJlbCI+OTwvZGl2PgogICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzZGctdGV4dCI+SW5kdXN0cmllLCBpbm5vdmF0aW9uIGV0IGluZnJhc3RydWN0dXJlPC9kaXY+CiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InNkZy1sb2dvIj48L2Rpdj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICAgIDwvZGl2PgogICAgPC9kaXY+CiAgPHN0eWxlPgogICAgLmxpc3Qtc2VjdG9ycyBzdmcuaXNvaWNvbiB7IG1heC13aWR0aDogNzVweDsgbWFyZ2luLWJvdHRvbTogMDt9Cjwvc3R5bGU+CjwvZGl2PgogIDwvZGl2Pgo8L2Rpdj4KCjxzZWN0aW9uIGNsYXNzPSJiZy1saWdodGdyYXkiIGlkPSJjb250YWN0Ij4KICA8ZGl2IGNsYXNzPSJjb250YWluZXIiPgogICAgPGRpdiBjbGFzcz0icm93Ij4KICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTQiPgogICAgICAgIDxoND5Wb3VzIGF2ZXogdW5lIHF1ZXN0aW9uPzwvaDQ+Cgo8cD5Db25zdWx0ZXIgbm90cmUmbmJzcDs8YSBocmVmPSIvZnIvZnJlcXVlbnRseS1hc2tlZC1xdWVzdGlvbnMtZmFxcy5odG1sIiB0aXRsZT0iRm9pcmUgQXV4IFF1ZXN0aW9ucyAoRkFRcykiPkZBUTwvYT48L3A+PC9kaXY+CiAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC00Ij4KICAgICAgICA8ZGl2IGNsYXNzPSJ2Y2FyZCBjb250YWN0IG5vLWZpZ3VyZSBjbGVhcmZpeCIgaXRlbXNjb3BlPSIiIGl0ZW10eXBlPSJodHRwOi8vc2NoZW1hLm9yZy9QZXJzb24iPgo8ZGl2IGNsYXNzPSJjb250ZW50LWJveCBuby1pbWFnZSI+CjxkaXYgY2xhc3M9ImZuIG4iPjxzcGFuIGNsYXNzPSJnaXZlbi1uYW1lIiBpdGVtcHJvcD0iZ2l2ZW5OYW1lIj5TZXJ2aWNlICZhZ3JhdmU7IGxhIGNsaWVudCZlZ3JhdmU7bGU8L3NwYW4+PC9kaXY+Cgo8ZGl2IGNsYXNzPSJ0ZWwiIGl0ZW1wcm9wPSJ0ZWxlcGhvbmUiPis0MSAyMiA3NDkgMDggODg8L2Rpdj4KCjxkaXYgY2xhc3M9ImVtYWlsIiBpdGVtcHJvcD0iZW1haWwiPjxhIGhyZWY9Im1haWx0bzpjdXN0b21lcnNlcnZpY2VAaXNvLm9yZyI+Y3VzdG9tZXJzZXJ2aWNlQGlzby5vcmc8L2E+PC9kaXY+Cgo8aHIgLz4KPGRpdiBjbGFzcz0ibm90ZSI+CjxwIGNsYXNzPSJzbWFsbCI+SG9yYWlyZXMgZCZyc3F1bztvdXZlcnR1cmU6PGJyIC8+CkRlIGx1bmRpICZhZ3JhdmU7IHZlbmRyZWRpIC0gMDk6MDAtMTI6MDAsIDE0OjAwLTE3OjAwIChVVEMrMSk8L3A+CjwvZGl2Pgo8L2Rpdj4KPC9kaXY+PC9kaXY+CiAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC00Ij4KICAgICAgICA8L2Rpdj4KICAgIDwvZGl2PgogIDwvZGl2Pgo8L3NlY3Rpb24+PGRpdiBjbGFzcz0ibmF2LWJyZWFkY3J1bWIgcHJpbnQtZm9vdGVyIGJnLWJsYWNrIj4KICAgICAgICA8ZGl2IGNsYXNzPSJjb250YWluZXIiPgogICAgICAgICAgPGRpdiBjbGFzcz0icm93Ij4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLXNtLTEwIHNtYWxsIj4KICAgICAgICAgICAgICA8IS0tIEJSRUFEQ1JVTUIgLS0+CiAgICAgICAgICAgICAgPG9sIGNsYXNzPSJicmVhZGNydW1iIj4KICAgIDxsaSBjbGFzcz0iYnJlYWRjcnVtYi1pdGVtIj48YSBocmVmPSIvZnIvaG9tZS5odG1sIiB0aXRsZT0iUGFnZSBkJ2FjY3VlaWwiPjxpIGNsYXNzPSJiaS1ob3VzZSIgYXJpYS1oaWRkZW49InRydWUiPjwvaT48L2E+PC9saT4KICAgIDxsaSBjbGFzcz0iYnJlYWRjcnVtYi1pdGVtIj4KICAgICAgICAgIDxhIGhyZWY9Ii9mci9zdG9yZS5odG1sIj5TdG9yZTwvYT4KICAgICAgICAgICAgPC9saT4KICAgICAgPGxpIGNsYXNzPSJicmVhZGNydW1iLWl0ZW0iPgogICAgICAgICAgPGEgaHJlZj0iL2ZyL3N0YW5kYXJkcy1jYXRhbG9ndWUvYnJvd3NlLWJ5LWljcy5odG1sIiA+Q2F0YWxvZ3VlIGRlIG5vcm1lczwvYT4KPC9saT4KICAgICAgPGxpIGNsYXNzPSJicmVhZGNydW1iLWl0ZW0iPgogICAgICAgICAgPGEgaHJlZj0iL2ZyL3N0YW5kYXJkcy1jYXRhbG9ndWUvYnJvd3NlLWJ5LWljcy5odG1sIj5JQ1M8L2E+CiAgICAgICAgICAgIDwvbGk+CiAgICAgIDxsaSBjbGFzcz0iYnJlYWRjcnVtYi1pdGVtIj48YSBocmVmPSIvZnIvaWNzLzM1Lmh0bWwiPjM1PC9hPjwvbGk+CiAgICA8bGkgY2xhc3M9ImJyZWFkY3J1bWItaXRlbSI+PGEgaHJlZj0iL2ZyL2ljcy8zNS4wNjAuaHRtbCI+MzUuMDYwPC9hPjwvbGk+PGxpIGNsYXNzPSJicmVhZGNydW1iLWl0ZW0iPklTTy9JRUMvSUVFRSA5OTQ1OjIwMDk8L2xpPjwvb2w+PC9kaXY+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1zbS0yIGhpZGRlbi1wcmludCB0ZXh0LWVuZCBzbWFsbCBtdC0zIG10LXNtLTAiPgogICAgICAgICAgICAgIDxhIHJvbGU9ImJ1dHRvbiIgY2xhc3M9ImRyb3Bkb3duLXRvZ2dsZSB0ZXh0LXdoaXRlIGNvbGxhcHNlZCIgZGF0YS1icy10b2dnbGU9ImNvbGxhcHNlIiBocmVmPSIjY29sbGFwc2VTaXRlbWFwIiB0YXJnZXQ9Il9zZWxmIiBhcmlhLWV4cGFuZGVkPSJmYWxzZSIgYXJpYS1jb250cm9scz0iY29sbGFwc2VTaXRlbWFwIj5QbGFuIGR1IHNpdGU8L2E+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgPC9kaXY+CgogICAgICAgICAgPGRpdiBjbGFzcz0iY29sbGFwc2UgYm9yZGVyLXRvcCIgaWQ9ImNvbGxhcHNlU2l0ZW1hcCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyI+CiAgICAgICAgICAgICAgPCEtLSBTSVRFTUFQIC0tPgogICAgICAgICAgICAgIDxuYXYgcm9sZT0ibmF2aWdhdGlvbiIgYXJpYS1sYWJlbD0iU2l0ZW1hcCIgY2xhc3M9InNpdGVtYXAtZm9vdGVyIGNsZWFyZml4IHNtYWxsIiBpZD0ibmF2LXNpdGVtYXAiPjx1bCByb2xlPSdtZW51YmFyJyBjbGFzcz0nbGlzdC1pbmxpbmUtNSBjbGVhcmZpeCBuYXYtbGV2ZWwxJyA+PGxpIHJvbGU9J21lbnVpdGVtJyBjbGFzcz0nIGhhc0NoaWxkcmVuIGZpcnN0SW5MZXZlbCcgPjxhIGNsYXNzPSduYXYtbGluayAgICcgICB0aXRsZT0iUGFyY2UgcXXigJllbGxlcyBjb3V2cmVudCBwcmF0aXF1ZW1lbnQgdG91cyBsZXMgcHJvZHVpdHMsIHByb2Nlc3N1cyBldCBzZXJ2aWNlcyBwb3NzaWJsZXMgZXQgaW1hZ2luYWJsZXMsIGxlcyBub3JtZXMgSVNPIHBldXZlbnQgw6p0cmUgdXRpbGlzw6llcyBwYXJ0b3V0LiIgIGhyZWY9Jy9mci9zdGFuZGFyZHMuaHRtbCc+Tm9ybWVzPC9hPjx1bCByb2xlPSdtZW51YmFyJyBjbGFzcz0nbGlzdC11bnN0eWxlZCBuYXYtbGV2ZWwyJyA+PGxpIHJvbGU9J21lbnVpdGVtJyBjbGFzcz0nIG5vQ2hpbGRyZW4gZmlyc3RJbkxldmVsJyA+PGEgY2xhc3M9J25hdi1saW5rICAgJyAgIHRpdGxlPSJWb3VzIGRpcmlnZXogdW5lIGVudHJlcHJpc2Ugb3UgdHJhdmFpbGxleiBkYW5zIGxlIHNlY3RldXIgcHJpdsOpIG91IHB1YmxpYyA/IFZvdXMgw6p0ZXMgdW4gY29uc29tbWF0ZXVyIHNvdWNpZXV4IGRlIGLDqW7DqWZpY2llciBkZSBwcm9kdWl0cyBldCBzZXJ2aWNlcyByw6lwb25kYW50IMOgIHZvcyBhdHRlbnRlcyA/IETDqWNvdXZyZXogY2UgcXVlIGxlcyBub3JtZXMgcGV1dmVudCB2b3VzIGFwcG9ydGVyLiIgIGhyZWY9Jy9mci9iZW5lZml0cy1vZi1zdGFuZGFyZHMuaHRtbCc+QXZhbnRhZ2VzPC9hPjwvbGk+PCEtLSBjbG9zZSBvZiBsaXN0IGl0ZW0gbGV2ZWwgMiAtLT48bGkgcm9sZT0nbWVudWl0ZW0nIGNsYXNzPScgbm9DaGlsZHJlbicgPjxhIGNsYXNzPSduYXYtbGluayAgICcgICB0aXRsZT0iVm91cyBwb3VycmV6IGTDqWNvdXZyaXIgZGFucyBjZXR0ZSBzZWN0aW9uIHF1ZWxxdWVzLXVuZXMgZGUgbm9zIG5vcm1lcyBsZXMgcGx1cyBjb25udWVzIGV0IGxlIHBsdXMgbGFyZ2VtZW50IGFwcGxpcXXDqWVzLCBhaW5zaSBxdWUgbGVzIG5vcm1lcyBhYm9yZGFudCBkZSBub3V2ZWF1eCBlbmpldXggYXV4cXVlbHMgbm91cyBzb21tZXMgdG91cyBjb25mcm9udMOpcy4KCiIgIGhyZWY9Jy9mci9wb3B1bGFyLXN0YW5kYXJkcy5odG1sJz5MZXMgbm9ybWVzIGxlcyBwbHVzIGNvbm51ZXM8L2E+PC9saT48IS0tIGNsb3NlIG9mIGxpc3QgaXRlbSBsZXZlbCAyIC0tPjxsaSByb2xlPSdtZW51aXRlbScgY2xhc3M9JyBub0NoaWxkcmVuJyA+PGEgY2xhc3M9J25hdi1saW5rICAgJyAgIHRpdGxlPSJBIHNldCBvZiBwcm9jZXNzZXMgdGhhdCBzaG93IHlvdXIgcHJvZHVjdCwgc2VydmljZSBvciBzeXN0ZW0gbWVldHMgdGhlIHJlcXVpcmVtZW50cyBvZiBhIHN0YW5kYXJkLiIgIGhyZWY9Jy9mci9jb25mb3JtaXR5LWFzc2Vzc21lbnQuaHRtbCc+w4l2YWx1YXRpb24gZGUgbGEgY29uZm9ybWl0w6k8L2E+PC9saT48IS0tIGNsb3NlIG9mIGxpc3QgaXRlbSBsZXZlbCAyIC0tPjxsaSByb2xlPSdtZW51aXRlbScgY2xhc3M9JyBub0NoaWxkcmVuIGxhc3RJbkxldmVsJyA+PGEgY2xhc3M9J25hdi1saW5rICAgJyAgIHRpdGxlPSJMZXMgTm9ybWVzIGludGVybmF0aW9uYWxlcyBmb3Vybmlzc2VudCBkZXMgb3V0aWxzIGVmZmljYWNlcyBhdXggb3JnYW5pc2F0aW9ucyBldCBhdXggZW50cmVwcmlzZXMgZMOpc2lyZXVzZXMgZGUgcmVsZXZlciBsZSBkw6lmaSBkZXMgT0RELiIgIGhyZWY9Jy9mci9zZGdzLmh0bWwnPk9ERDwvYT48L2xpPjwhLS0gY2xvc2Ugb2YgbGlzdCBpdGVtIGxldmVsIDIgLS0+PC91bD48IS0tIGNsb3NlIG9mIGNvbnRhaW5lciBsZXZlbCAyIC0tPjwvbGk+PCEtLSBjbG9zZSBvZiBsaXN0IGl0ZW0gbGV2ZWwgMSAtLT48bGkgcm9sZT0nbWVudWl0ZW0nIGNsYXNzPScgaGFzQ2hpbGRyZW4nID48YSBjbGFzcz0nbmF2LWxpbmsgICAnICAgdGl0bGU9IkzigJlJU08gcsOpdW5pdCBkZXMgZXhwZXJ0cyBkdSBtb25kZSBlbnRpZXIgcG91ciDDqWxhYm9yZXIgZGVzIE5vcm1lcyBpbnRlcm5hdGlvbmFsZXMgcXVpIGFpZGVudCDDoCByw6lzb3VkcmUgbGVzIHByb2Jsw6htZXMgZXQgZW5jb3VyYWdlbnQgbOKAmWlubm92YXRpb24uIiAgaHJlZj0nL2ZyL2Fib3V0LXVzLmh0bWwnPsOAIHByb3BvcyBkZSBs4oCZSVNPPC9hPjx1bCByb2xlPSdtZW51YmFyJyBjbGFzcz0nbGlzdC11bnN0eWxlZCBuYXYtbGV2ZWwyJyA+PGxpIHJvbGU9J21lbnVpdGVtJyBjbGFzcz0nIG5vQ2hpbGRyZW4gZmlyc3RJbkxldmVsJyA+PGEgY2xhc3M9J25hdi1saW5rICAgJyAgIHRpdGxlPSJEw6ljb3V2cmV6IGNvbW1lbnQgbm91cyDDqWxhYm9yb25zIGV0IHB1Ymxpb25zIGRlcyBOb3JtZXMgaW50ZXJuYXRpb25hbGVzIGVuIG1vYmlsaXNhbnQgcGx1cyBkZSAxNjAgbWVtYnJlcyBldCBwbHVzIGRlIDQ1IDAwMCBleHBlcnRzLiIgIGhyZWY9Jy9mci93aGF0LXdlLWRvLmh0bWwnPk5vcyBhY3Rpdml0w6lzPC9hPjwvbGk+PCEtLSBjbG9zZSBvZiBsaXN0IGl0ZW0gbGV2ZWwgMiAtLT48bGkgcm9sZT0nbWVudWl0ZW0nIGNsYXNzPScgbm9DaGlsZHJlbicgPjxhIGNsYXNzPSduYXYtbGluayAgICcgICAgaHJlZj0nL2ZyL3N0cnVjdHVyZS5odG1sJz5TdHJ1Y3R1cmU8L2E+PC9saT48IS0tIGNsb3NlIG9mIGxpc3QgaXRlbSBsZXZlbCAyIC0tPjxsaSByb2xlPSdtZW51aXRlbScgY2xhc3M9JyBub0NoaWxkcmVuJyA+PGEgY2xhc3M9J25hdi1saW5rICAgJyAgIHRpdGxlPSJM4oCZSVNPLCBxdWkgcmVwcsOpc2VudGUgbGVzIHF1YXRyZSBjb2lucyBkZSBsYSBwbGFuw6h0ZSBldCBjb21wcmVuZCB1biBtZW1icmUgcGFyIHBheXMsIGVzdCBs4oCZT3JnYW5pc2F0aW9uIGludGVybmF0aW9uYWxlIGRlIG5vcm1hbGlzYXRpb24uIiAgaHJlZj0nL2ZyL21lbWJlcnMuaHRtbCc+TWVtYnJlczwvYT48L2xpPjwhLS0gY2xvc2Ugb2YgbGlzdCBpdGVtIGxldmVsIDIgLS0+PGxpIHJvbGU9J21lbnVpdGVtJyBjbGFzcz0nIG5vQ2hpbGRyZW4gbGFzdEluTGV2ZWwnID48YSBjbGFzcz0nbmF2LWxpbmsgICAnICAgdGl0bGU9IlJlbmRyZSBsYSB2aWUgcGx1cyBmYWNpbGUsIHBsdXMgc8O7cmUgZXQgbWVpbGxldXJlLiBMYSBTdHJhdMOpZ2llIGRlIGzigJlJU08gMjAzMCBwcsOpc2VudGUgbm90cmUgdmlzaW9uIGV0IG5vdHJlIG1pc3Npb24gcG91ciBsZXMgZGl4IHByb2NoYWluZXMgYW5uw6llcywgYWluc2kgcXUndW4gZW5zZW1ibGUgZCdvYmplY3RpZnMgZXQgZGUgcHJpb3JpdMOpcyBwb3VyIG5vdXMgYWlkZXIgw6AgeSBwYXJ2ZW5pci4iICBocmVmPScvZnIvc3RyYXRlZ3kyMDMwLmh0bWwnPlN0cmF0w6lnaWUgMjAzMDwvYT48L2xpPjwhLS0gY2xvc2Ugb2YgbGlzdCBpdGVtIGxldmVsIDIgLS0+PC91bD48IS0tIGNsb3NlIG9mIGNvbnRhaW5lciBsZXZlbCAyIC0tPjwvbGk+PCEtLSBjbG9zZSBvZiBsaXN0IGl0ZW0gbGV2ZWwgMSAtLT48bGkgcm9sZT0nbWVudWl0ZW0nIGNsYXNzPScgaGFzQ2hpbGRyZW4nID48YSBjbGFzcz0nbmF2LWxpbmsgICAnICAgdGl0bGU9IlJlc3RleiBpbmZvcm3DqSBkZXMgZGVybmnDqHJlcyBub3V2ZWF1dMOpcyBlbiBtYXRpw6hyZSBkZSBub3JtYWxpc2F0aW9uIG91IHBhcmNvdXJleiBub3MgcmljaGVzIGFyY2hpdmVzIiAgaHJlZj0nL2ZyL25ld3MuaHRtbCc+QWN0dWFsaXTDqXM8L2E+PHVsIHJvbGU9J21lbnViYXInIGNsYXNzPSdsaXN0LXVuc3R5bGVkIG5hdi1sZXZlbDInID48bGkgcm9sZT0nbWVudWl0ZW0nIGNsYXNzPScgbm9DaGlsZHJlbicgPjxhIGNsYXNzPSduYXYtbGluayAgICcgICB0aXRsZT0iQ29uc3VsdGV6IGNldHRlIHNlY3Rpb24gcG91ciB0b3V0IHNhdm9pciBzdXIgbGVzIHByb2NoYWluZXMgbWFuaWZlc3RhdGlvbnMgZXQgbGVzIG1hbmlmZXN0YXRpb25zIHLDqWNlbnRlcy4iICBocmVmPScvZnIvZXZlbnRzLmh0bWwnPk1hbmlmZXN0YXRpb25zPC9hPjwvbGk+PCEtLSBjbG9zZSBvZiBsaXN0IGl0ZW0gbGV2ZWwgMiAtLT48bGkgcm9sZT0nbWVudWl0ZW0nIGNsYXNzPScgbm9DaGlsZHJlbicgPjxhIGNsYXNzPSduYXYtbGluayAgICcgICAgaHJlZj0nL2ZyL21lZGlhLWtpdC5odG1sJz5Eb3NzaWVyIG3DqWRpYXM8L2E+PC9saT48IS0tIGNsb3NlIG9mIGxpc3QgaXRlbSBsZXZlbCAyIC0tPjwvdWw+PCEtLSBjbG9zZSBvZiBjb250YWluZXIgbGV2ZWwgMiAtLT48L2xpPjwhLS0gY2xvc2Ugb2YgbGlzdCBpdGVtIGxldmVsIDEgLS0+PGxpIHJvbGU9J21lbnVpdGVtJyBjbGFzcz0nIGhhc0NoaWxkcmVuJyA+PGEgY2xhc3M9J25hdi1saW5rICAgJyAgIHRpdGxlPSJEw6ljb3V2cmV6IGNvbW1lbnQgbGUgcHJvY2Vzc3VzIGRlIGzigJlJU08gcsOpdW5pIGRlcyBleHBlcnRzIGR1IG1vbmRlIGVudGllciBwb3VyIGNyw6llciBkZXMgbm9ybWVzIGFkb3B0w6llcyBwYXJ0b3V0IGRhbnMgbGUgbW9uZGUuIiAgaHJlZj0nL2ZyL2RldmVsb3Bpbmctc3RhbmRhcmRzLmh0bWwnPlBhcnRpY2lwZXI8L2E+PHVsIHJvbGU9J21lbnViYXInIGNsYXNzPSdsaXN0LXVuc3R5bGVkIG5hdi1sZXZlbDInID48bGkgcm9sZT0nbWVudWl0ZW0nIGNsYXNzPScgbm9DaGlsZHJlbiBmaXJzdEluTGV2ZWwnID48YSBjbGFzcz0nbmF2LWxpbmsgICAnICAgIGhyZWY9Jy9mci93aG8tZGV2ZWxvcHMtc3RhbmRhcmRzLmh0bWwnPlF1aSDDqWxhYm9yZSBsZXMgbm9ybWVzPC9hPjwvbGk+PCEtLSBjbG9zZSBvZiBsaXN0IGl0ZW0gbGV2ZWwgMiAtLT48bGkgcm9sZT0nbWVudWl0ZW0nIGNsYXNzPScgbm9DaGlsZHJlbicgPjxhIGNsYXNzPSduYXYtbGluayAgICcgICB0aXRsZT0iTGVzIGRpZmbDqXJlbnRzIHR5cGVzIGRlIHB1YmxpY2F0aW9ucyBkZSBs4oCZSVNPLiIgIGhyZWY9Jy9mci9kZWxpdmVyYWJsZXMtYWxsLmh0bWwnPkxpdnJhYmxlczwvYT48L2xpPjwhLS0gY2xvc2Ugb2YgbGlzdCBpdGVtIGxldmVsIDIgLS0+PGxpIHJvbGU9J21lbnVpdGVtJyBjbGFzcz0nIG5vQ2hpbGRyZW4nID48YSBjbGFzcz0nbmF2LWxpbmsgICAnICAgIGhyZWY9Jy9mci9nZXQtaW52b2x2ZWQuaHRtbCc+UG91cnF1b2kgc+KAmWVuZ2FnZXIgPzwvYT48L2xpPjwhLS0gY2xvc2Ugb2YgbGlzdCBpdGVtIGxldmVsIDIgLS0+PGxpIHJvbGU9J21lbnVpdGVtJyBjbGFzcz0nIG5vQ2hpbGRyZW4nID48YSBjbGFzcz0nbmF2LWxpbmsgICAnICAgIGhyZWY9Jy9mci9DbGltYXRlQWN0aW9uLmh0bWwnPktpdCBk4oCZYWN0aW9uIHBvdXIgbGUgY2xpbWF0PC9hPjwvbGk+PCEtLSBjbG9zZSBvZiBsaXN0IGl0ZW0gbGV2ZWwgMiAtLT48bGkgcm9sZT0nbWVudWl0ZW0nIGNsYXNzPScgbm9DaGlsZHJlbiBsYXN0SW5MZXZlbCcgPjxhIGNsYXNzPSduYXYtbGluayAgICcgICB0aXRsZT0iRGVzIHJlc3NvdXJjZXMgdXRpbGVzIHBvdXIgYXBwdXllciBsZSB0cmF2YWlsIGRlcyBwZXJzb25uZXMgZW5nYWfDqWVzIGRhbnMgbCfDqWxhYm9yYXRpb24gZGVzIG5vcm1lcy4iICBocmVmPScvZnIvcmVzb3VyY2VzLmh0bWwnPlJlc3NvdXJjZXM8L2E+PC9saT48IS0tIGNsb3NlIG9mIGxpc3QgaXRlbSBsZXZlbCAyIC0tPjwvdWw+PCEtLSBjbG9zZSBvZiBjb250YWluZXIgbGV2ZWwgMiAtLT48L2xpPjwhLS0gY2xvc2Ugb2YgbGlzdCBpdGVtIGxldmVsIDEgLS0+PGxpIHJvbGU9J21lbnVpdGVtJyBjbGFzcz0nIGhhc0NoaWxkcmVuIGluUGF0aCAgbGFzdEluTGV2ZWwnID48YSBjbGFzcz0nbmF2LWxpbmsgICAnICAgdGl0bGU9IlZvdXMgdm91bGV6IGFjaGV0ZXIgZGVzIE5vcm1lcyBpbnRlcm5hdGlvbmFsZXMsIGRlcyBsaWduZXMgZGlyZWN0cmljZXMsIGRlcyBjb2xsZWN0aW9ucyBvdSBkZXMgbGlzdGVzIGRlIGNvbnRyw7RsZT8gRWxsZXMgc29udCB0b3V0ZXMgc3VyIGzigJlJU08gU3RvcmUuIiAgaHJlZj0nL2ZyL3N0b3JlLmh0bWwnPlN0b3JlPC9hPjx1bCByb2xlPSdtZW51YmFyJyBjbGFzcz0nbGlzdC11bnN0eWxlZCBuYXYtbGV2ZWwyJyA+PGxpIHJvbGU9J21lbnVpdGVtJyBjbGFzcz0nIG5vQ2hpbGRyZW4gaW5QYXRoICBhY3RpdmUgZmlyc3RJbkxldmVsJyA+PGEgY2xhc3M9J25hdi1saW5rICAgJyAgICBocmVmPScvZnIvc3RhbmRhcmRzLWNhdGFsb2d1ZS9icm93c2UtYnktaWNzLmh0bWwnPkNhdGFsb2d1ZSBkZSBub3JtZXM8L2E+PC9saT48IS0tIGNsb3NlIG9mIGxpc3QgaXRlbSBsZXZlbCAyIC0tPjxsaSByb2xlPSdtZW51aXRlbScgY2xhc3M9JyBub0NoaWxkcmVuJyA+PGEgY2xhc3M9J25hdi1saW5rICAgJyAgIHRpdGxlPSJMZXMgcHVibGljYXRpb25zIGRlIGzigJlJU08gZG9ubmVudCBkZXMgaW5mb3JtYXRpb25zIGV0IGRlcyBvcmllbnRhdGlvbnMgc3VyIGRlcyBhcHBsaWNhdGlvbnMgc3DDqWNpZmlxdWVzIGV0IGlsbHVzdHJlbnQgbGEgdmFsZXVyIGFqb3V0w6llIGRlcyBub3JtZXMuIiAgaHJlZj0nL2ZyL3B1YmxpY2F0aW9uLWxpc3QuaHRtbCc+UHVibGljYXRpb25zIGV0IHByb2R1aXRzPC9hPjwvbGk+PCEtLSBjbG9zZSBvZiBsaXN0IGl0ZW0gbGV2ZWwgMiAtLT48L3VsPjwhLS0gY2xvc2Ugb2YgY29udGFpbmVyIGxldmVsIDIgLS0+PC9saT48IS0tIGNsb3NlIG9mIGxpc3QgaXRlbSBsZXZlbCAxIC0tPjwvdWw+PCEtLSBjbG9zZSBvZiBjb250YWluZXIgbGV2ZWwgMSAtLT48L25hdj48L2Rpdj4KICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgICA8L2Rpdj4KICAgIDwvbWFpbj4KICAgIDxmb290ZXIgcm9sZT0iY29udGVudGluZm8iIGFyaWEtbGFiZWw9IkZvb3RlciIgY2xhc3M9ImZvb3Rlci1pc28gZm9vdGVyLWRhcmsgYmctZGFyayI+CiAgICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lciI+CiAgICAgICAgPGRpdiBjbGFzcz0iZm9vdGVyLWxpbmtzIGNlbnRlci1ibG9jayI+CiAgICAgICAgICA8IS0tIEZPT1RFUiBMSU5LUyAtLT4KICAgICAgICAgIDxuYXYgcm9sZT0ibmF2aWdhdGlvbiIgYXJpYS1sYWJlbD0iSW5saW5lIE5hdmlnYXRpb24iIGNsYXNzPSIiIGlkPSIiPjx1bCByb2xlPSdtZW51YmFyJyBjbGFzcz0nbGlzdC1pbmxpbmUgY2xlYXJmaXggbmF2LWxldmVsMScgPjxsaSByb2xlPSdtZW51aXRlbScgY2xhc3M9JyBub0NoaWxkcmVuIGZpcnN0SW5MZXZlbCcgPjxhIGNsYXNzPSduYXYtbGluayAgICcgICAgaHJlZj0nL2ZyL2lzby1uYW1lLWFuZC1sb2dvLmh0bWwnPk5vbSBldCBsb2dvIGRlIGwnSVNPPC9hPjwvbGk+PCEtLSBjbG9zZSBvZiBsaXN0IGl0ZW0gbGV2ZWwgMSAtLT48bGkgcm9sZT0nbWVudWl0ZW0nIGNsYXNzPScgbm9DaGlsZHJlbicgPjxhIGNsYXNzPSduYXYtbGluayAgICcgICAgaHJlZj0nL2ZyL2NvbmZpZGVudGlhbGl0ZSc+UHJpdmFjeSBOb3RpY2U8L2E+PC9saT48IS0tIGNsb3NlIG9mIGxpc3QgaXRlbSBsZXZlbCAxIC0tPjxsaSByb2xlPSdtZW51aXRlbScgY2xhc3M9JyBub0NoaWxkcmVuJyA+PGEgY2xhc3M9J25hdi1saW5rICAgJyAgICBocmVmPScvZnIvY29weXJpZ2h0Lmh0bWwnPkRyb2l0IGQnYXV0ZXVyPC9hPjwvbGk+PCEtLSBjbG9zZSBvZiBsaXN0IGl0ZW0gbGV2ZWwgMSAtLT48bGkgcm9sZT0nbWVudWl0ZW0nIGNsYXNzPScgbm9DaGlsZHJlbicgPjxhIGNsYXNzPSduYXYtbGluayAgICcgICAgaHJlZj0nL2ZyL2Nvb2tpZXMuaHRtbCc+UG9saXRpcXVlIHJlbGF0aXZlIGF1eCBjb29raWVzPC9hPjwvbGk+PCEtLSBjbG9zZSBvZiBsaXN0IGl0ZW0gbGV2ZWwgMSAtLT48bGkgcm9sZT0nbWVudWl0ZW0nIGNsYXNzPScgbm9DaGlsZHJlbicgPjxhIGNsYXNzPSduYXYtbGluayAgICcgICAgaHJlZj0nL2ZyL3dvcmtpbmctd2l0aC1pc28uaHRtbCc+RW1wbG9pPC9hPjwvbGk+PCEtLSBjbG9zZSBvZiBsaXN0IGl0ZW0gbGV2ZWwgMSAtLT48bGkgcm9sZT0nbWVudWl0ZW0nIGNsYXNzPScgbm9DaGlsZHJlbicgPjxhIGNsYXNzPSduYXYtbGluayAgICcgICAgaHJlZj0nL2ZyL2ZyZXF1ZW50bHktYXNrZWQtcXVlc3Rpb25zLWZhcXMuaHRtbCc+RkFRPC9hPjwvbGk+PCEtLSBjbG9zZSBvZiBsaXN0IGl0ZW0gbGV2ZWwgMSAtLT48bGkgcm9sZT0nbWVudWl0ZW0nIGNsYXNzPScgbm9DaGlsZHJlbicgPjxhIGNsYXNzPSduYXYtbGluayAgICcgICAgaHJlZj0nL2ZyL2NvbnRhY3QtaXNvLmh0bWwnPkNvbnRhY3RlciBsJ0lTTzwvYT48L2xpPjwhLS0gY2xvc2Ugb2YgbGlzdCBpdGVtIGxldmVsIDEgLS0+PC91bD48IS0tIGNsb3NlIG9mIGNvbnRhaW5lciBsZXZlbCAxIC0tPjwvbmF2PjxkaXYgY2xhc3M9InJvdyAgICAgICAiID4KPGRpdiBjbGFzcz0iY29sLW1kLTYgb2Zmc2V0LW1kLTMgY29sLXhsLTQgb2Zmc2V0LXhsLTQiPjxoMiBjbGFzcz0iaDQgcHQtMyBwYi0yIj5SZWNldm9pciBkZXMgaW5mb3JtYXRpb25zIHBhciBlLW1haWw8L2gyPjxmb3JtIG1ldGhvZD0iUE9TVCIgYWN0aW9uPSJodHRwczovL2lzbzI3Mi5hY3RpdmVob3N0ZWQuY29tL3Byb2MucGhwIiBpZD0iX2Zvcm1fMjNfIiBjbGFzcz0iX2Zvcm0gX2Zvcm1fMjMgX2lubGluZS1mb3JtICBfZGFyayIgbm92YWxpZGF0ZT4KICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJ1IiB2YWx1ZT0iMjMiIC8+CiAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iZiIgdmFsdWU9IjIzIiAvPgogIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InMiIC8+CiAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iYyIgdmFsdWU9IjAiIC8+CiAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ibSIgdmFsdWU9IjAiIC8+CiAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iYWN0IiB2YWx1ZT0ic3ViIiAvPgogIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InYiIHZhbHVlPSIyIiAvPgogIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9Im9yIiB2YWx1ZT0iOTQxN2I5Y2Q1MmZmNmM3NDJlMTc2YTM3MGVkNTQ0MmEiIC8+CgogIDxzdHlsZT4KICAgICAgLl9lcnJvciB7CiAgICAgICAgICB3aWR0aDogMTAwJTsKICAgICAgICAgIHBhZGRpbmc6IDAuNWVtIDEuMjVlbTsKICAgICAgICAgIHRleHQtYWxpZ246IGxlZnQ7CiAgICAgIH0KICA8L3N0eWxlPgoKICA8ZGl2IGNsYXNzPSJfZm9ybS1jb250ZW50Ij4KICAgIDxkaXYgY2xhc3M9ImlucHV0LWdyb3VwIGlucHV0LWdyb3VwLXJvdW5kIG1iLTMiPgogICAgICA8aW5wdXQgdHlwZT0idGV4dCIgaWQ9ImVtYWlsIiBjbGFzcz0iZm9ybS1jb250cm9sIiBuYW1lPSJlbWFpbCIgcGxhY2Vob2xkZXI9IkNvdXJyaWVsIiBhcmlhLWxhYmVsPSJFbWFpbCIgYXJpYS1kZXNjcmliZWRieT0iX2Zvcm1fMjNfc3VibWl0IiByZXF1aXJlZC8+CgogICAgICA8YnV0dG9uIGlkPSJfZm9ybV8yM19zdWJtaXQiIGNsYXNzPSJfc3VibWl0IGJ0biBidG4tcHJpbWFyeSIgdHlwZT0ic3VibWl0Ij4KICAgICAgICBTJ2Fib25uZXIgKjwvYnV0dG9uPgogICAgPC9kaXY+CiAgPC9kaXY+CgogICAgPGRpdiBjbGFzcz0iX2Zvcm0tdGhhbmsteW91IG1iLTMiIHN0eWxlPSJkaXNwbGF5Om5vbmU7Ij4KICAgICAgICAgIDxwPjxzdHJvbmc+QWxtb3N0IGRvbmUhJm5ic3A7PC9zdHJvbmc+PGJyIC8+CllvdSBhcmUgb25seSBvbmUgc3RlcCBhd2F5IGZyb20gam9pbmluZyB0aGUgSVNPIGluc2lnaHRzIHN1YnNjcmliZXIgbGlzdC4gUGxlYXNlIGNvbmZpcm0geW91ciBzdWJzY3JpcHRpb24gYnkgY2xpY2tpbmcgb24gdGhlIGVtYWlsIHdlJiMzOTt2ZSBqdXN0IHNlbnQgdG8geW91LiBZb3Ugd2lsbCBub3QgYmUgcmVnaXN0ZXJlZCB1bnRpbCB5b3UgY29uZmlybSB5b3VyIHN1YnNjcmlwdGlvbi4gSWYgeW91IGNhbiYjMzk7dCBmaW5kIHRoZSBlbWFpbCwga2luZGx5IGNoZWNrIHlvdXIgc3BhbSBmb2xkZXIgYW5kL29yIHRoZSBwcm9tb3Rpb25zIHRhYiAoaWYgeW91IHVzZSBHbWFpbCkuPC9wPjwvZGl2PgogICAgICA8ZGl2IGNsYXNzPSJ0ZXh0LXNtIj4qIE5ld3NsZXR0ZXIgZW4gYW5nbGFpczwvZGl2PjwvZm9ybT4KCgo8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+CiAgd2luZG93Ll9zaG93X3RoYW5rX3lvdSA9IGZ1bmN0aW9uKGlkLCBtZXNzYWdlLCB0cmFja2NtcF91cmwsIGVtYWlsKSB7CiAgICB2YXIgZm9ybSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdfZm9ybV8nICsgaWQgKyAnXycpLCB0aGFua195b3UgPSBmb3JtLnF1ZXJ5U2VsZWN0b3IoJy5fZm9ybS10aGFuay15b3UnKTsKICAgIGZvcm0ucXVlcnlTZWxlY3RvcignLl9mb3JtLWNvbnRlbnQnKS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnOwogICAgLy8gdGhhbmtfeW91LmlubmVySFRNTCA9IG1lc3NhZ2U7CiAgICB0aGFua195b3Uuc3R5bGUuZGlzcGxheSA9ICdibG9jayc7CiAgICBjb25zdCB2Z29BbGlhcyA9IHR5cGVvZiB2aXNpdG9yR2xvYmFsT2JqZWN0QWxpYXMgPT09ICd1bmRlZmluZWQnID8gJ3ZnbycgOiB2aXNpdG9yR2xvYmFsT2JqZWN0QWxpYXM7CiAgICB2YXIgdmlzaXRvck9iamVjdCA9IHdpbmRvd1t2Z29BbGlhc107CiAgICBpZiAoZW1haWwgJiYgdHlwZW9mIHZpc2l0b3JPYmplY3QgIT09ICd1bmRlZmluZWQnKSB7CiAgICAgIHZpc2l0b3JPYmplY3QoJ3NldEVtYWlsJywgZW1haWwpOwogICAgICB2aXNpdG9yT2JqZWN0KCd1cGRhdGUnKTsKICAgIH0gZWxzZSBpZiAodHlwZW9mKHRyYWNrY21wX3VybCkgIT0gJ3VuZGVmaW5lZCcgJiYgdHJhY2tjbXBfdXJsKSB7CiAgICAgIC8vIFNpdGUgdHJhY2tpbmcgVVJMIHRvIHVzZSBhZnRlciBpbmxpbmUgZm9ybSBzdWJtaXNzaW9uLgogICAgICBfbG9hZF9zY3JpcHQodHJhY2tjbXBfdXJsKTsKICAgIH0KICAgIGlmICh0eXBlb2Ygd2luZG93Ll9mb3JtX2NhbGxiYWNrICE9PSAndW5kZWZpbmVkJykgd2luZG93Ll9mb3JtX2NhbGxiYWNrKGlkKTsKICB9OwogIHdpbmRvdy5fc2hvd19lcnJvciA9IGZ1bmN0aW9uKGlkLCBtZXNzYWdlLCBodG1sKSB7CiAgICB2YXIgZm9ybSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdfZm9ybV8nICsgaWQgKyAnXycpLCBlcnIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKSwgYnV0dG9uID0gZm9ybS5xdWVyeVNlbGVjdG9yKCdidXR0b24nKSwgb2xkX2Vycm9yID0gZm9ybS5xdWVyeVNlbGVjdG9yKCcuX2Zvcm1fZXJyb3InKTsKICAgIGlmIChvbGRfZXJyb3IpIG9sZF9lcnJvci5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKG9sZF9lcnJvcik7CiAgICBlcnIuaW5uZXJIVE1MID0gbWVzc2FnZTsKICAgIGVyci5jbGFzc05hbWUgPSAnX2Vycm9yLWlubmVyIF9mb3JtX2Vycm9yIF9ub19hcnJvdyc7CiAgICB2YXIgd3JhcHBlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpOwogICAgd3JhcHBlci5jbGFzc05hbWUgPSAnX2Zvcm0taW5uZXInOwogICAgd3JhcHBlci5hcHBlbmRDaGlsZChlcnIpOwogICAgYnV0dG9uLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHdyYXBwZXIsIGJ1dHRvbik7CiAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdbaWRePSJfZm9ybSJdW2lkJD0iX3N1Ym1pdCJdJykuZGlzYWJsZWQgPSBmYWxzZTsKICAgIGlmIChodG1sKSB7CiAgICAgIHZhciBkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTsKICAgICAgZGl2LmNsYXNzTmFtZSA9ICdfZXJyb3ItaHRtbCc7CiAgICAgIGRpdi5pbm5lckhUTUwgPSBodG1sOwogICAgICBlcnIuYXBwZW5kQ2hpbGQoZGl2KTsKICAgIH0KICB9OwogIHdpbmRvdy5fbG9hZF9zY3JpcHQgPSBmdW5jdGlvbih1cmwsIGNhbGxiYWNrKSB7CiAgICB2YXIgaGVhZCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2hlYWQnKSwgc2NyaXB0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2NyaXB0JyksIHIgPSBmYWxzZTsKICAgIHNjcmlwdC50eXBlID0gJ3RleHQvamF2YXNjcmlwdCc7CiAgICBzY3JpcHQuY2hhcnNldCA9ICd1dGYtOCc7CiAgICBzY3JpcHQuc3JjID0gdXJsOwogICAgaWYgKGNhbGxiYWNrKSB7CiAgICAgIHNjcmlwdC5vbmxvYWQgPSBzY3JpcHQub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24oKSB7CiAgICAgICAgaWYgKCFyICYmICghdGhpcy5yZWFkeVN0YXRlIHx8IHRoaXMucmVhZHlTdGF0ZSA9PSAnY29tcGxldGUnKSkgewogICAgICAgICAgciA9IHRydWU7CiAgICAgICAgICBjYWxsYmFjaygpOwogICAgICAgIH0KICAgICAgfTsKICAgIH0KICAgIGhlYWQuYXBwZW5kQ2hpbGQoc2NyaXB0KTsKICB9OwogIChmdW5jdGlvbigpIHsKICAgIGlmICh3aW5kb3cubG9jYXRpb24uc2VhcmNoLnNlYXJjaCgiZXhjbHVkZWZvcm0iKSAhPT0gLTEpIHJldHVybiBmYWxzZTsKICAgIHZhciBnZXRDb29raWUgPSBmdW5jdGlvbihuYW1lKSB7CiAgICAgIHZhciBtYXRjaCA9IGRvY3VtZW50LmNvb2tpZS5tYXRjaChuZXcgUmVnRXhwKCcoXnw7ICknICsgbmFtZSArICc9KFteO10rKScpKTsKICAgICAgcmV0dXJuIG1hdGNoID8gbWF0Y2hbMl0gOiBudWxsOwogICAgfQogICAgdmFyIHNldENvb2tpZSA9IGZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7CiAgICAgIHZhciBub3cgPSBuZXcgRGF0ZSgpOwogICAgICB2YXIgdGltZSA9IG5vdy5nZXRUaW1lKCk7CiAgICAgIHZhciBleHBpcmVUaW1lID0gdGltZSArIDEwMDAgKiA2MCAqIDYwICogMjQgKiAzNjU7CiAgICAgIG5vdy5zZXRUaW1lKGV4cGlyZVRpbWUpOwogICAgICBkb2N1bWVudC5jb29raWUgPSBuYW1lICsgJz0nICsgdmFsdWUgKyAnOyBleHBpcmVzPScgKyBub3cgKyAnO3BhdGg9LzsgU2VjdXJlOyBTYW1lU2l0ZT1MYXg7JzsvLyBjYW5ub3QgYmUgSHR0cE9ubHkKICAgIH0KICAgIHZhciBhZGRFdmVudCA9IGZ1bmN0aW9uKGVsZW1lbnQsIGV2ZW50LCBmdW5jKSB7CiAgICAgIGlmIChlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIpIHsKICAgICAgICBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoZXZlbnQsIGZ1bmMpOwogICAgICB9IGVsc2UgewogICAgICAgIHZhciBvbGRGdW5jID0gZWxlbWVudFsnb24nICsgZXZlbnRdOwogICAgICAgIGVsZW1lbnRbJ29uJyArIGV2ZW50XSA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgb2xkRnVuYy5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICAgICAgZnVuYy5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICAgIH07CiAgICAgIH0KICAgIH0KICAgIHZhciBfcmVtb3ZlZCA9IGZhbHNlOwogICAgdmFyIGZvcm1fdG9fc3VibWl0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ19mb3JtXzIzXycpOwogICAgdmFyIGFsbElucHV0cyA9IGZvcm1fdG9fc3VibWl0LnF1ZXJ5U2VsZWN0b3JBbGwoJ2lucHV0LCBzZWxlY3QsIHRleHRhcmVhJyksIHRvb2x0aXBzID0gW10sIHN1Ym1pdHRlZCA9IGZhbHNlOwoKICAgIHZhciBnZXRVcmxQYXJhbSA9IGZ1bmN0aW9uKG5hbWUpIHsKICAgICAgdmFyIHBhcmFtcyA9IG5ldyBVUkxTZWFyY2hQYXJhbXMod2luZG93LmxvY2F0aW9uLnNlYXJjaCk7CiAgICAgIHJldHVybiBwYXJhbXMuZ2V0KG5hbWUpIHx8IGZhbHNlOwogICAgfTsKCiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFsbElucHV0cy5sZW5ndGg7IGkrKykgewogICAgICB2YXIgcmVnZXhTdHIgPSAiZmllbGRcXFsoXFxkKylcXF0iOwogICAgICB2YXIgcmVzdWx0cyA9IG5ldyBSZWdFeHAocmVnZXhTdHIpLmV4ZWMoYWxsSW5wdXRzW2ldLm5hbWUpOwogICAgICBpZiAocmVzdWx0cyAhPSB1bmRlZmluZWQpIHsKICAgICAgICBhbGxJbnB1dHNbaV0uZGF0YXNldC5uYW1lID0gd2luZG93LmNmaWVsZHNbcmVzdWx0c1sxXV07CiAgICAgIH0gZWxzZSB7CiAgICAgICAgYWxsSW5wdXRzW2ldLmRhdGFzZXQubmFtZSA9IGFsbElucHV0c1tpXS5uYW1lOwogICAgICB9CiAgICAgIHZhciBmaWVsZFZhbCA9IGdldFVybFBhcmFtKGFsbElucHV0c1tpXS5kYXRhc2V0Lm5hbWUpOwoKICAgICAgaWYgKGZpZWxkVmFsKSB7CiAgICAgICAgaWYgKGFsbElucHV0c1tpXS5kYXRhc2V0LmF1dG9maWxsID09PSAiZmFsc2UiKSB7CiAgICAgICAgICBjb250aW51ZTsKICAgICAgICB9CiAgICAgICAgaWYgKGFsbElucHV0c1tpXS50eXBlID09ICJyYWRpbyIgfHwgYWxsSW5wdXRzW2ldLnR5cGUgPT0gImNoZWNrYm94IikgewogICAgICAgICAgaWYgKGFsbElucHV0c1tpXS52YWx1ZSA9PSBmaWVsZFZhbCkgewogICAgICAgICAgICBhbGxJbnB1dHNbaV0uY2hlY2tlZCA9IHRydWU7CiAgICAgICAgICB9CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIGFsbElucHV0c1tpXS52YWx1ZSA9IGZpZWxkVmFsOwogICAgICAgIH0KICAgICAgfQogICAgfQoKICAgIHZhciByZW1vdmVfdG9vbHRpcHMgPSBmdW5jdGlvbigpIHsKICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0b29sdGlwcy5sZW5ndGg7IGkrKykgewogICAgICAgIHRvb2x0aXBzW2ldLnRpcC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRvb2x0aXBzW2ldLnRpcCk7CiAgICAgIH0KICAgICAgdG9vbHRpcHMgPSBbXTsKICAgIH07CiAgICB2YXIgcmVtb3ZlX3Rvb2x0aXAgPSBmdW5jdGlvbihlbGVtKSB7CiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdG9vbHRpcHMubGVuZ3RoOyBpKyspIHsKICAgICAgICBpZiAodG9vbHRpcHNbaV0uZWxlbSA9PT0gZWxlbSkgewogICAgICAgICAgdG9vbHRpcHNbaV0udGlwLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodG9vbHRpcHNbaV0udGlwKTsKICAgICAgICAgIHRvb2x0aXBzLnNwbGljZShpLCAxKTsKICAgICAgICAgIHJldHVybjsKICAgICAgICB9CiAgICAgIH0KICAgIH07CiAgICB2YXIgY3JlYXRlX3Rvb2x0aXAgPSBmdW5jdGlvbihlbGVtLCB0ZXh0KSB7CiAgICAgIHZhciB0b29sdGlwID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JyksIGFycm93ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JyksIGlubmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JyksIG5ld190b29sdGlwID0ge307CiAgICAgIGlmIChlbGVtLnR5cGUgIT0gJ3JhZGlvJyAmJiBlbGVtLnR5cGUgIT0gJ2NoZWNrYm94JykgewogICAgICAgIHRvb2x0aXAuY2xhc3NOYW1lID0gJ19lcnJvciB0ZXh0LXNtIHRleHQtbXV0ZWQgdGV4dC1zdGFydCc7CiAgICAgICAgYXJyb3cuY2xhc3NOYW1lID0gJ19lcnJvci1hcnJvdyc7CiAgICAgICAgaW5uZXIuY2xhc3NOYW1lID0gJ19lcnJvci1pbm5lcic7CiAgICAgICAgaW5uZXIuaW5uZXJIVE1MID0gdGV4dDsKICAgICAgICB0b29sdGlwLmFwcGVuZENoaWxkKGFycm93KTsKICAgICAgICB0b29sdGlwLmFwcGVuZENoaWxkKGlubmVyKTsKICAgICAgICBlbGVtLnBhcmVudE5vZGUuYXBwZW5kQ2hpbGQodG9vbHRpcCk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgdG9vbHRpcC5jbGFzc05hbWUgPSAnX2Vycm9yLWlubmVyIF9ub19hcnJvdyc7CiAgICAgICAgdG9vbHRpcC5pbm5lckhUTUwgPSB0ZXh0OwogICAgICAgIGVsZW0ucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUodG9vbHRpcCwgZWxlbSk7CiAgICAgICAgbmV3X3Rvb2x0aXAubm9fYXJyb3cgPSB0cnVlOwogICAgICB9CiAgICAgIG5ld190b29sdGlwLnRpcCA9IHRvb2x0aXA7CiAgICAgIG5ld190b29sdGlwLmVsZW0gPSBlbGVtOwogICAgICB0b29sdGlwcy5wdXNoKG5ld190b29sdGlwKTsKICAgICAgcmV0dXJuIG5ld190b29sdGlwOwogICAgfTsKICAgIHZhciByZXNpemVfdG9vbHRpcCA9IGZ1bmN0aW9uKHRvb2x0aXApIHsKICAgICAgdmFyIHJlY3QgPSB0b29sdGlwLmVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7CiAgICAgIHZhciBkb2MgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQsIHNjcm9sbFBvc2l0aW9uID0gcmVjdC50b3AgLSAoKHdpbmRvdy5wYWdlWU9mZnNldCB8fCBkb2Muc2Nyb2xsVG9wKSAgLSAoZG9jLmNsaWVudFRvcCB8fCAwKSk7CiAgICAgIGlmIChzY3JvbGxQb3NpdGlvbiA8IDQwKSB7CiAgICAgICAgdG9vbHRpcC50aXAuY2xhc3NOYW1lID0gdG9vbHRpcC50aXAuY2xhc3NOYW1lLnJlcGxhY2UoLyA/KF9hYm92ZXxfYmVsb3cpID8vZywgJycpICsgJyBfYmVsb3cnOwogICAgICB9IGVsc2UgewogICAgICAgIHRvb2x0aXAudGlwLmNsYXNzTmFtZSA9IHRvb2x0aXAudGlwLmNsYXNzTmFtZS5yZXBsYWNlKC8gPyhfYWJvdmV8X2JlbG93KSA/L2csICcnKSArICcgX2Fib3ZlJzsKICAgICAgfQogICAgfTsKICAgIHZhciByZXNpemVfdG9vbHRpcHMgPSBmdW5jdGlvbigpIHsKICAgICAgaWYgKF9yZW1vdmVkKSByZXR1cm47CiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdG9vbHRpcHMubGVuZ3RoOyBpKyspIHsKICAgICAgICBpZiAoIXRvb2x0aXBzW2ldLm5vX2Fycm93KSByZXNpemVfdG9vbHRpcCh0b29sdGlwc1tpXSk7CiAgICAgIH0KICAgIH07CiAgICB2YXIgdmFsaWRhdGVfZmllbGQgPSBmdW5jdGlvbihlbGVtLCByZW1vdmUpIHsKICAgICAgdmFyIHRvb2x0aXAgPSBudWxsLCB2YWx1ZSA9IGVsZW0udmFsdWUsIG5vX2Vycm9yID0gdHJ1ZTsKICAgICAgcmVtb3ZlID8gcmVtb3ZlX3Rvb2x0aXAoZWxlbSkgOiBmYWxzZTsKICAgICAgaWYgKGVsZW0udHlwZSAhPSAnY2hlY2tib3gnKSBlbGVtLmNsYXNzTmFtZSA9IGVsZW0uY2xhc3NOYW1lLnJlcGxhY2UoLyA/X2hhc19lcnJvciA/L2csICcnKTsKICAgICAgaWYgKGVsZW0uZ2V0QXR0cmlidXRlKCdyZXF1aXJlZCcpICE9PSBudWxsKSB7CiAgICAgICAgaWYgKGVsZW0udHlwZSA9PSAncmFkaW8nIHx8IChlbGVtLnR5cGUgPT0gJ2NoZWNrYm94JyAmJiAvYW55Ly50ZXN0KGVsZW0uY2xhc3NOYW1lKSkpIHsKICAgICAgICAgIHZhciBlbGVtcyA9IGZvcm1fdG9fc3VibWl0LmVsZW1lbnRzW2VsZW0ubmFtZV07CiAgICAgICAgICBpZiAoIShlbGVtcyBpbnN0YW5jZW9mIE5vZGVMaXN0IHx8IGVsZW1zIGluc3RhbmNlb2YgSFRNTENvbGxlY3Rpb24pIHx8IGVsZW1zLmxlbmd0aCA8PSAxKSB7CiAgICAgICAgICAgIG5vX2Vycm9yID0gZWxlbS5jaGVja2VkOwogICAgICAgICAgfQogICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgIG5vX2Vycm9yID0gZmFsc2U7CiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZWxlbXMubGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgICBpZiAoZWxlbXNbaV0uY2hlY2tlZCkgbm9fZXJyb3IgPSB0cnVlOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgICBpZiAoIW5vX2Vycm9yKSB7CiAgICAgICAgICAgIHRvb2x0aXAgPSBjcmVhdGVfdG9vbHRpcChlbGVtLCAiUGxlYXNlIHNlbGVjdCBhbiBvcHRpb24uIik7CiAgICAgICAgICB9CiAgICAgICAgfSBlbHNlIGlmIChlbGVtLnR5cGUgPT0nY2hlY2tib3gnKSB7CiAgICAgICAgICB2YXIgZWxlbXMgPSBmb3JtX3RvX3N1Ym1pdC5lbGVtZW50c1tlbGVtLm5hbWVdLCBmb3VuZCA9IGZhbHNlLCBlcnIgPSBbXTsKICAgICAgICAgIG5vX2Vycm9yID0gdHJ1ZTsKICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZWxlbXMubGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgaWYgKGVsZW1zW2ldLmdldEF0dHJpYnV0ZSgncmVxdWlyZWQnKSA9PT0gbnVsbCkgY29udGludWU7CiAgICAgICAgICAgIGlmICghZm91bmQgJiYgZWxlbXNbaV0gIT09IGVsZW0pIHJldHVybiB0cnVlOwogICAgICAgICAgICBmb3VuZCA9IHRydWU7CiAgICAgICAgICAgIGVsZW1zW2ldLmNsYXNzTmFtZSA9IGVsZW1zW2ldLmNsYXNzTmFtZS5yZXBsYWNlKC8gP19oYXNfZXJyb3IgPy9nLCAnJyk7CiAgICAgICAgICAgIGlmICghZWxlbXNbaV0uY2hlY2tlZCkgewogICAgICAgICAgICAgIG5vX2Vycm9yID0gZmFsc2U7CiAgICAgICAgICAgICAgZWxlbXNbaV0uY2xhc3NOYW1lID0gZWxlbXNbaV0uY2xhc3NOYW1lICsgJyBfaGFzX2Vycm9yJzsKICAgICAgICAgICAgICBlcnIucHVzaCgiQ2hlY2tpbmcgJXMgaXMgcmVxdWlyZWQiLnJlcGxhY2UoIiVzIiwgZWxlbXNbaV0udmFsdWUpKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgICAgaWYgKCFub19lcnJvcikgewogICAgICAgICAgICB0b29sdGlwID0gY3JlYXRlX3Rvb2x0aXAoZWxlbSwgZXJyLmpvaW4oJzxici8+JykpOwogICAgICAgICAgfQogICAgICAgIH0gZWxzZSBpZiAoZWxlbS50YWdOYW1lID09ICdTRUxFQ1QnKSB7CiAgICAgICAgICB2YXIgc2VsZWN0ZWQgPSB0cnVlOwogICAgICAgICAgaWYgKGVsZW0ubXVsdGlwbGUpIHsKICAgICAgICAgICAgc2VsZWN0ZWQgPSBmYWxzZTsKICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBlbGVtLm9wdGlvbnMubGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgICBpZiAoZWxlbS5vcHRpb25zW2ldLnNlbGVjdGVkKSB7CiAgICAgICAgICAgICAgICBzZWxlY3RlZCA9IHRydWU7CiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZWxlbS5vcHRpb25zLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgICAgaWYgKGVsZW0ub3B0aW9uc1tpXS5zZWxlY3RlZCAmJiAoIWVsZW0ub3B0aW9uc1tpXS52YWx1ZSB8fCAoZWxlbS5vcHRpb25zW2ldLnZhbHVlLm1hdGNoKC9cbi9nKSkpKSB7CiAgICAgICAgICAgICAgICBzZWxlY3RlZCA9IGZhbHNlOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgICAgaWYgKCFzZWxlY3RlZCkgewogICAgICAgICAgICBlbGVtLmNsYXNzTmFtZSA9IGVsZW0uY2xhc3NOYW1lICsgJyBfaGFzX2Vycm9yJzsKICAgICAgICAgICAgbm9fZXJyb3IgPSBmYWxzZTsKICAgICAgICAgICAgdG9vbHRpcCA9IGNyZWF0ZV90b29sdGlwKGVsZW0sICJQbGVhc2Ugc2VsZWN0IGFuIG9wdGlvbi4iKTsKICAgICAgICAgIH0KICAgICAgICB9IGVsc2UgaWYgKHZhbHVlID09PSB1bmRlZmluZWQgfHwgdmFsdWUgPT09IG51bGwgfHwgdmFsdWUgPT09ICcnKSB7CiAgICAgICAgICBlbGVtLmNsYXNzTmFtZSA9IGVsZW0uY2xhc3NOYW1lICsgJyBfaGFzX2Vycm9yJzsKICAgICAgICAgIG5vX2Vycm9yID0gZmFsc2U7CiAgICAgICAgICB0b29sdGlwID0gY3JlYXRlX3Rvb2x0aXAoZWxlbSwgIkNlIGNoYW1wIGVzdCByZXF1aXMiKTsKICAgICAgICB9CiAgICAgIH0KICAgICAgaWYgKG5vX2Vycm9yICYmIChlbGVtLmlkID09ICdmaWVsZFtdJyB8fCBlbGVtLmlkID09ICdjYVsxMV1bdl0nKSkgewogICAgICAgIGlmIChlbGVtLmNsYXNzTmFtZS5pbmNsdWRlcygncGhvbmUtaW5wdXQtZXJyb3InKSkgewogICAgICAgICAgZWxlbS5jbGFzc05hbWUgPSBlbGVtLmNsYXNzTmFtZSArICcgX2hhc19lcnJvcic7CiAgICAgICAgICBub19lcnJvciA9IGZhbHNlOwogICAgICAgIH0KICAgICAgfQogICAgICBpZiAobm9fZXJyb3IgJiYgZWxlbS5uYW1lID09ICdlbWFpbCcpIHsKICAgICAgICBpZiAoIXZhbHVlLm1hdGNoKC9eW1wrX2EtejAtOS0nJj1dKyhcLltcK19hLXowLTktJ10rKSpAW2EtejAtOS1dKyhcLlthLXowLTktXSspKihcLlthLXpdezIsfSkkL2kpKSB7CiAgICAgICAgICBlbGVtLmNsYXNzTmFtZSA9IGVsZW0uY2xhc3NOYW1lICsgJyBfaGFzX2Vycm9yJzsKICAgICAgICAgIG5vX2Vycm9yID0gZmFsc2U7CiAgICAgICAgICB0b29sdGlwID0gY3JlYXRlX3Rvb2x0aXAoZWxlbSwgJ1ZldWlsbGV6IGVudHJlciB1biBjb3VycmllbCB2YWxpZGUnKTsKICAgICAgICB9CiAgICAgIH0KICAgICAgaWYgKG5vX2Vycm9yICYmIC9kYXRlX2ZpZWxkLy50ZXN0KGVsZW0uY2xhc3NOYW1lKSkgewogICAgICAgIGlmICghdmFsdWUubWF0Y2goL15cZFxkXGRcZC1cZFxkLVxkXGQkLykpIHsKICAgICAgICAgIGVsZW0uY2xhc3NOYW1lID0gZWxlbS5jbGFzc05hbWUgKyAnIF9oYXNfZXJyb3InOwogICAgICAgICAgbm9fZXJyb3IgPSBmYWxzZTsKICAgICAgICAgIHRvb2x0aXAgPSBjcmVhdGVfdG9vbHRpcChlbGVtLCAiRW50ZXIgYSB2YWxpZCBkYXRlLiIpOwogICAgICAgIH0KICAgICAgfQogICAgICB0b29sdGlwID8gcmVzaXplX3Rvb2x0aXAodG9vbHRpcCkgOiBmYWxzZTsKICAgICAgcmV0dXJuIG5vX2Vycm9yOwogICAgfTsKICAgIHZhciBuZWVkc192YWxpZGF0ZSA9IGZ1bmN0aW9uKGVsKSB7CiAgICAgIGlmKGVsLmdldEF0dHJpYnV0ZSgncmVxdWlyZWQnKSAhPT0gbnVsbCl7CiAgICAgICAgcmV0dXJuIHRydWUKICAgICAgfQogICAgICBpZihlbC5uYW1lID09PSAnZW1haWwnICYmIGVsLnZhbHVlICE9PSAiIil7CiAgICAgICAgcmV0dXJuIHRydWUKICAgICAgfQoKICAgICAgaWYoKGVsLmlkID09ICdmaWVsZFtdJyB8fCBlbC5pZCA9PSAnY2FbMTFdW3ZdJykgJiYgZWwuY2xhc3NOYW1lLmluY2x1ZGVzKCdwaG9uZS1pbnB1dC1lcnJvcicpKXsKICAgICAgICByZXR1cm4gdHJ1ZQogICAgICB9CgogICAgICByZXR1cm4gZmFsc2UKICAgIH07CiAgICB2YXIgdmFsaWRhdGVfZm9ybSA9IGZ1bmN0aW9uKGUpIHsKICAgICAgdmFyIGVyciA9IGZvcm1fdG9fc3VibWl0LnF1ZXJ5U2VsZWN0b3IoJy5fZm9ybV9lcnJvcicpLCBub19lcnJvciA9IHRydWU7CiAgICAgIGlmICghc3VibWl0dGVkKSB7CiAgICAgICAgc3VibWl0dGVkID0gdHJ1ZTsKICAgICAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gYWxsSW5wdXRzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7CiAgICAgICAgICB2YXIgaW5wdXQgPSBhbGxJbnB1dHNbaV07CiAgICAgICAgICBpZiAobmVlZHNfdmFsaWRhdGUoaW5wdXQpKSB7CiAgICAgICAgICAgIGlmIChpbnB1dC50eXBlID09ICd0ZWwnKSB7CiAgICAgICAgICAgICAgYWRkRXZlbnQoaW5wdXQsICdibHVyJywgZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICB0aGlzLnZhbHVlID0gdGhpcy52YWx1ZS50cmltKCk7CiAgICAgICAgICAgICAgICB2YWxpZGF0ZV9maWVsZCh0aGlzLCB0cnVlKTsKICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAoaW5wdXQudHlwZSA9PSAndGV4dCcgfHwgaW5wdXQudHlwZSA9PSAnbnVtYmVyJyB8fCBpbnB1dC50eXBlID09ICd0aW1lJykgewogICAgICAgICAgICAgIGFkZEV2ZW50KGlucHV0LCAnYmx1cicsIGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgdGhpcy52YWx1ZSA9IHRoaXMudmFsdWUudHJpbSgpOwogICAgICAgICAgICAgICAgdmFsaWRhdGVfZmllbGQodGhpcywgdHJ1ZSk7CiAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgYWRkRXZlbnQoaW5wdXQsICdpbnB1dCcsIGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgdmFsaWRhdGVfZmllbGQodGhpcywgdHJ1ZSk7CiAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0gZWxzZSBpZiAoaW5wdXQudHlwZSA9PSAncmFkaW8nIHx8IGlucHV0LnR5cGUgPT0gJ2NoZWNrYm94JykgewogICAgICAgICAgICAgIChmdW5jdGlvbihlbCkgewogICAgICAgICAgICAgICAgdmFyIHJhZGlvcyA9IGZvcm1fdG9fc3VibWl0LmVsZW1lbnRzW2VsLm5hbWVdOwogICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCByYWRpb3MubGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgICAgICAgYWRkRXZlbnQocmFkaW9zW2ldLCAnY2xpY2snLCBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgICB2YWxpZGF0ZV9maWVsZChlbCwgdHJ1ZSk7CiAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0pKGlucHV0KTsKICAgICAgICAgICAgfSBlbHNlIGlmIChpbnB1dC50YWdOYW1lID09ICdTRUxFQ1QnKSB7CiAgICAgICAgICAgICAgYWRkRXZlbnQoaW5wdXQsICdjaGFuZ2UnLCBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgIHZhbGlkYXRlX2ZpZWxkKHRoaXMsIHRydWUpOwogICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9IGVsc2UgaWYgKGlucHV0LnR5cGUgPT0gJ3RleHRhcmVhJyl7CiAgICAgICAgICAgICAgYWRkRXZlbnQoaW5wdXQsICdpbnB1dCcsIGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgdmFsaWRhdGVfZmllbGQodGhpcywgdHJ1ZSk7CiAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0KICAgICAgcmVtb3ZlX3Rvb2x0aXBzKCk7CiAgICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBhbGxJbnB1dHMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHsKICAgICAgICB2YXIgZWxlbSA9IGFsbElucHV0c1tpXTsKICAgICAgICBpZiAobmVlZHNfdmFsaWRhdGUoZWxlbSkpIHsKICAgICAgICAgIGlmIChlbGVtLnRhZ05hbWUudG9Mb3dlckNhc2UoKSAhPT0gInNlbGVjdCIpIHsKICAgICAgICAgICAgZWxlbS52YWx1ZSA9IGVsZW0udmFsdWUudHJpbSgpOwogICAgICAgICAgfQogICAgICAgICAgdmFsaWRhdGVfZmllbGQoZWxlbSkgPyB0cnVlIDogbm9fZXJyb3IgPSBmYWxzZTsKICAgICAgICB9CiAgICAgIH0KICAgICAgaWYgKCFub19lcnJvciAmJiBlKSB7CiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpOwogICAgICB9CiAgICAgIHJlc2l6ZV90b29sdGlwcygpOwogICAgICByZXR1cm4gbm9fZXJyb3I7CiAgICB9OwogICAgYWRkRXZlbnQod2luZG93LCAncmVzaXplJywgcmVzaXplX3Rvb2x0aXBzKTsKICAgIGFkZEV2ZW50KHdpbmRvdywgJ3Njcm9sbCcsIHJlc2l6ZV90b29sdGlwcyk7CgogICAgdmFyIGhpZGVQaG9uZUlucHV0RXJyb3IgPSBmdW5jdGlvbihpbnB1dElkKSB7CiAgICAgIHZhciBlcnJvck1lc3NhZ2UgPSAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImVycm9yLW1zZy0iICsgaW5wdXRJZCk7CiAgICAgIHZhciBpbnB1dCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGlucHV0SWQpOwogICAgICBlcnJvck1lc3NhZ2UuY2xhc3NMaXN0LnJlbW92ZSgicGhvbmUtZXJyb3IiKTsKICAgICAgZXJyb3JNZXNzYWdlLmNsYXNzTGlzdC5hZGQoInBob25lLWVycm9yLWhpZGRlbiIpOwogICAgICBpbnB1dC5jbGFzc0xpc3QucmVtb3ZlKCJwaG9uZS1pbnB1dC1lcnJvciIpOwogICAgfTsKCiAgICB2YXIgaW5pdGlhbGl6ZVBob25lSW5wdXQgPSBmdW5jdGlvbihpbnB1dCwgZGVmYXVsdENvdW50cnkpIHsKICAgICAgcmV0dXJuIHdpbmRvdy5pbnRsVGVsSW5wdXQoaW5wdXQsIHsKICAgICAgICB1dGlsc1NjcmlwdDogImh0dHBzOi8vdW5wa2cuY29tL2ludGwtdGVsLWlucHV0QDE3LjAuMTgvYnVpbGQvanMvdXRpbHMuanMiLAogICAgICAgIGF1dG9IaWRlRGlhbENvZGU6IGZhbHNlLAogICAgICAgIHNlcGFyYXRlRGlhbENvZGU6IHRydWUsCiAgICAgICAgaW5pdGlhbENvdW50cnk6IGRlZmF1bHRDb3VudHJ5LAogICAgICAgIHByZWZlcnJlZENvdW50cmllczogW10KICAgICAgfSk7CiAgICB9CgogICAgdmFyIHNldFBob25lSW5wdXRFdmVudExpc3RlbmVycyA9IGZ1bmN0aW9uKGlucHV0SWQsIGlucHV0LCBpdGkpIHsKICAgICAgaW5wdXQuYWRkRXZlbnRMaXN0ZW5lcignYmx1cicsIGZ1bmN0aW9uKCkgewogICAgICAgIHZhciBlcnJvck1lc3NhZ2UgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiZXJyb3ItbXNnLSIgKyBpbnB1dElkKTsKICAgICAgICBpZiAoaW5wdXQudmFsdWUudHJpbSgpKSB7CiAgICAgICAgICBpZiAoaXRpLmlzVmFsaWROdW1iZXIoKSkgewogICAgICAgICAgICBpdGkuc2V0TnVtYmVyKGl0aS5nZXROdW1iZXIoKSk7CiAgICAgICAgICAgIGlmIChlcnJvck1lc3NhZ2UuY2xhc3NMaXN0LmNvbnRhaW5zKCJwaG9uZS1lcnJvciIpKXsKICAgICAgICAgICAgICBoaWRlUGhvbmVJbnB1dEVycm9yKGlucHV0SWQpOwogICAgICAgICAgICB9CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBzaG93UGhvbmVJbnB1dEVycm9yKGlucHV0SWQpCiAgICAgICAgICB9CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIGlmIChlcnJvck1lc3NhZ2UuY2xhc3NMaXN0LmNvbnRhaW5zKCJwaG9uZS1lcnJvciIpKXsKICAgICAgICAgICAgaGlkZVBob25lSW5wdXRFcnJvcihpbnB1dElkKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0pOwoKICAgICAgaW5wdXQuYWRkRXZlbnRMaXN0ZW5lcigiY291bnRyeWNoYW5nZSIsIGZ1bmN0aW9uKCkgewogICAgICAgIGl0aS5zZXROdW1iZXIoJycpOwogICAgICB9KTsKCiAgICAgIGlucHV0LmFkZEV2ZW50TGlzdGVuZXIoImtleWRvd24iLCBmdW5jdGlvbihlKSB7CiAgICAgICAgdmFyIGNoYXJDb2RlID0gKGUud2hpY2gpID8gZS53aGljaCA6IGUua2V5Q29kZTsKICAgICAgICBpZiAoY2hhckNvZGUgPiAzMSAmJiAoY2hhckNvZGUgPCA0OCB8fCBjaGFyQ29kZSA+IDU3KSAmJiBjaGFyQ29kZSAhPT0gOCkgewogICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpOwogICAgICAgIH0KICAgICAgfSk7CiAgICB9OwoKICAgIHZhciBzaG93UGhvbmVJbnB1dEVycm9yID0gZnVuY3Rpb24oaW5wdXRJZCkgewogICAgICB2YXIgZXJyb3JNZXNzYWdlID0gIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJlcnJvci1tc2ctIiArIGlucHV0SWQpOwogICAgICB2YXIgaW5wdXQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChpbnB1dElkKTsKICAgICAgZXJyb3JNZXNzYWdlLmNsYXNzTGlzdC5hZGQoInBob25lLWVycm9yIik7CiAgICAgIGVycm9yTWVzc2FnZS5jbGFzc0xpc3QucmVtb3ZlKCJwaG9uZS1lcnJvci1oaWRkZW4iKTsKICAgICAgaW5wdXQuY2xhc3NMaXN0LmFkZCgicGhvbmUtaW5wdXQtZXJyb3IiKTsKICAgIH07CgoKICAgIHZhciBfZm9ybV9zZXJpYWxpemUgPSBmdW5jdGlvbihmb3JtKXtpZighZm9ybXx8Zm9ybS5ub2RlTmFtZSE9PSJGT1JNIil7cmV0dXJuIH12YXIgaSxqLHE9W107Zm9yKGk9MDtpPGZvcm0uZWxlbWVudHMubGVuZ3RoO2krKyl7aWYoZm9ybS5lbGVtZW50c1tpXS5uYW1lPT09IiIpe2NvbnRpbnVlfXN3aXRjaChmb3JtLmVsZW1lbnRzW2ldLm5vZGVOYW1lKXtjYXNlIklOUFVUIjpzd2l0Y2goZm9ybS5lbGVtZW50c1tpXS50eXBlKXtjYXNlInRlbCI6cS5wdXNoKGZvcm0uZWxlbWVudHNbaV0ubmFtZSsiPSIrZW5jb2RlVVJJQ29tcG9uZW50KGZvcm0uZWxlbWVudHNbaV0ucHJldmlvdXNTaWJsaW5nLnF1ZXJ5U2VsZWN0b3IoJ2Rpdi5pdGlfX3NlbGVjdGVkLWRpYWwtY29kZScpLmlubmVyVGV4dCkrZW5jb2RlVVJJQ29tcG9uZW50KCIgIikrZW5jb2RlVVJJQ29tcG9uZW50KGZvcm0uZWxlbWVudHNbaV0udmFsdWUpKTticmVhaztjYXNlInRleHQiOmNhc2UibnVtYmVyIjpjYXNlImRhdGUiOmNhc2UidGltZSI6Y2FzZSJoaWRkZW4iOmNhc2UicGFzc3dvcmQiOmNhc2UiYnV0dG9uIjpjYXNlInJlc2V0IjpjYXNlInN1Ym1pdCI6cS5wdXNoKGZvcm0uZWxlbWVudHNbaV0ubmFtZSsiPSIrZW5jb2RlVVJJQ29tcG9uZW50KGZvcm0uZWxlbWVudHNbaV0udmFsdWUpKTticmVhaztjYXNlImNoZWNrYm94IjpjYXNlInJhZGlvIjppZihmb3JtLmVsZW1lbnRzW2ldLmNoZWNrZWQpe3EucHVzaChmb3JtLmVsZW1lbnRzW2ldLm5hbWUrIj0iK2VuY29kZVVSSUNvbXBvbmVudChmb3JtLmVsZW1lbnRzW2ldLnZhbHVlKSl9YnJlYWs7Y2FzZSJmaWxlIjpicmVha31icmVhaztjYXNlIlRFWFRBUkVBIjpxLnB1c2goZm9ybS5lbGVtZW50c1tpXS5uYW1lKyI9IitlbmNvZGVVUklDb21wb25lbnQoZm9ybS5lbGVtZW50c1tpXS52YWx1ZSkpO2JyZWFrO2Nhc2UiU0VMRUNUIjpzd2l0Y2goZm9ybS5lbGVtZW50c1tpXS50eXBlKXtjYXNlInNlbGVjdC1vbmUiOnEucHVzaChmb3JtLmVsZW1lbnRzW2ldLm5hbWUrIj0iK2VuY29kZVVSSUNvbXBvbmVudChmb3JtLmVsZW1lbnRzW2ldLnZhbHVlKSk7YnJlYWs7Y2FzZSJzZWxlY3QtbXVsdGlwbGUiOmZvcihqPTA7ajxmb3JtLmVsZW1lbnRzW2ldLm9wdGlvbnMubGVuZ3RoO2orKyl7aWYoZm9ybS5lbGVtZW50c1tpXS5vcHRpb25zW2pdLnNlbGVjdGVkKXtxLnB1c2goZm9ybS5lbGVtZW50c1tpXS5uYW1lKyI9IitlbmNvZGVVUklDb21wb25lbnQoZm9ybS5lbGVtZW50c1tpXS5vcHRpb25zW2pdLnZhbHVlKSl9fWJyZWFrfWJyZWFrO2Nhc2UiQlVUVE9OIjpzd2l0Y2goZm9ybS5lbGVtZW50c1tpXS50eXBlKXtjYXNlInJlc2V0IjpjYXNlInN1Ym1pdCI6Y2FzZSJidXR0b24iOnEucHVzaChmb3JtLmVsZW1lbnRzW2ldLm5hbWUrIj0iK2VuY29kZVVSSUNvbXBvbmVudChmb3JtLmVsZW1lbnRzW2ldLnZhbHVlKSk7YnJlYWt9YnJlYWt9fXJldHVybiBxLmpvaW4oIiYiKX07CiAgICB2YXIgZm9ybV9zdWJtaXQgPSBmdW5jdGlvbihlKSB7CiAgICAgIGUucHJldmVudERlZmF1bHQoKTsKICAgICAgaWYgKHZhbGlkYXRlX2Zvcm0oKSkgewogICAgICAgIC8vIHVzZSB0aGlzIHRyaWNrIHRvIGdldCB0aGUgc3VibWl0IGJ1dHRvbiAmIGRpc2FibGUgaXQgdXNpbmcgcGxhaW4gamF2YXNjcmlwdAogICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNfZm9ybV8yM19zdWJtaXQnKS5kaXNhYmxlZCA9IHRydWU7CiAgICAgICAgdmFyIHNlcmlhbGl6ZWQgPSBfZm9ybV9zZXJpYWxpemUoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ19mb3JtXzIzXycpKS5yZXBsYWNlKC8lMEEvZywgJ1xcbicpOwogICAgICAgIHZhciBlcnIgPSBmb3JtX3RvX3N1Ym1pdC5xdWVyeVNlbGVjdG9yKCcuX2Zvcm1fZXJyb3InKTsKICAgICAgICBlcnIgPyBlcnIucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChlcnIpIDogZmFsc2U7CiAgICAgICAgX2xvYWRfc2NyaXB0KCdodHRwczovL2lzbzI3Mi5hY3RpdmVob3N0ZWQuY29tL3Byb2MucGhwPycgKyBzZXJpYWxpemVkICsgJyZqc29ucD10cnVlJyk7CiAgICAgIH0KICAgICAgcmV0dXJuIGZhbHNlOwogICAgfTsKICAgIGFkZEV2ZW50KGZvcm1fdG9fc3VibWl0LCAnc3VibWl0JywgZm9ybV9zdWJtaXQpOwogIH0pKCk7Cgo8L3NjcmlwdD48cCBjbGFzcz0idGV4dC14cyI+UG91ciBzYXZvaXIgY29tbWVudCB2b3MgZG9ubiZlYWN1dGU7ZXMgc2Vyb250IHV0aWxpcyZlYWN1dGU7ZXMsIHZldWlsbGV6IGNvbnN1bHRlciBub3RyZSA8YSBocmVmPSIvZnIvY29uZmlkZW50aWFsaXRlIiB0aXRsZT0iSVNPIHByaXZhY3kgbm90aWNlIj5hdmlzIGRlIGNvbmZpZGVudGlhbGl0JmVhY3V0ZTs8L2E+LjwvcD48L2Rpdj48L2Rpdj48L2Rpdj4KICAgICAgICA8ZGl2IGNsYXNzPSJmb290ZXItc29jaWFsIGNsZWFyZml4Ij4KICAgICAgICAgIDx1bCBpdGVtc2NvcGUgaXRlbXR5cGU9Imh0dHBzOi8vc2NoZW1hLm9yZy9Pcmdhbml6YXRpb24iPgogICAgICAgICAgICA8bGluayBpdGVtcHJvcD0idXJsIiBocmVmPSJodHRwczovL3d3dy5pc28ub3JnLyI+CiAgICAgICAgICAgIDxsaT48YSBpdGVtcHJvcD0ic2FtZUFzIiB0YXJnZXQ9Il9ibGFuayIgcmVsPSJub29wZW5lciIgaHJlZj0iaHR0cHM6Ly93d3cubGlua2VkaW4uY29tL2NvbXBhbnkvaXNvc3RhbmRhcmRzIiB0aXRsZT0iTGlua2VkaW4iPjxpIGNsYXNzPSJiaS1saW5rZWRpbiI+PC9pPjwvYT48L2xpPgogICAgICAgICAgICA8bGk+PGEgaXRlbXByb3A9InNhbWVBcyIgdGFyZ2V0PSJfYmxhbmsiIHJlbD0ibm9vcGVuZXIiIGhyZWY9Imh0dHBzOi8vdHdpdHRlci5jb20vaXNvc3RhbmRhcmRzIiB0aXRsZT0iVHdpdHRlciI+PGkgY2xhc3M9ImJpLXR3aXR0ZXIiPjwvaT48L2E+PC9saT4KICAgICAgICAgICAgPGxpPjxhIGl0ZW1wcm9wPSJzYW1lQXMiIHRhcmdldD0iX2JsYW5rIiByZWw9Im5vb3BlbmVyIiBocmVmPSJodHRwczovL3d3dy5mYWNlYm9vay5jb20vaXNvc3RhbmRhcmRzIiB0aXRsZT0iRmFjZWJvb2siPjxpIGNsYXNzPSJiaS1mYWNlYm9vayI+PC9pPjwvYT48L2xpPgogICAgICAgICAgICA8bGk+PGEgaXRlbXByb3A9InNhbWVBcyIgdGFyZ2V0PSJfYmxhbmsiIHJlbD0ibm9vcGVuZXIiIGhyZWY9Imh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3VzZXIvUGxhbmV0SVNPIiB0aXRsZT0iWW91VHViZSI+PGkgY2xhc3M9ImJpLXlvdXR1YmUiPjwvaT48L2E+PC9saT4KICAgICAgICAgICAgPGxpPjxhIGl0ZW1wcm9wPSJzYW1lQXMiIHRhcmdldD0iX2JsYW5rIiByZWw9Im5vb3BlbmVyIiBocmVmPSJodHRwczovL3d3dy5pbnN0YWdyYW0uY29tL2lzb3N0YW5kYXJkcyIgdGl0bGU9Ikluc3RhZ3JhbSI+PGkgY2xhc3M9ImJpLWluc3RhZ3JhbSI+PC9pPjwvYT48L2xpPgogICAgICAgICAgPC91bD4KICAgICAgICA8L2Rpdj4KICAgICAgICA8cCBjbGFzcz0iZGlzcGxheS01IG9wYWNpdHktMTAwIj5SZW5kcmUgbGEgdmllIHBsdXMgPHN0cm9uZz48ZW0+ZmFjaWxlPC9lbT48L3N0cm9uZz4sIHBsdXMgPHN0cm9uZz48ZW0+c8O7cmU8L2VtPjwvc3Ryb25nPiBldCA8c3Ryb25nPjxlbT5tZWlsbGV1cmU8L2VtPjwvc3Ryb25nPi48L3A+CiAgICAgICAgPGRpdiBjbGFzcz0icm93Ij4KICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC04IGNvbC1tZC1vZmZzZXQtMiBwdWxsLWxlZnQiPgogICAgICAgICAgICA8cCBjbGFzcz0idGV4dC14cyI+Tm91cyBub3VzIGVuZ2FnZW9ucyDDoCBjZSBxdWUgbm90cmUgc2l0ZSBXZWIgc29pdCBhY2Nlc3NpYmxlIMOgIHRvdXMuIFBvdXIgdG91dGUgcXVlc3Rpb24gb3Ugc3VnZ2VzdGlvbiBjb25jZXJuYW50IGwnYWNjZXNzaWJpbGl0w6kgZHUgc2l0ZSwgPGEgaHJlZj0ibWFpbHRvOndlYm1hc3RlckBpc28ub3JnP3N1YmplY3Q9QWNjZXNzaWJpbGl0eSIgc3R5bGU9IndoaXRlLXNwYWNlOiBub3dyYXAiPmNvbnRhY3Rlei1ub3VzPC9hPi48L3A+CiAgICAgICAgICAgIDxwIGNsYXNzPSJ0ZXh0LXNtIj48YSBocmVmPSIjY29weXJpZ2h0IiB0YXJnZXQ9Il9zZWxmIiBkYXRhLWJzLXRvZ2dsZT0iY29sbGFwc2UiIGFyaWEtZXhwYW5kZWQ9ImZhbHNlIiBhcmlhLWNvbnRyb2xzPSJjb3B5cmlnaHQiPsKpIFRvdXMgZHJvaXRzIHLDqXNlcnbDqXM8L2E+IDxzcGFuIGlkPSJjb3B5cmlnaHQiIGNsYXNzPSJjb2xsYXBzZSI+TGUgbWF0w6lyaWVsIHB1Ymxpw6kgc3VyIElTTy5vcmcgZXN0IHN1amV0IGF1eCBtw6ptZXMgY29uZGl0aW9ucyBlbiBtYXRpw6hyZSBkZSBkcm9pdHMgZOKAmWF1dGV1ciBxdWUgbGVzIHB1YmxpY2F0aW9ucyBkZSBs4oCZSVNPIGV0IHNvbiBlbXBsb2kgZXN0IGNvbmRpdGlvbm7DqSBwYXIgbOKAmWFjY2VwdGF0aW9uLCBwYXIgbOKAmXV0aWxpc2F0ZXVyLCBkZXMgY29uZGl0aW9ucyBkZSBs4oCZSVNPIGVuIG1hdGnDqHJlIGRlIGRyb2l0cyBk4oCZYXV0ZXVyIHLDqWdpc3NhbnQgbGVzIHB1YmxpY2F0aW9ucyBkZSBs4oCZSVNPLiBUb3V0ZSB1dGlsaXNhdGlvbiBkdSBtYXTDqXJpZWwgY29uY2VybsOpLCB5IGNvbXByaXMgc2EgcmVwcm9kdWN0aW9uIGludMOpZ3JhbGUgb3UgcGFydGllbGxlIHZlcnMgdW4gYXV0cmUgc2l0ZSBJbnRlcm5ldCwgcmVxdWllcnQgbOKAmWF1dG9yaXNhdGlvbiDDqWNyaXRlIGRlIGzigJlJU08uIFRvdXRlIGRlbWFuZGUgw6AgY2V0IGVmZmV0IGRvaXQgw6p0cmUgYWRyZXNzw6llIMOgIDxhIGhyZWY9Im1haWx0bzpjb3B5cmlnaHRAaXNvLm9yZyI+Y29weXJpZ2h0QGlzby5vcmc8L2E+Ljwvc3Bhbj48L3A+CiAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgICAgPC9kaXY+CiAgICAgIDxkaXYgY2xhc3M9InRvcGJhciI+CiAgICAgICAgPGRpdiBjbGFzcz0idG9wYmFyLWNvbnRlbnQiPgogICAgICAgICAgPGEgY2xhc3M9ImxvZ28gaXNvbG9nbyBsb2dvLXhzIHRoZW1lLXJlZCBwb3dlcmVkYnkgcGFnZS1zY3JvbGwgbG9nby1zY3JvbGxUb3AiIGhyZWY9IiNwYWdlLXRvcCIgdGl0bGU9IlJldG91ciBlbiBoYXV0IGRlIHBhZ2UiPjwvYT4KICAgICAgICAgIDxkaXYgY2xhc3M9InBvd2VyZWRieS10eHQiPkTDqXZlbG9wcMOpIHBhcjwvZGl2PgogICAgICAgIDwvZGl2PgogICAgICA8L2Rpdj4KICAgIDwvZm9vdGVyPgogICAgPC9ib2R5Pgo8L2h0bWw+
  recorded_at: Sat, 02 Sep 2023 01:37:24 GMT
recorded_with: VCR 6.2.0
