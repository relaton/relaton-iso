---
http_interactions:
- request:
    method: post
    uri: https://jcl49wv5ar-dsn.algolia.net/1/indexes/all_en/query
    body:
      encoding: UTF-8
      string: '{"query":"ISO 19115","hitsPerPage":100,"filters":"category:standard"}'
    headers:
      User-Agent:
      - Algolia for Ruby (2.3.2), Ruby (3.2.0)
      X-Algolia-Api-Key:
      - dd1b9e1ab383f4d4817d29cd5e96d3f0
      X-Algolia-Application-Id:
      - JCL49WV5AR
      Content-Type:
      - application/json; charset=utf-8
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      Connection:
      - keep-alive
      Keep-Alive:
      - '30'
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx
      Date:
      - Tue, 01 Aug 2023 04:47:20 GMT
      Content-Type:
      - application/json; charset=UTF-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      X-Alg-Pt:
      - '1'
      Accept-Encoding:
      - deflate, gzip
      Cache-Control:
      - no-store
      Access-Control-Allow-Origin:
      - "*"
      Timing-Allow-Origin:
      - "*"
      X-Content-Type-Options:
      - nosniff
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      Content-Disposition:
      - inline; filename=a.txt
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Tue, 01 Aug 2023 04:47:20 GMT
- request:
    method: post
    uri: https://jcl49wv5ar-dsn.algolia.net/1/indexes/all_en/query
    body:
      encoding: UTF-8
      string: '{"query":"ISO 19115","hitsPerPage":100,"filters":"category:standard"}'
    headers:
      User-Agent:
      - Algolia for Ruby (2.3.2), Ruby (3.2.0)
      X-Algolia-Api-Key:
      - dd1b9e1ab383f4d4817d29cd5e96d3f0
      X-Algolia-Application-Id:
      - JCL49WV5AR
      Content-Type:
      - application/json; charset=utf-8
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      Connection:
      - keep-alive
      Keep-Alive:
      - '30'
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx
      Date:
      - Tue, 01 Aug 2023 04:47:22 GMT
      Content-Type:
      - application/json; charset=UTF-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      X-Alg-Pt:
      - '1'
      Accept-Encoding:
      - deflate, gzip
      Cache-Control:
      - no-store
      Access-Control-Allow-Origin:
      - "*"
      Timing-Allow-Origin:
      - "*"
      X-Content-Type-Options:
      - nosniff
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      Content-Disposition:
      - inline; filename=a.txt
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Tue, 01 Aug 2023 04:47:21 GMT
- request:
    method: post
    uri: https://jcl49wv5ar-dsn.algolia.net/1/indexes/all_en/query
    body:
      encoding: UTF-8
      string: '{"query":"ISO/IEC 19115","hitsPerPage":100,"filters":"category:standard"}'
    headers:
      User-Agent:
      - Algolia for Ruby (2.3.2), Ruby (3.2.0)
      X-Algolia-Api-Key:
      - dd1b9e1ab383f4d4817d29cd5e96d3f0
      X-Algolia-Application-Id:
      - JCL49WV5AR
      Content-Type:
      - application/json; charset=utf-8
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      Connection:
      - keep-alive
      Keep-Alive:
      - '30'
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx
      Date:
      - Tue, 01 Aug 2023 04:47:23 GMT
      Content-Type:
      - application/json; charset=UTF-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      X-Alg-Pt:
      - '1'
      Accept-Encoding:
      - deflate, gzip
      Cache-Control:
      - no-store
      Access-Control-Allow-Origin:
      - "*"
      Timing-Allow-Origin:
      - "*"
      X-Content-Type-Options:
      - nosniff
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      Content-Disposition:
      - inline; filename=a.txt
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        eyJoaXRzIjpbeyJjYXRlZ29yeSI6InN0YW5kYXJkIiwicGF0aCI6Ii9zaXRlcy9pc29vcmcvY29udGVudHMvZGF0YS9zdGFuZGFyZC8wMy8yNS8zMjU3OSIsInV1aWQiOiI2NGUyZmJlMC01NTNkLTRjY2MtODU4MS1jNGQ5MDBhYTVkZTIiLCJ0aXRsZSI6IklTTy9UUyAxOTExNS0zOjIwMTYgR2VvZ3JhcGhpYyBpbmZvcm1hdGlvbiDigJQgIE1ldGFkYXRhIOKAlCBQYXJ0IDM6IFhNTCBzY2hlbWEgaW1wbGVtZW50YXRpb24gZm9yIGZ1bmRhbWVudGFsIGNvbmNlcHRzIiwic3RhdHVzIjoiUHVibGlzaGVkIiwieWVhciI6MjAyMCwib3JkZXIiOjExLCJ0ZXh0IjoiSVNPL1RTIDE5MTE1LTM6MjAxNiBkZWZpbmVzIGFuIGludGVncmF0ZWQgWE1MIGltcGxlbWVudGF0aW9uIG9mIElTTyAxOTExNeKAkTEsIElTTyAxOTExNeKAkTIsIGFuZCBjb25jZXB0cyBmcm9tIElTTy9UUyAxOTEzOSBieSBkZWZpbmluZyB0aGUgZm9sbG93aW5nIGFydGVmYWN0czogYSkgICAgYSBzZXQgb2YgWE1MIHNjaGVtYSByZXF1aXJlZCB0byB2YWxpZGF0ZSBtZXRhZGF0YSBpbnN0YW5jZSBkb2N1bWVudHMgY29uZm9ybWluZyB0byBjb25jZXB0dWFsIG1vZGVsIGVsZW1lbnRzIGRlZmluZWQgaW4gSVNPIDE5MTE14oCRMSwgSVNPIDE5MTE14oCRMiwgYW5kIElTTy9UUyAxOTEzOTsgYikgICAgYSBzZXQgb2YgSVNPL0lFQyAxOTc1N+KAkTMgKFNjaGVtYXRyb24pIHJ1bGVzIHRoYXQgaW1wbGVtZW50IHZhbGlkYXRpb24gY29uc3RyYWludHMgaW4gdGhlIElTTyAxOTExNeKAkTEgYW5kIElTTyAxOTExNeKAkTIgVU1MIG1vZGVscyB0aGF0IGFyZSBub3QgdmFsaWRhdGVkIGJ5IHRoZSBYTUwgc2NoZW1hOyBjKSAgICBhbiBFeHRlbnNpYmxlIFN0eWxlc2hlZXQgTGFuZ3VhZ2UgVHJhbnNmb3JtYXRpb24gKFhTTFQpIGZvciB0cmFuc2Zvcm1pbmcgSVNPIDE5MTE1LTEgbWV0YWRhdGEgZW5jb2RlZCB1c2luZyB0aGUgSVNPL1RTIDE5MTM5IFhNTCBzY2hlbWEgYW5kIElTTyAxOTExNeKAkTIgbWV0YWRhdGEgZW5jb2RlZCB1c2luZyB0aGUgSVNPL1RTIDE5MTM54oCRMiBYTUwgc2NoZW1hIGludG8gYW4gZXF1aXZhbGVudCBkb2N1bWVudCB0aGF0IGlzIHZhbGlkIGFnYWluc3QgdGhlIFhNTCBzY2hlbWEgZGVmaW5lZCBpbiB0aGlzIGRvY3VtZW50LiBJU08vVFMgMTkxMTUtMzoyMDE2IGRlc2NyaWJlcyB0aGUgcHJvY2VkdXJlIHVzZWQgdG8gZ2VuZXJhdGUgWE1MIHNjaGVtYSBmcm9tIElTTyBnZW9ncmFwaGljIGluZm9ybWF0aW9uIGNvbmNlcHR1YWwgbW9kZWxzIHJlbGF0ZWQgdG8gbWV0YWRhdGEuIFRoZSBwcm9jZWR1cmUgaW5jbHVkZXMgY3JlYXRpb24gb2YgYW4gVU1MIG1vZGVsIGZvciBYTUwgaW1wbGVtZW50YXRpb24gZGVyaXZlZCBmcm9tIHRoZSBjb25jZXB0dWFsIFVNTCBtb2RlbC4gVGhpcyBpbXBsZW1lbnRhdGlvbiBtb2RlbCBkb2VzIG5vdCBhbHRlciB0aGUgc2VtYW50aWNzIG9mIHRoZSB0YXJnZXQgY29uY2VwdHVhbCBtb2RlbCwgYnV0IGFkZHMgYWJzdHJhY3QgY2xhc3NlcyB0aGF0IHJlbW92ZSBkZXBlbmRlbmNpZXMgYmV0d2VlbiBtb2RlbCBwYWNrYWdlcywgdGFnZ2VkIHZhbHVlcyBhbmQgc3RlcmVvdHlwZXMgcmVxdWlyZWQgYnkgdGhlIFVNTCB0byBYTUwgdHJhbnNmb3JtYXRpb24gc29mdHdhcmUsIGFuZCByZWZhY3RvcnMgdGhlIHBhY2thZ2luZyBvZiBhIGZldyBlbGVtZW50cyBpbnRvIFhNTCBuYW1lc3BhY2VzLiBUaGUgWE1MIHNjaGVtYSBoYXMgYmVlbiBnZW5lcmF0ZWQgc3lzdGVtYXRpY2FsbHkgZnJvbSB0aGUgVU1MIG1vZGVsIGZvciBYTUwgaW1wbGVtZW50YXRpb24gYWNjb3JkaW5nIHRvIHRoZSBydWxlcyBkZWZpbmVkIGluIElTTy9UUyAxOTEzOSBvciBJU08gMTkxMTguICIsIm9iamVjdElEIjoiMzI1NzlfMCIsIl9oaWdobGlnaHRSZXN1bHQiOnsidGl0bGUiOnsidmFsdWUiOiI8ZW0+SVNPPC9lbT4vVFMgPGVtPjE5MTE1PC9lbT4tMzoyMDE2IEdlb2dyYXBoaWMgaW5mb3JtYXRpb24g4oCUICBNZXRhZGF0YSDigJQgUGFydCAzOiBYTUwgc2NoZW1hIGltcGxlbWVudGF0aW9uIGZvciBmdW5kYW1lbnRhbCBjb25jZXB0cyIsIm1hdGNoTGV2ZWwiOiJwYXJ0aWFsIiwiZnVsbHlIaWdobGlnaHRlZCI6ZmFsc2UsIm1hdGNoZWRXb3JkcyI6WyJpc28iLCIxOTExNSJdfSwidGV4dCI6eyJ2YWx1ZSI6IjxlbT5JU088L2VtPi9UUyA8ZW0+MTkxMTU8L2VtPi0zOjIwMTYgZGVmaW5lcyBhbiBpbnRlZ3JhdGVkIFhNTCBpbXBsZW1lbnRhdGlvbiBvZiA8ZW0+SVNPPC9lbT4gPGVtPjE5MTE1PC9lbT7igJExLCA8ZW0+SVNPPC9lbT4gPGVtPjE5MTE1PC9lbT7igJEyLCBhbmQgY29uY2VwdHMgZnJvbSA8ZW0+SVNPPC9lbT4vVFMgMTkxMzkgYnkgZGVmaW5pbmcgdGhlIGZvbGxvd2luZyBhcnRlZmFjdHM6IGEpICAgIGEgc2V0IG9mIFhNTCBzY2hlbWEgcmVxdWlyZWQgdG8gdmFsaWRhdGUgbWV0YWRhdGEgaW5zdGFuY2UgZG9jdW1lbnRzIGNvbmZvcm1pbmcgdG8gY29uY2VwdHVhbCBtb2RlbCBlbGVtZW50cyBkZWZpbmVkIGluIDxlbT5JU088L2VtPiA8ZW0+MTkxMTU8L2VtPuKAkTEsIDxlbT5JU088L2VtPiA8ZW0+MTkxMTU8L2VtPuKAkTIsIGFuZCA8ZW0+SVNPPC9lbT4vVFMgMTkxMzk7IGIpICAgIGEgc2V0IG9mIDxlbT5JU088L2VtPi88ZW0+SUVDPC9lbT4gMTk3NTfigJEzIChTY2hlbWF0cm9uKSBydWxlcyB0aGF0IGltcGxlbWVudCB2YWxpZGF0aW9uIGNvbnN0cmFpbnRzIGluIHRoZSA8ZW0+SVNPPC9lbT4gPGVtPjE5MTE1PC9lbT7igJExIGFuZCA8ZW0+SVNPPC9lbT4gPGVtPjE5MTE1PC9lbT7igJEyIFVNTCBtb2RlbHMgdGhhdCBhcmUgbm90IHZhbGlkYXRlZCBieSB0aGUgWE1MIHNjaGVtYTsgYykgICAgYW4gRXh0ZW5zaWJsZSBTdHlsZXNoZWV0IExhbmd1YWdlIFRyYW5zZm9ybWF0aW9uIChYU0xUKSBmb3IgdHJhbnNmb3JtaW5nIDxlbT5JU088L2VtPiA8ZW0+MTkxMTU8L2VtPi0xIG1ldGFkYXRhIGVuY29kZWQgdXNpbmcgdGhlIDxlbT5JU088L2VtPi9UUyAxOTEzOSBYTUwgc2NoZW1hIGFuZCA8ZW0+SVNPPC9lbT4gPGVtPjE5MTE1PC9lbT7igJEyIG1ldGFkYXRhIGVuY29kZWQgdXNpbmcgdGhlIDxlbT5JU088L2VtPi9UUyAxOTEzOeKAkTIgWE1MIHNjaGVtYSBpbnRvIGFuIGVxdWl2YWxlbnQgZG9jdW1lbnQgdGhhdCBpcyB2YWxpZCBhZ2FpbnN0IHRoZSBYTUwgc2NoZW1hIGRlZmluZWQgaW4gdGhpcyBkb2N1bWVudC4gPGVtPklTTzwvZW0+L1RTIDxlbT4xOTExNTwvZW0+LTM6MjAxNiBkZXNjcmliZXMgdGhlIHByb2NlZHVyZSB1c2VkIHRvIGdlbmVyYXRlIFhNTCBzY2hlbWEgZnJvbSA8ZW0+SVNPPC9lbT4gZ2VvZ3JhcGhpYyBpbmZvcm1hdGlvbiBjb25jZXB0dWFsIG1vZGVscyByZWxhdGVkIHRvIG1ldGFkYXRhLiBUaGUgcHJvY2VkdXJlIGluY2x1ZGVzIGNyZWF0aW9uIG9mIGFuIFVNTCBtb2RlbCBmb3IgWE1MIGltcGxlbWVudGF0aW9uIGRlcml2ZWQgZnJvbSB0aGUgY29uY2VwdHVhbCBVTUwgbW9kZWwuIFRoaXMgaW1wbGVtZW50YXRpb24gbW9kZWwgZG9lcyBub3QgYWx0ZXIgdGhlIHNlbWFudGljcyBvZiB0aGUgdGFyZ2V0IGNvbmNlcHR1YWwgbW9kZWwsIGJ1dCBhZGRzIGFic3RyYWN0IGNsYXNzZXMgdGhhdCByZW1vdmUgZGVwZW5kZW5jaWVzIGJldHdlZW4gbW9kZWwgcGFja2FnZXMsIHRhZ2dlZCB2YWx1ZXMgYW5kIHN0ZXJlb3R5cGVzIHJlcXVpcmVkIGJ5IHRoZSBVTUwgdG8gWE1MIHRyYW5zZm9ybWF0aW9uIHNvZnR3YXJlLCBhbmQgcmVmYWN0b3JzIHRoZSBwYWNrYWdpbmcgb2YgYSBmZXcgZWxlbWVudHMgaW50byBYTUwgbmFtZXNwYWNlcy4gVGhlIFhNTCBzY2hlbWEgaGFzIGJlZW4gZ2VuZXJhdGVkIHN5c3RlbWF0aWNhbGx5IGZyb20gdGhlIFVNTCBtb2RlbCBmb3IgWE1MIGltcGxlbWVudGF0aW9uIGFjY29yZGluZyB0byB0aGUgcnVsZXMgZGVmaW5lZCBpbiA8ZW0+SVNPPC9lbT4vVFMgMTkxMzkgb3IgPGVtPklTTzwvZW0+IDE5MTE4LiAiLCJtYXRjaExldmVsIjoiZnVsbCIsImZ1bGx5SGlnaGxpZ2h0ZWQiOmZhbHNlLCJtYXRjaGVkV29yZHMiOlsiaXNvIiwiaWVjIiwiMTkxMTUiXX19fV0sIm5iSGl0cyI6MSwicGFnZSI6MCwibmJQYWdlcyI6MSwiaGl0c1BlclBhZ2UiOjEwMCwiZXhoYXVzdGl2ZU5iSGl0cyI6dHJ1ZSwiZXhoYXVzdGl2ZVR5cG8iOnRydWUsImV4aGF1c3RpdmUiOnsibmJIaXRzIjp0cnVlLCJ0eXBvIjp0cnVlfSwicXVlcnkiOiJJU08vSUVDIDE5MTE1IiwicGFyYW1zIjoicXVlcnk9SVNPJTJGSUVDKzE5MTE1JmhpdHNQZXJQYWdlPTEwMCZmaWx0ZXJzPWNhdGVnb3J5JTNBc3RhbmRhcmQiLCJwcm9jZXNzaW5nVGltZU1TIjoxLCJwcm9jZXNzaW5nVGltaW5nc01TIjp7Il9yZXF1ZXN0Ijp7InJvdW5kVHJpcCI6MTY5fX0sInNlcnZlclRpbWVNUyI6MX0=
  recorded_at: Tue, 01 Aug 2023 04:47:23 GMT
recorded_with: VCR 6.2.0
