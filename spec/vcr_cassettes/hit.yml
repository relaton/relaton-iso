---
http_interactions:
- request:
    method: post
    uri: https://jcl49wv5ar-dsn.algolia.net/1/indexes/all_en/query
    body:
      encoding: UTF-8
      string: '{"query":"ISO 19115-2:2019","hitsPerPage":100,"filters":"category:standard"}'
    headers:
      User-Agent:
      - Algolia for Ruby (2.3.4), Ruby (3.2.0)
      X-Algolia-Api-Key:
      - dd1b9e1ab383f4d4817d29cd5e96d3f0
      X-Algolia-Application-Id:
      - JCL49WV5AR
      Content-Type:
      - application/json; charset=utf-8
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      Connection:
      - keep-alive
      Keep-Alive:
      - '30'
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx
      Date:
      - Mon, 15 Jan 2024 20:46:33 GMT
      Content-Type:
      - application/json; charset=UTF-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      X-Alg-Pt:
      - '1'
      Accept-Encoding:
      - deflate, gzip
      Cache-Control:
      - no-store
      Access-Control-Allow-Origin:
      - "*"
      Timing-Allow-Origin:
      - "*"
      X-Content-Type-Options:
      - nosniff
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      Content-Disposition:
      - inline; filename=a.txt
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        eyJoaXRzIjpbeyJjYXRlZ29yeSI6InN0YW5kYXJkIiwicGF0aCI6Ii9zaXRlcy9pc29vcmcvY29udGVudHMvZGF0YS9zdGFuZGFyZC8wNy84OC83ODg4OCIsInV1aWQiOiIwZTAxNjcxYy01YWY0LTQzZDItYjU5My04M2RmMmE3Y2NiM2YiLCJ0aXRsZSI6IklTTyAxOTExNS0yOjIwMTkvQW1kIDE6MjAyMiBHZW9ncmFwaGljIGluZm9ybWF0aW9uIOKAlCBNZXRhZGF0YSDigJQgUGFydCAyOiBFeHRlbnNpb25zIGZvciBhY3F1aXNpdGlvbiBhbmQgcHJvY2Vzc2luZyDigJQgQW1lbmRtZW50IDEiLCJzdGF0dXMiOiJQdWJsaXNoZWQiLCJ5ZWFyIjoyMDIyLCJvcmRlciI6MTEsIm9iamVjdElEIjoiNzg4ODhfMCIsIl9oaWdobGlnaHRSZXN1bHQiOnsidGl0bGUiOnsidmFsdWUiOiI8ZW0+SVNPPC9lbT4gPGVtPjE5MTE1LTI6MjAxOTwvZW0+L0FtZCAxOjIwMjIgR2VvZ3JhcGhpYyBpbmZvcm1hdGlvbiDigJQgTWV0YWRhdGEg4oCUIFBhcnQgMjogRXh0ZW5zaW9ucyBmb3IgYWNxdWlzaXRpb24gYW5kIHByb2Nlc3Npbmcg4oCUIEFtZW5kbWVudCAxIiwibWF0Y2hMZXZlbCI6ImZ1bGwiLCJmdWxseUhpZ2hsaWdodGVkIjpmYWxzZSwibWF0Y2hlZFdvcmRzIjpbImlzbyIsIjE5MTE1IiwiMiIsIjoiLCIyMDE5Il19fX0seyJjYXRlZ29yeSI6InN0YW5kYXJkIiwicGF0aCI6Ii9zaXRlcy9pc29vcmcvY29udGVudHMvZGF0YS9zdGFuZGFyZC8wNi83MC82NzAzOSIsInV1aWQiOiI4NDNmOTRiZC1iMmUzLTQxY2UtOGI0ZS1iOGUyYTAyZDUzNDYiLCJ0aXRsZSI6IklTTyAxOTExNS0yOjIwMTkgR2VvZ3JhcGhpYyBpbmZvcm1hdGlvbiDigJQgTWV0YWRhdGEg4oCUIFBhcnQgMjogRXh0ZW5zaW9ucyBmb3IgYWNxdWlzaXRpb24gYW5kIHByb2Nlc3NpbmciLCJzdGF0dXMiOiJQdWJsaXNoZWQiLCJ5ZWFyIjoyMDE5LCJvcmRlciI6MTEsIm9iamVjdElEIjoiNjcwMzlfMCIsIl9oaWdobGlnaHRSZXN1bHQiOnsidGl0bGUiOnsidmFsdWUiOiI8ZW0+SVNPPC9lbT4gPGVtPjE5MTE1LTI6MjAxOTwvZW0+IEdlb2dyYXBoaWMgaW5mb3JtYXRpb24g4oCUIE1ldGFkYXRhIOKAlCBQYXJ0IDI6IEV4dGVuc2lvbnMgZm9yIGFjcXVpc2l0aW9uIGFuZCBwcm9jZXNzaW5nIiwibWF0Y2hMZXZlbCI6ImZ1bGwiLCJmdWxseUhpZ2hsaWdodGVkIjpmYWxzZSwibWF0Y2hlZFdvcmRzIjpbImlzbyIsIjE5MTE1IiwiMiIsIjoiLCIyMDE5Il19fX1dLCJuYkhpdHMiOjIsInBhZ2UiOjAsIm5iUGFnZXMiOjEsImhpdHNQZXJQYWdlIjoxMDAsImV4aGF1c3RpdmVOYkhpdHMiOnRydWUsImV4aGF1c3RpdmVUeXBvIjp0cnVlLCJleGhhdXN0aXZlIjp7Im5iSGl0cyI6dHJ1ZSwidHlwbyI6dHJ1ZX0sInF1ZXJ5IjoiSVNPIDE5MTE1LTI6MjAxOSIsInBhcmFtcyI6InF1ZXJ5PUlTTysxOTExNS0yJTNBMjAxOSZoaXRzUGVyUGFnZT0xMDAmZmlsdGVycz1jYXRlZ29yeSUzQXN0YW5kYXJkIiwicXVlcnlJRCI6IjA2MjNmN2Y4MGVkYzBlODgwODY0YjY0YTcwMmM5OTI5IiwiX2F1dG9tYXRpY0luc2lnaHRzIjp0cnVlLCJyZW5kZXJpbmdDb250ZW50Ijp7fSwicHJvY2Vzc2luZ1RpbWVNUyI6MiwicHJvY2Vzc2luZ1RpbWluZ3NNUyI6eyJfcmVxdWVzdCI6eyJyb3VuZFRyaXAiOjE3Mn0sImdldElkeCI6eyJsb2FkIjp7InRvdGFsIjoxfSwidG90YWwiOjF9LCJ0b3RhbCI6Mn0sInNlcnZlclRpbWVNUyI6Mn0=
  recorded_at: Mon, 15 Jan 2024 20:46:33 GMT
- request:
    method: get
    uri: https://www.iso.org/contents/data/standard/06/70/67039.html
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - www.iso.org
  response:
    status:
      code: 301
      message: ''
    headers:
      Expires:
      - Wed, 09 May 1979 05:30:00 GMT
      Cache-Control:
      - no-cache, no-store, must-revalidate, proxy-revalidate, max-age=0
      Pragma:
      - no-cache
      Set-Cookie:
      - BIGipServerpool_prod_iso_www-jahia=713576842.36895.0000; path=/; Httponly;
        Secure
      - JSESSIONID=8DE542C69079F32F64472F27009AFF07; Path=/; Secure; HttpOnly
      Location:
      - "/standard/67039.html"
      Content-Length:
      - '0'
      Date:
      - Mon, 15 Jan 2024 20:46:33 GMT
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains
    body:
      encoding: UTF-8
      string: ''
  recorded_at: Mon, 15 Jan 2024 20:46:33 GMT
- request:
    method: get
    uri: https://www.iso.org/standard/67039.html
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - www.iso.org
  response:
    status:
      code: 200
      message: ''
    headers:
      Expires:
      - Wed, 09 May 1979 05:30:00 GMT
      Cache-Control:
      - no-cache, no-store, must-revalidate, proxy-revalidate, max-age=0
      Pragma:
      - no-cache
      Set-Cookie:
      - BIGipServerpool_prod_iso_www-jahia=730354058.36895.0000; path=/; Httponly;
        Secure
      - JSESSIONID=E2CE02162090D906E00B09A755D0874D; Path=/; Secure; HttpOnly
      Vary:
      - accept-encoding
      Content-Type:
      - text/html;charset=UTF-8
      Transfer-Encoding:
      - chunked
      Date:
      - Mon, 15 Jan 2024 20:46:34 GMT
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        PCFET0NUWVBFIGh0bWw+CjxodG1sIGxhbmc9ImVuIj4KICA8aGVhZD48bGluayByZWw9ImNhbm9uaWNhbCIgaHJlZj0iaHR0cHM6Ly93d3cuaXNvLm9yZy9zdGFuZGFyZC82NzAzOS5odG1sIiAvPgo8bGluayByZWw9ImFsdGVybmF0ZSIgaHJlZmxhbmc9ImZyIiBocmVmPSJodHRwczovL3d3dy5pc28ub3JnL2ZyL3N0YW5kYXJkLzY3MDM5Lmh0bWwiIC8+CiAgICA8c2NyaXB0PgogICAgICBkYXRhTGF5ZXIgPSBbewogICAgICAgICdwYWdlVHlwZSc6ICdpdHM6c3RhbmRhcmQnLAogICAgICAgICdwYWdlTGFuZ3VhZ2UnOiAnZW4nCiAgICAgIH1dOwogICAgPC9zY3JpcHQ+CgogICAgPHN0eWxlPgovKiBFYXJseSBydWxlcyB0byBtaXRpZ2F0ZSBDTFMgKi8KLm5hdi11dGlsaXR5IHsgcGFkZGluZzogNXB4OyB6LWluZGV4OiAxMDI0OyBwb3NpdGlvbjogcmVsYXRpdmU7IH0KLnRleHQtc20geyBmb250LXNpemU6IC44NzVlbTsgfQoubmF2LXV0aWxpdHkgbGkubmF2LWl0ZW0gYS5uYXYtbGluayB7IHBhZGRpbmc6IDA7IHRleHQtZGVjb3JhdGlvbjogbm9uZTsgfQouZHJvcGRvd24tdG9nZ2xlOjphZnRlciB7IGZvbnQtc2l6ZTogLjc1ZW07IHZlcnRpY2FsLWFsaWduOiBiYXNlbGluZTsgfQoubG9nby5pc29sb2dvLmxvZ28tc20geyBoZWlnaHQ6IDUwcHg7IHdpZHRoOiA1MHB4OyB9Ci5uYXYtaXNvIC5uYXZiYXItdG9nZ2xlciB7IG1hcmdpbi1sZWZ0OiAwLjVyZW07IG9yZGVyOiA0OyB9Ci5uYXZiYXItdG9nZ2xlci1pY29uLWFuaW1hdGVkIHsgd2lkdGg6IDIwcHg7IGhlaWdodDogMTVweDsgcG9zaXRpb246IHJlbGF0aXZlOyBtYXJnaW46IDA7IHRyYW5zZm9ybTogcm90YXRlKDApOyBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7IH0KLm5hdi1pc28gLm5hdmJhci1mb3JtIHsgb3JkZXI6IDI7IGZsZXg6IDE7IH0KLm5hdmJhci1mb3JtIHsgbWFyZ2luLWxlZnQ6IDAuNXJlbTsgfQouaGVpZ2h0LTMwMCB7IGhlaWdodDogMzAwcHg7IH0Kc2VjdGlvbi5zZWN0aW9uLW1kIHsgcGFkZGluZy10b3A6IDMuNzVyZW07IHBhZGRpbmctYm90dG9tOiAzLjc1cmVtOyB9Ci5uYXYtcmVsYXRpdmVzIC5uYXYtY2hpbGRyZW4sIC5uYXYtcmVsYXRpdmVzIC5zZWN0aW9uLWhlYWQgeyBmb250LXNpemU6IGNhbGMoMS4yNTVyZW0gKyAuMDZ2dyk7IH0KLnByZXZpb3VzIGE6OmJlZm9yZSwgLnNlY3Rpb24tYmFjayBhOjpiZWZvcmUgeyB2ZXJ0aWNhbC1hbGlnbjogYm90dG9tOyBwYWRkaW5nLXJpZ2h0OiAuM2VtOyB0cmFuc2l0aW9uOiBhbGwgMDsgfQpAbWVkaWEgc2NyZWVuIGFuZCAobWF4LXdpZHRoOjUwMHB4KSB7IC5zZWN0aW9uLWJhY2sgeyBmbGV4LXdyYXA6IG5vd3JhcDsgb3ZlcmZsb3cteDogaGlkZGVuOyB9IC5zZWN0aW9uLWJhY2sgPiBhOm5vdCg6Zmlyc3Qtb2YtdHlwZSk6bm90KDpsYXN0LW9mLXR5cGUpIHsgZGlzcGxheTogbm9uZTsgfSAuaGVhZGluZy1jb25kZW5zZWQgPiBoMSB7IGZvbnQtc2l6ZTogMzEuNjU4OHB4OyBsaW5lLWhlaWdodDogMzkuNTczNXB4OyB9IC5oZWFkaW5nLWNvbmRlbnNlZCA+IGgyIHsgZm9udC1zaXplOiAyNi4xNzEzcHg7IGxpbmUtaGVpZ2h0OiAzMi43MTQxcHg7IH0gfQpAbWVkaWEgKG1heC13aWR0aDogMTE5OS45OHB4KSB7IHNlY3Rpb24uc2VjdGlvbi1uYXZpZ2F0aW9uIHsgcGFkZGluZy10b3A6IDEuODc1cmVtOyB9IH0KPC9zdHlsZT4KPCEtLSBPbmVUcnVzdCBDb29raWVzIENvbnNlbnQgTm90aWNlIHN0YXJ0IGZvciB3d3cuaXNvLm9yZyAtLT4KPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0iaHR0cHM6Ly9jZG4uY29va2llbGF3Lm9yZy9jb25zZW50LzAyMTdiYTlhLTg5MzUtNDRkNi04NzJkLTFmMjIzMzA0ZTExNy9PdEF1dG9CbG9jay5qcyIgPjwvc2NyaXB0Pgo8c2NyaXB0IHNyYz0iaHR0cHM6Ly9jZG4uY29va2llbGF3Lm9yZy9zY3JpcHR0ZW1wbGF0ZXMvb3RTREtTdHViLmpzIiBkYXRhLWRvY3VtZW50LWxhbmd1YWdlPSJ0cnVlIiB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIGNoYXJzZXQ9IlVURi04IiBkYXRhLWRvbWFpbi1zY3JpcHQ9IjAyMTdiYTlhLTg5MzUtNDRkNi04NzJkLTFmMjIzMzA0ZTExNyIgPjwvc2NyaXB0Pgo8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+Ci8vIGZ1bmN0aW9uIHRvIHB1bGwgY29va2llIHZhbHVlCmZ1bmN0aW9uIGdldENvb2tpZShuYW1lKSB7CiAgICB2YXIgdmFsdWUgPSAiOyAiICsgZG9jdW1lbnQuY29va2llOwogICAgdmFyIHBhcnRzID0gdmFsdWUuc3BsaXQoIjsgIiArIG5hbWUgKyAiPSIpOwogICAgaWYgKHBhcnRzLmxlbmd0aCA9PSAyKSByZXR1cm4gcGFydHMucG9wKCkuc3BsaXQoIjsiKS5zaGlmdCgpOwp9CmZ1bmN0aW9uIE9wdGFub25XcmFwcGVyKCkgewogICAgY29uc29sZS5sb2coIk9wdGFub25XcmFwcGVyIGNhbGxlZCIpOwogICAgdmFyIE9BQkNjb29raWVOYW1lID0gIk9wdGFub25BbGVydEJveENsb3NlZCI7CiAgICB2YXIgYmFubmVyQWNjZXB0QnRuID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoIm9uZXRydXN0LWFjY2VwdC1idG4taGFuZGxlciIpOwogICAgdmFyIHBjQWxsb3dBbGxCdG4gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiYWNjZXB0LXJlY29tbWVuZGVkLWJ0bi1oYW5kbGVyIik7CiAgICB2YXIgcGNTYXZlQnRuID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgic2F2ZS1wcmVmZXJlbmNlLWJ0bi1oYW5kbGVyIG9uZXRydXN0LWNsb3NlLWJ0bi1oYW5kbGVyIilbMF07CiAgICB2YXIgT0FCQ2Nvb2tpZSA9IGdldENvb2tpZShPQUJDY29va2llTmFtZSk7CiAgIAogICAgLy8gSUYgbG9naWMgbmVlZGVkIGhlcmUgYmVjYXVzZSBvdC1iYW5uZXItc2RrIERJViBpcyBub3QgaW5qZWN0ZWQgb24gcGFnZSBsb2FkcyBpZiBiYW5uZXIgaXMgbm90IGV4cG9zZWQKICAgIGlmICghT0FCQ2Nvb2tpZSAmJiBiYW5uZXJBY2NlcHRCdG4pIHsKICAgICAgICBiYW5uZXJBY2NlcHRCdG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbigpIHsKICAgICAgICAgICAgY29uc29sZS5sb2coIkFsbG93ZWQgYWxsIHZpYSBCYW5uZXIiKTsKICAgICAgICAgICAgbG9jYXRpb24ucmVsb2FkKCk7CiAgICAgICAgfSk7CiAgICB9CiAgICBpZiAocGNBbGxvd0FsbEJ0bikgewogICAgICAgIHBjQWxsb3dBbGxCdG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbigpIHsKICAgICAgICAgICAgY29uc29sZS5sb2coIkFsbG93ZWQgYWxsIHZpYSBQcmVmZXJlbmNlIENlbnRlciIpOwogICAgICAgICAgICBsb2NhdGlvbi5yZWxvYWQoKTsKICAgICAgICB9KTsKICAgIH0KICAgIGlmKHBjU2F2ZUJ0bil7CiAgICAgICAgcGNTYXZlQnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHNldFRpbWVvdXQoKCk9PiB7CiAgICAgICAgICAgIGNvbnNvbGUubG9nKCJTZXQgY3VzdG9tIHNldHRpbmdzIHZpYSBQcmVmZXJlbmNlIENlbnRlciIpOwogICAgICAgICAgICBsb2NhdGlvbi5yZWxvYWQoKTsKICAgICAgICB9LCAxMDAwKSAvL3F1aWNrIHRpbWVvdXQgc28gdGhhdCB0aGUgY29uc2VudCByZWNlaXB0IGNhbiBiZSBzZW50IGFuZCB0aGUgY29va2llIGNhbiBiZSB1cGRhdGVkCiAgICAgICAgfSk7CiAgICB9Cn0KPC9zY3JpcHQ+CjwhLS0gT25lVHJ1c3QgQ29va2llcyBDb25zZW50IE5vdGljZSBlbmQgZm9yIHd3dy5pc28ub3JnIC0tPgo8bWV0YSBuYW1lPSJnb29nbGUtc2l0ZS12ZXJpZmljYXRpb24iIGNvbnRlbnQ9Im1RdXFXUGJXcnVaZFFnWlI4UXdieE9XbmpqeGtjRml5SkxIV1ktY09PSGsiIC8+Cgo8IS0tIE1hdG9tbyBUYWcgTWFuYWdlciAtLT4KPHNjcmlwdCAgdHlwZT0idGV4dC9wbGFpbiIgY2xhc3M9Im9wdGFub24tY2F0ZWdvcnktQzAwMDIiPgp2YXIgX210bSA9IHdpbmRvdy5fbXRtID0gd2luZG93Ll9tdG0gfHwgW107Cl9tdG0ucHVzaCh7J210bS5zdGFydFRpbWUnOiAobmV3IERhdGUoKS5nZXRUaW1lKCkpLCAnZXZlbnQnOiAnbXRtLlN0YXJ0J30pOwp2YXIgZD1kb2N1bWVudCwgZz1kLmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpLCBzPWQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ3NjcmlwdCcpWzBdOwpnLmFzeW5jPXRydWU7IGcuc3JjPSdodHRwczovL2Nkbi5tYXRvbW8uY2xvdWQvaXNvLm1hdG9tby5jbG91ZC9jb250YWluZXJfZElOd1lLZXguanMnOyBzLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGcscyk7Cjwvc2NyaXB0Pgo8IS0tIEVuZCBNYXRvbW8gVGFnIE1hbmFnZXIgLS0+CjxtZXRhIGNoYXJzZXQ9InV0Zi04Ij4KICAgIDxtZXRhIG5hbWU9InZpZXdwb3J0IiBjb250ZW50PSJ3aWR0aD1kZXZpY2Utd2lkdGgsIGluaXRpYWwtc2NhbGU9MSI+CiAgICA8bWV0YSBodHRwLWVxdWl2PSJYLVVBLUNvbXBhdGlibGUiIGNvbnRlbnQ9IklFPWVkZ2UiPgoKICAgIDx0aXRsZT4gSVNPIDE5MTE1LTI6MjAxOSAtIEdlb2dyYXBoaWMgaW5mb3JtYXRpb24g4oCUIE1ldGFkYXRhIOKAlCBQYXJ0IDI6IEV4dGVuc2lvbnMgZm9yIGFjcXVpc2l0aW9uIGFuZCBwcm9jZXNzaW5nPC90aXRsZT4KCiAgICA8bGluayByZWw9InByZWxvYWQiIGFzPSJmb250IiB0eXBlPSJmb250L3dvZmYyIiBocmVmPSIvbW9kdWxlcy9pc29vcmctdGVtcGxhdGUvZm9udHMvaW50ZXIvSW50ZXIudmFyLndvZmYyP3Y9My4xOSIgY3Jvc3NvcmlnaW4vPgoKICAgIDxsaW5rIHJlbD0ic3R5bGVzaGVldCIgaHJlZj0iL21vZHVsZXMvaXNvb3JnLXRlbXBsYXRlL2Nzcy93b29kLmJvb3RzdHJhcC5taW4uY3NzIiBtZWRpYT0ic2NyZWVuLHByaW50LGhhbmRoZWxkIiB0eXBlPSJ0ZXh0L2NzcyIvPgogICAgPGxpbmsgcmVsPSJwcmVsb2FkIiBocmVmPSIvbW9kdWxlcy9pc29vcmctdGVtcGxhdGUvY3NzL3dvb2QuaXNvLm1pbi5jc3MiIGFzPSJzdHlsZSIgb25sb2FkPSJ0aGlzLm9ubG9hZD1udWxsO3RoaXMucmVsPSdzdHlsZXNoZWV0JyI+CgogICAgCgo8IS0tIHN0YXJ0IGZhdmljb25zIC0tPgogICAgPGxpbmsgcmVsPSJhcHBsZS10b3VjaC1pY29uLXByZWNvbXBvc2VkIiBocmVmPSIvbW9kdWxlcy9pc29vcmctdGVtcGxhdGUvaW1nL2lzby9mYXZpY29uL3JlZC9hcHBsZS10b3VjaC1pY29uLTE1MngxNTItcHJlY29tcG9zZWQucG5nIj4KICAgIDxsaW5rIHJlbD0ic2hvcnRjdXQgaWNvbiIgaHJlZj0iL21vZHVsZXMvaXNvb3JnLXRlbXBsYXRlL2ltZy9pc28vZmF2aWNvbi9yZWQvZmF2aWNvbi5pY28iPgogICAgPG1ldGEgbmFtZT0ibXNhcHBsaWNhdGlvbi1UaWxlQ29sb3IiIGNvbnRlbnQ9IiNlZWUiPgogICAgPG1ldGEgbmFtZT0ibXNhcHBsaWNhdGlvbi1UaWxlSW1hZ2UiIGNvbnRlbnQ9Ii9tb2R1bGVzL2lzb29yZy10ZW1wbGF0ZS9pbWcvaXNvL2Zhdmljb24vcmVkL21zdGlsZS0xNDR4MTQ0LnBuZyI+CiAgICA8IS0tIGVuZCBmYXZpY29ucyAtLT4KCiAgICA8bWV0YSBuYW1lPSJ0aGVtZS1jb2xvciIgY29udGVudD0iIzMzMyI+CgogIAo8c2NyaXB0IHR5cGU9ImFwcGxpY2F0aW9uL2pzb24iIGlkPSJqYWhpYS1kYXRhLWN0eCI+eyJjb250ZXh0UGF0aCI6IiIsImxhbmciOiJlbiIsInVpbGFuZyI6ImVuIiwic2l0ZVV1aWQiOiI0MzkxNDZmOC02NzdlLTRkZGUtYjZjNi1iNjkyYjc1MzRmNTIiLCJ3Y2FnIjpmYWxzZSwiY2tlQ2ZnIjoiIn08L3NjcmlwdD4KPHNjcmlwdCB0eXBlPSJhcHBsaWNhdGlvbi9qc29uIiBpZD0iamFoaWEtZGF0YS1jayI+eyJwYXRoIjoiL21vZHVsZXMvY2tlZGl0b3IvamF2YXNjcmlwdC8iLCJsbmciOiJlbl9VUyJ9PC9zY3JpcHQ+CjxzY3JpcHQgc3JjPSIvamF2YXNjcmlwdC9pbml0SmFoaWFDb250ZXh0LmpzIj48L3NjcmlwdD4KPHNjcmlwdCBpZD0ic3RhdGljQXNzZXRKYXZhc2NyaXB0MCIgc3JjPSIvbW9kdWxlcy9pc29vcmctdGVtcGxhdGUvamF2YXNjcmlwdC93b29kLmZ1bGwubWluLmpzPzE2OTc1MjQ3ODkzMjEiICBkZWZlcj48L3NjcmlwdD4KPHNjcmlwdCBpZD0ic3RhdGljQXNzZXRKYXZhc2NyaXB0MSIgc3JjPSIvbW9kdWxlcy9pc29vcmctdGVtcGxhdGUvamF2YXNjcmlwdC9jdXN0b20uanM/MTY5NzUyNDc4OTMyMSIgIGRlZmVyPjwvc2NyaXB0Pgo8c3R5bGU+CiAgICAgICAgbmF2W3JvbGU9Im5hdmlnYXRpb24iXTpoYXMoLnRpY2tlci0tbGl2ZSkgeyBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1icy1icmFuZCkhaW1wb3J0YW50OyB9Cm5hdltyb2xlPSJuYXZpZ2F0aW9uIl06aGFzKC50aWNrZXItLWxpdmUpICA+IC5jb250YWluZXIgeyBnYXA6IDFyZW07IH0KbmF2W3JvbGU9Im5hdmlnYXRpb24iXTpoYXMoLnRpY2tlci0tbGl2ZSkgI3V0aWxpdGllcyA+IGxpOm5vdCgjbGFuZy1zd2l0Y2hlcikgeyBkaXNwbGF5OiBub25lIWltcG9ydGFudDsgfQouY2FyZC1mb290ZXI6aGFzKC50aWNrZXItLWxpdmUpIHsgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tYnMtZGFyaykhaW1wb3J0YW50OyBjb2xvcjogd2hpdGU7IH0KLmNhcmQtZm9vdGVyOmhhcygudGlja2VyLS1saXZlKSBhIHsgY29sb3I6IHdoaXRlOyB9Ci50aWNrZXI6aGFzKC50aWNrZXItLWxpdmUpIHsgd2hpdGUtc3BhY2U6IG5vcm1hbDsgfQoudGlja2VyLS1saXZlIC50aWNrZXJfX2ljb24geyBhbmltYXRpb246IGxpdmUgMXMgaW5maW5pdGU7IH0KQGtleWZyYW1lcyBsaXZlIHsgMCUgeyBjb2xvcjogdHJhbnNwYXJlbnQ7IH0gNTAlIHsgY29sb3I6IHdoaXRlOyB9IDEwMCUgeyBjb2xvcjogdHJhbnNwYXJlbnQ7IH0gfQo8L3N0eWxlPgogICAgCjxzY3JpcHQgc3JjPSIvbW9kdWxlcy9pc28tamFoaWEtc2VydmljZS1tb2R1bGUvamF2YXNjcmlwdC9jYXRhbG9ndWUuanMiIGRlZmVyID48L3NjcmlwdD4KCjxtZXRhIG5hbWU9ImNhdGVnb3J5IiBjb250ZW50PSJwIiAvPgogIDxtZXRhIG5hbWU9InB1YmRhdGUiIGNvbnRlbnQ9IjIwMjQwMTE1IiAvPgogIAo8IS0tIFR3aXR0ZXIgQ2FyZCBkYXRhIC0tPgogIDxtZXRhIG5hbWU9InR3aXR0ZXI6c2l0ZSIgY29udGVudD0iQGlzb3N0YW5kYXJkcyIgLz4KCiAgPCEtLSBPcGVuIEdyYXBoIGRhdGEgLS0+CiAgPG1ldGEgcHJvcGVydHk9Im9nOnNpdGVfbmFtZSIgY29udGVudD0iSVNPIiAvPgogIDxtZXRhIHByb3BlcnR5PSJvZzp1cmwiIGNvbnRlbnQ9Imh0dHBzOi8vd3d3Lmlzby5vcmcvc3RhbmRhcmQvNjcwMzkuaHRtbCIgLz4KICA8bWV0YSBwcm9wZXJ0eT0ib2c6dHlwZSIgY29udGVudD0id2Vic2l0ZSIgLz4KICA8IS0tIFRodW1ibmFpbCBpbWFnZSAoZm9yIHR3aXR0ZXIgYW5kIE9wZW4gR3JhcGgpIC0tPgogICAgPG1ldGEgbmFtZT0idGh1bWJuYWlsIiBjb250ZW50PSIvbW9kdWxlcy9pc28tamFoaWEtc2VydmljZS1tb2R1bGUvaW1nL2lzby9pc28tbG9nby1wcmludC5naWYiIC8+CiAgICA8bWV0YSBuYW1lPSJ0d2l0dGVyOmNhcmQiIGNvbnRlbnQ9InN1bW1hcnkiIC8+CiAgICA8bWV0YSBuYW1lPSJ0d2l0dGVyOmltYWdlIiBjb250ZW50PSIvbW9kdWxlcy9pc28tamFoaWEtc2VydmljZS1tb2R1bGUvaW1nL2lzby9pc28tbG9nby1wcmludC5naWYiIC8+CiAgICA8bWV0YSBwcm9wZXJ0eT0ib2c6aW1hZ2UiIGNvbnRlbnQ9Ii9tb2R1bGVzL2lzby1qYWhpYS1zZXJ2aWNlLW1vZHVsZS9pbWcvaXNvL2lzby1sb2dvLXByaW50LmdpZiIgLz4KICAgIDxtZXRhIHByb3BlcnR5PSJvZzppbWFnZTphbHQiIGNvbnRlbnQ9IklTTyBsb2dvIiAvPgogIDwhLS0gVGl0bGUgKGZvciB0d2l0dGVyIGFuZCBPcGVuIEdyYXBoKSAtLT4KICAgIDxtZXRhIG5hbWU9InR3aXR0ZXI6dGl0bGUiIGNvbnRlbnQ9IklTTyAxOTExNS0yOjIwMTkiIC8+CiAgICA8bWV0YSBwcm9wZXJ0eT0ib2c6dGl0bGUiIGNvbnRlbnQ9IklTTyAxOTExNS0yOjIwMTkiIC8+CiAgPCEtLSBEZXNjcmlwdGlvbiAoZm9yIGdvb2dsZSwgdHdpdHRlciBhbmQgT3BlbiBHcmFwaCkgLS0+CiAgICA8bWV0YSBuYW1lPSJ0d2l0dGVyOmRlc2NyaXB0aW9uIiBjb250ZW50PSJHZW9ncmFwaGljIGluZm9ybWF0aW9uIOKAlCBNZXRhZGF0YSDigJQgUGFydCAyOiBFeHRlbnNpb25zIGZvciBhY3F1aXNpdGlvbiBhbmQgcHJvY2Vzc2luZyIgLz4KICAgIDxtZXRhIHByb3BlcnR5PSJvZzpkZXNjcmlwdGlvbiIgY29udGVudD0iR2VvZ3JhcGhpYyBpbmZvcm1hdGlvbiDigJQgTWV0YWRhdGEg4oCUIFBhcnQgMjogRXh0ZW5zaW9ucyBmb3IgYWNxdWlzaXRpb24gYW5kIHByb2Nlc3NpbmciIC8+CiAgICA8bWV0YSBuYW1lPSJkZXNjcmlwdGlvbiIgY29udGVudD0iR2VvZ3JhcGhpYyBpbmZvcm1hdGlvbiDigJQgTWV0YWRhdGEg4oCUIFBhcnQgMjogRXh0ZW5zaW9ucyBmb3IgYWNxdWlzaXRpb24gYW5kIHByb2Nlc3NpbmciIC8+CiAgPCEtLSBGYWNlYm9vayBhZG1pbnMgOiBMaW9uZWwsTWFyaWEgLS0+CiAgPG1ldGEgcHJvcGVydHk9ImZiOmFkbWlucyIgY29udGVudD0iMTAwMDAxMTE2MDc5Njc2LDEwMDAwMTQ0MDAwMzMwNSIgLz4KCiAgCgo8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCIgc3JjPSIvbW9kdWxlcy9Dc3JmU2VydmxldCI+PC9zY3JpcHQ+CjwvaGVhZD4KCiAgPCEtLSBUb3BiYXIgdXRpbGl0eSAtLT4KICA8Ym9keSBjbGFzcz0idGhlbWUtcmVkIGxhbmctZW4gaXRzLXN0YW5kYXJkIGlzLXByb2QgaXMtbGl2ZSIgaWQ9InBhZ2UtdG9wIj4KICAgIDxhIGNsYXNzPSJza2lwLW5hdmlnYXRpb24gYnRuIGJ0bi1pbmZvIHZpc3VhbGx5LWhpZGRlbiB2aXN1YWxseS1oaWRkZW4tZm9jdXNhYmxlIiBocmVmPSIjY29udGVudCI+U2tpcCB0byBtYWluIGNvbnRlbnQ8L2E+CiAgICA8bmF2IHJvbGU9Im5hdmlnYXRpb24iIGFyaWEtbGFiZWw9IlV0aWxpdHkgTmF2aWdhdGlvbiIgY2xhc3M9Im5hdi11dGlsaXR5IG5hdmJhci1leHBhbmQtbGcgdGV4dC1zbSBuYXZiYXItZGFyayBiZy1kYXJrZXJncmF5IHRleHQtbGlnaHQiPgogICAgICA8ZGl2IGNsYXNzPSJjb250YWluZXIgZC1mbGV4IGp1c3RpZnktY29udGVudC1iZXR3ZWVuIj4KICAgICAgICA8ZGl2IGNsYXNzPSJ0aWNrZXIgdGV4dC10cnVuY2F0ZSBmbG9hdC1zdGFydCI+PC9kaXY+CiAgICAgICAgPHVsIGNsYXNzPSJuYXYgZC1mbGV4IGp1c3RpZnktY29udGVudC1lbmQganVzdGlmeS1jb250ZW50LXNtLWFyb3VuZCBqdXN0aWZ5LWNvbnRlbnQtbWQtZW5kIiBpZD0idXRpbGl0aWVzIj4KICAgICAgICAgIDxsaSBjbGFzcz0ibmF2LWl0ZW0gZC1ub25lIGQtc20tYmxvY2siPgogICAgICAgICAgICA8YSBocmVmPSJodHRwczovL2xvZ2luLmlzby5vcmciIGNsYXNzPSJuYXYtbGluayBkLWZsZXggYWxpZ24taXRlbXMtY2VudGVyIiB0aXRsZT0iSVNPJ3MgYXBwbGljYXRpb25zIHBvcnRhbCI+PGkgY2xhc3M9ImJpLWdyaWQtM3gzLWdhcC1maWxsIj48L2k+Jm5ic3A7QXBwbGljYXRpb25zPC9hPgogICAgICAgICAgPC9saT4KICAgICAgICAgIDxsaSBjbGFzcz0ibmF2LWl0ZW0gZC1ub25lIGQtc20tYmxvY2siPgogICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3d3dy5pc28ub3JnL29icC91aS9lbi8iIGNsYXNzPSJuYXYtbGluayBkLWZsZXggYWxpZ24taXRlbXMtY2VudGVyIiB0aXRsZT0iT25saW5lIEJyb3dzaW5nIFBsYXRmb3JtIj48aSBjbGFzcz0iYmktam91cm5hbC10ZXh0Ij48L2k+Jm5ic3A7T0JQPC9hPgogICAgICAgICAgPC9saT4KICAgICAgICAgIDxsaSBjbGFzcz0ibmF2LWl0ZW0gZHJvcGRvd24iIGlkPSJsYW5nLXN3aXRjaGVyIj4KICA8YSBpZD0ibGFuZy1kcm9wZG93biIgY2xhc3M9Im5hdi1saW5rIGRyb3Bkb3duLXRvZ2dsZSIgZGF0YS1icy10b2dnbGU9ImRyb3Bkb3duIiBocmVmPSIjIiBhcmlhLWV4cGFuZGVkPSJmYWxzZSI+RW5nbGlzaDwvYT4KICA8dWwgY2xhc3M9ImRyb3Bkb3duLW1lbnUgZHJvcGRvd24tbWVudS1lbmQiIHJvbGU9Im1lbnUiIGFyaWEtbGFiZWxsZWRieT0ibGFuZy1kcm9wZG93biI+CiAgICA8bGkgY2xhc3M9ImxhbmctZnIgIj48YSBjbGFzcz0iZHJvcGRvd24taXRlbSAiIGhyZWY9Ii9mci9zdGFuZGFyZC82NzAzOS5odG1sIj5mcmFuw6dhaXM8L2E+PC9saT48bGkgY2xhc3M9ImxhbmctcnUgIj48YSBjbGFzcz0iZHJvcGRvd24taXRlbSAiIGhyZWY9Ii9ydS9zdGFuZGFyZC82NzAzOS5odG1sIj7RgNGD0YHRgdC60LjQuTwvYT48L2xpPjwvdWw+CjwvbGk+PC91bD4KICAgICAgPC9kaXY+CiAgICA8L25hdj4KCiAgICA8IS0tIEhlYWRlciBJU08uT1JHIC0tPgogICAgPGhlYWRlciBjbGFzcz0iaGVhZGVyLWJvb3RzdHJhcCBzdGlja3ktdG9wIj4KICAgICAgPCEtLSBNYWluIG5hdmlnYXRpb24gLS0+CiAgICAgIDxuYXYgY2xhc3M9Im5hdmJhciBuYXYtaXNvIG5hdmJhci1leHBhbmQtbWQgbmF2YmFyLWxpZ2h0IHNoYWRvdy1tZCBiZy13aGl0ZSB0ZXh0LWRhcmsiPgogICAgICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lciI+CiAgICAgICAgICA8YSBjbGFzcz0ibG9nbyBsb2dvLXNxdWFyZSBpc29sb2dvIGxvZ28tc20iIGhyZWY9Ii9ob21lLmh0bWwiIHRpdGxlPSJJbnRlcm5hdGlvbmFsIE9yZ2FuaXphdGlvbiBmb3IgU3RhbmRhcmRpemF0aW9uIiBhbHQ9IklTTyBsb2dvIj48L2E+CiAgICAgICAgICA8ZGl2IGNsYXNzPSJpc29sb2dvLXByaW50Ij48aW1nIGxvYWRpbmc9ImxhenkiIGZldGNocHJpb3JpdHk9ImxvdyIgc3JjPSIvbW9kdWxlcy9pc29vcmctdGVtcGxhdGUvaW1nL2lzby9pc28tbG9nby1wcmludC5naWYiIGFsdD0iSVNPIGxvZ28gZm9yIHByaW50Ii8+PC9kaXY+CiAgICAgICAgICA8YnV0dG9uIGNsYXNzPSJidG4gYnRuLWxpZ2h0IG5hdmJhci10b2dnbGVyIiB0eXBlPSJidXR0b24iIGRhdGEtYnMtdG9nZ2xlPSJjb2xsYXBzZSIgZGF0YS1icy10YXJnZXQ9IiNtYWluTmF2IiBhcmlhLWNvbnRyb2xzPSJtYWluTmF2IiBhcmlhLWV4cGFuZGVkPSJmYWxzZSIgYXJpYS1sYWJlbD0iVG9nZ2xlIG5hdmlnYXRpb24iPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJuYXZiYXItdG9nZ2xlci1pY29uLWFuaW1hdGVkIj48c3Bhbj48L3NwYW4+PHNwYW4+PC9zcGFuPjxzcGFuPjwvc3Bhbj48c3Bhbj48L3NwYW4+PC9kaXY+PHNwYW4gY2xhc3M9InZpc3VhbGx5LWhpZGRlbi14cyI+Jm5ic3A7TWVudTwvc3Bhbj4KICAgICAgICAgIDwvYnV0dG9uPgogICAgICAgICAgPCEtLSBUT1AgTEVWRUwxIE5BVklHQVRJT04gLS0+CiAgICAgICAgICA8bmF2IHJvbGU9Im5hdmlnYXRpb24iIGFyaWEtbGFiZWw9Ik1haW4gTmF2aWdhdGlvbiIgY2xhc3M9Im5hdi1tZWdhbWVudSBjb2xsYXBzZSBuYXZiYXItY29sbGFwc2UiIGlkPSJtYWluTmF2Ij48dWwgcm9sZT0nbWVudWJhcicgY2xhc3M9J25hdmJhci1uYXYgbWUtYXV0byBtYi1sZy0wIHBzLTIgcGUtMiBuYXYtbGV2ZWwxJyA+PGxpIHJvbGU9J21lbnVpdGVtJyBjbGFzcz0nbmF2LWl0ZW0gZHJvcGRvd24gcG9zaXRpb24tc3RhdGljIG5vQ2hpbGRyZW4gZmlyc3RJbkxldmVsJyA+PGEgY2xhc3M9J25hdi1saW5rIGRyb3Bkb3duLXRvZ2dsZSBtZWdhbWVudS10b2dnbGUgICcgICB0aXRsZT0iQ292ZXJpbmcgYWxtb3N0IGV2ZXJ5IHByb2R1Y3QsIHByb2Nlc3Mgb3Igc2VydmljZSBpbWFnaW5hYmxlLCBJU08gbWFrZXMgc3RhbmRhcmRzIHVzZWQgZXZlcnl3aGVyZS4iICBocmVmPScvc3RhbmRhcmRzLmh0bWwnPlN0YW5kYXJkczwvYT48L2xpPjwhLS0gY2xvc2Ugb2YgbGlzdCBpdGVtIGxldmVsIDEgLS0+PGxpIHJvbGU9J21lbnVpdGVtJyBjbGFzcz0nbmF2LWl0ZW0gZHJvcGRvd24gcG9zaXRpb24tc3RhdGljIGhhc0NoaWxkcmVuJyA+PGEgY2xhc3M9J25hdi1saW5rIGRyb3Bkb3duLXRvZ2dsZSBtZWdhbWVudS10b2dnbGUgICcgZGF0YS1icy10b2dnbGU9ImRyb3Bkb3duIiBhcmlhLWV4cGFuZGVkPSJ0cnVlIiAgIGhyZWY9Jyc+U2VjdG9yczwvYT48ZGl2IHJvbGU9J21lbnViYXInIGNsYXNzPSdkcm9wZG93bi1tZW51IG1lZ2FtZW51IHctMTAwIG10LTAgYm9yZGVyLTAgcm91bmRlZC0wIG1lZ2FtZW51LXNoYWRvdy1tZCBuYXYtbGV2ZWwyJyBhcmlhLWxhYmVsbGVkYnk9Im5hdmJhckRyb3Bkb3duIiBkYXRhLWJzLXBvcHBlcj0ibm9uZSI+PGRpdiBjbGFzcz0iY29udGFpbmVyIj48ZGl2IGNsYXNzPSJyb3cgbWIteHMtNCBteS1tZC00IG1lZ2FtZW51LWFuaW1hdGUgc2xpZGVVcCI+PGRpdiByb2xlPSdtZW51aXRlbScgY2xhc3M9J2NvbC14cy02IGNvbC1sZy0zIG10LTAgbm9DaGlsZHJlbiBmaXJzdEluTGV2ZWwnID48YSBjbGFzcz0nbmF2LWxpbmsgc2VjdGlvbi1oZWFkIHBzLTAgICcgICB0aXRsZT0iKGluY2x1ZGluZyBtZWRpY2luZSBhbmQgbGFib3JhdG9yeSBlcXVpcG1lbnQpIiAgaHJlZj0nL3NlY3RvcnMvaGVhbHRoJz5IZWFsdGg8L2E+PC9kaXY+PCEtLSBjbG9zZSBvZiBsaXN0IGl0ZW0gbGV2ZWwgMiAtLT48ZGl2IHJvbGU9J21lbnVpdGVtJyBjbGFzcz0nY29sLXhzLTYgY29sLWxnLTMgbXQtMCBub0NoaWxkcmVuJyA+PGEgY2xhc3M9J25hdi1saW5rIHNlY3Rpb24taGVhZCBwcy0wICAnICAgdGl0bGU9IihpbmNsdWRpbmcgY29tbXVuaWNhdGlvbiB0ZWNobm9sb2d5LCBncmFwaGljcyBhbmQgcGhvdG9ncmFwaHkpIiAgaHJlZj0nL3NlY3RvcnMvaXQtdGVjaG5vbG9naWVzJz5JVCAmIHJlbGF0ZWQgdGVjaG5vbG9naWVzPC9hPjwvZGl2PjwhLS0gY2xvc2Ugb2YgbGlzdCBpdGVtIGxldmVsIDIgLS0+PGRpdiByb2xlPSdtZW51aXRlbScgY2xhc3M9J2NvbC14cy02IGNvbC1sZy0zIG10LTAgbm9DaGlsZHJlbicgPjxhIGNsYXNzPSduYXYtbGluayBzZWN0aW9uLWhlYWQgcHMtMCAgJyAgIHRpdGxlPSIoaW5jbHVkaW5nIHZlaGljbGVzLCBwYXJ0cyBhbmQgaW5mcmFzdHJ1Y3R1cmUsIGZyZWlnaHQsIHBhY2thZ2luZyBhbmQgZGlzdHJpYnV0aW9uKSIgIGhyZWY9Jy9zZWN0b3JzL3RyYW5zcG9ydCc+VHJhbnNwb3J0PC9hPjwvZGl2PjwhLS0gY2xvc2Ugb2YgbGlzdCBpdGVtIGxldmVsIDIgLS0+PGRpdiByb2xlPSdtZW51aXRlbScgY2xhc3M9J2NvbC14cy02IGNvbC1sZy0zIG10LTAgbm9DaGlsZHJlbicgPjxhIGNsYXNzPSduYXYtbGluayBzZWN0aW9uLWhlYWQgcHMtMCAgIGRpc2FibGVkJyAgICBocmVmPScnPlNlY3VyaXR5LCBzYWZldHkgYW5kIHJpc2vCoDwvYT48L2Rpdj48IS0tIGNsb3NlIG9mIGxpc3QgaXRlbSBsZXZlbCAyIC0tPjxkaXYgcm9sZT0nbWVudWl0ZW0nIGNsYXNzPSdjb2wteHMtNiBjb2wtbGctMyBtdC0wIG5vQ2hpbGRyZW4nID48YSBjbGFzcz0nbmF2LWxpbmsgc2VjdGlvbi1oZWFkIHBzLTAgICBkaXNhYmxlZCcgICAgaHJlZj0nJz5Gb29kIGFuZCBhZ3JpY3VsdHVyZTwvYT48L2Rpdj48IS0tIGNsb3NlIG9mIGxpc3QgaXRlbSBsZXZlbCAyIC0tPjxkaXYgcm9sZT0nbWVudWl0ZW0nIGNsYXNzPSdjb2wteHMtNiBjb2wtbGctMyBtdC0wIG5vQ2hpbGRyZW4nID48YSBjbGFzcz0nbmF2LWxpbmsgc2VjdGlvbi1oZWFkIHBzLTAgICBkaXNhYmxlZCcgICAgaHJlZj0nJz5CdWlsZGluZyBhbmQgY29uc3RydWN0aW9uPC9hPjwvZGl2PjwhLS0gY2xvc2Ugb2YgbGlzdCBpdGVtIGxldmVsIDIgLS0+PGRpdiByb2xlPSdtZW51aXRlbScgY2xhc3M9J2NvbC14cy02IGNvbC1sZy0zIG10LTAgbm9DaGlsZHJlbicgPjxhIGNsYXNzPSduYXYtbGluayBzZWN0aW9uLWhlYWQgcHMtMCAgIGRpc2FibGVkJyAgICBocmVmPScnPkVuZXJneTwvYT48L2Rpdj48IS0tIGNsb3NlIG9mIGxpc3QgaXRlbSBsZXZlbCAyIC0tPjxkaXYgcm9sZT0nbWVudWl0ZW0nIGNsYXNzPSdjb2wteHMtNiBjb2wtbGctMyBtdC0wIG5vQ2hpbGRyZW4nID48YSBjbGFzcz0nbmF2LWxpbmsgc2VjdGlvbi1oZWFkIHBzLTAgICBkaXNhYmxlZCcgICAgaHJlZj0nJz5FbmdpbmVlcmluZzwvYT48L2Rpdj48IS0tIGNsb3NlIG9mIGxpc3QgaXRlbSBsZXZlbCAyIC0tPjxkaXYgcm9sZT0nbWVudWl0ZW0nIGNsYXNzPSdjb2wteHMtNiBjb2wtbGctMyBtdC0wIG5vQ2hpbGRyZW4nID48YSBjbGFzcz0nbmF2LWxpbmsgc2VjdGlvbi1oZWFkIHBzLTAgICBkaXNhYmxlZCcgICAgaHJlZj0nJz5NYXRlcmlhbHM8L2E+PC9kaXY+PCEtLSBjbG9zZSBvZiBsaXN0IGl0ZW0gbGV2ZWwgMiAtLT48ZGl2IHJvbGU9J21lbnVpdGVtJyBjbGFzcz0nY29sLXhzLTYgY29sLWxnLTMgbXQtMCBub0NoaWxkcmVuJyA+PGEgY2xhc3M9J25hdi1saW5rIHNlY3Rpb24taGVhZCBwcy0wICAgZGlzYWJsZWQnICAgIGhyZWY9Jyc+RGl2ZXJzaXR5IGFuZCBpbmNsdXNpb248L2E+PC9kaXY+PCEtLSBjbG9zZSBvZiBsaXN0IGl0ZW0gbGV2ZWwgMiAtLT48ZGl2IHJvbGU9J21lbnVpdGVtJyBjbGFzcz0nY29sLXhzLTYgY29sLWxnLTMgbXQtMCBub0NoaWxkcmVuIGxhc3RJbkxldmVsJyA+PGEgY2xhc3M9J25hdi1saW5rIHNlY3Rpb24taGVhZCBwcy0wICAgZGlzYWJsZWQnICAgIGhyZWY9Jyc+R292ZXJubWVudDwvYT48L2Rpdj48IS0tIGNsb3NlIG9mIGxpc3QgaXRlbSBsZXZlbCAyIC0tPjwvZGl2PjwvZGl2PjwvZGl2PjwhLS0gY2xvc2Ugb2YgY29udGFpbmVyIGxldmVsIDIgLS0+PC9saT48IS0tIGNsb3NlIG9mIGxpc3QgaXRlbSBsZXZlbCAxIC0tPjxsaSByb2xlPSdtZW51aXRlbScgY2xhc3M9J25hdi1pdGVtIGRyb3Bkb3duIHBvc2l0aW9uLXN0YXRpYyBub0NoaWxkcmVuJyA+PGEgY2xhc3M9J25hdi1saW5rIGRyb3Bkb3duLXRvZ2dsZSBtZWdhbWVudS10b2dnbGUgICcgICB0aXRsZT0iSVNPIGJyaW5ncyB0b2dldGhlciBnbG9iYWwgZXhwZXJ0cyB0byBkZXZlbG9wIEludGVybmF0aW9uYWwgU3RhbmRhcmRzIHRoYXQgaGVscCBzb2x2ZSBwcm9ibGVtcyBhbmQgZHJpdmUgaW5ub3ZhdGlvbi4iICBocmVmPScvYWJvdXQtdXMuaHRtbCc+QWJvdXQgdXM8L2E+PC9saT48IS0tIGNsb3NlIG9mIGxpc3QgaXRlbSBsZXZlbCAxIC0tPjxsaSByb2xlPSdtZW51aXRlbScgY2xhc3M9J25hdi1pdGVtIGRyb3Bkb3duIHBvc2l0aW9uLXN0YXRpYyBub0NoaWxkcmVuJyA+PGEgY2xhc3M9J25hdi1saW5rIGRyb3Bkb3duLXRvZ2dsZSBtZWdhbWVudS10b2dnbGUgICcgICB0aXRsZT0iS2VlcCB1cCB0byBkYXRlIHdpdGggdGhlIGxhdGVzdCBpbiBzdGFuZGFyZGl6YXRpb24gb3IgYnJvd3NlIG91ciByaWNoIGFyY2hpdmVzIiAgaHJlZj0nL25ld3MuaHRtbCc+TmV3czwvYT48L2xpPjwhLS0gY2xvc2Ugb2YgbGlzdCBpdGVtIGxldmVsIDEgLS0+PGxpIHJvbGU9J21lbnVpdGVtJyBjbGFzcz0nbmF2LWl0ZW0gZHJvcGRvd24gcG9zaXRpb24tc3RhdGljIG5vQ2hpbGRyZW4nID48YSBjbGFzcz0nbmF2LWxpbmsgZHJvcGRvd24tdG9nZ2xlIG1lZ2FtZW51LXRvZ2dsZSAgJyAgIHRpdGxlPSJGaW5kIG91dCBob3cgdGhlIElTTyBwcm9jZXNzIGJyaW5nIHRvZ2V0aGVyIGdsb2JhbCBleHBlcnRzIHRvIGNyZWF0ZSBzdGFuZGFyZHMgdGhhdCBhcmUgY2hvc2VuIHRoZSB3b3JsZCBvdmVyLiIgIGhyZWY9Jy9kZXZlbG9waW5nLXN0YW5kYXJkcy5odG1sJz5UYWtpbmcgcGFydDwvYT48L2xpPjwhLS0gY2xvc2Ugb2YgbGlzdCBpdGVtIGxldmVsIDEgLS0+PGxpIHJvbGU9J21lbnVpdGVtJyBjbGFzcz0nbmF2LWl0ZW0gZHJvcGRvd24gcG9zaXRpb24tc3RhdGljIG5vQ2hpbGRyZW4gaW5QYXRoICBsYXN0SW5MZXZlbCcgPjxhIGNsYXNzPSduYXYtbGluayBkcm9wZG93bi10b2dnbGUgbWVnYW1lbnUtdG9nZ2xlICAnICAgdGl0bGU9IkFyZSB5b3UgbG9va2luZyB0byBidXkgSW50ZXJuYXRpb25hbCBTdGFuZGFyZHMsIGd1aWRlbGluZXMsIGNvbGxlY3Rpb25zIGFuZCBjaGVja2xpc3RzPyBUaGV5J3JlIGFsbCByaWdodCBoZXJlLCBpbiB0aGUgSVNPIFN0b3JlLiIgIGhyZWY9Jy9zdG9yZS5odG1sJz5TdG9yZTwvYT48L2xpPjwhLS0gY2xvc2Ugb2YgbGlzdCBpdGVtIGxldmVsIDEgLS0+PC91bD48IS0tIGNsb3NlIG9mIGNvbnRhaW5lciBsZXZlbCAxIC0tPjwvbmF2Pjxmb3JtIGNsYXNzPSJuYXZiYXItZm9ybSBkLWZsZXggaXNvc2VhcmNoIG1zLXNtLTIiIHJvbGU9InNlYXJjaCIgaWQ9InNpdGVTZWFyY2giPgogICAgICAgICAgICA8c3BhbiBjbGFzcz0iaGlkZGVuIiBkYXRhLXNlYXJjaHBhZ2V1cmw9Ii9zZWFyY2guaHRtbCI+PC9zcGFuPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJpbnB1dC1ncm91cCI+CiAgICAgICAgICAgICAgPGlucHV0IHR5cGU9InNlYXJjaCIgY2xhc3M9ImZvcm0tY29udHJvbCIgcGxhY2Vob2xkZXI9IlNlYXJjaCIgYXJpYS1sYWJlbGxlZGJ5PSJpbnB1dC1zZWFyY2giPgogICAgICAgICAgICAgIDxidXR0b24gaWQ9ImlucHV0LXNlYXJjaCIgY2xhc3M9ImJ0biBidG4tcHJpbWFyeSIgdHlwZT0ic3VibWl0Ij48aSBjbGFzcz0iYmktc2VhcmNoIHRleHQtbXV0ZWQiPjwvaT48c3BhbiBjbGFzcz0idmlzdWFsbHktaGlkZGVuIj5TZWFyY2g8L3NwYW4+PC9idXR0b24+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgPC9mb3JtPgogICAgICAgICAgPGEgcm9sZT0iYnV0dG9uIiBpZD0ic2hvcHBpbmdDYXJ0IiBjbGFzcz0iYnRuIGJ0bi1saWdodCBzaG9wcGluZy1jYXJ0LWxpbmsgYmctd2hpdGUgYm9yZGVyLTAgdGV4dC1tdXRlZCBkLW5vbmUgZC1sZy1ibG9jayIgaHJlZj0iL3dlYnN0b3JlL3Nob3BwaW5nYmFza2V0P21lbWJlcklkPUlTTyZndWlsYW5nPWVuIiB0aXRsZT0iU2hvcHBpbmcgY2FydCIgYXJpYS1sYWJlbD0iU2hvcHBpbmcgY2FydCIgc3R5bGUtPSJkaXNwbGF5Om5vbmU7Ij4KICAgICAgICAgICAgPGkgY2xhc3M9ImJpLWNhcnQiPjwvaT48c3BhbiBpZD0iY2FydFRleHQiIGNsYXNzPSJ2aXN1YWxseS1oaWRkZW4teHMgbXMtMSIgc3R5bGU9ImRpc3BsYXk6IG5vbmU7Ij4gQ2FydDwvc3Bhbj4KICAgICAgICAgIDwvYT4KICAgICAgICA8L2Rpdj4KICAgICAgPC9uYXY+CgogICAgPC9oZWFkZXI+CgogICAgPCEtLSBNQUlOIENPTlRFTlQgLS0+CiAgICA8bWFpbiByb2xlPSJtYWluIiBpZD0iY29udGVudCIgY2xhc3M9ImFjZXIiIGFyaWEtbGFiZWw9IkNvbnRlbnQiIHRhYmluZGV4PSItMSI+CiAgICAgIAoKCjxzcGFuIGNsYXNzPSJ2aXN1YWxseS1oaWRkZW4iIGlkPSJpbmRleFJlZmVyZW5jZSIgZGF0YS1pbmRleD0iNjcwMzkgLSBJU08gMTkxMTUtMjoyMDE5IC0gR2VvZ3JhcGhpYyBpbmZvcm1hdGlvbiDigJQgTWV0YWRhdGEg4oCUIFBhcnQgMjogRXh0ZW5zaW9ucyBmb3IgYWNxdWlzaXRpb24gYW5kIHByb2Nlc3NpbmciPjwvc3Bhbj4KPHNwYW4gY2xhc3M9InZpc3VhbGx5LWhpZGRlbiIgaWQ9Iml0ZW1SZWZlcmVuY2UiPklTTyAxOTExNS0yOjIwMTk8L3NwYW4+CjxkaXYgaXRlbXNjb3BlIGl0ZW10eXBlPSJodHRwczovL3NjaGVtYS5vcmcvUHJvZHVjdCIgY2xhc3M9Iml0cy1zdGFuZGFyZC1jb250YWluZXIiIGlkPSJpdHMtc3RhbmRhcmQtNjcwMzkiPgogIDxsaW5rIGl0ZW1wcm9wPSJpbWFnZSIgaHJlZj0iL21vZHVsZXMvaXNvb3JnLXRlbXBsYXRlL2ltZy9pc28vaXNvLWxvZ28tcHJpbnQuZ2lmIiAvPjxzZWN0aW9uIGNsYXNzPSJzZWN0aW9uLW5hdmlnYXRpb24gYmctbGlnaHRncmF5Ij4KICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lciI+CiAgICAgIDxkaXYgY2xhc3M9InJvdyI+CiAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTciPgogICAgICAgICAgPGRpdiBjbGFzcz0idmlzdWFsbHktaGlkZGVuIiBpdGVtcHJvcD0iY2F0ZWdvcnkiPnA8L2Rpdj4KICAgICAgICAgIDxkaXYgY2xhc3M9InZpc3VhbGx5LWhpZGRlbiIgaXRlbXByb3A9Im5hbWUiIGlkPSJkb2NSZWYiPklTTyAxOTExNS0yOjIwMTk8L2Rpdj4KICAgICAgICAgIDxkaXYgY2xhc3M9InZpc3VhbGx5LWhpZGRlbiIgaXRlbXByb3A9InByb2R1Y3RJRCIgaWQ9ImNzTnVtYmVyIj42NzAzOTwvZGl2PgoKICAgICAgICAgIDxkaXYgY2xhc3M9InZpc3VhbGx5LWhpZGRlbiIgaXRlbXByb3A9ImJyYW5kIiBpdGVtc2NvcGUgaXRlbXR5cGU9Imh0dHBzOi8vc2NoZW1hLm9yZy9CcmFuZCI+CiAgICAgICAgICAgIDxkaXYgaXRlbXByb3A9ImxvZ28iIGl0ZW1zY29wZSBpdGVtdHlwZT0iaHR0cHM6Ly9zY2hlbWEub3JnL0ltYWdlT2JqZWN0Ij4KICAgICAgICAgICAgICA8bWV0YSBpdGVtcHJvcD0idXJsIiBjb250ZW50PSIvbW9kdWxlcy9pc29vcmctdGVtcGxhdGUvaW1nL2lzby9pc28tbG9nby1wcmludC5naWYiLz4KICAgICAgICAgICAgICA8bWV0YSBpdGVtcHJvcD0id2lkdGgiIGNvbnRlbnQ9IjI4MyI+CiAgICAgICAgICAgICAgPG1ldGEgaXRlbXByb3A9ImhlaWdodCIgY29udGVudD0iMjYxIj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDxtZXRhIGl0ZW1wcm9wPSJuYW1lIiBjb250ZW50PSJJU08gLSBJbnRlcm5hdGlvbmFsIE9yZ2FuaXphdGlvbiBmb3IgU3RhbmRhcmRpemF0aW9uIj4KICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgIDxuYXYgcm9sZT0ibmF2aWdhdGlvbiIgYXJpYS1sYWJlbD0iQ2hpbGRyZW4gTmF2aWdhdGlvbiIgY2xhc3M9ImhlYWRpbmctY29uZGVuc2VkIG5hdi1yZWxhdGl2ZXMiPgoKICA8ZGl2IGNsYXNzPSJzZWN0aW9uLWhlYWQgc2VjdGlvbi1iYWNrIj48L2Rpdj4KICA8aDE+SVNPIDE5MTE1LTI6MjAxOTwvaDE+CiAgPGgyIGNsYXNzPSJtdC0wICI+R2VvZ3JhcGhpYyBpbmZvcm1hdGlvbjwvaDI+PGgzPk1ldGFkYXRhPC9oMz48aDQ+UGFydCAyOiBFeHRlbnNpb25zIGZvciBhY3F1aXNpdGlvbiBhbmQgcHJvY2Vzc2luZzwvaDQ+PC9uYXY+PGRpdiBjbGFzcz0iZC1pbmxpbmUtYmxvY2sgbXQtNCBjYWxsb3V0IGNhbGxvdXQtc3VjY2VzcyI+CiAgICAgICAgICAgICAgU3RhdHVzJm5ic3A7OiZuYnNwOzxzdHJvbmcgY2xhc3M9InRleHQtc3VjY2VzcyI+UHVibGlzaGVkPC9zdHJvbmc+CgogICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgKFVuZGVyIHJldmlldykKICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICA8L2Rpdj4KICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtNCBjb2wtbWQtb2Zmc2V0LTEiPgogICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZCBzdG9yZS1ib3ggcHJvZHVjdC1ib3ggc2hhZG93IG1iLTAiIGlkPSJzdG9yZS1ib3giPgogICAgPGRpdiBjbGFzcz0iY2FyZC1ib2R5Ij4KPGRpdiBjbGFzcz0iZml0LXRvLWJveCI+CiAgICAgICAgPHNwYW4gY2xhc3M9Imxhbmd1YWdlLXBhdGggdmlzdWFsbHktaGlkZGVuIj5lbjwvc3Bhbj4KICAgICAgICA8dGFibGUgY2xhc3M9InRhYmxlIG9yZGVyUHJvZHVjdCBhbGlnbi1taWRkbGUiPgogICAgICAgICAgPHRoZWFkPgogICAgICAgICAgPHRyPgogICAgICAgICAgICA8dGg+PC90aD4KICAgICAgICAgICAgPHRoPkZvcm1hdDwvdGg+CiAgICAgICAgICAgIDx0aCBpZD0ibGFuZ3VhZ2UiPkxhbmd1YWdlPC90aD4KICAgICAgICAgIDwvdHI+CiAgICAgICAgICA8L3RoZWFkPgogICAgICAgICAgPHRib2R5PgogICAgICAgICAgPHRyIGNsYXNzPSJhY3RpdmUiPgogICAgICAgICAgICAgIDx0ZCBjbGFzcz0ic2VsZWN0aW9uIj4KICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJ0eXBlIHZpc3VhbGx5LWhpZGRlbiI+c3RkPC9zcGFuPgogICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImNvdW50ZXIgdmlzdWFsbHktaGlkZGVuIj4xPC9zcGFuPgogICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InByaWNlIHZpc3VhbGx5LWhpZGRlbiI+MTk0PC9zcGFuPgogICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImNob29zZUZvcm1hdCBhY3RpdmUiPjxpIGNsYXNzPSJiaSBiaS1jaGVjay1sZyI+PC9pPjwvc3Bhbj4KICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgIDx0ZCBpZD0iYmtpZm10XzEiPgogICAgICAgICAgICAgICAgUERGICsgZVB1YjwvdGQ+CiAgICAgICAgICAgICAgPHRkIGNsYXNzPSJvcmRlckxhbmd1YWdlIiBzdHlsZT0ibWluLXdpZHRoOiAxNDBweDsiPgogICAgICAgICAgICAgICAgPHNlbGVjdCBpZD0iYmtpXzEiIGFyaWEtbGFiZWxsZWRieT0ibGFuZ3VhZ2UiIGNsYXNzPSJmb3JtLXNlbGVjdCI+CiAgICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9IjAxdWIwMDAwMDAyOERXM0FBTX5hMDViMDAwMDAwNVdWM2VBQUd+YTBmMFgwMDAwMGEzR3dRUUFVfmEwYzBYMDAwMDBJb0kzQVFBViIgbGFuZz0iZW4iIHNlbGVjdGVkPgogICAgICAgICAgICAgICAgICAgICAgRW5nbGlzaDwvb3B0aW9uPgogICAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPSIwMXViMDAwMDAwMjhEVzNBQU1+YTA1YjAwMDAwMDVXVjNlQUFHfmEwZjBYMDAwMDBhM0d2aVFBRX5hMGMwWDAwMDAwSW9JMlNRQVYiIGxhbmc9ImZyIj4KICAgICAgICAgICAgICAgICAgICAgIEZyZW5jaDwvb3B0aW9uPgogICAgICAgICAgICAgICAgICA8L3NlbGVjdD4KICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICA8L3RyPgogICAgICAgICAgPHRyIGNsYXNzPSIiPgogICAgICAgICAgICAgIDx0ZCBjbGFzcz0ic2VsZWN0aW9uIj4KICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJ0eXBlIHZpc3VhbGx5LWhpZGRlbiI+c3RkPC9zcGFuPgogICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImNvdW50ZXIgdmlzdWFsbHktaGlkZGVuIj4yPC9zcGFuPgogICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InByaWNlIHZpc3VhbGx5LWhpZGRlbiI+MTk0PC9zcGFuPgogICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImNob29zZUZvcm1hdCI+PGkgY2xhc3M9ImJpIGJpLWNoZWNrLWxnIHZpc3VhbGx5LWhpZGRlbiI+PC9pPjwvc3Bhbj4KICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgIDx0ZCBpZD0iYmtpZm10XzIiPgogICAgICAgICAgICAgICAgUGFwZXI8L3RkPgogICAgICAgICAgICAgIDx0ZCBjbGFzcz0ib3JkZXJMYW5ndWFnZSIgc3R5bGU9Im1pbi13aWR0aDogMTQwcHg7Ij4KICAgICAgICAgICAgICAgIDxzZWxlY3QgaWQ9ImJraV8yIiBkaXNhYmxlZCBhcmlhLWxhYmVsbGVkYnk9Imxhbmd1YWdlIiBjbGFzcz0iZm9ybS1zZWxlY3QiPgogICAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPSIwMXViMDAwMDAwMjhEVzNBQU1+YTA1YjAwMDAwMDVXVjNqQUFHfmEwZmIwMDAwMDAwZVVxR0FBVX5hMGMwWDAwMDAwSW9IcHBRQUYiIGxhbmc9ImVuIiBzZWxlY3RlZD4KICAgICAgICAgICAgICAgICAgICAgIEVuZ2xpc2g8L29wdGlvbj4KICAgICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT0iMDF1YjAwMDAwMDI4RFczQUFNfmEwNWIwMDAwMDA1V1YzakFBR35hMGZiMDAwMDAwMGVVcDlBQUV+YTBjMFgwMDAwMElvSHA1UUFGIiBsYW5nPSJmciI+CiAgICAgICAgICAgICAgICAgICAgICBGcmVuY2g8L29wdGlvbj4KICAgICAgICAgICAgICAgICAgPC9zZWxlY3Q+CiAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgPC90cj4KICAgICAgICAgIDwvdGJvZHk+CiAgICAgICAgPC90YWJsZT4KICAgICAgPC9kaXY+CgogICAgICA8ZGl2IGNsYXNzPSJjbGVhcmZpeCIgaXRlbXByb3A9Im9mZmVycyIgaXRlbXNjb3BlIGl0ZW10eXBlPSJodHRwczovL3NjaGVtYS5vcmcvT2ZmZXIiPgogICAgICAgIDxsaW5rIGl0ZW1wcm9wPSJ1cmwiIGhyZWY9Imh0dHBzOi8vd3d3Lmlzby5vcmcvc3RhbmRhcmQvNjcwMzkuaHRtbCIgLz4KICAgICAgICA8bWV0YSBpdGVtcHJvcD0iYXZhaWxhYmlsaXR5IiBjb250ZW50PSJodHRwczovL3NjaGVtYS5vcmcvSW5TdG9jayIgLz4KICAgICAgICA8dWwgY2xhc3M9Imxpc3QtaW5saW5lIG9yZGVyQmFza2V0IiBpZD0iYmtpYW5jaG9yXzEiPgogICAgICAgICAgPGxpIGNsYXNzPSJwcmljZSBvcmRlciI+CiAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJjdXJyZW5jeSIgaXRlbXByb3A9InByaWNlQ3VycmVuY3kiPkNIRjwvc3Bhbj48c3BhbiBjbGFzcz0iYW1vdW50IiBpZD0icHJvZHVjdFByaWNlIiBpdGVtcHJvcD0icHJpY2UiPjE5NDwvc3Bhbj4KICAgICAgICAgIDwvbGk+CiAgICAgICAgICA8bGk+CiAgICAgICAgICAgIDxidXR0b24gY2xhc3M9ImJ0biBidG4tcHJpbWFyeSBidG4tbGciIGlkPSJzdGFuZGFyZC1idXkiIGRhdGEtYnMtdG9nZ2xlPSJtb2RhbCIgZGF0YS1icy10YXJnZXQ9IiNpc28tb3B0b3V0IiBvbmNsaWNrPSJqYXZhc2NyaXB0OmFkZFRvQmFza2V0KCcxJywgJ2VuJywgJ3N0ZCcpIj4KICAgICAgICAgICAgICA8aSBjbGFzcz0iYmktY2FydCI+PC9pPiZuYnNwO0J1eTwvYnV0dG9uPgogICAgICAgICAgPC9saT4KICAgICAgICA8L3VsPgogICAgICA8L2Rpdj4KICAgICAgPGRpdiBjbGFzcz0idGV4dC14cyB0ZXh0LW11dGVkIHRleHQtY2VudGVyIj5Db252ZXJ0IFN3aXNzIGZyYW5jcyAoQ0hGKSB0byA8YSBpZD0iY29udmVydFByaWNlIiB0YXJnZXQ9Il9ibGFuayIgaHJlZj0iaHR0cHM6Ly93d3cueGUuY29tL2VuL2N1cnJlbmN5Y29udmVydGVyL2NvbnZlcnQvP0Ftb3VudD0xOTQmRnJvbT1DSEYmVG89RVVSIj55b3VyIGN1cnJlbmN5PC9hPjwvZGl2PgogICAgPC9kaXY+CiAgPC9kaXY+CjwvZGl2PgogICAgICA8L2Rpdj4KICAgIDwvZGl2PgogIDwvc2VjdGlvbj4KICA8c3ZnIGNsYXNzPSJ3YXZlIiBwcmVzZXJ2ZUFzcGVjdFJhdGlvPSJub25lIiB2aWV3Qm94PSIwIDAgMTQ0MCA5NiIgZmlsbD0ibm9uZSIgeG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIj48cGF0aCBkPSJtMCA5NiA4MC01LjNDMTYwIDg1IDMyMCA3NSA0ODAgNjRzMzIwLTIxIDQ4MC0yMS4zYzE2MCAuMyAzMjAgMTAuMyA0MDAgMTZsODAgNS4zVjBIMHY5NloiPjwvcGF0aD48L3N2Zz4KCjxzZWN0aW9uIGlkPSJwcm9kdWN0LWRldGFpbHMiPgogICAgPGRpdiBjbGFzcz0iY29udGFpbmVyIj4KICAgICAgPGRpdiBjbGFzcz0icm93Ij4KICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtNyI+CiAgICAgICAgICA8ZGl2IGNsYXNzPSJkLWZsZXgganVzdGlmeS1jb250ZW50LWJldHdlZW4gYWxpZ24taXRlbXMtY2VudGVyIj4KICA8aDM+R2VuZXJhbCBpbmZvcm1hdGlvbjwvaDM+CjwvZGl2Pgo8dWwgY2xhc3M9InJlZmluZSI+CiAgPGxpPgogICAgPGRpdiBjbGFzcz0iIiBpZD0icHVibGljYXRpb25TdGF0dXMiPgogICAgICA8ZGl2IGNsYXNzPSJlbnRyeS1sYWJlbCI+U3RhdHVzPC9kaXY+Jm5ic3A7OiZuYnNwOzxzcGFuPlB1Ymxpc2hlZDwvc3Bhbj4KICAgICAgPC9kaXY+CiAgICA8ZGl2IGNsYXNzPSIiIGlkPSJwdWJsaWNhdGlvbkRhdGUiPgogICAgICA8ZGl2IGNsYXNzPSJlbnRyeS1sYWJlbCI+UHVibGljYXRpb24gZGF0ZTwvZGl2PiZuYnNwOzombmJzcDs8c3BhbiBpdGVtcHJvcD0icmVsZWFzZURhdGUiPjIwMTktMDE8L3NwYW4+CiAgICAgIDwvZGl2PgoKICAgIDxkaXYgY2xhc3M9IiIgaWQ9InN0YWdlSWQiPgogICAgICAgIDxkaXYgY2xhc3M9ImVudHJ5LWxhYmVsIj5TdGFnZTwvZGl2PiA6IEludGVybmF0aW9uYWwgU3RhbmRhcmQgdW5kZXIgc3lzdGVtYXRpYyByZXZpZXcgWzxhIGNsYXNzPSJwYWdlLXNjcm9sbCIgaHJlZj0iI2xpZmVjeWNsZSI+OTAuMjA8L2E+XQogICAgICA8L2Rpdj4KICAgIDwvbGk+CiAgPGxpPgogICAgPGRpdiBjbGFzcz0iIj4KICAgICAgPGRpdiBjbGFzcz0iZW50cnktbGFiZWwiPkVkaXRpb248L2Rpdj4mbmJzcDs6Jm5ic3A7MjwvZGl2PgogICAgPGRpdiBjbGFzcz0iIj4KICAgICAgPGRpdiBjbGFzcz0iZW50cnktbGFiZWwiPk51bWJlciBvZiBwYWdlczwvZGl2PiZuYnNwOzombmJzcDs1NzwvZGl2PgogIDwvbGk+CgogIDxsaT4KICAgIDxkaXY+CiAgICAgICAgPGRpdiBjbGFzcz0iZW50cnktbGFiZWwiPlRlY2huaWNhbCBDb21taXR0ZWUmbmJzcDs6PC9kaXY+CiAgICAgICAgPHNwYW4gY2xhc3M9ImVudHJ5LW5hbWUgZW50cnktYmxvY2siPgogICAgICAgICAgPGEgdGl0bGU9Ikdlb2dyYXBoaWMgaW5mb3JtYXRpb24vR2VvbWF0aWNzIiBocmVmPSIvY29tbWl0dGVlLzU0OTA0Lmh0bWwiPklTTy9UQyAyMTE8L2E+PC9zcGFuPgogICAgICA8L2Rpdj4KICAgIDxkaXY+CiAgICAgIDxkaXYgY2xhc3M9ImVudHJ5LWxhYmVsIj48YWJiciB0aXRsZT0iSW50ZXJuYXRpb25hbCBDbGFzc2lmaWNhdGlvbiBmb3IgU3RhbmRhcmRzIj5JQ1M8L2FiYnI+Jm5ic3A7OjwvZGl2PgogICAgICAgIDxzcGFuIGNsYXNzPSJlbnRyeS1uYW1lIGVudHJ5LWJsb2NrIj4KICAgICAgICAgICAgPGEgdGl0bGU9IklUIGFwcGxpY2F0aW9ucyBpbiBzY2llbmNlIiBocmVmPSIvaWNzLzM1LjI0MC43MC5odG1sIj4KICAgICAgICAgICAgICAgIDM1LjI0MC43MDwvYT4mbmJzcDsKICAgICAgICAgIDwvc3Bhbj4KICAgICAgICA8L2Rpdj4KICA8L2xpPgogIDxsaSBjbGFzcz0idGV4dC14cyI+CiAgICA8aSBjbGFzcz0iYmktcnNzLWZpbGwgbWUtMSBhbGlnbi1iYXNlbGluZSB0ZXh0LXNtIiBzdHlsZT0iY29sb3I6ICNGOTkwMDA7Ij48L2k+PGEgaHJlZj0iL2NvbnRlbnRzL2RhdGEvc3RhbmRhcmQvMDYvNzAvNjcwMzkuZGV0YWlsLnJzcyI+UlNTPC9hPiZuYnNwO3VwZGF0ZXM8L2xpPgo8L3VsPgo8L2Rpdj4KCiAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTQgY29sLW1kLW9mZnNldC0xIj4KICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZGlhIGNsZWFyZml4IG10LTUiPgogIDxkaXYgY2xhc3M9Im1lZGlhLWxlZnQiPgogICAgPGZpZ3VyZSBjbGFzcz0icm91bmRlZC0wIHNoYWRvdy1zbSBob3Zlci16b29tIj4KICAgICAgPGEgaHJlZj0iaHR0cHM6Ly93d3cuaXNvLm9yZy9vYnAvdWkvZW4vIyFpc286c3RkOjY3MDM5OmVuIj4KICAgICAgICA8aW1nIGFsdD0iU3RhbmRhcmQgZmlyc3QgcGFnZSIgc3JjPSIvbW9kdWxlcy9pc28tamFoaWEtc2VydmljZS1tb2R1bGUvaW1nL2lzby1zdGFuZGFyZC1jb3Zlci10aHVtYm5haWwud2VicCIgY2xhc3M9Im1lZGlhLW9iamVjdCB3aWR0aC0xMDAgcm91bmRlZC0wIiAvPgogICAgICA8L2E+CiAgICA8L2ZpZ3VyZT4KICA8L2Rpdj4KICA8ZGl2IGNsYXNzPSJtZWRpYS1ib2R5Ij4KICAgIDxoNCBjbGFzcz0iaDUgZW50cnktdGl0bGUgZW50cnktbmFtZSI+PGEgaHJlZj0iaHR0cHM6Ly93d3cuaXNvLm9yZy9vYnAvdWkvZW4vIyFpc286c3RkOjY3MDM5OmVuIj5SZWFkIHNhbXBsZSZuYnNwOzxpIGNsYXNzPSJiaS1ib3gtYXJyb3ctdXAtcmlnaHQgc21hbGwgYWxpZ24tYmFzZWxpbmUiPjwvaT48L2E+PC9oND4KICAgIDxkaXYgY2xhc3M9ImVudHJ5LXN1bW1hcnkiPlByZXZpZXcgdGhpcyBzdGFuZGFyZCBpbiBvdXIgT25saW5lIEJyb3dzaW5nIFBsYXRlZm9ybSAoT0JQKTwvZGl2PgogIDwvZGl2Pgo8L2Rpdj4KPC9kaXY+CiAgICAgIDwvZGl2PgogICAgPC9kaXY+CiAgPC9zZWN0aW9uPgoKICA8IS0tIFNUQVJUIE9GIE1PREFMIChCdXkgSVNPLk9SRyB3aXRoIE9QVE9VVCkgLS0+CiAgPGRpdiBjbGFzcz0ibW9kYWwgZmFkZSIgdGFiaW5kZXg9Ii0xIiByb2xlPSJkaWFsb2ciIGlkPSJpc28tb3B0b3V0IiBhcmlhLWhpZGRlbj0idHJ1ZSIgYXJpYS1sYWJlbGxlZGJ5PSJtb2RhbExhYmVsIj4KICAgIDxkaXYgY2xhc3M9Im1vZGFsLWRpYWxvZyBtb2RhbC1kaWFsb2ctY2VudGVyZWQiPgogICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1jb250ZW50Ij4KICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1oZWFkZXIiPgogICAgICAgICAgPGg0IGNsYXNzPSJtb2RhbC10aXRsZSIgaWQ9Im1vZGFsTGFiZWwiPkJ1eSZuYnNwO3RoaXMgc3RhbmRhcmQ8L2g0PgogICAgICAgICAgPGJ1dHRvbiB0eXBlPSJidXR0b24iIGNsYXNzPSJidG4tY2xvc2UiIGRhdGEtYnMtZGlzbWlzcz0ibW9kYWwiIGFyaWEtbGFiZWw9IkNsb3NlIj48L2J1dHRvbj4KICAgICAgICA8L2Rpdj4KICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1ib2R5Ij4KICAgICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWJvZHkgY2xlYXJmaXgiPgogICAgICAgICAgICA8ZGl2IGlkPSJtb2RhbE9wdE91dCI+PC9kaXY+CiAgICAgICAgICAgIDxkaXYgaWQ9Im1vZGFsTm9PcHRPdXQiPjwvZGl2PgogICAgICAgICAgICA8c3BhbiBpZD0icHJvY2VlZFRvQ2hlY2tvdXQiIGNsYXNzPSJ2aXN1YWxseS1oaWRkZW4iIGRhdGEtbGFiZWw9IkNoZWNrb3V0Ij48L3NwYW4+CiAgICAgICAgICAgIDxzcGFuIGlkPSJjb250aW51ZVNob3BwaW5nIiBjbGFzcz0idmlzdWFsbHktaGlkZGVuIiBkYXRhLWxhYmVsPSJDb250aW51ZSBzaG9wcGluZyI+PC9zcGFuPgogICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICAgIDwvZGl2PgogICAgPC9kaXY+CiAgPC9kaXY+CiAgPCEtLSBFTkQgT0YgTU9EQUwgLS0+Cgo8L2Rpdj4gPHNlY3Rpb24gaWQ9ImxpZmVjeWNsZSI+CiAgPGRpdiBjbGFzcz0iY29udGFpbmVyIj4KICAgIDxkaXYgY2xhc3M9InJvdyI+CiAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC0xMiI+CiAgICAgICAgPGgzPkxpZmUgY3ljbGU8L2gzPgogICAgICAgIDxkaXYgY2xhc3M9ImxpZmVjeWNsZSI+CiAgICAgICAgICA8dWwgY2xhc3M9InN0ZXBzIj4KICAgICAgICAgICAgPGxpIGNsYXNzPSJ0aW1lLXN0ZXAiPgogICAgICAgICAgICAgICAgPGg0IGNsYXNzPSJtcy1zbS0zIHRleHQtbXV0ZWQiPlByZXZpb3VzbHk8L2g0PgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3RlcCBzdGVwLWRhcmsiPgogICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzdGVwLWl0ZW0iPgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InNlY3Rpb24taGVhZCI+V2l0aGRyYXduPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPGg1PjxhIGhyZWY9Ii9zdGFuZGFyZC8zOTIyOS5odG1sIj5JU08gMTkxMTUtMjoyMDA5PC9hPjwvaDU+CiAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgPGxpIGNsYXNzPSJ0aW1lLXN0ZXAiPgogICAgICAgICAgICAgIDxoNCBjbGFzcz0ibXMtc20tMyB0ZXh0LW11dGVkIj5Ob3c8L2g0PgoKICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzdGVwIHN0ZXAtc3VjY2VzcyBhY3RpdmUiPgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InNlY3Rpb24taGVhZCI+UHVibGlzaGVkPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPGg1PklTTyAxOTExNS0yOjIwMTk8L2g1PgogICAgICAgICAgICAgICAgICA8YnIvPkEgc3RhbmRhcmQgaXMgcmV2aWV3ZWQgZXZlcnkgNSB5ZWFyczxici8+PGEgZGF0YS1icy10b2dnbGU9ImNvbGxhcHNlIiByb2xlPSJidXR0b24iIGFyaWEtZXhwYW5kZWQ9ImZhbHNlIiBocmVmPSIjc3RhZ2VzIiBjbGFzcz0iZHJvcGRvd24tdG9nZ2xlIGN1cnJlbnQtc3RhZ2UgdGV4dC1zbSBjb2xsYXBzZWQiPlN0YWdlOiA8c3Ryb25nPjkwLjIwPC9zdHJvbmc+IChVbmRlciByZXZpZXcpPC9hPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICA8dWwgY2xhc3M9InN0YWdlcyBjb2xsYXBzZSIgaWQ9InN0YWdlcyI+CiAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImRyb3Bkb3duIGFsZXJ0LWluZm8iPgoKICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKSIgIHJvbGU9ImJ1dHRvbiIgYXJpYS1oYXNwb3B1cD0idHJ1ZSIgYXJpYS1leHBhbmRlZD0iZmFsc2UiPgogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ic3RhZ2UtY29kZSI+MDA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InN0YWdlLXRpdGxlIj5QcmVsaW1pbmFyeTwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgPC9hPgoKICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZHJvcGRvd24gYWxlcnQtaW5mbyI+CgogICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApIiBjbGFzcz0iZHJvcGRvd24tdG9nZ2xlIiBkYXRhLWJzLWRpc3BsYXk9InN0YXRpYyIgZGF0YS1icy10b2dnbGU9ImRyb3Bkb3duIiByb2xlPSJidXR0b24iIGFyaWEtaGFzcG9wdXA9InRydWUiIGFyaWEtZXhwYW5kZWQ9ImZhbHNlIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InN0YWdlLWNvZGUiPjEwPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzdGFnZS10aXRsZSI+UHJvcG9zYWw8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgIDwvYT4KCiAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImRyb3Bkb3duLW1lbnUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9zdGFnZS1jb2Rlcy5odG1sIzEwXzk5Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InN0YWdlLWNvZGUiPjEwLjk5PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ic3RhZ2UtZGF0ZSI+MjAxNC0wNy0xNDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3RhZ2UtdGl0bGUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE5ldyBwcm9qZWN0IGFwcHJvdmVkPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT48L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJkcm9wZG93biBhbGVydC1pbmZvIj4KCiAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCkiICByb2xlPSJidXR0b24iIGFyaWEtaGFzcG9wdXA9InRydWUiIGFyaWEtZXhwYW5kZWQ9ImZhbHNlIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InN0YWdlLWNvZGUiPjIwPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzdGFnZS10aXRsZSI+UHJlcGFyYXRvcnk8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgIDwvYT4KCiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImRyb3Bkb3duIGFsZXJ0LWluZm8iPgoKICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKSIgY2xhc3M9ImRyb3Bkb3duLXRvZ2dsZSIgZGF0YS1icy1kaXNwbGF5PSJzdGF0aWMiIGRhdGEtYnMtdG9nZ2xlPSJkcm9wZG93biIgcm9sZT0iYnV0dG9uIiBhcmlhLWhhc3BvcHVwPSJ0cnVlIiBhcmlhLWV4cGFuZGVkPSJmYWxzZSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJzdGFnZS1jb2RlIj4zMDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3RhZ2UtdGl0bGUiPkNvbW1pdHRlZTwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgPC9hPgoKICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZHJvcGRvd24tbWVudSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL3N0YWdlLWNvZGVzLmh0bWwjMzBfMDAiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ic3RhZ2UtY29kZSI+MzAuMDA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJzdGFnZS1kYXRlIj4yMDE2LTAzLTE0PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzdGFnZS10aXRsZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQ29tbWl0dGVlIGRyYWZ0IChDRCkgcmVnaXN0ZXJlZDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+PGxpID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9zdGFnZS1jb2Rlcy5odG1sIzMwXzIwIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InN0YWdlLWNvZGUiPjMwLjIwPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ic3RhZ2UtZGF0ZSI+MjAxNi0wMy0xNDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3RhZ2UtdGl0bGUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIENEIHN0dWR5IGluaXRpYXRlZDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+PGxpID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9zdGFnZS1jb2Rlcy5odG1sIzMwXzYwIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InN0YWdlLWNvZGUiPjMwLjYwPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ic3RhZ2UtZGF0ZSI+MjAxNi0wNS0xNTwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3RhZ2UtdGl0bGUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIENsb3NlIG9mIGNvbW1lbnQgcGVyaW9kPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT48bGkgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL3N0YWdlLWNvZGVzLmh0bWwjMzBfOTkiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ic3RhZ2UtY29kZSI+MzAuOTk8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJzdGFnZS1kYXRlIj4yMDE3LTAxLTA2PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzdGFnZS10aXRsZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQ0QgYXBwcm92ZWQgZm9yIHJlZ2lzdHJhdGlvbiBhcyBESVM8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPjwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImRyb3Bkb3duIGFsZXJ0LWluZm8iPgoKICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKSIgY2xhc3M9ImRyb3Bkb3duLXRvZ2dsZSIgZGF0YS1icy1kaXNwbGF5PSJzdGF0aWMiIGRhdGEtYnMtdG9nZ2xlPSJkcm9wZG93biIgcm9sZT0iYnV0dG9uIiBhcmlhLWhhc3BvcHVwPSJ0cnVlIiBhcmlhLWV4cGFuZGVkPSJmYWxzZSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJzdGFnZS1jb2RlIj40MDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3RhZ2UtdGl0bGUiPkVucXVpcnk8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgIDwvYT4KCiAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImRyb3Bkb3duLW1lbnUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9zdGFnZS1jb2Rlcy5odG1sIzQwXzAwIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InN0YWdlLWNvZGUiPjQwLjAwPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ic3RhZ2UtZGF0ZSI+MjAxNy0wMS0wNjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3RhZ2UtdGl0bGUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIERJUyByZWdpc3RlcmVkPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT48bGkgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL3N0YWdlLWNvZGVzLmh0bWwjNDBfMjAiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ic3RhZ2UtY29kZSI+NDAuMjA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJzdGFnZS1kYXRlIj4yMDE3LTAzLTEwPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzdGFnZS10aXRsZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRElTIGJhbGxvdCBpbml0aWF0ZWQ6IDEyIHdlZWtzPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT48bGkgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL3N0YWdlLWNvZGVzLmh0bWwjNDBfNjAiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ic3RhZ2UtY29kZSI+NDAuNjA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJzdGFnZS1kYXRlIj4yMDE3LTA2LTAzPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzdGFnZS10aXRsZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQ2xvc2Ugb2Ygdm90aW5nPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT48bGkgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL3N0YWdlLWNvZGVzLmh0bWwjNDBfOTkiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ic3RhZ2UtY29kZSI+NDAuOTk8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJzdGFnZS1kYXRlIj4yMDE3LTEwLTE5PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzdGFnZS10aXRsZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRnVsbCByZXBvcnQgY2lyY3VsYXRlZDogRElTIGFwcHJvdmVkIGZvciByZWdpc3RyYXRpb24gYXMgRkRJUzwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+PC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZHJvcGRvd24gYWxlcnQtaW5mbyI+CgogICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApIiBjbGFzcz0iZHJvcGRvd24tdG9nZ2xlIiBkYXRhLWJzLWRpc3BsYXk9InN0YXRpYyIgZGF0YS1icy10b2dnbGU9ImRyb3Bkb3duIiByb2xlPSJidXR0b24iIGFyaWEtaGFzcG9wdXA9InRydWUiIGFyaWEtZXhwYW5kZWQ9ImZhbHNlIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InN0YWdlLWNvZGUiPjUwPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzdGFnZS10aXRsZSI+QXBwcm92YWw8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgIDwvYT4KCiAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImRyb3Bkb3duLW1lbnUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9zdGFnZS1jb2Rlcy5odG1sIzUwXzAwIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InN0YWdlLWNvZGUiPjUwLjAwPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ic3RhZ2UtZGF0ZSI+MjAxNy0xMC0yMDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3RhZ2UtdGl0bGUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEZpbmFsIHRleHQgcmVjZWl2ZWQgb3IgRkRJUyByZWdpc3RlcmVkIGZvciBmb3JtYWwgYXBwcm92YWw8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPjxsaSA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvc3RhZ2UtY29kZXMuaHRtbCM1MF8yMCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJzdGFnZS1jb2RlIj41MC4yMDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InN0YWdlLWRhdGUiPjIwMTctMTEtMjg8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InN0YWdlLXRpdGxlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBQcm9vZiBzZW50IHRvIHNlY3JldGFyaWF0IG9yIEZESVMgYmFsbG90IGluaXRpYXRlZDogOCB3ZWVrczwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+PGxpID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9zdGFnZS1jb2Rlcy5odG1sIzUwXzYwIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InN0YWdlLWNvZGUiPjUwLjYwPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ic3RhZ2UtZGF0ZSI+MjAxOC0wMS0yNTwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3RhZ2UtdGl0bGUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIENsb3NlIG9mIHZvdGluZy4gUHJvb2YgcmV0dXJuZWQgYnkgc2VjcmV0YXJpYXQ8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPjwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImRyb3Bkb3duIGFsZXJ0LXN1Y2Nlc3MiPgoKICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKSIgY2xhc3M9ImRyb3Bkb3duLXRvZ2dsZSIgZGF0YS1icy1kaXNwbGF5PSJzdGF0aWMiIGRhdGEtYnMtdG9nZ2xlPSJkcm9wZG93biIgcm9sZT0iYnV0dG9uIiBhcmlhLWhhc3BvcHVwPSJ0cnVlIiBhcmlhLWV4cGFuZGVkPSJmYWxzZSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJzdGFnZS1jb2RlIj42MDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3RhZ2UtdGl0bGUiPlB1YmxpY2F0aW9uPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICA8L2E+CgogICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJkcm9wZG93bi1tZW51Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvc3RhZ2UtY29kZXMuaHRtbCM2MF8wMCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJzdGFnZS1jb2RlIj42MC4wMDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InN0YWdlLWRhdGUiPjIwMTgtMDEtMjU8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InN0YWdlLXRpdGxlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBJbnRlcm5hdGlvbmFsIFN0YW5kYXJkIHVuZGVyIHB1YmxpY2F0aW9uPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT48bGkgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL3N0YWdlLWNvZGVzLmh0bWwjNjBfNjAiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ic3RhZ2UtY29kZSI+NjAuNjA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJzdGFnZS1kYXRlIj4yMDE5LTAxLTEwPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzdGFnZS10aXRsZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgSW50ZXJuYXRpb25hbCBTdGFuZGFyZCBwdWJsaXNoZWQ8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPjwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImRyb3Bkb3duIGJnLXN1Y2Nlc3MgYWN0aXZlIj4KCiAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCkiIGNsYXNzPSJkcm9wZG93bi10b2dnbGUiIGRhdGEtYnMtZGlzcGxheT0ic3RhdGljIiBkYXRhLWJzLXRvZ2dsZT0iZHJvcGRvd24iIHJvbGU9ImJ1dHRvbiIgYXJpYS1oYXNwb3B1cD0idHJ1ZSIgYXJpYS1leHBhbmRlZD0iZmFsc2UiPgogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ic3RhZ2UtY29kZSI+OTA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InN0YWdlLXRpdGxlIj5SZXZpZXc8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgIDwvYT4KCiAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImRyb3Bkb3duLW1lbnUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJhY3RpdmUiIGNsYXNzPSdsaXN0LXNlcGFyYXRpb24nPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL3N0YWdlLWNvZGVzLmh0bWwjOTBfMjAiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ic3RhZ2UtY29kZSI+OTAuMjA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJzdGFnZS1kYXRlIj4yMDI0LTAxLTE1PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzdGFnZS10aXRsZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgSW50ZXJuYXRpb25hbCBTdGFuZGFyZCB1bmRlciBzeXN0ZW1hdGljIHJldmlldzwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+PGxpID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9zdGFnZS1jb2Rlcy5odG1sIzkwXzYwIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InN0YWdlLWNvZGUiPjkwLjYwPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ic3RhZ2UtZGF0ZSI+PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzdGFnZS10aXRsZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQ2xvc2Ugb2YgcmV2aWV3PC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT48L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJkcm9wZG93biBhbGVydC1tdXRlZCI+CgogICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApIiAgcm9sZT0iYnV0dG9uIiBhcmlhLWhhc3BvcHVwPSJ0cnVlIiBhcmlhLWV4cGFuZGVkPSJmYWxzZSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJzdGFnZS1jb2RlIj45NTwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3RhZ2UtdGl0bGUiPldpdGhkcmF3YWw8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgIDwvYT4KCiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICA8L3VsPgoKICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3ViLXN0ZXAiPgogICAgICAgICAgICAgICAgPGg1PkNvcnJpZ2VuZGEgLyBBbWVuZG1lbnRzPC9oNT4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InN0ZXAgc3RlcC1zdWNjZXNzIj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InN0ZXAtaXRlbSI+CiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InNlY3Rpb24taGVhZCI+UHVibGlzaGVkPC9kaXY+CiAgICAgICAgICAgICAgICAgIDxoNT48YSBocmVmPSIvc3RhbmRhcmQvNzg4ODguaHRtbCI+SVNPIDE5MTE1LTI6MjAxOS9BbWQgMToyMDIyPC9hPjwvaDU+CiAgICAgICAgICAgICAgICA8L2Rpdj48L2Rpdj48L2Rpdj48L2xpPgogICAgICAgICAgICA8L3VsPgogICAgICAgIDwvZGl2PgogICAgICA8L2Rpdj4KICAgIDwvZGl2PgogIDwvZGl2Pgo8L3NlY3Rpb24+CjxkaXYgY2xhc3M9InNlY3Rpb24gdGV4dC1jZW50ZXIgbXQtMCI+CiAgPGRpdiBjbGFzcz0iY29udGFpbmVyIj4KICAgIDxkaXYgY2xhc3M9InJvdyByb3ctY29scy0xIHJvdy1jb2xzLXNtLTIgcm93LWNvbHMteGwtMyBnLTQiPgogICAgICA8ZGl2IGNsYXNzPSJjb2wiPgogICAgICA8ZGl2IGNsYXNzPSJjYXJkIGgtMTAwIG1iLTAiPgogICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtYm9keSI+CiAgICAgICAgICA8cD4KICAgICAgICAgICAgPGltZyBsb2FkaW5nPSJsYXp5IiBzcmM9Ii9maWxlcy9saXZlL3NpdGVzL2lzb29yZy9maWxlcy9kYXRhL3NkZy9lbi9zZGctbG9nby5wbmciIGNsYXNzPSJpbWctZmx1aWQgd2lkdGgtMTAwcGN0IHJvdW5kZWQtMCBteC1hdXRvIGQtYmxvY2siIHN0eWxlPSJtYXgtd2lkdGg6IDI1MHB4OyIgYWx0PSJTdXN0YWluYWJsZSBEZXZlbG9wbWVudCBHb2FscyIgLz4KICAgICAgICAgIDwvcD4KICAgICAgICAgIDxwPgogICAgICAgICAgICBUaGlzIHN0YW5kYXJkIGNvbnRyaWJ1dGVzIHRvIHRoZSBmb2xsb3dpbmcgPGEgaHJlZj0iL3NkZ3MuaHRtbCI+U3VzdGFpbmFibGUgRGV2ZWxvcG1lbnQgR29hbHM8L2E+PHA+CiAgICAgICAgICA8ZGl2IGNsYXNzPSJjbGVhcmZpeCBkLWZsZXgganVzdGlmeS1jb250ZW50LWNlbnRlciI+CiAgICAgICAgICAgIDxhIGhyZWY9Ii9zZGcvU0RHMDkuaHRtbCIgdGl0bGU9IkluZHVzdHJ5LCBJbm5vdmF0aW9uIGFuZCBJbmZyYXN0cnVjdHVyZSI+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzZGcgc2RnLXNtIHNkZy0wOSI+CiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InNkZy1pY29uIj48L2Rpdj4KICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic2RnLWxhYmVsIj45PC9kaXY+CiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InNkZy10ZXh0Ij5JbmR1c3RyeSwgSW5ub3ZhdGlvbiBhbmQgSW5mcmFzdHJ1Y3R1cmU8L2Rpdj4KICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic2RnLWxvZ28iPjwvZGl2PgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICA8YSBocmVmPSIvc2RnL1NERzEzLmh0bWwiIHRpdGxlPSJDbGltYXRlIEFjdGlvbiI+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzZGcgc2RnLXNtIHNkZy0xMyI+CiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InNkZy1pY29uIj48L2Rpdj4KICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic2RnLWxhYmVsIj4xMzwvZGl2PgogICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzZGctdGV4dCI+Q2xpbWF0ZSBBY3Rpb248L2Rpdj4KICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic2RnLWxvZ28iPjwvZGl2PgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICA8YSBocmVmPSIvc2RnL1NERzE0Lmh0bWwiIHRpdGxlPSJMaWZlIEJlbG93IFdhdGVyIj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InNkZyBzZGctc20gc2RnLTE0Ij4KICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic2RnLWljb24iPjwvZGl2PgogICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzZGctbGFiZWwiPjE0PC9kaXY+CiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InNkZy10ZXh0Ij5MaWZlIEJlbG93IFdhdGVyPC9kaXY+CiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InNkZy1sb2dvIj48L2Rpdj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgPGEgaHJlZj0iL3NkZy9TREcxNS5odG1sIiB0aXRsZT0iTGlmZSBvbiBMYW5kIj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InNkZyBzZGctc20gc2RnLTE1Ij4KICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic2RnLWljb24iPjwvZGl2PgogICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzZGctbGFiZWwiPjE1PC9kaXY+CiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InNkZy10ZXh0Ij5MaWZlIG9uIExhbmQ8L2Rpdj4KICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic2RnLWxvZ28iPjwvZGl2PgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KICA8L2Rpdj4KICA8L2Rpdj4KPC9kaXY+Cgo8c2VjdGlvbiBjbGFzcz0iYmctbGlnaHRncmF5IiBpZD0iY29udGFjdCI+CiAgPGRpdiBjbGFzcz0iY29udGFpbmVyIj4KICAgIDxkaXYgY2xhc3M9InJvdyI+CiAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC00Ij4KICAgICAgICA8aDQ+R290IGEgcXVlc3Rpb24/PC9oND4KCjxwPkNoZWNrIG91dCBvdXIgPGEgaHJlZj0iL2ZyZXF1ZW50bHktYXNrZWQtcXVlc3Rpb25zLWZhcXMuaHRtbCIgdGl0bGU9IkZyZXF1ZW50bHkgQXNrZWQgUXVlc3Rpb25zIChGQVFzKSI+RkFRczwvYT48L3A+PC9kaXY+CiAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC00Ij4KICAgICAgICA8ZGl2IGNsYXNzPSJ2Y2FyZCBjb250YWN0IG5vLWZpZ3VyZSBjbGVhcmZpeCIgaXRlbXNjb3BlPSIiIGl0ZW10eXBlPSJodHRwOi8vc2NoZW1hLm9yZy9QZXJzb24iPgo8ZGl2IGNsYXNzPSJjb250ZW50LWJveCBuby1pbWFnZSI+CjxkaXYgY2xhc3M9ImZuIG4iPjxzcGFuIGNsYXNzPSJnaXZlbi1uYW1lIiBpdGVtcHJvcD0iZ2l2ZW5OYW1lIj5DdXN0b21lciBjYXJlPC9zcGFuPjwvZGl2PgoKPGRpdiBjbGFzcz0idGVsIiBpdGVtcHJvcD0idGVsZXBob25lIj4rNDEgMjIgNzQ5IDA4IDg4PC9kaXY+Cgo8ZGl2IGNsYXNzPSJlbWFpbCIgaXRlbXByb3A9ImVtYWlsIj48YSBocmVmPSJtYWlsdG86Y3VzdG9tZXJzZXJ2aWNlQGlzby5vcmciPmN1c3RvbWVyc2VydmljZUBpc28ub3JnPC9hPjwvZGl2PgoKPGhyIC8+CjxkaXYgY2xhc3M9Im5vdGUiPgo8cCBjbGFzcz0ic21hbGwiPk9wZW5pbmcgaG91cnM6PGJyIC8+Ck1vbmRheSB0byBGcmlkYXkgLSAwOTowMC0xMjowMCwgMTQ6MDAtMTc6MDAgKFVUQysxKTwvcD4KPC9kaXY+CjwvZGl2Pgo8L2Rpdj48L2Rpdj4KICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTQiPgogICAgICAgIDwvZGl2PgogICAgPC9kaXY+CiAgPC9kaXY+Cjwvc2VjdGlvbj48ZGl2IGNsYXNzPSJuYXYtYnJlYWRjcnVtYiBwcmludC1mb290ZXIgYmctYmxhY2siPgogICAgICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lciI+CiAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3ciPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtc20tMTAgc21hbGwiPgogICAgICAgICAgICAgIDwhLS0gQlJFQURDUlVNQiAtLT4KICAgICAgICAgICAgICA8b2wgY2xhc3M9ImJyZWFkY3J1bWIiPgogICAgPGxpIGNsYXNzPSJicmVhZGNydW1iLWl0ZW0iPjxhIGhyZWY9Ii9ob21lLmh0bWwiIHRpdGxlPSJIb21lIHBhZ2UiPjxpIGNsYXNzPSJiaS1ob3VzZSIgYXJpYS1oaWRkZW49InRydWUiPjwvaT48L2E+PC9saT4KICAgIDxsaSBjbGFzcz0iYnJlYWRjcnVtYi1pdGVtIj4KICAgICAgICAgIDxhIGhyZWY9Ii9zdG9yZS5odG1sIj5TdG9yZTwvYT4KICAgICAgICAgICAgPC9saT4KICAgICAgPGxpIGNsYXNzPSJicmVhZGNydW1iLWl0ZW0iPgogICAgICAgICAgPGEgaHJlZj0iL3N0YW5kYXJkcy1jYXRhbG9ndWUvYnJvd3NlLWJ5LWljcy5odG1sIiA+U3RhbmRhcmRzIGNhdGFsb2d1ZTwvYT4KPC9saT4KICAgICAgPGxpIGNsYXNzPSJicmVhZGNydW1iLWl0ZW0iPgogICAgICAgICAgPGEgaHJlZj0iL3N0YW5kYXJkcy1jYXRhbG9ndWUvYnJvd3NlLWJ5LWljcy5odG1sIj5JQ1M8L2E+CiAgICAgICAgICAgIDwvbGk+CiAgICAgIDxsaSBjbGFzcz0iYnJlYWRjcnVtYi1pdGVtIj48YSBocmVmPSIvZW4vaWNzLzM1Lmh0bWwiPjM1PC9hPjwvbGk+CiAgICA8bGkgY2xhc3M9ImJyZWFkY3J1bWItaXRlbSI+PGEgaHJlZj0iL2VuL2ljcy8zNS4yNDAuaHRtbCI+MzUuMjQwPC9hPjwvbGk+CiAgICA8bGkgY2xhc3M9ImJyZWFkY3J1bWItaXRlbSI+PGEgaHJlZj0iL2VuL2ljcy8zNS4yNDAuNzAuaHRtbCI+MzUuMjQwLjcwPC9hPjwvbGk+PGxpIGNsYXNzPSJicmVhZGNydW1iLWl0ZW0iPklTTyAxOTExNS0yOjIwMTk8L2xpPjwvb2w+PC9kaXY+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1zbS0yIGhpZGRlbi1wcmludCB0ZXh0LWVuZCBzbWFsbCBtdC0zIG10LXNtLTAiPgogICAgICAgICAgICAgIDxhIHJvbGU9ImJ1dHRvbiIgY2xhc3M9ImRyb3Bkb3duLXRvZ2dsZSB0ZXh0LXdoaXRlIGNvbGxhcHNlZCIgZGF0YS1icy10b2dnbGU9ImNvbGxhcHNlIiBocmVmPSIjY29sbGFwc2VTaXRlbWFwIiB0YXJnZXQ9Il9zZWxmIiBhcmlhLWV4cGFuZGVkPSJmYWxzZSIgYXJpYS1jb250cm9scz0iY29sbGFwc2VTaXRlbWFwIj5TaXRlbWFwPC9hPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbGxhcHNlIGJvcmRlci10b3AiIGlkPSJjb2xsYXBzZVNpdGVtYXAiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3ciPgogICAgICAgICAgICAgIDwhLS0gU0lURU1BUCAtLT4KICAgICAgICAgICAgICA8bmF2IHJvbGU9Im5hdmlnYXRpb24iIGFyaWEtbGFiZWw9IlNpdGVtYXAiIGNsYXNzPSJzaXRlbWFwLWZvb3RlciBjbGVhcmZpeCBzbWFsbCIgaWQ9Im5hdi1zaXRlbWFwIj48dWwgcm9sZT0nbWVudWJhcicgY2xhc3M9J2xpc3QtaW5saW5lLTUgY2xlYXJmaXggbmF2LWxldmVsMScgPjxsaSByb2xlPSdtZW51aXRlbScgY2xhc3M9JyBoYXNDaGlsZHJlbiBmaXJzdEluTGV2ZWwnID48YSBjbGFzcz0nbmF2LWxpbmsgICAnICAgdGl0bGU9IkNvdmVyaW5nIGFsbW9zdCBldmVyeSBwcm9kdWN0LCBwcm9jZXNzIG9yIHNlcnZpY2UgaW1hZ2luYWJsZSwgSVNPIG1ha2VzIHN0YW5kYXJkcyB1c2VkIGV2ZXJ5d2hlcmUuIiAgaHJlZj0nL3N0YW5kYXJkcy5odG1sJz5TdGFuZGFyZHM8L2E+PHVsIHJvbGU9J21lbnViYXInIGNsYXNzPSdsaXN0LXVuc3R5bGVkIG5hdi1sZXZlbDInID48bGkgcm9sZT0nbWVudWl0ZW0nIGNsYXNzPScgbm9DaGlsZHJlbiBmaXJzdEluTGV2ZWwnID48YSBjbGFzcz0nbmF2LWxpbmsgICAnICAgdGl0bGU9IldoZXRoZXIgeW91IHJ1biBhIGJ1c2luZXNzLCB3b3JrIGZvciBhIGNvbXBhbnkgb3IgZ292ZXJubWVudCwgb3IgeW91IGFyZSBhIGNvbnN1bWVyIGxvb2tpbmcgZm9yIGdvb2RzIGFuZCBzZXJ2aWNlcyB0aGF0IG1lZXQgY3VzdG9tZXIgZXhwZWN0YXRpb25zOiBGaW5kIG91dCB3aGF0IHN0YW5kYXJkcyBjYW4gZG8gZm9yIHlvdS4iICBocmVmPScvYmVuZWZpdHMtb2Ytc3RhbmRhcmRzLmh0bWwnPkJlbmVmaXRzPC9hPjwvbGk+PCEtLSBjbG9zZSBvZiBsaXN0IGl0ZW0gbGV2ZWwgMiAtLT48bGkgcm9sZT0nbWVudWl0ZW0nIGNsYXNzPScgbm9DaGlsZHJlbicgPjxhIGNsYXNzPSduYXYtbGluayAgICcgICB0aXRsZT0iSGVyZSB5b3UgY2FuIGRpc2NvdmVyIHNvbWUgb2YgdGhlIGJlc3Qta25vd24gYW5kIG1vc3Qgd2lkZWx5LXVzZWQgc3RhbmRhcmRzLCBhcyB3ZWxsIGFzIHRob3NlIHRoYXQgYWRkcmVzcyByZWNlbnRseSBlbWVyZ2VkIGNoYWxsZW5nZXMgYWZmZWN0aW5nIHVzIGFsbC4KCiIgIGhyZWY9Jy9wb3B1bGFyLXN0YW5kYXJkcy5odG1sJz5Qb3B1bGFyIHN0YW5kYXJkczwvYT48L2xpPjwhLS0gY2xvc2Ugb2YgbGlzdCBpdGVtIGxldmVsIDIgLS0+PGxpIHJvbGU9J21lbnVpdGVtJyBjbGFzcz0nIG5vQ2hpbGRyZW4nID48YSBjbGFzcz0nbmF2LWxpbmsgICAnICAgdGl0bGU9IkEgc2V0IG9mIHByb2Nlc3NlcyB0aGF0IHNob3cgeW91ciBwcm9kdWN0LCBzZXJ2aWNlIG9yIHN5c3RlbSBtZWV0cyB0aGUgcmVxdWlyZW1lbnRzIG9mIGEgc3RhbmRhcmQuIiAgaHJlZj0nL2NvbmZvcm1pdHktYXNzZXNzbWVudC5odG1sJz5Db25mb3JtaXR5IGFzc2Vzc21lbnQ8L2E+PC9saT48IS0tIGNsb3NlIG9mIGxpc3QgaXRlbSBsZXZlbCAyIC0tPjxsaSByb2xlPSdtZW51aXRlbScgY2xhc3M9JyBub0NoaWxkcmVuIGxhc3RJbkxldmVsJyA+PGEgY2xhc3M9J25hdi1saW5rICAgJyAgIHRpdGxlPSJPcmdhbml6YXRpb25zIGFuZCBjb21wYW5pZXMgbG9va2luZyB0byBjb250cmlidXRlIHRvIHRoZSBTREdzIHdpbGwgZmluZCB0aGF0IEludGVybmF0aW9uYWwgU3RhbmRhcmRzIHByb3ZpZGUgZWZmZWN0aXZlIHRvb2xzIHRvIGhlbHAgdGhlbSByaXNlIHRvIHRoZSBjaGFsbGVuZ2UuIiAgaHJlZj0nL3NkZ3MuaHRtbCc+U0RHczwvYT48L2xpPjwhLS0gY2xvc2Ugb2YgbGlzdCBpdGVtIGxldmVsIDIgLS0+PC91bD48IS0tIGNsb3NlIG9mIGNvbnRhaW5lciBsZXZlbCAyIC0tPjwvbGk+PCEtLSBjbG9zZSBvZiBsaXN0IGl0ZW0gbGV2ZWwgMSAtLT48bGkgcm9sZT0nbWVudWl0ZW0nIGNsYXNzPScgaGFzQ2hpbGRyZW4nID48YSBjbGFzcz0nbmF2LWxpbmsgICAgZGlzYWJsZWQnIGRhdGEtYnMtdG9nZ2xlPSJkcm9wZG93biIgYXJpYS1leHBhbmRlZD0idHJ1ZSIgICBocmVmPScnPlNlY3RvcnM8L2E+PHVsIHJvbGU9J21lbnViYXInIGNsYXNzPSdsaXN0LXVuc3R5bGVkIG5hdi1sZXZlbDInID48bGkgcm9sZT0nbWVudWl0ZW0nIGNsYXNzPScgbm9DaGlsZHJlbiBmaXJzdEluTGV2ZWwnID48YSBjbGFzcz0nbmF2LWxpbmsgICAnICAgdGl0bGU9IihpbmNsdWRpbmcgbWVkaWNpbmUgYW5kIGxhYm9yYXRvcnkgZXF1aXBtZW50KSIgIGhyZWY9Jy9zZWN0b3JzL2hlYWx0aCc+SGVhbHRoPC9hPjwvbGk+PCEtLSBjbG9zZSBvZiBsaXN0IGl0ZW0gbGV2ZWwgMiAtLT48bGkgcm9sZT0nbWVudWl0ZW0nIGNsYXNzPScgbm9DaGlsZHJlbicgPjxhIGNsYXNzPSduYXYtbGluayAgICcgICB0aXRsZT0iKGluY2x1ZGluZyBjb21tdW5pY2F0aW9uIHRlY2hub2xvZ3ksIGdyYXBoaWNzIGFuZCBwaG90b2dyYXBoeSkiICBocmVmPScvc2VjdG9ycy9pdC10ZWNobm9sb2dpZXMnPklUICYgcmVsYXRlZCB0ZWNobm9sb2dpZXM8L2E+PC9saT48IS0tIGNsb3NlIG9mIGxpc3QgaXRlbSBsZXZlbCAyIC0tPjxsaSByb2xlPSdtZW51aXRlbScgY2xhc3M9JyBub0NoaWxkcmVuJyA+PGEgY2xhc3M9J25hdi1saW5rICAgJyAgIHRpdGxlPSIoaW5jbHVkaW5nIHZlaGljbGVzLCBwYXJ0cyBhbmQgaW5mcmFzdHJ1Y3R1cmUsIGZyZWlnaHQsIHBhY2thZ2luZyBhbmQgZGlzdHJpYnV0aW9uKSIgIGhyZWY9Jy9zZWN0b3JzL3RyYW5zcG9ydCc+VHJhbnNwb3J0PC9hPjwvbGk+PCEtLSBjbG9zZSBvZiBsaXN0IGl0ZW0gbGV2ZWwgMiAtLT48L3VsPjwhLS0gY2xvc2Ugb2YgY29udGFpbmVyIGxldmVsIDIgLS0+PC9saT48IS0tIGNsb3NlIG9mIGxpc3QgaXRlbSBsZXZlbCAxIC0tPjxsaSByb2xlPSdtZW51aXRlbScgY2xhc3M9JyBoYXNDaGlsZHJlbicgPjxhIGNsYXNzPSduYXYtbGluayAgICcgICB0aXRsZT0iSVNPIGJyaW5ncyB0b2dldGhlciBnbG9iYWwgZXhwZXJ0cyB0byBkZXZlbG9wIEludGVybmF0aW9uYWwgU3RhbmRhcmRzIHRoYXQgaGVscCBzb2x2ZSBwcm9ibGVtcyBhbmQgZHJpdmUgaW5ub3ZhdGlvbi4iICBocmVmPScvYWJvdXQtdXMuaHRtbCc+QWJvdXQgdXM8L2E+PHVsIHJvbGU9J21lbnViYXInIGNsYXNzPSdsaXN0LXVuc3R5bGVkIG5hdi1sZXZlbDInID48bGkgcm9sZT0nbWVudWl0ZW0nIGNsYXNzPScgbm9DaGlsZHJlbiBmaXJzdEluTGV2ZWwnID48YSBjbGFzcz0nbmF2LWxpbmsgICAnICAgdGl0bGU9IkZpbmQgb3V0IGhvdyB3ZSBkZXZlbG9wIGFuZCBwdWJsaXNoIGludGVybmF0aW9uYWwgc3RhbmRhcmRzIGJ5IGJyaW5naW5nIHRvZ2V0aGVyIG1vcmUgdGhhbiAxNjAgbWVtYmVycyBhbmQgbW9yZSB0aGFuIDQ1LDAwMCBleHBlcnRzIiAgaHJlZj0nL3doYXQtd2UtZG8uaHRtbCc+V2hhdCB3ZSBkbzwvYT48L2xpPjwhLS0gY2xvc2Ugb2YgbGlzdCBpdGVtIGxldmVsIDIgLS0+PGxpIHJvbGU9J21lbnVpdGVtJyBjbGFzcz0nIG5vQ2hpbGRyZW4nID48YSBjbGFzcz0nbmF2LWxpbmsgICAnICAgIGhyZWY9Jy9zdHJ1Y3R1cmUuaHRtbCc+U3RydWN0dXJlPC9hPjwvbGk+PCEtLSBjbG9zZSBvZiBsaXN0IGl0ZW0gbGV2ZWwgMiAtLT48bGkgcm9sZT0nbWVudWl0ZW0nIGNsYXNzPScgbm9DaGlsZHJlbicgPjxhIGNsYXNzPSduYXYtbGluayAgICcgICB0aXRsZT0iUmVwcmVzZW50aW5nIHRoZSBmb3VyIGNvcm5lcnMgb2YgdGhlIHdvcmxkIHdpdGggb25lIG1lbWJlciBwZXIgY291bnRyeSwgSVNPIGlzIHRoZSBJbnRlcm5hdGlvbmFsIE9yZ2FuaXphdGlvbiBmb3IgU3RhbmRhcmRpemF0aW9uLiIgIGhyZWY9Jy9tZW1iZXJzLmh0bWwnPk1lbWJlcnM8L2E+PC9saT48IS0tIGNsb3NlIG9mIGxpc3QgaXRlbSBsZXZlbCAyIC0tPjxsaSByb2xlPSdtZW51aXRlbScgY2xhc3M9JyBub0NoaWxkcmVuIGxhc3RJbkxldmVsJyA+PGEgY2xhc3M9J25hdi1saW5rICAgJyAgIHRpdGxlPSJNYWtpbmcgbGl2ZXMgZWFzaWVyLCBzYWZlciBhbmQgYmV0dGVyLiBPdXIgU3RyYXRlZ3kgb3V0bGluZXMgb3VyIHZpc2lvbiBhbmQgb3VyIG1pc3Npb24gZm9yIHRoZSBuZXh0IDEwIHllYXJzIGFuZCBhIHNldCBvZiBnb2FscyBhbmQgcHJpb3JpdGllcyB0byBoZWxwIHVzIGdldCB0aGVyZS4iICBocmVmPScvc3RyYXRlZ3kyMDMwLmh0bWwnPlN0cmF0ZWd5PC9hPjwvbGk+PCEtLSBjbG9zZSBvZiBsaXN0IGl0ZW0gbGV2ZWwgMiAtLT48L3VsPjwhLS0gY2xvc2Ugb2YgY29udGFpbmVyIGxldmVsIDIgLS0+PC9saT48IS0tIGNsb3NlIG9mIGxpc3QgaXRlbSBsZXZlbCAxIC0tPjxsaSByb2xlPSdtZW51aXRlbScgY2xhc3M9JyBoYXNDaGlsZHJlbicgPjxhIGNsYXNzPSduYXYtbGluayAgICcgICB0aXRsZT0iS2VlcCB1cCB0byBkYXRlIHdpdGggdGhlIGxhdGVzdCBpbiBzdGFuZGFyZGl6YXRpb24gb3IgYnJvd3NlIG91ciByaWNoIGFyY2hpdmVzIiAgaHJlZj0nL25ld3MuaHRtbCc+TmV3czwvYT48dWwgcm9sZT0nbWVudWJhcicgY2xhc3M9J2xpc3QtdW5zdHlsZWQgbmF2LWxldmVsMicgPjxsaSByb2xlPSdtZW51aXRlbScgY2xhc3M9JyBub0NoaWxkcmVuJyA+PGEgY2xhc3M9J25hdi1saW5rICAgJyAgIHRpdGxlPSJGaW5kIG91dCB3aGF0J3MgY29taW5nIHVwIGFuZCB3aGF0IHlvdSBtaWdodCBoYXZlIG1pc3NlZC4iICBocmVmPScvZXZlbnRzLmh0bWwnPkV2ZW50czwvYT48L2xpPjwhLS0gY2xvc2Ugb2YgbGlzdCBpdGVtIGxldmVsIDIgLS0+PGxpIHJvbGU9J21lbnVpdGVtJyBjbGFzcz0nIG5vQ2hpbGRyZW4nID48YSBjbGFzcz0nbmF2LWxpbmsgICAnICAgIGhyZWY9Jy9tZWRpYS1raXQuaHRtbCc+TWVkaWEga2l0PC9hPjwvbGk+PCEtLSBjbG9zZSBvZiBsaXN0IGl0ZW0gbGV2ZWwgMiAtLT48L3VsPjwhLS0gY2xvc2Ugb2YgY29udGFpbmVyIGxldmVsIDIgLS0+PC9saT48IS0tIGNsb3NlIG9mIGxpc3QgaXRlbSBsZXZlbCAxIC0tPjxsaSByb2xlPSdtZW51aXRlbScgY2xhc3M9JyBoYXNDaGlsZHJlbicgPjxhIGNsYXNzPSduYXYtbGluayAgICcgICB0aXRsZT0iRmluZCBvdXQgaG93IHRoZSBJU08gcHJvY2VzcyBicmluZyB0b2dldGhlciBnbG9iYWwgZXhwZXJ0cyB0byBjcmVhdGUgc3RhbmRhcmRzIHRoYXQgYXJlIGNob3NlbiB0aGUgd29ybGQgb3Zlci4iICBocmVmPScvZGV2ZWxvcGluZy1zdGFuZGFyZHMuaHRtbCc+VGFraW5nIHBhcnQ8L2E+PHVsIHJvbGU9J21lbnViYXInIGNsYXNzPSdsaXN0LXVuc3R5bGVkIG5hdi1sZXZlbDInID48bGkgcm9sZT0nbWVudWl0ZW0nIGNsYXNzPScgbm9DaGlsZHJlbiBmaXJzdEluTGV2ZWwnID48YSBjbGFzcz0nbmF2LWxpbmsgICAnICAgdGl0bGU9IklTTyBoYXMgcHV0IHRvZ2V0aGVyIGdyb3VwcyBvZiBleHBlcnRzIHRoYXQgcmVwcmVzZW50IGV2ZXJ5IHNlY3RvciBpbWFnaW5hYmxlIGZyb20gc29hcHMgdG8gc3BhY2VjcmFmdCwgTVAzIHRvIGNvZmZlZS4gSW4gZmFjdCB0aGVyZSBhcmUgbW9yZSB0aGFuIDI1MCB0ZWNobmljYWwgY29tbWl0dGVlcy4gWW91IGNhbiBmaW5kIG91dCB3aGF0IHRoZXkgZG8gaGVyZS4iICBocmVmPScvd2hvLWRldmVsb3BzLXN0YW5kYXJkcy5odG1sJz5XaG8gZGV2ZWxvcHMgc3RhbmRhcmRzPC9hPjwvbGk+PCEtLSBjbG9zZSBvZiBsaXN0IGl0ZW0gbGV2ZWwgMiAtLT48bGkgcm9sZT0nbWVudWl0ZW0nIGNsYXNzPScgbm9DaGlsZHJlbicgPjxhIGNsYXNzPSduYXYtbGluayAgICcgICB0aXRsZT0iVGhlIGRpZmZlcmVudCB0eXBlcyBvZiBJU08gcHVibGljYXRpb25zLiIgIGhyZWY9Jy9kZWxpdmVyYWJsZXMtYWxsLmh0bWwnPkRlbGl2ZXJhYmxlczwvYT48L2xpPjwhLS0gY2xvc2Ugb2YgbGlzdCBpdGVtIGxldmVsIDIgLS0+PGxpIHJvbGU9J21lbnVpdGVtJyBjbGFzcz0nIG5vQ2hpbGRyZW4nID48YSBjbGFzcz0nbmF2LWxpbmsgICAnICAgIGhyZWY9Jy9nZXQtaW52b2x2ZWQuaHRtbCc+R2V0IGludm9sdmVkPC9hPjwvbGk+PCEtLSBjbG9zZSBvZiBsaXN0IGl0ZW0gbGV2ZWwgMiAtLT48bGkgcm9sZT0nbWVudWl0ZW0nIGNsYXNzPScgbm9DaGlsZHJlbicgPjxhIGNsYXNzPSduYXYtbGluayAgICcgICB0aXRsZT0iVGhlIElTTyBDbGltYXRlIEFjdGlvbiBLaXQgaXMgYSBjb2xsZWN0aW9uIG9mIGNhc2Ugc3R1ZGllcyBmcm9tIGFyb3VuZCB0aGUgd29ybGQgb24gaG93IHN0YW5kYXJkcyBjYW4gYmUgZWZmZWN0aXZlbHkgdXNlZCBhcyBhIHRvb2wgZm9yIHN1c3RhaW5hYmlsaXR5LiIgIGhyZWY9Jy9DbGltYXRlQWN0aW9uLmh0bWwnPkNsaW1hdGUgYWN0aW9uIGtpdDwvYT48L2xpPjwhLS0gY2xvc2Ugb2YgbGlzdCBpdGVtIGxldmVsIDIgLS0+PGxpIHJvbGU9J21lbnVpdGVtJyBjbGFzcz0nIG5vQ2hpbGRyZW4gbGFzdEluTGV2ZWwnID48YSBjbGFzcz0nbmF2LWxpbmsgICAnICAgdGl0bGU9IlJlc291cmNlcyB0byBzdXBwb3J0IHRoZSB3b3JrIG9mIGluZGl2aWR1YWxzIGludm9sdmVkIGluIHN0YW5kYXJkcyBkZXZlbG9wbWVudC4gIiAgaHJlZj0nL3Jlc291cmNlcy5odG1sJz5SZXNvdXJjZXM8L2E+PC9saT48IS0tIGNsb3NlIG9mIGxpc3QgaXRlbSBsZXZlbCAyIC0tPjwvdWw+PCEtLSBjbG9zZSBvZiBjb250YWluZXIgbGV2ZWwgMiAtLT48L2xpPjwhLS0gY2xvc2Ugb2YgbGlzdCBpdGVtIGxldmVsIDEgLS0+PGxpIHJvbGU9J21lbnVpdGVtJyBjbGFzcz0nIGhhc0NoaWxkcmVuIGluUGF0aCAgbGFzdEluTGV2ZWwnID48YSBjbGFzcz0nbmF2LWxpbmsgICAnICAgdGl0bGU9IkFyZSB5b3UgbG9va2luZyB0byBidXkgSW50ZXJuYXRpb25hbCBTdGFuZGFyZHMsIGd1aWRlbGluZXMsIGNvbGxlY3Rpb25zIGFuZCBjaGVja2xpc3RzPyBUaGV5J3JlIGFsbCByaWdodCBoZXJlLCBpbiB0aGUgSVNPIFN0b3JlLiIgIGhyZWY9Jy9zdG9yZS5odG1sJz5TdG9yZTwvYT48dWwgcm9sZT0nbWVudWJhcicgY2xhc3M9J2xpc3QtdW5zdHlsZWQgbmF2LWxldmVsMicgPjxsaSByb2xlPSdtZW51aXRlbScgY2xhc3M9JyBub0NoaWxkcmVuIGluUGF0aCAgYWN0aXZlIGZpcnN0SW5MZXZlbCcgPjxhIGNsYXNzPSduYXYtbGluayAgICcgICAgaHJlZj0nL3N0YW5kYXJkcy1jYXRhbG9ndWUvYnJvd3NlLWJ5LWljcy5odG1sJz5TdGFuZGFyZHMgY2F0YWxvZ3VlPC9hPjwvbGk+PCEtLSBjbG9zZSBvZiBsaXN0IGl0ZW0gbGV2ZWwgMiAtLT48bGkgcm9sZT0nbWVudWl0ZW0nIGNsYXNzPScgbm9DaGlsZHJlbicgPjxhIGNsYXNzPSduYXYtbGluayAgICcgICB0aXRsZT0iSVNPIHB1YmxpY2F0aW9ucyBnaXZlIGluc2lnaHRzIGFuZCBndWlkYW5jZSBpbnRvIHNwZWNpZmljIGFwcGxpY2F0aW9ucyBhbmQgc2hvdyBob3cgc3RhbmRhcmRzIGFkZCB2YWx1ZS4iICBocmVmPScvcHVibGljYXRpb24tbGlzdC5odG1sJz5QdWJsaWNhdGlvbnMgYW5kIHByb2R1Y3RzPC9hPjwvbGk+PCEtLSBjbG9zZSBvZiBsaXN0IGl0ZW0gbGV2ZWwgMiAtLT48L3VsPjwhLS0gY2xvc2Ugb2YgY29udGFpbmVyIGxldmVsIDIgLS0+PC9saT48IS0tIGNsb3NlIG9mIGxpc3QgaXRlbSBsZXZlbCAxIC0tPjwvdWw+PCEtLSBjbG9zZSBvZiBjb250YWluZXIgbGV2ZWwgMSAtLT48L25hdj48L2Rpdj4KICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgICA8L2Rpdj4KICAgIDwvbWFpbj4KICAgIDxmb290ZXIgcm9sZT0iY29udGVudGluZm8iIGFyaWEtbGFiZWw9IkZvb3RlciIgY2xhc3M9ImZvb3Rlci1pc28gZm9vdGVyLWRhcmsgYmctZGFyayI+CiAgICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lciI+CiAgICAgICAgPGRpdiBjbGFzcz0iZm9vdGVyLWxpbmtzIGNlbnRlci1ibG9jayI+CiAgICAgICAgICA8IS0tIEZPT1RFUiBMSU5LUyAtLT4KICAgICAgICAgIDxuYXYgcm9sZT0ibmF2aWdhdGlvbiIgYXJpYS1sYWJlbD0iSW5saW5lIE5hdmlnYXRpb24iIGNsYXNzPSIiIGlkPSIiPjx1bCByb2xlPSdtZW51YmFyJyBjbGFzcz0nbGlzdC1pbmxpbmUgY2xlYXJmaXggbmF2LWxldmVsMScgPjxsaSByb2xlPSdtZW51aXRlbScgY2xhc3M9JyBub0NoaWxkcmVuIGZpcnN0SW5MZXZlbCcgPjxhIGNsYXNzPSduYXYtbGluayAgICcgICAgaHJlZj0nL2lzby1uYW1lLWFuZC1sb2dvLmh0bWwnPklTTyBuYW1lIGFuZCBsb2dvPC9hPjwvbGk+PCEtLSBjbG9zZSBvZiBsaXN0IGl0ZW0gbGV2ZWwgMSAtLT48bGkgcm9sZT0nbWVudWl0ZW0nIGNsYXNzPScgbm9DaGlsZHJlbicgPjxhIGNsYXNzPSduYXYtbGluayAgICcgICAgaHJlZj0nL3ByaXZhY3kuaHRtbCc+UHJpdmFjeSBOb3RpY2U8L2E+PC9saT48IS0tIGNsb3NlIG9mIGxpc3QgaXRlbSBsZXZlbCAxIC0tPjxsaSByb2xlPSdtZW51aXRlbScgY2xhc3M9JyBub0NoaWxkcmVuJyA+PGEgY2xhc3M9J25hdi1saW5rICAgJyAgICBocmVmPScvY29weXJpZ2h0Lmh0bWwnPkNvcHlyaWdodDwvYT48L2xpPjwhLS0gY2xvc2Ugb2YgbGlzdCBpdGVtIGxldmVsIDEgLS0+PGxpIHJvbGU9J21lbnVpdGVtJyBjbGFzcz0nIG5vQ2hpbGRyZW4nID48YSBjbGFzcz0nbmF2LWxpbmsgICAnICAgIGhyZWY9Jy9jb29raWVzLmh0bWwnPkNvb2tpZSBwb2xpY3k8L2E+PC9saT48IS0tIGNsb3NlIG9mIGxpc3QgaXRlbSBsZXZlbCAxIC0tPjxsaSByb2xlPSdtZW51aXRlbScgY2xhc3M9JyBub0NoaWxkcmVuJyA+PGEgY2xhc3M9J25hdi1saW5rICAgJyAgICBocmVmPScvd29ya2luZy13aXRoLWlzby5odG1sJz5Kb2JzPC9hPjwvbGk+PCEtLSBjbG9zZSBvZiBsaXN0IGl0ZW0gbGV2ZWwgMSAtLT48bGkgcm9sZT0nbWVudWl0ZW0nIGNsYXNzPScgbm9DaGlsZHJlbicgPjxhIGNsYXNzPSduYXYtbGluayAgICcgICAgaHJlZj0nL2ZyZXF1ZW50bHktYXNrZWQtcXVlc3Rpb25zLWZhcXMuaHRtbCc+RkFRczwvYT48L2xpPjwhLS0gY2xvc2Ugb2YgbGlzdCBpdGVtIGxldmVsIDEgLS0+PGxpIHJvbGU9J21lbnVpdGVtJyBjbGFzcz0nIG5vQ2hpbGRyZW4nID48YSBjbGFzcz0nbmF2LWxpbmsgICAnICAgIGhyZWY9Jy9jb250YWN0LWlzby5odG1sJz5Db250YWN0IElTTzwvYT48L2xpPjwhLS0gY2xvc2Ugb2YgbGlzdCBpdGVtIGxldmVsIDEgLS0+PC91bD48IS0tIGNsb3NlIG9mIGNvbnRhaW5lciBsZXZlbCAxIC0tPjwvbmF2PjxkaXYgY2xhc3M9InJvdyAgICAgICAiID4KPGRpdiBjbGFzcz0iY29sLW1kLTYgb2Zmc2V0LW1kLTMgY29sLXhsLTQgb2Zmc2V0LXhsLTQiPjxoMiBjbGFzcz0iaDQgcHQtMyBwYi0yIiBpZD0iaXNvaW5zaWdodHMiPlNpZ24gdXAgZm9yIGVtYWlsIHVwZGF0ZXM8L2gyPjxmb3JtIG1ldGhvZD0iUE9TVCIgYWN0aW9uPSJodHRwczovL2lzbzI3Mi5hY3RpdmVob3N0ZWQuY29tL3Byb2MucGhwIiBpZD0iX2Zvcm1fMjNfIiBjbGFzcz0iX2Zvcm0gX2Zvcm1fMjMgX2lubGluZS1mb3JtICBfZGFyayIgbm92YWxpZGF0ZT4KICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJ1IiB2YWx1ZT0iMjMiIC8+CiAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iZiIgdmFsdWU9IjIzIiAvPgogIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InMiIC8+CiAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iYyIgdmFsdWU9IjAiIC8+CiAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ibSIgdmFsdWU9IjAiIC8+CiAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iYWN0IiB2YWx1ZT0ic3ViIiAvPgogIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InYiIHZhbHVlPSIyIiAvPgogIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9Im9yIiB2YWx1ZT0iOTQxN2I5Y2Q1MmZmNmM3NDJlMTc2YTM3MGVkNTQ0MmEiIC8+CgogIDxzdHlsZT4KICAgICAgLl9lcnJvciB7CiAgICAgICAgICB3aWR0aDogMTAwJTsKICAgICAgICAgIHBhZGRpbmc6IDAuNWVtIDEuMjVlbTsKICAgICAgICAgIHRleHQtYWxpZ246IGxlZnQ7CiAgICAgIH0KICA8L3N0eWxlPgoKICA8ZGl2IGNsYXNzPSJfZm9ybS1jb250ZW50Ij4KICAgIDxkaXYgY2xhc3M9ImlucHV0LWdyb3VwIGlucHV0LWdyb3VwLXJvdW5kIG1iLTMiPgogICAgICA8aW5wdXQgdHlwZT0idGV4dCIgaWQ9ImVtYWlsIiBjbGFzcz0iZm9ybS1jb250cm9sIiBuYW1lPSJlbWFpbCIgcGxhY2Vob2xkZXI9IkVtYWlsIiBhcmlhLWxhYmVsPSJFbWFpbCIgYXJpYS1kZXNjcmliZWRieT0iX2Zvcm1fMjNfc3VibWl0IiByZXF1aXJlZC8+CgogICAgICA8YnV0dG9uIGlkPSJfZm9ybV8yM19zdWJtaXQiIGNsYXNzPSJfc3VibWl0IGJ0biBidG4tcHJpbWFyeSIgdHlwZT0ic3VibWl0Ij4KICAgICAgICBTdWJzY3JpYmU8L2J1dHRvbj4KICAgIDwvZGl2PgogIDwvZGl2PgoKICAgIDxkaXYgY2xhc3M9Il9mb3JtLXRoYW5rLXlvdSBtYi0zIiBzdHlsZT0iZGlzcGxheTpub25lOyI+CiAgICAgICAgICA8cD48c3Ryb25nPkFsbW9zdCBkb25lISZuYnNwOzwvc3Ryb25nPjxiciAvPgpZb3UgYXJlIG9ubHkgb25lIHN0ZXAgYXdheSBmcm9tIGpvaW5pbmcgdGhlIElTTyBzdWJzY3JpYmVyIGxpc3QuIFBsZWFzZSBjb25maXJtIHlvdXIgc3Vic2NyaXB0aW9uIGJ5IGNsaWNraW5nIG9uIHRoZSBlbWFpbCB3ZSYjMzk7dmUganVzdCBzZW50IHRvIHlvdS4gWW91IHdpbGwgbm90IGJlIHJlZ2lzdGVyZWQgdW50aWwgeW91IGNvbmZpcm0geW91ciBzdWJzY3JpcHRpb24uIElmIHlvdSBjYW4mIzM5O3QgZmluZCB0aGUgZW1haWwsIGtpbmRseSBjaGVjayB5b3VyIHNwYW0gZm9sZGVyIGFuZC9vciB0aGUgcHJvbW90aW9ucyB0YWIgKGlmIHlvdSB1c2UgR21haWwpLjwvcD48L2Rpdj4KICAgICAgPC9mb3JtPgoKCjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4KICB3aW5kb3cuX3Nob3dfdGhhbmtfeW91ID0gZnVuY3Rpb24oaWQsIG1lc3NhZ2UsIHRyYWNrY21wX3VybCwgZW1haWwpIHsKICAgIHZhciBmb3JtID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ19mb3JtXycgKyBpZCArICdfJyksIHRoYW5rX3lvdSA9IGZvcm0ucXVlcnlTZWxlY3RvcignLl9mb3JtLXRoYW5rLXlvdScpOwogICAgZm9ybS5xdWVyeVNlbGVjdG9yKCcuX2Zvcm0tY29udGVudCcpLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7CiAgICAvLyB0aGFua195b3UuaW5uZXJIVE1MID0gbWVzc2FnZTsKICAgIHRoYW5rX3lvdS5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJzsKICAgIGNvbnN0IHZnb0FsaWFzID0gdHlwZW9mIHZpc2l0b3JHbG9iYWxPYmplY3RBbGlhcyA9PT0gJ3VuZGVmaW5lZCcgPyAndmdvJyA6IHZpc2l0b3JHbG9iYWxPYmplY3RBbGlhczsKICAgIHZhciB2aXNpdG9yT2JqZWN0ID0gd2luZG93W3Znb0FsaWFzXTsKICAgIGlmIChlbWFpbCAmJiB0eXBlb2YgdmlzaXRvck9iamVjdCAhPT0gJ3VuZGVmaW5lZCcpIHsKICAgICAgdmlzaXRvck9iamVjdCgnc2V0RW1haWwnLCBlbWFpbCk7CiAgICAgIHZpc2l0b3JPYmplY3QoJ3VwZGF0ZScpOwogICAgfSBlbHNlIGlmICh0eXBlb2YodHJhY2tjbXBfdXJsKSAhPSAndW5kZWZpbmVkJyAmJiB0cmFja2NtcF91cmwpIHsKICAgICAgLy8gU2l0ZSB0cmFja2luZyBVUkwgdG8gdXNlIGFmdGVyIGlubGluZSBmb3JtIHN1Ym1pc3Npb24uCiAgICAgIF9sb2FkX3NjcmlwdCh0cmFja2NtcF91cmwpOwogICAgfQogICAgaWYgKHR5cGVvZiB3aW5kb3cuX2Zvcm1fY2FsbGJhY2sgIT09ICd1bmRlZmluZWQnKSB3aW5kb3cuX2Zvcm1fY2FsbGJhY2soaWQpOwogIH07CiAgd2luZG93Ll9zaG93X2Vycm9yID0gZnVuY3Rpb24oaWQsIG1lc3NhZ2UsIGh0bWwpIHsKICAgIHZhciBmb3JtID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ19mb3JtXycgKyBpZCArICdfJyksIGVyciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpLCBidXR0b24gPSBmb3JtLnF1ZXJ5U2VsZWN0b3IoJ2J1dHRvbicpLCBvbGRfZXJyb3IgPSBmb3JtLnF1ZXJ5U2VsZWN0b3IoJy5fZm9ybV9lcnJvcicpOwogICAgaWYgKG9sZF9lcnJvcikgb2xkX2Vycm9yLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQob2xkX2Vycm9yKTsKICAgIGVyci5pbm5lckhUTUwgPSBtZXNzYWdlOwogICAgZXJyLmNsYXNzTmFtZSA9ICdfZXJyb3ItaW5uZXIgX2Zvcm1fZXJyb3IgX25vX2Fycm93JzsKICAgIHZhciB3cmFwcGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7CiAgICB3cmFwcGVyLmNsYXNzTmFtZSA9ICdfZm9ybS1pbm5lcic7CiAgICB3cmFwcGVyLmFwcGVuZENoaWxkKGVycik7CiAgICBidXR0b24ucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUod3JhcHBlciwgYnV0dG9uKTsKICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ1tpZF49Il9mb3JtIl1baWQkPSJfc3VibWl0Il0nKS5kaXNhYmxlZCA9IGZhbHNlOwogICAgaWYgKGh0bWwpIHsKICAgICAgdmFyIGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpOwogICAgICBkaXYuY2xhc3NOYW1lID0gJ19lcnJvci1odG1sJzsKICAgICAgZGl2LmlubmVySFRNTCA9IGh0bWw7CiAgICAgIGVyci5hcHBlbmRDaGlsZChkaXYpOwogICAgfQogIH07CiAgd2luZG93Ll9sb2FkX3NjcmlwdCA9IGZ1bmN0aW9uKHVybCwgY2FsbGJhY2spIHsKICAgIHZhciBoZWFkID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignaGVhZCcpLCBzY3JpcHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKSwgciA9IGZhbHNlOwogICAgc2NyaXB0LnR5cGUgPSAndGV4dC9qYXZhc2NyaXB0JzsKICAgIHNjcmlwdC5jaGFyc2V0ID0gJ3V0Zi04JzsKICAgIHNjcmlwdC5zcmMgPSB1cmw7CiAgICBpZiAoY2FsbGJhY2spIHsKICAgICAgc2NyaXB0Lm9ubG9hZCA9IHNjcmlwdC5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbigpIHsKICAgICAgICBpZiAoIXIgJiYgKCF0aGlzLnJlYWR5U3RhdGUgfHwgdGhpcy5yZWFkeVN0YXRlID09ICdjb21wbGV0ZScpKSB7CiAgICAgICAgICByID0gdHJ1ZTsKICAgICAgICAgIGNhbGxiYWNrKCk7CiAgICAgICAgfQogICAgICB9OwogICAgfQogICAgaGVhZC5hcHBlbmRDaGlsZChzY3JpcHQpOwogIH07CiAgKGZ1bmN0aW9uKCkgewogICAgaWYgKHdpbmRvdy5sb2NhdGlvbi5zZWFyY2guc2VhcmNoKCJleGNsdWRlZm9ybSIpICE9PSAtMSkgcmV0dXJuIGZhbHNlOwogICAgdmFyIGdldENvb2tpZSA9IGZ1bmN0aW9uKG5hbWUpIHsKICAgICAgdmFyIG1hdGNoID0gZG9jdW1lbnQuY29va2llLm1hdGNoKG5ldyBSZWdFeHAoJyhefDsgKScgKyBuYW1lICsgJz0oW147XSspJykpOwogICAgICByZXR1cm4gbWF0Y2ggPyBtYXRjaFsyXSA6IG51bGw7CiAgICB9CiAgICB2YXIgc2V0Q29va2llID0gZnVuY3Rpb24obmFtZSwgdmFsdWUpIHsKICAgICAgdmFyIG5vdyA9IG5ldyBEYXRlKCk7CiAgICAgIHZhciB0aW1lID0gbm93LmdldFRpbWUoKTsKICAgICAgdmFyIGV4cGlyZVRpbWUgPSB0aW1lICsgMTAwMCAqIDYwICogNjAgKiAyNCAqIDM2NTsKICAgICAgbm93LnNldFRpbWUoZXhwaXJlVGltZSk7CiAgICAgIGRvY3VtZW50LmNvb2tpZSA9IG5hbWUgKyAnPScgKyB2YWx1ZSArICc7IGV4cGlyZXM9JyArIG5vdyArICc7cGF0aD0vOyBTZWN1cmU7IFNhbWVTaXRlPUxheDsnOy8vIGNhbm5vdCBiZSBIdHRwT25seQogICAgfQogICAgdmFyIGFkZEV2ZW50ID0gZnVuY3Rpb24oZWxlbWVudCwgZXZlbnQsIGZ1bmMpIHsKICAgICAgaWYgKGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcikgewogICAgICAgIGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihldmVudCwgZnVuYyk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgdmFyIG9sZEZ1bmMgPSBlbGVtZW50WydvbicgKyBldmVudF07CiAgICAgICAgZWxlbWVudFsnb24nICsgZXZlbnRdID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICBvbGRGdW5jLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICAgICAgICBmdW5jLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICAgICAgfTsKICAgICAgfQogICAgfQogICAgdmFyIF9yZW1vdmVkID0gZmFsc2U7CiAgICB2YXIgZm9ybV90b19zdWJtaXQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnX2Zvcm1fMjNfJyk7CiAgICB2YXIgYWxsSW5wdXRzID0gZm9ybV90b19zdWJtaXQucXVlcnlTZWxlY3RvckFsbCgnaW5wdXQsIHNlbGVjdCwgdGV4dGFyZWEnKSwgdG9vbHRpcHMgPSBbXSwgc3VibWl0dGVkID0gZmFsc2U7CgogICAgdmFyIGdldFVybFBhcmFtID0gZnVuY3Rpb24obmFtZSkgewogICAgICB2YXIgcGFyYW1zID0gbmV3IFVSTFNlYXJjaFBhcmFtcyh3aW5kb3cubG9jYXRpb24uc2VhcmNoKTsKICAgICAgcmV0dXJuIHBhcmFtcy5nZXQobmFtZSkgfHwgZmFsc2U7CiAgICB9OwoKICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYWxsSW5wdXRzLmxlbmd0aDsgaSsrKSB7CiAgICAgIHZhciByZWdleFN0ciA9ICJmaWVsZFxcWyhcXGQrKVxcXSI7CiAgICAgIHZhciByZXN1bHRzID0gbmV3IFJlZ0V4cChyZWdleFN0cikuZXhlYyhhbGxJbnB1dHNbaV0ubmFtZSk7CiAgICAgIGlmIChyZXN1bHRzICE9IHVuZGVmaW5lZCkgewogICAgICAgIGFsbElucHV0c1tpXS5kYXRhc2V0Lm5hbWUgPSB3aW5kb3cuY2ZpZWxkc1tyZXN1bHRzWzFdXTsKICAgICAgfSBlbHNlIHsKICAgICAgICBhbGxJbnB1dHNbaV0uZGF0YXNldC5uYW1lID0gYWxsSW5wdXRzW2ldLm5hbWU7CiAgICAgIH0KICAgICAgdmFyIGZpZWxkVmFsID0gZ2V0VXJsUGFyYW0oYWxsSW5wdXRzW2ldLmRhdGFzZXQubmFtZSk7CgogICAgICBpZiAoZmllbGRWYWwpIHsKICAgICAgICBpZiAoYWxsSW5wdXRzW2ldLmRhdGFzZXQuYXV0b2ZpbGwgPT09ICJmYWxzZSIpIHsKICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgIH0KICAgICAgICBpZiAoYWxsSW5wdXRzW2ldLnR5cGUgPT0gInJhZGlvIiB8fCBhbGxJbnB1dHNbaV0udHlwZSA9PSAiY2hlY2tib3giKSB7CiAgICAgICAgICBpZiAoYWxsSW5wdXRzW2ldLnZhbHVlID09IGZpZWxkVmFsKSB7CiAgICAgICAgICAgIGFsbElucHV0c1tpXS5jaGVja2VkID0gdHJ1ZTsKICAgICAgICAgIH0KICAgICAgICB9IGVsc2UgewogICAgICAgICAgYWxsSW5wdXRzW2ldLnZhbHVlID0gZmllbGRWYWw7CiAgICAgICAgfQogICAgICB9CiAgICB9CgogICAgdmFyIHJlbW92ZV90b29sdGlwcyA9IGZ1bmN0aW9uKCkgewogICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRvb2x0aXBzLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgdG9vbHRpcHNbaV0udGlwLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodG9vbHRpcHNbaV0udGlwKTsKICAgICAgfQogICAgICB0b29sdGlwcyA9IFtdOwogICAgfTsKICAgIHZhciByZW1vdmVfdG9vbHRpcCA9IGZ1bmN0aW9uKGVsZW0pIHsKICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0b29sdGlwcy5sZW5ndGg7IGkrKykgewogICAgICAgIGlmICh0b29sdGlwc1tpXS5lbGVtID09PSBlbGVtKSB7CiAgICAgICAgICB0b29sdGlwc1tpXS50aXAucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0b29sdGlwc1tpXS50aXApOwogICAgICAgICAgdG9vbHRpcHMuc3BsaWNlKGksIDEpOwogICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KICAgICAgfQogICAgfTsKICAgIHZhciBjcmVhdGVfdG9vbHRpcCA9IGZ1bmN0aW9uKGVsZW0sIHRleHQpIHsKICAgICAgdmFyIHRvb2x0aXAgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKSwgYXJyb3cgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKSwgaW5uZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKSwgbmV3X3Rvb2x0aXAgPSB7fTsKICAgICAgaWYgKGVsZW0udHlwZSAhPSAncmFkaW8nICYmIGVsZW0udHlwZSAhPSAnY2hlY2tib3gnKSB7CiAgICAgICAgdG9vbHRpcC5jbGFzc05hbWUgPSAnX2Vycm9yIHRleHQtc20gdGV4dC1tdXRlZCB0ZXh0LXN0YXJ0JzsKICAgICAgICBhcnJvdy5jbGFzc05hbWUgPSAnX2Vycm9yLWFycm93JzsKICAgICAgICBpbm5lci5jbGFzc05hbWUgPSAnX2Vycm9yLWlubmVyJzsKICAgICAgICBpbm5lci5pbm5lckhUTUwgPSB0ZXh0OwogICAgICAgIHRvb2x0aXAuYXBwZW5kQ2hpbGQoYXJyb3cpOwogICAgICAgIHRvb2x0aXAuYXBwZW5kQ2hpbGQoaW5uZXIpOwogICAgICAgIGVsZW0ucGFyZW50Tm9kZS5hcHBlbmRDaGlsZCh0b29sdGlwKTsKICAgICAgfSBlbHNlIHsKICAgICAgICB0b29sdGlwLmNsYXNzTmFtZSA9ICdfZXJyb3ItaW5uZXIgX25vX2Fycm93JzsKICAgICAgICB0b29sdGlwLmlubmVySFRNTCA9IHRleHQ7CiAgICAgICAgZWxlbS5wYXJlbnROb2RlLmluc2VydEJlZm9yZSh0b29sdGlwLCBlbGVtKTsKICAgICAgICBuZXdfdG9vbHRpcC5ub19hcnJvdyA9IHRydWU7CiAgICAgIH0KICAgICAgbmV3X3Rvb2x0aXAudGlwID0gdG9vbHRpcDsKICAgICAgbmV3X3Rvb2x0aXAuZWxlbSA9IGVsZW07CiAgICAgIHRvb2x0aXBzLnB1c2gobmV3X3Rvb2x0aXApOwogICAgICByZXR1cm4gbmV3X3Rvb2x0aXA7CiAgICB9OwogICAgdmFyIHJlc2l6ZV90b29sdGlwID0gZnVuY3Rpb24odG9vbHRpcCkgewogICAgICB2YXIgcmVjdCA9IHRvb2x0aXAuZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTsKICAgICAgdmFyIGRvYyA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCwgc2Nyb2xsUG9zaXRpb24gPSByZWN0LnRvcCAtICgod2luZG93LnBhZ2VZT2Zmc2V0IHx8IGRvYy5zY3JvbGxUb3ApICAtIChkb2MuY2xpZW50VG9wIHx8IDApKTsKICAgICAgaWYgKHNjcm9sbFBvc2l0aW9uIDwgNDApIHsKICAgICAgICB0b29sdGlwLnRpcC5jbGFzc05hbWUgPSB0b29sdGlwLnRpcC5jbGFzc05hbWUucmVwbGFjZSgvID8oX2Fib3ZlfF9iZWxvdykgPy9nLCAnJykgKyAnIF9iZWxvdyc7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgdG9vbHRpcC50aXAuY2xhc3NOYW1lID0gdG9vbHRpcC50aXAuY2xhc3NOYW1lLnJlcGxhY2UoLyA/KF9hYm92ZXxfYmVsb3cpID8vZywgJycpICsgJyBfYWJvdmUnOwogICAgICB9CiAgICB9OwogICAgdmFyIHJlc2l6ZV90b29sdGlwcyA9IGZ1bmN0aW9uKCkgewogICAgICBpZiAoX3JlbW92ZWQpIHJldHVybjsKICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0b29sdGlwcy5sZW5ndGg7IGkrKykgewogICAgICAgIGlmICghdG9vbHRpcHNbaV0ubm9fYXJyb3cpIHJlc2l6ZV90b29sdGlwKHRvb2x0aXBzW2ldKTsKICAgICAgfQogICAgfTsKICAgIHZhciB2YWxpZGF0ZV9maWVsZCA9IGZ1bmN0aW9uKGVsZW0sIHJlbW92ZSkgewogICAgICB2YXIgdG9vbHRpcCA9IG51bGwsIHZhbHVlID0gZWxlbS52YWx1ZSwgbm9fZXJyb3IgPSB0cnVlOwogICAgICByZW1vdmUgPyByZW1vdmVfdG9vbHRpcChlbGVtKSA6IGZhbHNlOwogICAgICBpZiAoZWxlbS50eXBlICE9ICdjaGVja2JveCcpIGVsZW0uY2xhc3NOYW1lID0gZWxlbS5jbGFzc05hbWUucmVwbGFjZSgvID9faGFzX2Vycm9yID8vZywgJycpOwogICAgICBpZiAoZWxlbS5nZXRBdHRyaWJ1dGUoJ3JlcXVpcmVkJykgIT09IG51bGwpIHsKICAgICAgICBpZiAoZWxlbS50eXBlID09ICdyYWRpbycgfHwgKGVsZW0udHlwZSA9PSAnY2hlY2tib3gnICYmIC9hbnkvLnRlc3QoZWxlbS5jbGFzc05hbWUpKSkgewogICAgICAgICAgdmFyIGVsZW1zID0gZm9ybV90b19zdWJtaXQuZWxlbWVudHNbZWxlbS5uYW1lXTsKICAgICAgICAgIGlmICghKGVsZW1zIGluc3RhbmNlb2YgTm9kZUxpc3QgfHwgZWxlbXMgaW5zdGFuY2VvZiBIVE1MQ29sbGVjdGlvbikgfHwgZWxlbXMubGVuZ3RoIDw9IDEpIHsKICAgICAgICAgICAgbm9fZXJyb3IgPSBlbGVtLmNoZWNrZWQ7CiAgICAgICAgICB9CiAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgbm9fZXJyb3IgPSBmYWxzZTsKICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBlbGVtcy5sZW5ndGg7IGkrKykgewogICAgICAgICAgICAgIGlmIChlbGVtc1tpXS5jaGVja2VkKSBub19lcnJvciA9IHRydWU7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICAgIGlmICghbm9fZXJyb3IpIHsKICAgICAgICAgICAgdG9vbHRpcCA9IGNyZWF0ZV90b29sdGlwKGVsZW0sICJQbGVhc2Ugc2VsZWN0IGFuIG9wdGlvbi4iKTsKICAgICAgICAgIH0KICAgICAgICB9IGVsc2UgaWYgKGVsZW0udHlwZSA9PSdjaGVja2JveCcpIHsKICAgICAgICAgIHZhciBlbGVtcyA9IGZvcm1fdG9fc3VibWl0LmVsZW1lbnRzW2VsZW0ubmFtZV0sIGZvdW5kID0gZmFsc2UsIGVyciA9IFtdOwogICAgICAgICAgbm9fZXJyb3IgPSB0cnVlOwogICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBlbGVtcy5sZW5ndGg7IGkrKykgewogICAgICAgICAgICBpZiAoZWxlbXNbaV0uZ2V0QXR0cmlidXRlKCdyZXF1aXJlZCcpID09PSBudWxsKSBjb250aW51ZTsKICAgICAgICAgICAgaWYgKCFmb3VuZCAmJiBlbGVtc1tpXSAhPT0gZWxlbSkgcmV0dXJuIHRydWU7CiAgICAgICAgICAgIGZvdW5kID0gdHJ1ZTsKICAgICAgICAgICAgZWxlbXNbaV0uY2xhc3NOYW1lID0gZWxlbXNbaV0uY2xhc3NOYW1lLnJlcGxhY2UoLyA/X2hhc19lcnJvciA/L2csICcnKTsKICAgICAgICAgICAgaWYgKCFlbGVtc1tpXS5jaGVja2VkKSB7CiAgICAgICAgICAgICAgbm9fZXJyb3IgPSBmYWxzZTsKICAgICAgICAgICAgICBlbGVtc1tpXS5jbGFzc05hbWUgPSBlbGVtc1tpXS5jbGFzc05hbWUgKyAnIF9oYXNfZXJyb3InOwogICAgICAgICAgICAgIGVyci5wdXNoKCJDaGVja2luZyAlcyBpcyByZXF1aXJlZCIucmVwbGFjZSgiJXMiLCBlbGVtc1tpXS52YWx1ZSkpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgICBpZiAoIW5vX2Vycm9yKSB7CiAgICAgICAgICAgIHRvb2x0aXAgPSBjcmVhdGVfdG9vbHRpcChlbGVtLCBlcnIuam9pbignPGJyLz4nKSk7CiAgICAgICAgICB9CiAgICAgICAgfSBlbHNlIGlmIChlbGVtLnRhZ05hbWUgPT0gJ1NFTEVDVCcpIHsKICAgICAgICAgIHZhciBzZWxlY3RlZCA9IHRydWU7CiAgICAgICAgICBpZiAoZWxlbS5tdWx0aXBsZSkgewogICAgICAgICAgICBzZWxlY3RlZCA9IGZhbHNlOwogICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGVsZW0ub3B0aW9ucy5sZW5ndGg7IGkrKykgewogICAgICAgICAgICAgIGlmIChlbGVtLm9wdGlvbnNbaV0uc2VsZWN0ZWQpIHsKICAgICAgICAgICAgICAgIHNlbGVjdGVkID0gdHJ1ZTsKICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBlbGVtLm9wdGlvbnMubGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgICBpZiAoZWxlbS5vcHRpb25zW2ldLnNlbGVjdGVkICYmICghZWxlbS5vcHRpb25zW2ldLnZhbHVlIHx8IChlbGVtLm9wdGlvbnNbaV0udmFsdWUubWF0Y2goL1xuL2cpKSkpIHsKICAgICAgICAgICAgICAgIHNlbGVjdGVkID0gZmFsc2U7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgICBpZiAoIXNlbGVjdGVkKSB7CiAgICAgICAgICAgIGVsZW0uY2xhc3NOYW1lID0gZWxlbS5jbGFzc05hbWUgKyAnIF9oYXNfZXJyb3InOwogICAgICAgICAgICBub19lcnJvciA9IGZhbHNlOwogICAgICAgICAgICB0b29sdGlwID0gY3JlYXRlX3Rvb2x0aXAoZWxlbSwgIlBsZWFzZSBzZWxlY3QgYW4gb3B0aW9uLiIpOwogICAgICAgICAgfQogICAgICAgIH0gZWxzZSBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCB8fCB2YWx1ZSA9PT0gbnVsbCB8fCB2YWx1ZSA9PT0gJycpIHsKICAgICAgICAgIGVsZW0uY2xhc3NOYW1lID0gZWxlbS5jbGFzc05hbWUgKyAnIF9oYXNfZXJyb3InOwogICAgICAgICAgbm9fZXJyb3IgPSBmYWxzZTsKICAgICAgICAgIHRvb2x0aXAgPSBjcmVhdGVfdG9vbHRpcChlbGVtLCAiVGhpcyBmaWVsZCBpcyByZXF1aXJlZCIpOwogICAgICAgIH0KICAgICAgfQogICAgICBpZiAobm9fZXJyb3IgJiYgKGVsZW0uaWQgPT0gJ2ZpZWxkW10nIHx8IGVsZW0uaWQgPT0gJ2NhWzExXVt2XScpKSB7CiAgICAgICAgaWYgKGVsZW0uY2xhc3NOYW1lLmluY2x1ZGVzKCdwaG9uZS1pbnB1dC1lcnJvcicpKSB7CiAgICAgICAgICBlbGVtLmNsYXNzTmFtZSA9IGVsZW0uY2xhc3NOYW1lICsgJyBfaGFzX2Vycm9yJzsKICAgICAgICAgIG5vX2Vycm9yID0gZmFsc2U7CiAgICAgICAgfQogICAgICB9CiAgICAgIGlmIChub19lcnJvciAmJiBlbGVtLm5hbWUgPT0gJ2VtYWlsJykgewogICAgICAgIGlmICghdmFsdWUubWF0Y2goL15bXCtfYS16MC05LScmPV0rKFwuW1wrX2EtejAtOS0nXSspKkBbYS16MC05LV0rKFwuW2EtejAtOS1dKykqKFwuW2Etel17Mix9KSQvaSkpIHsKICAgICAgICAgIGVsZW0uY2xhc3NOYW1lID0gZWxlbS5jbGFzc05hbWUgKyAnIF9oYXNfZXJyb3InOwogICAgICAgICAgbm9fZXJyb3IgPSBmYWxzZTsKICAgICAgICAgIHRvb2x0aXAgPSBjcmVhdGVfdG9vbHRpcChlbGVtLCAnUGxlYXNlIGVudGVyIGEgdmFsaWQgZW1haWwgYWRkcmVzcycpOwogICAgICAgIH0KICAgICAgfQogICAgICBpZiAobm9fZXJyb3IgJiYgL2RhdGVfZmllbGQvLnRlc3QoZWxlbS5jbGFzc05hbWUpKSB7CiAgICAgICAgaWYgKCF2YWx1ZS5tYXRjaCgvXlxkXGRcZFxkLVxkXGQtXGRcZCQvKSkgewogICAgICAgICAgZWxlbS5jbGFzc05hbWUgPSBlbGVtLmNsYXNzTmFtZSArICcgX2hhc19lcnJvcic7CiAgICAgICAgICBub19lcnJvciA9IGZhbHNlOwogICAgICAgICAgdG9vbHRpcCA9IGNyZWF0ZV90b29sdGlwKGVsZW0sICJFbnRlciBhIHZhbGlkIGRhdGUuIik7CiAgICAgICAgfQogICAgICB9CiAgICAgIHRvb2x0aXAgPyByZXNpemVfdG9vbHRpcCh0b29sdGlwKSA6IGZhbHNlOwogICAgICByZXR1cm4gbm9fZXJyb3I7CiAgICB9OwogICAgdmFyIG5lZWRzX3ZhbGlkYXRlID0gZnVuY3Rpb24oZWwpIHsKICAgICAgaWYoZWwuZ2V0QXR0cmlidXRlKCdyZXF1aXJlZCcpICE9PSBudWxsKXsKICAgICAgICByZXR1cm4gdHJ1ZQogICAgICB9CiAgICAgIGlmKGVsLm5hbWUgPT09ICdlbWFpbCcgJiYgZWwudmFsdWUgIT09ICIiKXsKICAgICAgICByZXR1cm4gdHJ1ZQogICAgICB9CgogICAgICBpZigoZWwuaWQgPT0gJ2ZpZWxkW10nIHx8IGVsLmlkID09ICdjYVsxMV1bdl0nKSAmJiBlbC5jbGFzc05hbWUuaW5jbHVkZXMoJ3Bob25lLWlucHV0LWVycm9yJykpewogICAgICAgIHJldHVybiB0cnVlCiAgICAgIH0KCiAgICAgIHJldHVybiBmYWxzZQogICAgfTsKICAgIHZhciB2YWxpZGF0ZV9mb3JtID0gZnVuY3Rpb24oZSkgewogICAgICB2YXIgZXJyID0gZm9ybV90b19zdWJtaXQucXVlcnlTZWxlY3RvcignLl9mb3JtX2Vycm9yJyksIG5vX2Vycm9yID0gdHJ1ZTsKICAgICAgaWYgKCFzdWJtaXR0ZWQpIHsKICAgICAgICBzdWJtaXR0ZWQgPSB0cnVlOwogICAgICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBhbGxJbnB1dHMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHsKICAgICAgICAgIHZhciBpbnB1dCA9IGFsbElucHV0c1tpXTsKICAgICAgICAgIGlmIChuZWVkc192YWxpZGF0ZShpbnB1dCkpIHsKICAgICAgICAgICAgaWYgKGlucHV0LnR5cGUgPT0gJ3RlbCcpIHsKICAgICAgICAgICAgICBhZGRFdmVudChpbnB1dCwgJ2JsdXInLCBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgIHRoaXMudmFsdWUgPSB0aGlzLnZhbHVlLnRyaW0oKTsKICAgICAgICAgICAgICAgIHZhbGlkYXRlX2ZpZWxkKHRoaXMsIHRydWUpOwogICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmIChpbnB1dC50eXBlID09ICd0ZXh0JyB8fCBpbnB1dC50eXBlID09ICdudW1iZXInIHx8IGlucHV0LnR5cGUgPT0gJ3RpbWUnKSB7CiAgICAgICAgICAgICAgYWRkRXZlbnQoaW5wdXQsICdibHVyJywgZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICB0aGlzLnZhbHVlID0gdGhpcy52YWx1ZS50cmltKCk7CiAgICAgICAgICAgICAgICB2YWxpZGF0ZV9maWVsZCh0aGlzLCB0cnVlKTsKICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICBhZGRFdmVudChpbnB1dCwgJ2lucHV0JywgZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICB2YWxpZGF0ZV9maWVsZCh0aGlzLCB0cnVlKTsKICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfSBlbHNlIGlmIChpbnB1dC50eXBlID09ICdyYWRpbycgfHwgaW5wdXQudHlwZSA9PSAnY2hlY2tib3gnKSB7CiAgICAgICAgICAgICAgKGZ1bmN0aW9uKGVsKSB7CiAgICAgICAgICAgICAgICB2YXIgcmFkaW9zID0gZm9ybV90b19zdWJtaXQuZWxlbWVudHNbZWwubmFtZV07CiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHJhZGlvcy5sZW5ndGg7IGkrKykgewogICAgICAgICAgICAgICAgICBhZGRFdmVudChyYWRpb3NbaV0sICdjbGljaycsIGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgIHZhbGlkYXRlX2ZpZWxkKGVsLCB0cnVlKTsKICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfSkoaW5wdXQpOwogICAgICAgICAgICB9IGVsc2UgaWYgKGlucHV0LnRhZ05hbWUgPT0gJ1NFTEVDVCcpIHsKICAgICAgICAgICAgICBhZGRFdmVudChpbnB1dCwgJ2NoYW5nZScsIGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgdmFsaWRhdGVfZmllbGQodGhpcywgdHJ1ZSk7CiAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0gZWxzZSBpZiAoaW5wdXQudHlwZSA9PSAndGV4dGFyZWEnKXsKICAgICAgICAgICAgICBhZGRFdmVudChpbnB1dCwgJ2lucHV0JywgZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICB2YWxpZGF0ZV9maWVsZCh0aGlzLCB0cnVlKTsKICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfQogICAgICByZW1vdmVfdG9vbHRpcHMoKTsKICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IGFsbElucHV0cy5sZW5ndGg7IGkgPCBsZW47IGkrKykgewogICAgICAgIHZhciBlbGVtID0gYWxsSW5wdXRzW2ldOwogICAgICAgIGlmIChuZWVkc192YWxpZGF0ZShlbGVtKSkgewogICAgICAgICAgaWYgKGVsZW0udGFnTmFtZS50b0xvd2VyQ2FzZSgpICE9PSAic2VsZWN0IikgewogICAgICAgICAgICBlbGVtLnZhbHVlID0gZWxlbS52YWx1ZS50cmltKCk7CiAgICAgICAgICB9CiAgICAgICAgICB2YWxpZGF0ZV9maWVsZChlbGVtKSA/IHRydWUgOiBub19lcnJvciA9IGZhbHNlOwogICAgICAgIH0KICAgICAgfQogICAgICBpZiAoIW5vX2Vycm9yICYmIGUpIHsKICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7CiAgICAgIH0KICAgICAgcmVzaXplX3Rvb2x0aXBzKCk7CiAgICAgIHJldHVybiBub19lcnJvcjsKICAgIH07CiAgICBhZGRFdmVudCh3aW5kb3csICdyZXNpemUnLCByZXNpemVfdG9vbHRpcHMpOwogICAgYWRkRXZlbnQod2luZG93LCAnc2Nyb2xsJywgcmVzaXplX3Rvb2x0aXBzKTsKCiAgICB2YXIgaGlkZVBob25lSW5wdXRFcnJvciA9IGZ1bmN0aW9uKGlucHV0SWQpIHsKICAgICAgdmFyIGVycm9yTWVzc2FnZSA9ICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiZXJyb3ItbXNnLSIgKyBpbnB1dElkKTsKICAgICAgdmFyIGlucHV0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoaW5wdXRJZCk7CiAgICAgIGVycm9yTWVzc2FnZS5jbGFzc0xpc3QucmVtb3ZlKCJwaG9uZS1lcnJvciIpOwogICAgICBlcnJvck1lc3NhZ2UuY2xhc3NMaXN0LmFkZCgicGhvbmUtZXJyb3ItaGlkZGVuIik7CiAgICAgIGlucHV0LmNsYXNzTGlzdC5yZW1vdmUoInBob25lLWlucHV0LWVycm9yIik7CiAgICB9OwoKICAgIHZhciBpbml0aWFsaXplUGhvbmVJbnB1dCA9IGZ1bmN0aW9uKGlucHV0LCBkZWZhdWx0Q291bnRyeSkgewogICAgICByZXR1cm4gd2luZG93LmludGxUZWxJbnB1dChpbnB1dCwgewogICAgICAgIHV0aWxzU2NyaXB0OiAiaHR0cHM6Ly91bnBrZy5jb20vaW50bC10ZWwtaW5wdXRAMTcuMC4xOC9idWlsZC9qcy91dGlscy5qcyIsCiAgICAgICAgYXV0b0hpZGVEaWFsQ29kZTogZmFsc2UsCiAgICAgICAgc2VwYXJhdGVEaWFsQ29kZTogdHJ1ZSwKICAgICAgICBpbml0aWFsQ291bnRyeTogZGVmYXVsdENvdW50cnksCiAgICAgICAgcHJlZmVycmVkQ291bnRyaWVzOiBbXQogICAgICB9KTsKICAgIH0KCiAgICB2YXIgc2V0UGhvbmVJbnB1dEV2ZW50TGlzdGVuZXJzID0gZnVuY3Rpb24oaW5wdXRJZCwgaW5wdXQsIGl0aSkgewogICAgICBpbnB1dC5hZGRFdmVudExpc3RlbmVyKCdibHVyJywgZnVuY3Rpb24oKSB7CiAgICAgICAgdmFyIGVycm9yTWVzc2FnZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJlcnJvci1tc2ctIiArIGlucHV0SWQpOwogICAgICAgIGlmIChpbnB1dC52YWx1ZS50cmltKCkpIHsKICAgICAgICAgIGlmIChpdGkuaXNWYWxpZE51bWJlcigpKSB7CiAgICAgICAgICAgIGl0aS5zZXROdW1iZXIoaXRpLmdldE51bWJlcigpKTsKICAgICAgICAgICAgaWYgKGVycm9yTWVzc2FnZS5jbGFzc0xpc3QuY29udGFpbnMoInBob25lLWVycm9yIikpewogICAgICAgICAgICAgIGhpZGVQaG9uZUlucHV0RXJyb3IoaW5wdXRJZCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHNob3dQaG9uZUlucHV0RXJyb3IoaW5wdXRJZCkKICAgICAgICAgIH0KICAgICAgICB9IGVsc2UgewogICAgICAgICAgaWYgKGVycm9yTWVzc2FnZS5jbGFzc0xpc3QuY29udGFpbnMoInBob25lLWVycm9yIikpewogICAgICAgICAgICBoaWRlUGhvbmVJbnB1dEVycm9yKGlucHV0SWQpOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSk7CgogICAgICBpbnB1dC5hZGRFdmVudExpc3RlbmVyKCJjb3VudHJ5Y2hhbmdlIiwgZnVuY3Rpb24oKSB7CiAgICAgICAgaXRpLnNldE51bWJlcignJyk7CiAgICAgIH0pOwoKICAgICAgaW5wdXQuYWRkRXZlbnRMaXN0ZW5lcigia2V5ZG93biIsIGZ1bmN0aW9uKGUpIHsKICAgICAgICB2YXIgY2hhckNvZGUgPSAoZS53aGljaCkgPyBlLndoaWNoIDogZS5rZXlDb2RlOwogICAgICAgIGlmIChjaGFyQ29kZSA+IDMxICYmIChjaGFyQ29kZSA8IDQ4IHx8IGNoYXJDb2RlID4gNTcpICYmIGNoYXJDb2RlICE9PSA4KSB7CiAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7CiAgICAgICAgfQogICAgICB9KTsKICAgIH07CgogICAgdmFyIHNob3dQaG9uZUlucHV0RXJyb3IgPSBmdW5jdGlvbihpbnB1dElkKSB7CiAgICAgIHZhciBlcnJvck1lc3NhZ2UgPSAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImVycm9yLW1zZy0iICsgaW5wdXRJZCk7CiAgICAgIHZhciBpbnB1dCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGlucHV0SWQpOwogICAgICBlcnJvck1lc3NhZ2UuY2xhc3NMaXN0LmFkZCgicGhvbmUtZXJyb3IiKTsKICAgICAgZXJyb3JNZXNzYWdlLmNsYXNzTGlzdC5yZW1vdmUoInBob25lLWVycm9yLWhpZGRlbiIpOwogICAgICBpbnB1dC5jbGFzc0xpc3QuYWRkKCJwaG9uZS1pbnB1dC1lcnJvciIpOwogICAgfTsKCgogICAgdmFyIF9mb3JtX3NlcmlhbGl6ZSA9IGZ1bmN0aW9uKGZvcm0pe2lmKCFmb3JtfHxmb3JtLm5vZGVOYW1lIT09IkZPUk0iKXtyZXR1cm4gfXZhciBpLGoscT1bXTtmb3IoaT0wO2k8Zm9ybS5lbGVtZW50cy5sZW5ndGg7aSsrKXtpZihmb3JtLmVsZW1lbnRzW2ldLm5hbWU9PT0iIil7Y29udGludWV9c3dpdGNoKGZvcm0uZWxlbWVudHNbaV0ubm9kZU5hbWUpe2Nhc2UiSU5QVVQiOnN3aXRjaChmb3JtLmVsZW1lbnRzW2ldLnR5cGUpe2Nhc2UidGVsIjpxLnB1c2goZm9ybS5lbGVtZW50c1tpXS5uYW1lKyI9IitlbmNvZGVVUklDb21wb25lbnQoZm9ybS5lbGVtZW50c1tpXS5wcmV2aW91c1NpYmxpbmcucXVlcnlTZWxlY3RvcignZGl2Lml0aV9fc2VsZWN0ZWQtZGlhbC1jb2RlJykuaW5uZXJUZXh0KStlbmNvZGVVUklDb21wb25lbnQoIiAiKStlbmNvZGVVUklDb21wb25lbnQoZm9ybS5lbGVtZW50c1tpXS52YWx1ZSkpO2JyZWFrO2Nhc2UidGV4dCI6Y2FzZSJudW1iZXIiOmNhc2UiZGF0ZSI6Y2FzZSJ0aW1lIjpjYXNlImhpZGRlbiI6Y2FzZSJwYXNzd29yZCI6Y2FzZSJidXR0b24iOmNhc2UicmVzZXQiOmNhc2Uic3VibWl0IjpxLnB1c2goZm9ybS5lbGVtZW50c1tpXS5uYW1lKyI9IitlbmNvZGVVUklDb21wb25lbnQoZm9ybS5lbGVtZW50c1tpXS52YWx1ZSkpO2JyZWFrO2Nhc2UiY2hlY2tib3giOmNhc2UicmFkaW8iOmlmKGZvcm0uZWxlbWVudHNbaV0uY2hlY2tlZCl7cS5wdXNoKGZvcm0uZWxlbWVudHNbaV0ubmFtZSsiPSIrZW5jb2RlVVJJQ29tcG9uZW50KGZvcm0uZWxlbWVudHNbaV0udmFsdWUpKX1icmVhaztjYXNlImZpbGUiOmJyZWFrfWJyZWFrO2Nhc2UiVEVYVEFSRUEiOnEucHVzaChmb3JtLmVsZW1lbnRzW2ldLm5hbWUrIj0iK2VuY29kZVVSSUNvbXBvbmVudChmb3JtLmVsZW1lbnRzW2ldLnZhbHVlKSk7YnJlYWs7Y2FzZSJTRUxFQ1QiOnN3aXRjaChmb3JtLmVsZW1lbnRzW2ldLnR5cGUpe2Nhc2Uic2VsZWN0LW9uZSI6cS5wdXNoKGZvcm0uZWxlbWVudHNbaV0ubmFtZSsiPSIrZW5jb2RlVVJJQ29tcG9uZW50KGZvcm0uZWxlbWVudHNbaV0udmFsdWUpKTticmVhaztjYXNlInNlbGVjdC1tdWx0aXBsZSI6Zm9yKGo9MDtqPGZvcm0uZWxlbWVudHNbaV0ub3B0aW9ucy5sZW5ndGg7aisrKXtpZihmb3JtLmVsZW1lbnRzW2ldLm9wdGlvbnNbal0uc2VsZWN0ZWQpe3EucHVzaChmb3JtLmVsZW1lbnRzW2ldLm5hbWUrIj0iK2VuY29kZVVSSUNvbXBvbmVudChmb3JtLmVsZW1lbnRzW2ldLm9wdGlvbnNbal0udmFsdWUpKX19YnJlYWt9YnJlYWs7Y2FzZSJCVVRUT04iOnN3aXRjaChmb3JtLmVsZW1lbnRzW2ldLnR5cGUpe2Nhc2UicmVzZXQiOmNhc2Uic3VibWl0IjpjYXNlImJ1dHRvbiI6cS5wdXNoKGZvcm0uZWxlbWVudHNbaV0ubmFtZSsiPSIrZW5jb2RlVVJJQ29tcG9uZW50KGZvcm0uZWxlbWVudHNbaV0udmFsdWUpKTticmVha31icmVha319cmV0dXJuIHEuam9pbigiJiIpfTsKICAgIHZhciBmb3JtX3N1Ym1pdCA9IGZ1bmN0aW9uKGUpIHsKICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpOwogICAgICBpZiAodmFsaWRhdGVfZm9ybSgpKSB7CiAgICAgICAgLy8gdXNlIHRoaXMgdHJpY2sgdG8gZ2V0IHRoZSBzdWJtaXQgYnV0dG9uICYgZGlzYWJsZSBpdCB1c2luZyBwbGFpbiBqYXZhc2NyaXB0CiAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI19mb3JtXzIzX3N1Ym1pdCcpLmRpc2FibGVkID0gdHJ1ZTsKICAgICAgICB2YXIgc2VyaWFsaXplZCA9IF9mb3JtX3NlcmlhbGl6ZShkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnX2Zvcm1fMjNfJykpLnJlcGxhY2UoLyUwQS9nLCAnXFxuJyk7CiAgICAgICAgdmFyIGVyciA9IGZvcm1fdG9fc3VibWl0LnF1ZXJ5U2VsZWN0b3IoJy5fZm9ybV9lcnJvcicpOwogICAgICAgIGVyciA/IGVyci5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGVycikgOiBmYWxzZTsKICAgICAgICBfbG9hZF9zY3JpcHQoJ2h0dHBzOi8vaXNvMjcyLmFjdGl2ZWhvc3RlZC5jb20vcHJvYy5waHA/JyArIHNlcmlhbGl6ZWQgKyAnJmpzb25wPXRydWUnKTsKICAgICAgfQogICAgICByZXR1cm4gZmFsc2U7CiAgICB9OwogICAgYWRkRXZlbnQoZm9ybV90b19zdWJtaXQsICdzdWJtaXQnLCBmb3JtX3N1Ym1pdCk7CiAgfSkoKTsKCjwvc2NyaXB0PjxwIGNsYXNzPSJ0ZXh0LXhzIj5UbyBsZWFybiBob3cgeW91ciBkYXRhIHdpbGwgYmUgdXNlZCwgcGxlYXNlIHNlZSBvdXIgPGEgaHJlZj0iL3ByaXZhY3kuaHRtbCIgdGl0bGU9InByaXZhY3ktYW5kLWNvcHlyaWdodCI+cHJpdmFjeSBub3RpY2U8L2E+LjwvcD48L2Rpdj48L2Rpdj48L2Rpdj4KICAgICAgICA8ZGl2IGNsYXNzPSJmb290ZXItc29jaWFsIGNsZWFyZml4Ij4KICAgICAgICAgIDx1bCBpdGVtc2NvcGUgaXRlbXR5cGU9Imh0dHBzOi8vc2NoZW1hLm9yZy9Pcmdhbml6YXRpb24iPgogICAgICAgICAgICA8bGluayBpdGVtcHJvcD0idXJsIiBocmVmPSJodHRwczovL3d3dy5pc28ub3JnLyI+CiAgICAgICAgICAgIDxsaT48YSBpdGVtcHJvcD0ic2FtZUFzIiB0YXJnZXQ9Il9ibGFuayIgcmVsPSJub29wZW5lciIgaHJlZj0iaHR0cHM6Ly93d3cubGlua2VkaW4uY29tL2NvbXBhbnkvaXNvc3RhbmRhcmRzIiB0aXRsZT0iTGlua2VkaW4iPjxpIGNsYXNzPSJiaS1saW5rZWRpbiI+PC9pPjwvYT48L2xpPgogICAgICAgICAgICA8bGk+PGEgaXRlbXByb3A9InNhbWVBcyIgdGFyZ2V0PSJfYmxhbmsiIHJlbD0ibm9vcGVuZXIiIGhyZWY9Imh0dHBzOi8vdHdpdHRlci5jb20vaXNvc3RhbmRhcmRzIiB0aXRsZT0iVHdpdHRlciI+PGkgY2xhc3M9ImJpLXR3aXR0ZXIiPjwvaT48L2E+PC9saT4KICAgICAgICAgICAgPGxpPjxhIGl0ZW1wcm9wPSJzYW1lQXMiIHRhcmdldD0iX2JsYW5rIiByZWw9Im5vb3BlbmVyIiBocmVmPSJodHRwczovL3d3dy5mYWNlYm9vay5jb20vaXNvc3RhbmRhcmRzIiB0aXRsZT0iRmFjZWJvb2siPjxpIGNsYXNzPSJiaS1mYWNlYm9vayI+PC9pPjwvYT48L2xpPgogICAgICAgICAgICA8bGk+PGEgaXRlbXByb3A9InNhbWVBcyIgdGFyZ2V0PSJfYmxhbmsiIHJlbD0ibm9vcGVuZXIiIGhyZWY9Imh0dHBzOi8vd3d3Lmluc3RhZ3JhbS5jb20vaXNvc3RhbmRhcmRzIiB0aXRsZT0iSW5zdGFncmFtIj48aSBjbGFzcz0iYmktaW5zdGFncmFtIj48L2k+PC9hPjwvbGk+CiAgICAgICAgICAgIDxsaT48YSBpdGVtcHJvcD0ic2FtZUFzIiB0YXJnZXQ9Il9ibGFuayIgcmVsPSJub29wZW5lciIgaHJlZj0iaHR0cHM6Ly93d3cueW91dHViZS5jb20vSVNPIiB0aXRsZT0iWW91VHViZSI+PGkgY2xhc3M9ImJpLXlvdXR1YmUiPjwvaT48L2E+PC9saT4KICAgICAgICAgICAgPGxpPjxhIGl0ZW1wcm9wPSJzYW1lQXMiIHRhcmdldD0iX2JsYW5rIiByZWw9Im5vb3BlbmVyIiBocmVmPSJodHRwczovL3d3dy5mbGlja3IuY29tL3Bob3Rvcy9pc29zdGFuZGFyZHMiIHRpdGxlPSJGbGlja3IiPjxpIGNsYXNzPSJiaS1mbGlja3IiPjwvaT48L2E+PC9saT4KICAgICAgICAgIDwvdWw+CiAgICAgICAgPC9kaXY+CiAgICAgICAgPHAgY2xhc3M9ImRpc3BsYXktNSBvcGFjaXR5LTEwMCI+TWFraW5nIGxpdmVzIDxzdHJvbmc+PGVtPmVhc2llcjwvZW0+PC9zdHJvbmc+LCA8c3Ryb25nPjxlbT5zYWZlcjwvZW0+PC9zdHJvbmc+IGFuZCA8c3Ryb25nPjxlbT5iZXR0ZXI8L2VtPjwvc3Ryb25nPi48L3A+CiAgICAgICAgPGRpdiBjbGFzcz0icm93Ij4KICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC04IGNvbC1tZC1vZmZzZXQtMiBwdWxsLWxlZnQiPgogICAgICAgICAgICA8cCBjbGFzcz0idGV4dC14cyI+V2UgYXJlIGNvbW1pdHRlZCB0byBlbnN1cmluZyB0aGF0IG91ciB3ZWJzaXRlIGlzIGFjY2Vzc2libGUgdG8gZXZlcnlvbmUuIElmIHlvdSBoYXZlIGFueSBxdWVzdGlvbnMgb3Igc3VnZ2VzdGlvbnMgcmVnYXJkaW5nIHRoZSBhY2Nlc3NpYmlsaXR5IG9mIHRoaXMgc2l0ZSwgcGxlYXNlIDxhIGhyZWY9Im1haWx0bzp3ZWJtYXN0ZXJAaXNvLm9yZz9zdWJqZWN0PUFjY2Vzc2liaWxpdHkiIHN0eWxlPSJ3aGl0ZS1zcGFjZTogbm93cmFwIj5jb250YWN0IHVzPC9hPi48L3A+CiAgICAgICAgICAgIDxwIGNsYXNzPSJ0ZXh0LXNtIj48YSBocmVmPSIjY29weXJpZ2h0IiB0YXJnZXQ9Il9zZWxmIiBkYXRhLWJzLXRvZ2dsZT0iY29sbGFwc2UiIGFyaWEtZXhwYW5kZWQ9ImZhbHNlIiBhcmlhLWNvbnRyb2xzPSJjb3B5cmlnaHQiPsKpIEFsbCBSaWdodHMgUmVzZXJ2ZWQ8L2E+IDxzcGFuIGlkPSJjb3B5cmlnaHQiIGNsYXNzPSJjb2xsYXBzZSI+QWxsIElTTyBwdWJsaWNhdGlvbnMgYW5kIG1hdGVyaWFscyBhcmUgcHJvdGVjdGVkIGJ5IGNvcHlyaWdodCBhbmQgYXJlIHN1YmplY3QgdG8gdGhlIHVzZXLigJlzIGFjY2VwdGFuY2Ugb2YgSVNP4oCZcyBjb25kaXRpb25zIG9mIGNvcHlyaWdodC4gQW55IHVzZSwgaW5jbHVkaW5nIHJlcHJvZHVjdGlvbiByZXF1aXJlcyBvdXIgd3JpdHRlbiBwZXJtaXNzaW9uLiBBbGwgY29weXJpZ2h0IHJlcXVlc3RzIHNob3VsZCBiZSBhZGRyZXNzZWQgdG8gPGEgaHJlZj0ibWFpbHRvOmNvcHlyaWdodEBpc28ub3JnIj5jb3B5cmlnaHRAaXNvLm9yZzwvYT4uPC9zcGFuPjwvcD4KICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgICA8L2Rpdj4KICAgICAgPGRpdiBjbGFzcz0idG9wYmFyIj4KICAgICAgICA8ZGl2IGNsYXNzPSJ0b3BiYXItY29udGVudCI+CiAgICAgICAgICA8YSBjbGFzcz0ibG9nbyBpc29sb2dvIGxvZ28teHMgdGhlbWUtcmVkIHBvd2VyZWRieSBwYWdlLXNjcm9sbCBsb2dvLXNjcm9sbFRvcCIgaHJlZj0iI3BhZ2UtdG9wIiB0aXRsZT0iU2Nyb2xsIHRvIHRvcCI+PC9hPgogICAgICAgICAgPGRpdiBjbGFzcz0icG93ZXJlZGJ5LXR4dCI+UG93ZXJlZCBieTwvZGl2PgogICAgICAgIDwvZGl2PgogICAgICA8L2Rpdj4KICAgIDwvZm9vdGVyPgogICAgPC9ib2R5Pgo8L2h0bWw+
  recorded_at: Mon, 15 Jan 2024 20:46:35 GMT
- request:
    method: get
    uri: https://www.iso.org/fr/standard/67039.html
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - www.iso.org
  response:
    status:
      code: 200
      message: ''
    headers:
      Expires:
      - Wed, 09 May 1979 05:30:00 GMT
      Cache-Control:
      - no-cache, no-store, must-revalidate, proxy-revalidate, max-age=0
      Pragma:
      - no-cache
      Set-Cookie:
      - BIGipServerpool_prod_iso_www-jahia=713576842.36895.0000; path=/; Httponly;
        Secure
      - JSESSIONID=CE5540F2C641CC080B47C53315E9DDAF; Path=/; Secure; HttpOnly
      Vary:
      - accept-encoding
      Content-Type:
      - text/html;charset=UTF-8
      Transfer-Encoding:
      - chunked
      Date:
      - Mon, 15 Jan 2024 20:46:35 GMT
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 15 Jan 2024 20:46:36 GMT
recorded_with: VCR 6.2.0
