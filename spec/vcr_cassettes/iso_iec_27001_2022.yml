---
http_interactions:
- request:
    method: post
    uri: https://jcl49wv5ar-dsn.algolia.net/1/indexes/all_en/query
    body:
      encoding: UTF-8
      string: '{"query":"ISO/IEC 27001","hitsPerPage":100,"filters":"category:standard"}'
    headers:
      User-Agent:
      - Algolia for Ruby (2.3.1), Ruby (3.2.0)
      X-Algolia-Api-Key:
      - dd1b9e1ab383f4d4817d29cd5e96d3f0
      X-Algolia-Application-Id:
      - JCL49WV5AR
      Content-Type:
      - application/json; charset=utf-8
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      Connection:
      - keep-alive
      Keep-Alive:
      - '30'
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx
      Date:
      - Thu, 18 May 2023 16:39:52 GMT
      Content-Type:
      - application/json; charset=UTF-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      X-Alg-Pt:
      - '3'
      Accept-Encoding:
      - deflate, gzip
      Cache-Control:
      - no-store
      Access-Control-Allow-Origin:
      - "*"
      Timing-Allow-Origin:
      - "*"
      X-Content-Type-Options:
      - nosniff
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      Content-Disposition:
      - inline; filename=a.txt
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Thu, 18 May 2023 16:39:52 GMT
- request:
    method: get
    uri: https://www.iso.org/contents/data/standard/08/28/82875.html
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - www.iso.org
  response:
    status:
      code: 301
      message: ''
    headers:
      Expires:
      - Wed, 09 May 1979 05:30:00 GMT
      Cache-Control:
      - no-cache, no-store, must-revalidate, proxy-revalidate, max-age=0
      Pragma:
      - no-cache
      Set-Cookie:
      - BIGipServerpool_prod_iso_www-jahia=747131274.36895.0000; path=/; Httponly;
        Secure
      - JSESSIONID=743D28157399A8C670D6F6AE0D379F1A; Path=/; Secure; HttpOnly
      Location:
      - "/standard/27001"
      Content-Length:
      - '0'
      Date:
      - Thu, 18 May 2023 16:39:54 GMT
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains
    body:
      encoding: UTF-8
      string: ''
  recorded_at: Thu, 18 May 2023 16:39:54 GMT
- request:
    method: get
    uri: https://www.iso.org/standard/27001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - www.iso.org
  response:
    status:
      code: 200
      message: ''
    headers:
      Expires:
      - Wed, 09 May 1979 05:30:00 GMT
      Cache-Control:
      - no-cache, no-store, must-revalidate, proxy-revalidate, max-age=0
      Pragma:
      - no-cache
      Set-Cookie:
      - BIGipServerpool_prod_iso_www-jahia=730354058.36895.0000; path=/; Httponly;
        Secure
      - JSESSIONID=2BDCC984E0238EEE53E7B6F7972912D9; Path=/; Secure; HttpOnly
      Vary:
      - accept-encoding
      Content-Type:
      - text/html;charset=UTF-8
      Transfer-Encoding:
      - chunked
      Date:
      - Thu, 18 May 2023 16:39:54 GMT
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Thu, 18 May 2023 16:39:55 GMT
- request:
    method: get
    uri: https://www.iso.org/fr/standard/27001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - www.iso.org
  response:
    status:
      code: 200
      message: ''
    headers:
      Expires:
      - Wed, 09 May 1979 05:30:00 GMT
      Cache-Control:
      - no-cache, no-store, must-revalidate, proxy-revalidate, max-age=0
      Pragma:
      - no-cache
      Set-Cookie:
      - BIGipServerpool_prod_iso_www-jahia=747131274.36895.0000; path=/; Httponly;
        Secure
      - JSESSIONID=B74B0BF2041BB8671CCC866623259275; Path=/; Secure; HttpOnly
      Vary:
      - accept-encoding
      Content-Type:
      - text/html;charset=UTF-8
      Transfer-Encoding:
      - chunked
      Date:
      - Thu, 18 May 2023 16:39:55 GMT
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Thu, 18 May 2023 16:39:56 GMT
recorded_with: VCR 6.1.0
