---
http_interactions:
- request:
    method: post
    uri: https://jcl49wv5ar-dsn.algolia.net/1/indexes/all_en/query
    body:
      encoding: UTF-8
      string: '{"query":"ISO/IEC 10646","hitsPerPage":100,"filters":"category:standard"}'
    headers:
      User-Agent:
      - Algolia for Ruby (2.3.1), Ruby (3.0.0)
      X-Algolia-Api-Key:
      - dd1b9e1ab383f4d4817d29cd5e96d3f0
      X-Algolia-Application-Id:
      - JCL49WV5AR
      Content-Type:
      - application/json; charset=utf-8
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      Connection:
      - keep-alive
      Keep-Alive:
      - '30'
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx
      Date:
      - Thu, 02 Feb 2023 16:15:31 GMT
      Content-Type:
      - application/json; charset=UTF-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      X-Alg-Pt:
      - '1'
      Accept-Encoding:
      - deflate, gzip
      Cache-Control:
      - no-store
      Access-Control-Allow-Origin:
      - "*"
      Timing-Allow-Origin:
      - "*"
      X-Content-Type-Options:
      - nosniff
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      Content-Disposition:
      - inline; filename=a.txt
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Thu, 02 Feb 2023 16:15:31 GMT
- request:
    method: get
    uri: https://www.iso.org/contents/data/standard/07/68/76835.html
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - www.iso.org
  response:
    status:
      code: 301
      message: ''
    headers:
      Expires:
      - Wed, 09 May 1979 05:30:00 GMT
      Cache-Control:
      - no-cache, no-store, must-revalidate, proxy-revalidate, max-age=0
      Pragma:
      - no-cache
      Set-Cookie:
      - BIGipServerpool_prod_iso_www-jahia=730354058.36895.0000; path=/; Httponly;
        Secure
      - JSESSIONID=059E0E486958ADC79A4BFF3A06DBB34F; Path=/; Secure; HttpOnly
      Location:
      - "/standard/76835.html"
      Content-Length:
      - '0'
      Date:
      - Thu, 02 Feb 2023 16:15:41 GMT
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains
    body:
      encoding: UTF-8
      string: ''
  recorded_at: Thu, 02 Feb 2023 16:15:41 GMT
- request:
    method: get
    uri: https://www.iso.org/standard/76835.html
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - www.iso.org
  response:
    status:
      code: 200
      message: ''
    headers:
      Expires:
      - Wed, 09 May 1979 05:30:00 GMT
      Cache-Control:
      - no-cache, no-store, must-revalidate, proxy-revalidate, max-age=0
      Pragma:
      - no-cache
      Set-Cookie:
      - BIGipServerpool_prod_iso_www-jahia=713576842.36895.0000; path=/; Httponly;
        Secure
      - JSESSIONID=416DCFCD0E7C37255B80600A1EC29CA9; Path=/; Secure; HttpOnly
      Vary:
      - accept-encoding
      Content-Type:
      - text/html;charset=UTF-8
      Transfer-Encoding:
      - chunked
      Date:
      - Thu, 02 Feb 2023 16:15:41 GMT
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        PCFET0NUWVBFIGh0bWw+CjxodG1sIGxhbmc9ImVuIj4KICA8aGVhZD48bGluayByZWw9ImNhbm9uaWNhbCIgaHJlZj0iaHR0cHM6Ly93d3cuaXNvLm9yZy9zdGFuZGFyZC83NjgzNS5odG1sIiAvPgo8bGluayByZWw9ImFsdGVybmF0ZSIgaHJlZmxhbmc9ImZyIiBocmVmPSJodHRwczovL3d3dy5pc28ub3JnL2ZyL3N0YW5kYXJkLzc2ODM1Lmh0bWwiIC8+CiAgICA8c2NyaXB0PgogICAgICBkYXRhTGF5ZXIgPSBbewogICAgICAgICdwYWdlVHlwZSc6ICdpdHM6c3RhbmRhcmQnLAogICAgICAgICdwYWdlTGFuZ3VhZ2UnOiAnZW4nCiAgICAgIH1dOwogICAgPC9zY3JpcHQ+CgogICAgPCEtLSBPbmVUcnVzdCBDb29raWVzIENvbnNlbnQgTm90aWNlIHN0YXJ0IGZvciB3d3cuaXNvLm9yZyAtLT4KPCEtLSA8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCIgc3JjPSJodHRwczovL2Nkbi5jb29raWVsYXcub3JnL2NvbnNlbnQvMDk2NDQ5M2EtYjM5Ni00Njg1LTkxNTAtMThmNzQ5YWJmYmZiL090QXV0b0Jsb2NrLmpzIiA+PC9zY3JpcHQ+IC0tPgo8c2NyaXB0IHNyYz0iaHR0cHM6Ly9jZG4uY29va2llbGF3Lm9yZy9zY3JpcHR0ZW1wbGF0ZXMvb3RTREtTdHViLmpzIiBkYXRhLWRvY3VtZW50LWxhbmd1YWdlPSJ0cnVlIiB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIGNoYXJzZXQ9IlVURi04IiBkYXRhLWRvbWFpbi1zY3JpcHQ9IjA5NjQ0OTNhLWIzOTYtNDY4NS05MTUwLTE4Zjc0OWFiZmJmYiIgZGVmZXIgPjwvc2NyaXB0Pgo8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+Ci8vIGZ1bmN0aW9uIHRvIHB1bGwgY29va2llIHZhbHVlCgp3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsIGZ1bmN0aW9uKCkgewogIChmdW5jdGlvbiBPcHRhbm9uV3JhcHBlcigpIHsKCiAgICAgIHZhciBPQUJDY29va2llTmFtZSA9ICJPcHRhbm9uQWxlcnRCb3hDbG9zZWQiOwogICAgICB2YXIgYmFubmVyQWNjZXB0QnRuID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoIm9uZXRydXN0LWFjY2VwdC1idG4taGFuZGxlciIpOwogICAgICB2YXIgcGNBbGxvd0FsbEJ0biA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJhY2NlcHQtcmVjb21tZW5kZWQtYnRuLWhhbmRsZXIiKTsKICAgICAgdmFyIHBjU2F2ZUJ0biA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoInNhdmUtcHJlZmVyZW5jZS1idG4taGFuZGxlciBvbmV0cnVzdC1jbG9zZS1idG4taGFuZGxlciBidXR0b24tdGhlbWUiKVswXTsKCiAgICAgIHZhciB2YWx1ZSA9ICI7ICIgKyBkb2N1bWVudC5jb29raWU7CiAgICAgIHZhciBwYXJ0cyA9IHZhbHVlLnNwbGl0KCI7ICIgKyBPQUJDY29va2llTmFtZSArICI9Iik7CiAgICAgIGlmIChwYXJ0cy5sZW5ndGggPT0gMikgewogICAgICAgIHZhciBPQUJDY29va2llID0gcGFydHMucG9wKCkuc3BsaXQoIjsiKS5zaGlmdCgpOwogICAgICB9CgogICAgICAvLyBJRiBsb2dpYyBuZWVkZWQgaGVyZSBiZWNhdXNlIG90LWJhbm5lci1zZGsgRElWIGlzIG5vdCBpbmplY3RlZCBvbiBwYWdlIGxvYWRzIGlmIGJhbm5lciBpcyBub3QgZXhwb3NlZAoKICAgICAgaWYgKCFPQUJDY29va2llICYmIGJhbm5lckFjY2VwdEJ0bikgewogICAgICAgICAgYmFubmVyQWNjZXB0QnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgY29uc29sZS5sb2coIkFsbG93ZWQgYWxsIHZpYSBCYW5uZXIiKTsKICAgICAgICAgICAgICBsb2NhdGlvbi5yZWxvYWQoKTsKICAgICAgICAgIH0pOwogICAgICB9CiAgICAgIGlmIChwY0FsbG93QWxsQnRuKSB7CiAgICAgICAgICBwY0FsbG93QWxsQnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgY29uc29sZS5sb2coIkFsbG93ZWQgYWxsIHZpYSBQcmVmZXJlbmNlIENlbnRlciIpOwogICAgICAgICAgICAgIGxvY2F0aW9uLnJlbG9hZCgpOwogICAgICAgICAgfSk7CiAgICAgIH0KICAgICAgaWYgKHBjU2F2ZUJ0bikgewogICAgICAgIHBjU2F2ZUJ0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uKCkgewogICAgICAgICAgICBjb25zb2xlLmxvZygiU2V0IGN1c3RvbSBzZXR0aW5ncyB2aWEgUHJlZmVyZW5jZSBDZW50ZXIiKTsKICAgICAgICAgICAgbG9jYXRpb24ucmVsb2FkKCk7CiAgICAgICAgfSk7CiAgICAgIH0KICB9KShqUXVlcnkpOwp9KTsKPC9zY3JpcHQ+CjwhLS0gT25lVHJ1c3QgQ29va2llcyBDb25zZW50IE5vdGljZSBlbmQgZm9yIHd3dy5pc28ub3JnIC0tPgoKPCEtLSBIb3RqYXIgVHJhY2tpbmcgQ29kZSBmb3Igd3d3Lmlzby5vcmcgLS0+CjwhLS0KPHNjcmlwdCB0eXBlPSJ0ZXh0L3BsYWluIiBjbGFzcz0ib3B0YW5vbi1jYXRlZ29yeS1DMDAwMyI+CiAgICAoZnVuY3Rpb24oaCxvLHQsaixhLHIpewogICAgICAgIGguaGo9aC5oanx8ZnVuY3Rpb24oKXsoaC5oai5xPWguaGoucXx8W10pLnB1c2goYXJndW1lbnRzKX07CiAgICAgICAgaC5faGpTZXR0aW5ncz17aGppZDoyNTEwODA1LGhqc3Y6Nn07CiAgICAgICAgYT1vLmdldEVsZW1lbnRzQnlUYWdOYW1lKCdoZWFkJylbMF07CiAgICAgICAgcj1vLmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpO3IuYXN5bmM9MTsKICAgICAgICByLnNyYz10K2guX2hqU2V0dGluZ3MuaGppZCtqK2guX2hqU2V0dGluZ3MuaGpzdjsKICAgICAgICBhLmFwcGVuZENoaWxkKHIpOwogICAgfSkod2luZG93LGRvY3VtZW50LCdodHRwczovL3N0YXRpYy5ob3RqYXIuY29tL2MvaG90amFyLScsJy5qcz9zdj0nKTsKPC9zY3JpcHQ+Ci0tPgo8bWV0YSBuYW1lPSJnb29nbGUtc2l0ZS12ZXJpZmljYXRpb24iIGNvbnRlbnQ9ImExR0l3MnVydVpoSGV4cUk4WHRYc19TX0FKbzFQcnBYWlhlQk9JVmlkRUUiIC8+PCEtLSBHb29nbGUgVGFnIE1hbmFnZXIgLS0+CiAgICAgIDxzY3JpcHQ+KGZ1bmN0aW9uKHcsZCxzLGwsaSl7d1tsXT13W2xdfHxbXTt3W2xdLnB1c2goeydndG0uc3RhcnQnOgogICAgICAgICAgbmV3IERhdGUoKS5nZXRUaW1lKCksZXZlbnQ6J2d0bS5qcyd9KTt2YXIgZj1kLmdldEVsZW1lbnRzQnlUYWdOYW1lKHMpWzBdLAogICAgICAgIGo9ZC5jcmVhdGVFbGVtZW50KHMpLGRsPWwhPSdkYXRhTGF5ZXInPycmbD0nK2w6Jyc7ai5hc3luYz10cnVlO2ouc3JjPQogICAgICAgICdodHRwczovL3d3dy5nb29nbGV0YWdtYW5hZ2VyLmNvbS9ndG0uanM/aWQ9JytpK2RsO2YucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoaixmKTsKICAgICAgfSkod2luZG93LGRvY3VtZW50LCdzY3JpcHQnLCdkYXRhTGF5ZXInLCdHVE0tVEZHS1FRQicpOzwvc2NyaXB0PgogICAgICA8IS0tIEVuZCBHb29nbGUgVGFnIE1hbmFnZXIgLS0+CiAgICA8bWV0YSBjaGFyc2V0PSJ1dGYtOCI+CiAgICA8bWV0YSBuYW1lPSJ2aWV3cG9ydCIgY29udGVudD0id2lkdGg9ZGV2aWNlLXdpZHRoLCBpbml0aWFsLXNjYWxlPTEiPgogICAgPG1ldGEgaHR0cC1lcXVpdj0iWC1VQS1Db21wYXRpYmxlIiBjb250ZW50PSJJRT1lZGdlIj4KICAgIDx0aXRsZT5JU08gLSBJU08vSUVDIDEwNjQ2OjIwMjAgLSBJbmZvcm1hdGlvbiB0ZWNobm9sb2d5IOKAlCBVbml2ZXJzYWwgY29kZWQgY2hhcmFjdGVyIHNldCAoVUNTKTwvdGl0bGU+CgogICAgPGxpbmsgcmVsPSJwcmVsb2FkIiBhcz0iZm9udCIgdHlwZT0iZm9udC93b2ZmMiIgaHJlZj0iL21vZHVsZXMvaXNvb3JnLXRlbXBsYXRlL2ZvbnRzL2ludGVyL0ludGVyLnZhci53b2ZmMj92PTMuMTkiIGNyb3Nzb3JpZ2luLz4KCiAgICA8bGluayByZWw9InN0eWxlc2hlZXQiIGhyZWY9Ii9tb2R1bGVzL2lzb29yZy10ZW1wbGF0ZS9jc3Mvd29vZC5ib290c3RyYXAubWluLmNzcyIgbWVkaWE9InNjcmVlbixwcmludCxoYW5kaGVsZCIgdHlwZT0idGV4dC9jc3MiLz4KICAgIDxsaW5rIHJlbD0icHJlbG9hZCIgaHJlZj0iL21vZHVsZXMvaXNvb3JnLXRlbXBsYXRlL2Nzcy93b29kLmlzby5taW4uY3NzIiBhcz0ic3R5bGUiIG9ubG9hZD0idGhpcy5vbmxvYWQ9bnVsbDt0aGlzLnJlbD0nc3R5bGVzaGVldCciPgoKICAgIAoKPGxpbmsgcmVsPSJjYW5vbmljYWwiIGhyZWY9Imh0dHBzOi8vd3d3Lmlzby5vcmcvc3RhbmRhcmQvNzY4MzUuaHRtbCIgLz4KCiAgICA8IS0tIHN0YXJ0IGZhdmljb25zIC0tPgogICAgPGxpbmsgcmVsPSJhcHBsZS10b3VjaC1pY29uLXByZWNvbXBvc2VkIiBocmVmPSIvbW9kdWxlcy9pc29vcmctdGVtcGxhdGUvaW1nL2lzby9mYXZpY29uL3JlZC9hcHBsZS10b3VjaC1pY29uLTE1MngxNTItcHJlY29tcG9zZWQucG5nIj4KICAgIDxsaW5rIHJlbD0ic2hvcnRjdXQgaWNvbiIgaHJlZj0iL21vZHVsZXMvaXNvb3JnLXRlbXBsYXRlL2ltZy9pc28vZmF2aWNvbi9yZWQvZmF2aWNvbi5pY28iPgogICAgPG1ldGEgbmFtZT0ibXNhcHBsaWNhdGlvbi1UaWxlQ29sb3IiIGNvbnRlbnQ9IiNlZWUiPgogICAgPG1ldGEgbmFtZT0ibXNhcHBsaWNhdGlvbi1UaWxlSW1hZ2UiIGNvbnRlbnQ9Ii9tb2R1bGVzL2lzb29yZy10ZW1wbGF0ZS9pbWcvaXNvL2Zhdmljb24vcmVkL21zdGlsZS0xNDR4MTQ0LnBuZyI+CiAgICA8IS0tIGVuZCBmYXZpY29ucyAtLT4KCiAgICA8bWV0YSBuYW1lPSJ0aGVtZS1jb2xvciIgY29udGVudD0iIzMzMyI+CgogIAo8c2NyaXB0IHR5cGU9ImFwcGxpY2F0aW9uL2pzb24iIGlkPSJqYWhpYS1kYXRhLWN0eCI+eyJjb250ZXh0UGF0aCI6IiIsImxhbmciOiJlbiIsInVpbGFuZyI6ImVuIiwic2l0ZVV1aWQiOiI0MzkxNDZmOC02NzdlLTRkZGUtYjZjNi1iNjkyYjc1MzRmNTIiLCJ3Y2FnIjpmYWxzZSwiY2tlQ2ZnIjoiIn08L3NjcmlwdD4KPHNjcmlwdCB0eXBlPSJhcHBsaWNhdGlvbi9qc29uIiBpZD0iamFoaWEtZGF0YS1jayI+eyJwYXRoIjoiL21vZHVsZXMvY2tlZGl0b3IvamF2YXNjcmlwdC8iLCJsbmciOiJlbl9VUyJ9PC9zY3JpcHQ+CjxzY3JpcHQgc3JjPSIvamF2YXNjcmlwdC9pbml0SmFoaWFDb250ZXh0LmpzIj48L3NjcmlwdD4KPHNjcmlwdCBpZD0ic3RhdGljQXNzZXRKYXZhc2NyaXB0MCIgc3JjPSIvbW9kdWxlcy9pc29vcmctdGVtcGxhdGUvamF2YXNjcmlwdC93b29kLmZ1bGwubWluLmpzPzE2NzA4NDA5MzcwNTQiICBkZWZlcj48L3NjcmlwdD4KPHNjcmlwdCBpZD0ic3RhdGljQXNzZXRKYXZhc2NyaXB0MSIgc3JjPSIvbW9kdWxlcy9pc29vcmctdGVtcGxhdGUvamF2YXNjcmlwdC9jdXN0b20uanM/MTY3MDg0MDkzNzA1NCIgIGRlZmVyPjwvc2NyaXB0Pgo8c2NyaXB0IHNyYz0iL21vZHVsZXMvaXNvLWphaGlhLXNlcnZpY2UtbW9kdWxlL2phdmFzY3JpcHQvY2F0YWxvZ3VlLmpzIiBkZWZlciA+PC9zY3JpcHQ+Cgo8bWV0YSBuYW1lPSJjYXRlZ29yeSIgY29udGVudD0icCIgLz4KICA8bWV0YSBuYW1lPSJwdWJkYXRlIiBjb250ZW50PSIyMDIwMTIyMSIgLz4KICAKPCEtLSBUd2l0dGVyIENhcmQgZGF0YSAtLT4KICA8bWV0YSBuYW1lPSJ0d2l0dGVyOnNpdGUiIGNvbnRlbnQ9IkBpc29zdGFuZGFyZHMiIC8+CgogIDwhLS0gT3BlbiBHcmFwaCBkYXRhIC0tPgogIDxtZXRhIHByb3BlcnR5PSJvZzpzaXRlX25hbWUiIGNvbnRlbnQ9IklTTyIgLz4KICA8bWV0YSBwcm9wZXJ0eT0ib2c6dXJsIiBjb250ZW50PSJodHRwczovL3d3dy5pc28ub3JnL3N0YW5kYXJkLzc2ODM1Lmh0bWwiIC8+CiAgPG1ldGEgcHJvcGVydHk9Im9nOnR5cGUiIGNvbnRlbnQ9IndlYnNpdGUiIC8+CiAgPCEtLSBUaHVtYm5haWwgaW1hZ2UgKGZvciB0d2l0dGVyIGFuZCBPcGVuIEdyYXBoKSAtLT4KICAgIDxtZXRhIG5hbWU9InRodW1ibmFpbCIgY29udGVudD0iL21vZHVsZXMvaXNvLWphaGlhLXNlcnZpY2UtbW9kdWxlL2ltZy9pc28vaXNvLWxvZ28tcHJpbnQuZ2lmIiAvPgogICAgPG1ldGEgbmFtZT0idHdpdHRlcjpjYXJkIiBjb250ZW50PSJzdW1tYXJ5IiAvPgogICAgPG1ldGEgbmFtZT0idHdpdHRlcjppbWFnZSIgY29udGVudD0iL21vZHVsZXMvaXNvLWphaGlhLXNlcnZpY2UtbW9kdWxlL2ltZy9pc28vaXNvLWxvZ28tcHJpbnQuZ2lmIiAvPgogICAgPG1ldGEgcHJvcGVydHk9Im9nOmltYWdlIiBjb250ZW50PSIvbW9kdWxlcy9pc28tamFoaWEtc2VydmljZS1tb2R1bGUvaW1nL2lzby9pc28tbG9nby1wcmludC5naWYiIC8+CiAgICA8bWV0YSBwcm9wZXJ0eT0ib2c6aW1hZ2U6YWx0IiBjb250ZW50PSJJU08gbG9nbyIgLz4KICA8IS0tIFRpdGxlIChmb3IgdHdpdHRlciBhbmQgT3BlbiBHcmFwaCkgLS0+CiAgICA8bWV0YSBuYW1lPSJ0d2l0dGVyOnRpdGxlIiBjb250ZW50PSJJU08vSUVDIDEwNjQ2OjIwMjAiIC8+CiAgICA8bWV0YSBwcm9wZXJ0eT0ib2c6dGl0bGUiIGNvbnRlbnQ9IklTTy9JRUMgMTA2NDY6MjAyMCIgLz4KICA8IS0tIERlc2NyaXB0aW9uIChmb3IgZ29vZ2xlLCB0d2l0dGVyIGFuZCBPcGVuIEdyYXBoKSAtLT4KICAgIDxtZXRhIG5hbWU9InR3aXR0ZXI6ZGVzY3JpcHRpb24iIGNvbnRlbnQ9IkluZm9ybWF0aW9uIHRlY2hub2xvZ3kg4oCUIFVuaXZlcnNhbCBjb2RlZCBjaGFyYWN0ZXIgc2V0IChVQ1MpIiAvPgogICAgPG1ldGEgcHJvcGVydHk9Im9nOmRlc2NyaXB0aW9uIiBjb250ZW50PSJJbmZvcm1hdGlvbiB0ZWNobm9sb2d5IOKAlCBVbml2ZXJzYWwgY29kZWQgY2hhcmFjdGVyIHNldCAoVUNTKSIgLz4KICAgIDxtZXRhIG5hbWU9ImRlc2NyaXB0aW9uIiBjb250ZW50PSJJbmZvcm1hdGlvbiB0ZWNobm9sb2d5IOKAlCBVbml2ZXJzYWwgY29kZWQgY2hhcmFjdGVyIHNldCAoVUNTKSIgLz4KICA8IS0tIEZhY2Vib29rIGFkbWlucyA6IExpb25lbCxNYXJpYSAtLT4KICA8bWV0YSBwcm9wZXJ0eT0iZmI6YWRtaW5zIiBjb250ZW50PSIxMDAwMDExMTYwNzk2NzYsMTAwMDAxNDQwMDAzMzA1IiAvPgoKICAKCjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBzcmM9Ii9tb2R1bGVzL0NzcmZTZXJ2bGV0Ij48L3NjcmlwdD4KPC9oZWFkPgogIDxib2R5IGNsYXNzPSJ0aGVtZS1yZWQiIGlkPSJwYWdlLXRvcCI+CiAgICA8IS0tIEdvb2dsZSBUYWcgTWFuYWdlciAobm9zY3JpcHQpIC0tPgogICAgICA8bm9zY3JpcHQgYXJpYS1oaWRkZW49InRydWUiPjxpZnJhbWUgc3JjPSJodHRwczovL3d3dy5nb29nbGV0YWdtYW5hZ2VyLmNvbS9ucy5odG1sP2lkPUdUTS1URkdLUVFCIiBoZWlnaHQ9IjAiIHdpZHRoPSIwIiBzdHlsZT0iZGlzcGxheTpub25lO3Zpc2liaWxpdHk6aGlkZGVuIj48L2lmcmFtZT48L25vc2NyaXB0PgogICAgICA8IS0tIEVuZCBHb29nbGUgVGFnIE1hbmFnZXIgKG5vc2NyaXB0KSAtLT4KICAgIDxhIGNsYXNzPSJza2lwLW5hdmlnYXRpb24gYnRuIGJ0bi1pbmZvIHZpc3VhbGx5LWhpZGRlbiB2aXN1YWxseS1oaWRkZW4tZm9jdXNhYmxlIiBocmVmPSIjY29udGVudCI+U2tpcCB0byBtYWluIGNvbnRlbnQ8L2E+CgogICAgPCEtLSBUb3BiYXIgdXRpbGl0eSAtLT4KICAgIDxuYXYgcm9sZT0ibmF2aWdhdGlvbiIgYXJpYS1sYWJlbD0iVXRpbGl0eSBOYXZpZ2F0aW9uIiBjbGFzcz0ibmF2LXV0aWxpdHkgbmF2YmFyLWV4cGFuZC1sZyB0ZXh0LXNtIG5hdmJhci1kYXJrIGJnLWRhcmsgdGV4dC1saWdodCI+CiAgICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lciI+CiAgICAgICAgPHVsIGNsYXNzPSJuYXYgZC1mbGV4IGp1c3RpZnktY29udGVudC1iZXR3ZWVuIGp1c3RpZnktY29udGVudC1zbS1hcm91bmQganVzdGlmeS1jb250ZW50LW1kLWVuZCIgaWQ9InV0aWxpdGllcyI+CiAgICAgICAgICA8bGkgY2xhc3M9Im5hdi1pdGVtIj4KICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly9sb2dpbi5pc28ub3JnIiBjbGFzcz0ibmF2LWxpbmsgZC1mbGV4IGFsaWduLWl0ZW1zLWNlbnRlciIgdGl0bGU9IklTTydzIGFwcGxpY2F0aW9ucyBwb3J0YWwiPjxpIGNsYXNzPSJiaS1ncmlkLTN4My1nYXAtZmlsbCI+PC9pPiZuYnNwO0FwcGxpY2F0aW9uczwvYT4KICAgICAgICAgIDwvbGk+CiAgICAgICAgICA8bGkgY2xhc3M9Im5hdi1pdGVtIj4KICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly93d3cuaXNvLm9yZy9vYnAvdWkvZW4vIiBjbGFzcz0ibmF2LWxpbmsgZC1mbGV4IGFsaWduLWl0ZW1zLWNlbnRlciIgdGl0bGU9Ik9ubGluZSBCcm93c2luZyBQbGF0Zm9ybSI+PGkgY2xhc3M9ImJpLWpvdXJuYWwtdGV4dCI+PC9pPiZuYnNwO09CUDwvYT4KICAgICAgICAgIDwvbGk+CiAgICAgICAgICA8bGkgY2xhc3M9Im5hdi1pdGVtIGRyb3Bkb3duIiBpZD0ibGFuZy1zd2l0Y2hlciI+CiAgPGEgaWQ9ImxhbmctZHJvcGRvd24iIGNsYXNzPSJuYXYtbGluayBkcm9wZG93bi10b2dnbGUiIGRhdGEtYnMtdG9nZ2xlPSJkcm9wZG93biIgaHJlZj0iIyIgYXJpYS1leHBhbmRlZD0iZmFsc2UiPkVuZ2xpc2g8L2E+CiAgPHVsIGNsYXNzPSJkcm9wZG93bi1tZW51IGRyb3Bkb3duLW1lbnUtZW5kIiByb2xlPSJtZW51IiBhcmlhLWxhYmVsbGVkYnk9ImxhbmctZHJvcGRvd24iPgogICAgPGxpPjxhIGNsYXNzPSJkcm9wZG93bi1pdGVtIiBocmVmPSIvZnIvc3RhbmRhcmQvNzY4MzUuaHRtbCI+ZnJhbsOnYWlzPC9hPjwvbGk+PGxpPjxhIGNsYXNzPSJkcm9wZG93bi1pdGVtIiBocmVmPSIvcnUvc3RhbmRhcmQvNzY4MzUuaHRtbCI+0YDRg9GB0YHQutC40Lk8L2E+PC9saT48L3VsPgo8L2xpPjwvdWw+CiAgICAgIDwvZGl2PgogICAgPC9uYXY+CgogICAgPCEtLSBIZWFkZXIgSVNPLk9SRyAtLT4KICAgIDxoZWFkZXIgY2xhc3M9ImhlYWRlci1ib290c3RyYXAgc3RpY2t5LXRvcCI+CiAgICAgIDwhLS0gTWFpbiBuYXZpZ2F0aW9uIC0tPgogICAgICA8bmF2IGNsYXNzPSJuYXZiYXIgbmF2LWlzbyBuYXZiYXItZXhwYW5kLW1kIG5hdmJhci1saWdodCBiZy1saWdodGdyYXkgdGV4dC1kYXJrIHNoYWRvdyI+CiAgICAgICAgPGRpdiBjbGFzcz0iY29udGFpbmVyIj4KICAgICAgICAgIDxhIGNsYXNzPSJsb2dvIGxvZ28tc3F1YXJlIGlzb2xvZ28gbG9nby1zbSIgaHJlZj0iL2hvbWUuaHRtbCIgdGl0bGU9IkludGVybmF0aW9uYWwgT3JnYW5pemF0aW9uIGZvciBTdGFuZGFyZGl6YXRpb24iIGFsdD0iSVNPIGxvZ28iPjwvYT4KICAgICAgICAgIDxkaXYgY2xhc3M9Imlzb2xvZ28tcHJpbnQiPjxpbWcgbG9hZGluZz0ibGF6eSIgZmV0Y2hwcmlvcml0eT0ibG93IiBzcmM9Ii9tb2R1bGVzL2lzb29yZy10ZW1wbGF0ZS9pbWcvaXNvL2lzby1sb2dvLXByaW50LmdpZiIgYWx0PSJJU08gbG9nbyBmb3IgcHJpbnQiLz48L2Rpdj4KICAgICAgICAgIDxidXR0b24gY2xhc3M9ImJ0biBidG4tbGlnaHQgbmF2YmFyLXRvZ2dsZXIiIHR5cGU9ImJ1dHRvbiIgZGF0YS1icy10b2dnbGU9ImNvbGxhcHNlIiBkYXRhLWJzLXRhcmdldD0iI21haW5OYXYiIGFyaWEtY29udHJvbHM9Im1haW5OYXYiIGFyaWEtZXhwYW5kZWQ9ImZhbHNlIiBhcmlhLWxhYmVsPSJUb2dnbGUgbmF2aWdhdGlvbiI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9Im5hdmJhci10b2dnbGVyLWljb24tYW5pbWF0ZWQiPjxzcGFuPjwvc3Bhbj48c3Bhbj48L3NwYW4+PHNwYW4+PC9zcGFuPjxzcGFuPjwvc3Bhbj48L2Rpdj48c3BhbiBjbGFzcz0idmlzdWFsbHktaGlkZGVuLXhzIj4mbmJzcDtNZW51PC9zcGFuPgogICAgICAgICAgPC9idXR0b24+CiAgICAgICAgICA8IS0tIFRPUCBMRVZFTDEgTkFWSUdBVElPTiAtLT4KICAgICAgICAgIDxuYXYgcm9sZT0ibmF2aWdhdGlvbiIgYXJpYS1sYWJlbD0iTWFpbiBOYXZpZ2F0aW9uIiBjbGFzcz0iY29sbGFwc2UgbmF2YmFyLWNvbGxhcHNlICIgaWQ9Im1haW5OYXYiPjx1bCByb2xlPSJtZW51YmFyIiBjbGFzcz0ibmF2YmFyLW5hdiBtZS1hdXRvIG1iLWxnLTAgbmF2LWxldmVsMSAiPjxsaSByb2xlPSJub25lIiBjbGFzcz0ibmF2LWl0ZW0gbm9DaGlsZHJlbiBmaXJzdEluTGV2ZWwiPjxhIGNsYXNzPSJuYXYtbGluayAiIHJvbGU9Im1lbnVpdGVtIiBocmVmPSIvc3RhbmRhcmRzLmh0bWwiPlN0YW5kYXJkczwvYT48L2xpPjxsaSByb2xlPSJub25lIiBjbGFzcz0ibmF2LWl0ZW0gbm9DaGlsZHJlbiI+PGEgY2xhc3M9Im5hdi1saW5rICIgcm9sZT0ibWVudWl0ZW0iIGhyZWY9Ii9hYm91dC11cy5odG1sIj5BYm91dCB1czwvYT48L2xpPjxsaSByb2xlPSJub25lIiBjbGFzcz0ibmF2LWl0ZW0gbm9DaGlsZHJlbiI+PGEgY2xhc3M9Im5hdi1saW5rICIgcm9sZT0ibWVudWl0ZW0iIGhyZWY9Ii9uZXdzLmh0bWwiPk5ld3M8L2E+PC9saT48bGkgcm9sZT0ibm9uZSIgY2xhc3M9Im5hdi1pdGVtIG5vQ2hpbGRyZW4iPjxhIGNsYXNzPSJuYXYtbGluayAiIHJvbGU9Im1lbnVpdGVtIiBocmVmPSIvZGV2ZWxvcGluZy1zdGFuZGFyZHMuaHRtbCI+VGFraW5nIHBhcnQ8L2E+PC9saT48bGkgcm9sZT0ibm9uZSIgY2xhc3M9Im5hdi1pdGVtIG5vQ2hpbGRyZW4gaW5QYXRoICBsYXN0SW5MZXZlbCI+PGEgY2xhc3M9Im5hdi1saW5rICIgcm9sZT0ibWVudWl0ZW0iIGhyZWY9Ii9zdG9yZS5odG1sIj5TdG9yZTwvYT48L2xpPjwvdWw+PCEtLSBjbG9zZSBvZiB1bCBsZXZlbCAtLT48L25hdj48Zm9ybSBjbGFzcz0ibmF2YmFyLWZvcm0gZC1mbGV4IGlzb3NlYXJjaCBtcy1zbS0yIiByb2xlPSJzZWFyY2giIGlkPSJzaXRlU2VhcmNoIj4KICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImhpZGRlbiIgZGF0YS1zZWFyY2hwYWdldXJsPSIvc2VhcmNoLmh0bWwiPjwvc3Bhbj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iaW5wdXQtZ3JvdXAiPgogICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJzZWFyY2giIGNsYXNzPSJmb3JtLWNvbnRyb2wiIHBsYWNlaG9sZGVyPSJTZWFyY2giIGFyaWEtbGFiZWxsZWRieT0iaW5wdXQtc2VhcmNoIj4KICAgICAgICAgICAgICA8YnV0dG9uIGlkPSJpbnB1dC1zZWFyY2giIGNsYXNzPSJidG4gYnRuLXByaW1hcnkiIHR5cGU9InN1Ym1pdCI+PGkgY2xhc3M9ImJpLXNlYXJjaCI+PC9pPjxzcGFuIGNsYXNzPSJ2aXN1YWxseS1oaWRkZW4iPlNlYXJjaDwvc3Bhbj48L2J1dHRvbj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICA8L2Zvcm0+CiAgICAgICAgICA8YSByb2xlPSJidXR0b24iIGlkPSJzaG9wcGluZ0NhcnQiIGNsYXNzPSJidG4gYnRuLWxpZ2h0IHNob3BwaW5nLWNhcnQtbGluayBzaGFkb3ciIGhyZWY9Ii93ZWJzdG9yZS9zaG9wcGluZ2Jhc2tldD9tZW1iZXJJZD1JU08mZ3VpbGFuZz1lbiIgdGl0bGU9IlNob3BwaW5nIGNhcnQiIGFyaWEtbGFiZWw9IlNob3BwaW5nIGNhcnQiIHN0eWxlPSJkaXNwbGF5Om5vbmU7Ij4KICAgICAgICAgICAgPGkgY2xhc3M9ImJpLWNhcnQiPjwvaT4mbmJzcDs8c3BhbiBjbGFzcz0idmlzdWFsbHktaGlkZGVuLXhzIj5DYXJ0PC9zcGFuPgogICAgICAgICAgPC9hPgogICAgICAgIDwvZGl2PgogICAgICA8L25hdj4KCiAgICA8L2hlYWRlcj4KCiAgICA8IS0tIE1BSU4gQ09OVEVOVCAtLT4KICAgIDxtYWluIHJvbGU9Im1haW4iIGlkPSJjb250ZW50IiBjbGFzcz0iYWNlciIgYXJpYS1sYWJlbD0iQ29udGVudCIgdGFiaW5kZXg9Ii0xIj4KICAgICAgCgoKPHNwYW4gY2xhc3M9InZpc3VhbGx5LWhpZGRlbiIgaWQ9ImluZGV4UmVmZXJlbmNlIiBkYXRhLWluZGV4PSI3NjgzNSAtIElTTy9JRUMgMTA2NDY6MjAyMCAtIEluZm9ybWF0aW9uIHRlY2hub2xvZ3kg4oCUIFVuaXZlcnNhbCBjb2RlZCBjaGFyYWN0ZXIgc2V0IChVQ1MpIj48L3NwYW4+CjxzcGFuIGNsYXNzPSJ2aXN1YWxseS1oaWRkZW4iIGlkPSJpdGVtUmVmZXJlbmNlIj5JU08vSUVDIDEwNjQ2OjIwMjA8L3NwYW4+CjxkaXYgaXRlbXNjb3BlIGl0ZW10eXBlPSJodHRwczovL3NjaGVtYS5vcmcvUHJvZHVjdCI+CiAgPGxpbmsgaXRlbXByb3A9ImltYWdlIiBocmVmPSIvbW9kdWxlcy9pc29vcmctdGVtcGxhdGUvaW1nL2lzby9pc28tbG9nby1wcmludC5naWYiIC8+PHNlY3Rpb24gY2xhc3M9InNlY3Rpb24tbmF2aWdhdGlvbiI+CiAgICA8ZGl2IGNsYXNzPSJjb250YWluZXIiPgogICAgICA8ZGl2IGNsYXNzPSJyb3ciPgogICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC0xMiI+CiAgICAgICAgICA8ZGl2IGNsYXNzPSJ2aXN1YWxseS1oaWRkZW4iIGl0ZW1wcm9wPSJjYXRlZ29yeSI+cDwvZGl2PgogICAgICAgICAgPGRpdiBjbGFzcz0idmlzdWFsbHktaGlkZGVuIiBpdGVtcHJvcD0ibmFtZSIgaWQ9ImRvY1JlZiI+SVNPL0lFQyAxMDY0NjoyMDIwPC9kaXY+CiAgICAgICAgICA8ZGl2IGNsYXNzPSJ2aXN1YWxseS1oaWRkZW4iIGl0ZW1wcm9wPSJwcm9kdWN0SUQiIGlkPSJjc051bWJlciI+NzY4MzU8L2Rpdj4KCiAgICAgICAgICA8ZGl2IGNsYXNzPSJ2aXN1YWxseS1oaWRkZW4iIGl0ZW1wcm9wPSJicmFuZCIgaXRlbXNjb3BlIGl0ZW10eXBlPSJodHRwczovL3NjaGVtYS5vcmcvQnJhbmQiPgogICAgICAgICAgICA8ZGl2IGl0ZW1wcm9wPSJsb2dvIiBpdGVtc2NvcGUgaXRlbXR5cGU9Imh0dHBzOi8vc2NoZW1hLm9yZy9JbWFnZU9iamVjdCI+CiAgICAgICAgICAgICAgPG1ldGEgaXRlbXByb3A9InVybCIgY29udGVudD0iL21vZHVsZXMvaXNvb3JnLXRlbXBsYXRlL2ltZy9pc28vaXNvLWxvZ28tcHJpbnQuZ2lmIi8+CiAgICAgICAgICAgICAgPG1ldGEgaXRlbXByb3A9IndpZHRoIiBjb250ZW50PSIyODMiPgogICAgICAgICAgICAgIDxtZXRhIGl0ZW1wcm9wPSJoZWlnaHQiIGNvbnRlbnQ9IjI2MSI+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8bWV0YSBpdGVtcHJvcD0ibmFtZSIgY29udGVudD0iSVNPIC0gSW50ZXJuYXRpb25hbCBPcmdhbml6YXRpb24gZm9yIFN0YW5kYXJkaXphdGlvbiI+CiAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICA8bmF2IHJvbGU9Im5hdmlnYXRpb24iIGFyaWEtbGFiZWw9IkNoaWxkcmVuIE5hdmlnYXRpb24iIGNsYXNzPSJoZWFkaW5nLWNvbmRlbnNlZCBuYXYtcmVsYXRpdmVzIj4KCiAgPGRpdiBjbGFzcz0ic2VjdGlvbi1oZWFkIHNlY3Rpb24taDEgc2VjdGlvbi1iYWNrIj48c3BhbiBjbGFzcz0iaWNvbiAiPjwvc3Bhbj48YSB0YXJnZXQ9IiIgaHJlZj0iL3N0YW5kYXJkcy1jYXRhbG9ndWUvYnJvd3NlLWJ5LWljcy5odG1sInRpdGxlPSJCcm93c2UgdGhlIGZ1bGwgY29sbGVjdGlvbiBvZiBJU08gc3RhbmRhcmRzIGFuZCBmaW5kIHRoZSBvbmVzIHRoYXQgYXBwbHkgdG8geW91ciBzZWN0b3IuIj5JQ1M8L2E+PGEgaHJlZj0iL2VuL2ljcy8zNS5odG1sIj4zNTwvYT48YSBocmVmPSIvZW4vaWNzLzM1LjA0MC5odG1sIj4zNS4wNDA8L2E+PGEgaHJlZj0iL2VuL2ljcy8zNS4wNDAuMTAuaHRtbCI+MzUuMDQwLjEwPC9hPjwvZGl2PgogIDxoMT5JU08vSUVDIDEwNjQ2OjIwMjA8L2gxPgogIDxoMiBjbGFzcz0ibXQtMCAiPkluZm9ybWF0aW9uIHRlY2hub2xvZ3kg4oCUIFVuaXZlcnNhbCBjb2RlZCBjaGFyYWN0ZXIgc2V0IChVQ1MpPC9oMj48L25hdj48L2Rpdj4KICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KICA8L3NlY3Rpb24+CgogIDxzZWN0aW9uIGlkPSJwcm9kdWN0LWRldGFpbHMiPgogICAgPGRpdiBjbGFzcz0iY29udGFpbmVyIj4KICAgICAgPGRpdiBjbGFzcz0icm93Ij4KICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtNyI+CiAgICAgICAgICA8ZGl2IGNsYXNzPSJhbGVydCBhbGVydC1pbmZvIj4KICAgICAgICAgICAgICA8cD5UaGUgZWxlY3Ryb25pYyB2ZXJzaW9uIG9mIHRoaXMgSW50ZXJuYXRpb25hbCBTdGFuZGFyZCBjYW4gYmUgPGEgaHJlZj0iaHR0cHM6Ly9zdGFuZGFyZHMuaXNvLm9yZy9pdHRmL1B1YmxpY2x5QXZhaWxhYmxlU3RhbmRhcmRzL2luZGV4Lmh0bWwiIHRhcmdldD0iX2JsYW5rIj5kb3dubG9hZGVkPC9hPiBmcm9tIHRoZSBJU08vSUVDIEluZm9ybWF0aW9uIFRlY2hub2xvZ3kgVGFzayBGb3JjZSAoSVRURikgd2ViIHNpdGU8L3A+CjwvZGl2PgogICAgICAgICAgPGRpdiBjbGFzcz0iZC1mbGV4IGp1c3RpZnktY29udGVudC1iZXR3ZWVuIGFsaWduLWl0ZW1zLWNlbnRlciI+PGgzPkFic3RyYWN0PC9oMz48YSBjbGFzcz0iYnRuIGJ0bi1vdXRsaW5lLXByaW1hcnkgZmxvYXQtZW5kIG1iLTEiIGlkPSJvYnAtcHJldmlldyIgdGFyZ2V0PSJfYmxhbmsiIGhyZWY9Imh0dHBzOi8vd3d3Lmlzby5vcmcvb2JwL3VpLyMhaXNvOnN0ZDo3NjgzNTplbiI+PGkgY2xhc3M9ImJpLWpvdXJuYWwtdGV4dCI+PC9pPiZuYnNwO1ByZXZpZXc8L2E+PC9kaXY+CiAgICAgICAgICAgIDxkaXYgaXRlbXByb3A9ImRlc2NyaXB0aW9uIj4KICAgICAgICAgICAgICA8cD48cD5UaGlzIGRvY3VtZW50PC9wPgo8dWw+CjxsaT5zcGVjaWZpZXMgdGhlIGFyY2hpdGVjdHVyZSBvZiB0aGUgVUNTOzwvbGk+CjxsaT5kZWZpbmVzIHRlcm1zIHVzZWQgZm9yIHRoZSBVQ1M7PC9saT4KPGxpPmRlc2NyaWJlcyB0aGUgZ2VuZXJhbCBzdHJ1Y3R1cmUgb2YgdGhlIFVDUyBjb2Rlc3BhY2U7PC9saT4KPGxpPnNwZWNpZmllcyB0aGUgYXNzaWduZWQgcGxhbmVzIG9mIHRoZSBVQ1M6IHRoZSBCYXNpYyBNdWx0aWxpbmd1YWwgUGxhbmUgKEJNUCkgb2YgdGhlIFVDUywgdGhlIFN1cHBsZW1lbnRhcnkgTXVsdGlsaW5ndWFsIFBsYW5lIChTTVApLCB0aGUgU3VwcGxlbWVudGFyeSBJZGVvZ3JhcGhpYyBQbGFuZSAoU0lQKSwgdGhlIFRlcnRpYXJ5IElkZW9ncmFwaGljIFBsYW5lIChUSVApLCBhbmQgdGhlIFN1cHBsZW1lbnRhcnkgU3BlY2lhbC1wdXJwb3NlIFBsYW5lIChTU1ApOzwvbGk+CjxsaT5kZWZpbmVzIGEgc2V0IG9mIGdyYXBoaWMgY2hhcmFjdGVycyB1c2VkIGluIHNjcmlwdHMgYW5kIHRoZSB3cml0dGVuIGZvcm0gb2YgbGFuZ3VhZ2VzIG9uIGEgd29ybGQtd2lkZSBzY2FsZTs8L2xpPgo8bGk+c3BlY2lmaWVzIHRoZSBuYW1lcyBmb3IgdGhlIGdyYXBoaWMgY2hhcmFjdGVycyBhbmQgZm9ybWF0IGNoYXJhY3RlcnMgb2YgdGhlIEJNUCwgU01QLCBTSVAsIFRJUCwgU1NQIGFuZCB0aGVpciBjb2RlZCByZXByZXNlbnRhdGlvbnMgd2l0aGluIHRoZSBVQ1MgY29kZXNwYWNlOzwvbGk+CjxsaT5zcGVjaWZpZXMgdGhlIGNvZGVkIHJlcHJlc2VudGF0aW9ucyBmb3IgY29udHJvbCBjaGFyYWN0ZXJzIGFuZCBwcml2YXRlIHVzZSBjaGFyYWN0ZXJzOzwvbGk+CjxsaT5zcGVjaWZpZXMgdGhyZWUgZW5jb2RpbmcgZm9ybXMgb2YgdGhlIFVDUzogVVRGLTgsIFVURi0xNiwgYW5kIFVURi0zMjs8L2xpPgo8bGk+c3BlY2lmaWVzIHNldmVuIGVuY29kaW5nIHNjaGVtZXMgb2YgdGhlIFVDUzogVVRGLTgsIFVURi0xNiwgVVRGLTE2QkUsIFVURi0xNkxFLCBVVEYtMzIsIFVURi0zMkJFLCBhbmQgVVRGLTMyTEU7PC9saT4KPGxpPnNwZWNpZmllcyB0aGUgbWFuYWdlbWVudCBvZiBmdXR1cmUgYWRkaXRpb25zIHRvIHRoaXMgY29kZWQgY2hhcmFjdGVyIHNldC48L2xpPgo8L3VsPgo8cD5OT1RFIFRoZSBkZXRlcm1pbmF0aW9uIG9mIHN1aXRhYmlsaXR5IG9mIHRoZXNlIGNoYXJhY3RlcnMgZm9yIHVzZSBhcyBpZGVudGlmaWVycyBpbiBwcm9ncmFtbWluZyBsYW5ndWFnZXMgaXMgbm90IHNwZWNpZmllZCBieSB0aGlzIGRvY3VtZW50IGJ1dCBjYW4gYmUgZm91bmQgaW4gYW4gZXh0ZXJuYWwgcmVmZXJlbmNlLiBTZWUgQW5uZXggVS48L3A+PC9wPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPGJyLz4KICAgICAgICAgIDxkaXYgY2xhc3M9ImQtZmxleCBqdXN0aWZ5LWNvbnRlbnQtYmV0d2VlbiBhbGlnbi1pdGVtcy1jZW50ZXIiPgogIDxoMz4KICAgIEdlbmVyYWwgaW5mb3JtYXRpb248c3VwPiZuYnNwOzxhIGhyZWY9Ii9jb250ZW50cy9kYXRhL3N0YW5kYXJkLzA3LzY4Lzc2ODM1LmRldGFpbC5yc3MiIGNsYXNzPSJiaS1yc3MtZmlsbCB0ZXh0LXdhcm5pbmcgZnMtNiIgZGF0YS1icy10b2dnbGU9Imlzby10b29sdGlwIiBkYXRhLW9yaWdpbmFsLXRpdGxlPSJTdWJzY3JpYmUmbmJzcDt0byZuYnNwO3VwZGF0ZXMiPjwvYT48L3N1cD4KICA8L2gzPgogIDwvZGl2Pgo8dWwgY2xhc3M9InJlZmluZSI+CiAgPGxpPgogICAgPGRpdiBjbGFzcz0icm93Ij4KICAgICAgPGRpdiBjbGFzcz0iY29sLXNtLTYiPgogICAgICAgIDxkaXYgY2xhc3M9ImVudHJ5LWxhYmVsIj5TdGF0dXM8L2Rpdj4mbmJzcDs6Jm5ic3A7PHNwYW4+PGkgY2xhc3M9ImJpLWNoZWNrLWNpcmNsZSIgdGl0bGU9IlB1Ymxpc2hlZCI+PC9pPiZuYnNwO1B1Ymxpc2hlZDwvc3Bhbj4KICAgICAgICA8L2Rpdj4KICAgICAgPGRpdiBjbGFzcz0iY29sLXNtLTYiPgogICAgICAgIDxkaXYgY2xhc3M9ImVudHJ5LWxhYmVsIj5QdWJsaWNhdGlvbiBkYXRlPC9kaXY+Jm5ic3A7OiZuYnNwOzxzcGFuIGl0ZW1wcm9wPSJyZWxlYXNlRGF0ZSI+MjAyMC0xMjwvc3Bhbj4KICAgICAgICA8L2Rpdj4KICAgIDwvZGl2PgogIDwvbGk+CiAgPGxpPgogICAgPGRpdiBjbGFzcz0icm93Ij4KICAgICAgPGRpdiBjbGFzcz0iY29sLXNtLTYiPgogICAgICAgIDxkaXYgY2xhc3M9ImVudHJ5LWxhYmVsIj5FZGl0aW9uPC9kaXY+Jm5ic3A7OiZuYnNwOzY8L2Rpdj4KICAgICAgPGRpdiBjbGFzcz0iY29sLXNtLTYiPgogICAgICAgIDxkaXYgY2xhc3M9ImVudHJ5LWxhYmVsIj5OdW1iZXIgb2YgcGFnZXM8L2Rpdj4mbmJzcDs6Jm5ic3A7MjgwNDwvZGl2PgogICAgPC9kaXY+CiAgPC9saT4KICA8bGk+CiAgICAgIDxkaXYgY2xhc3M9ImNsZWFyZml4Ij4KICAgICAgICA8ZGl2IGNsYXNzPSJlbnRyeS1sYWJlbCI+VGVjaG5pY2FsIENvbW1pdHRlZTwvZGl2PiZuYnNwOzoKICAgICAgICA8c3BhbiBjbGFzcz0iZW50cnktbmFtZSBlbnRyeS1ibG9jayI+CiAgICAgICAgICA8YSBocmVmPSIvY29tbWl0dGVlLzQ1MDUwLmh0bWwiPklTTy9JRUMgSlRDIDEvU0MgMjwvYT48L3NwYW4+CiAgICAgICAgPHNwYW4gY2xhc3M9ImVudHJ5LXRpdGxlIj5Db2RlZCBjaGFyYWN0ZXIgc2V0czwvc3Bhbj4KICAgICAgPC9kaXY+CiAgICA8L2xpPgogIDxsaT4KICAgIDxkbCBjbGFzcz0iZGwtaW5saW5lIG5vLWJvdHRvbS1tYXJnaW4iPgogICAgICA8ZHQgY2xhc3M9ImVudHJ5LWxhYmVsIGVudHJ5LWJsb2NrIj48c3Ryb25nPklDUzwvc3Ryb25nPjwvZHQ+Jm5ic3A7OgogICAgICA8ZGQ+CiAgICAgICAgICA8c3BhbiBjbGFzcz0iZW50cnktbmFtZSBlbnRyeS1ibG9jayI+CiAgICAgICAgICAgIDxhIGhyZWY9Ii9pY3MvMzUuMDQwLjEwLmh0bWwiPgogICAgICAgICAgICAgICAgMzUuMDQwLjEwPC9hPgogICAgICAgICAgPC9zcGFuPgogICAgICAgICAgPHNwYW4gY2xhc3M9ImVudHJ5LXRpdGxlIj5Db2Rpbmcgb2YgY2hhcmFjdGVyIHNldHM8L3NwYW4+CiAgICAgICAgPC9kZD4KICAgICAgPC9kbD4KICA8L2xpPgo8L3VsPgo8ZGl2IGNsYXNzPSJzZGctYm94Ij4KICAgICAgPHA+CiAgICAgICAgPGltZyBsb2FkaW5nPSJsYXp5IiBzcmM9Ii9maWxlcy9saXZlL3NpdGVzL2lzb29yZy9maWxlcy9kYXRhL3NkZy9lbi9zZGctbG9nby5wbmciIGNsYXNzPSJpbWctZmx1aWQgd2lkdGgtMTAwcGN0IHdpZHRoLTMwMCIgYWx0PSJTdXN0YWluYWJsZSBEZXZlbG9wbWVudCBHb2FscyIgLz4KICAgICAgPC9wPgogICAgICA8cD4KICAgICAgICBUaGlzIHN0YW5kYXJkIGNvbnRyaWJ1dGVzIHRvIHRoZSBmb2xsb3dpbmcgPGEgaHJlZj0iL3NkZ3MuaHRtbCI+U3VzdGFpbmFibGUgRGV2ZWxvcG1lbnQgR29hbHM8L2E+OjxwPgogICAgICA8ZGl2IGNsYXNzPSJjbGVhcmZpeCI+CiAgICAgICAgPGEgaHJlZj0iL3NkZy9TREcwNC5odG1sIiB0aXRsZT0iUXVhbGl0eSBFZHVjYXRpb24iPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJzZGcgc2RnLXNtIHNkZy0wNCI+CiAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic2RnLWljb24iPjwvZGl2PgogICAgICAgICAgICAgIDxkaXYgY2xhc3M9InNkZy1sYWJlbCI+NDwvZGl2PgogICAgICAgICAgICAgIDxkaXYgY2xhc3M9InNkZy10ZXh0Ij5RdWFsaXR5IEVkdWNhdGlvbjwvZGl2PgogICAgICAgICAgICAgIDxkaXYgY2xhc3M9InNkZy1sb2dvIj48L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICA8L2E+CiAgICAgICAgPGEgaHJlZj0iL3NkZy9TREcwOS5odG1sIiB0aXRsZT0iSW5kdXN0cnksIElubm92YXRpb24gYW5kIEluZnJhc3RydWN0dXJlIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0ic2RnIHNkZy1zbSBzZGctMDkiPgogICAgICAgICAgICAgIDxkaXYgY2xhc3M9InNkZy1pY29uIj48L2Rpdj4KICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzZGctbGFiZWwiPjk8L2Rpdj4KICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzZGctdGV4dCI+SW5kdXN0cnksIElubm92YXRpb24gYW5kIEluZnJhc3RydWN0dXJlPC9kaXY+CiAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic2RnLWxvZ28iPjwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgIDwvYT4KICAgICAgICA8YSBocmVmPSIvc2RnL1NERzExLmh0bWwiIHRpdGxlPSJTdXN0YWluYWJsZSBDaXRpZXMgYW5kIENvbW11bml0aWVzIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0ic2RnIHNkZy1zbSBzZGctMTEiPgogICAgICAgICAgICAgIDxkaXYgY2xhc3M9InNkZy1pY29uIj48L2Rpdj4KICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzZGctbGFiZWwiPjExPC9kaXY+CiAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic2RnLXRleHQiPlN1c3RhaW5hYmxlIENpdGllcyBhbmQgQ29tbXVuaXRpZXM8L2Rpdj4KICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzZGctbG9nbyI+PC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgPC9hPgogICAgICAgIDxhIGhyZWY9Ii9zZGcvU0RHMTYuaHRtbCIgdGl0bGU9IlBlYWNlLCBKdXN0aWNlIGFuZCBTdHJvbmcgSW5zdGl0dXRpb25zIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0ic2RnIHNkZy1zbSBzZGctMTYiPgogICAgICAgICAgICAgIDxkaXYgY2xhc3M9InNkZy1pY29uIj48L2Rpdj4KICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzZGctbGFiZWwiPjE2PC9kaXY+CiAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic2RnLXRleHQiPlBlYWNlLCBKdXN0aWNlIGFuZCBTdHJvbmcgSW5zdGl0dXRpb25zPC9kaXY+CiAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic2RnLWxvZ28iPjwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgIDwvYT4KICAgICAgICA8L2Rpdj4KICAgIDwvZGl2PgogIDwvZGl2PgoKICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtNCBjb2wtbWQtb2Zmc2V0LTEiPgogICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZCBzdG9yZS1ib3ggcHJvZHVjdC1ib3ggc2hhZG93IiBpZD0ic3RvcmUtYm94Ij4KICAgIDxkaXYgY2xhc3M9ImNhcmQtYm9keSI+CiAgICAgIDxoMyBjbGFzcz0idGV4dC1jZW50ZXIiPkJ1eSB0aGlzIHN0YW5kYXJkPC9oMz4KICAgICAgPGRpdiBjbGFzcz0iZml0LXRvLWJveCI+CiAgICAgICAgPHNwYW4gY2xhc3M9Imxhbmd1YWdlLXBhdGggdmlzdWFsbHktaGlkZGVuIj5lbjwvc3Bhbj4KICAgICAgICA8dGFibGUgY2xhc3M9InRhYmxlIG9yZGVyUHJvZHVjdCBhbGlnbi1taWRkbGUiPgogICAgICAgICAgPHRoZWFkPgogICAgICAgICAgPHRyPgogICAgICAgICAgICA8dGg+PC90aD4KICAgICAgICAgICAgPHRoPkZvcm1hdDwvdGg+CiAgICAgICAgICAgIDx0aCBpZD0ibGFuZ3VhZ2UiPkxhbmd1YWdlPC90aD4KICAgICAgICAgIDwvdHI+CiAgICAgICAgICA8L3RoZWFkPgogICAgICAgICAgPHRib2R5PgogICAgICAgICAgPHRyIGNsYXNzPSJhY3RpdmUiPgogICAgICAgICAgICAgIDx0ZCBjbGFzcz0ic2VsZWN0aW9uIj4KICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJ0eXBlIHZpc3VhbGx5LWhpZGRlbiI+c3RkPC9zcGFuPgogICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImNvdW50ZXIgdmlzdWFsbHktaGlkZGVuIj4xPC9zcGFuPgogICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InByaWNlIHZpc3VhbGx5LWhpZGRlbiI+MjA4PC9zcGFuPgogICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImNob29zZUZvcm1hdCBhY3RpdmUiPjxpIGNsYXNzPSJiaSBiaS1jaGVjay1sZyI+PC9pPjwvc3Bhbj4KICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgIDx0ZCBpZD0iYmtpZm10XzEiPgogICAgICAgICAgICAgICAgUERGPC90ZD4KICAgICAgICAgICAgICA8dGQgY2xhc3M9Im9yZGVyTGFuZ3VhZ2UiIHN0eWxlPSJtaW4td2lkdGg6IDE0MHB4OyI+CiAgICAgICAgICAgICAgICA8c2VsZWN0IGlkPSJia2lfMSIgYXJpYS1sYWJlbGxlZGJ5PSJsYW5ndWFnZSIgY2xhc3M9ImZvcm0tc2VsZWN0Ij4KICAgICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT0iMDF1YjAwMDAwMDI4NjF6QUFBfmEwNWIwMDAwMDA1V1Yzd0FBR35hMGZiMDAwMDAwMGVHQ3hBQU1+YTBjNjcwMDAwMFROQ2ZwQUFIIiBsYW5nPSJlbiIgc2VsZWN0ZWQ+CiAgICAgICAgICAgICAgICAgICAgICBFbmdsaXNoPC9vcHRpb24+CiAgICAgICAgICAgICAgICAgIDwvc2VsZWN0PgogICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICA8L3Rib2R5PgogICAgICAgIDwvdGFibGU+CiAgICAgIDwvZGl2PgoKICAgICAgPGRpdiBjbGFzcz0iY2xlYXJmaXgiIGl0ZW1wcm9wPSJvZmZlcnMiIGl0ZW1zY29wZSBpdGVtdHlwZT0iaHR0cHM6Ly9zY2hlbWEub3JnL09mZmVyIj4KICAgICAgICA8bGluayBpdGVtcHJvcD0idXJsIiBocmVmPSJodHRwczovL3d3dy5pc28ub3JnOi0xL3N0YW5kYXJkLzc2ODM1Lmh0bWwiIC8+CiAgICAgICAgPG1ldGEgaXRlbXByb3A9ImF2YWlsYWJpbGl0eSIgY29udGVudD0iaHR0cHM6Ly9zY2hlbWEub3JnL0luU3RvY2siIC8+CiAgICAgICAgPHVsIGNsYXNzPSJsaXN0LWlubGluZSBvcmRlckJhc2tldCIgaWQ9ImJraWFuY2hvcl8xIj4KICAgICAgICAgIDxsaSBjbGFzcz0icHJpY2Ugb3JkZXIiPgogICAgICAgICAgICA8c3BhbiBjbGFzcz0iY3VycmVuY3kiIGl0ZW1wcm9wPSJwcmljZUN1cnJlbmN5Ij5DSEY8L3NwYW4+PHNwYW4gY2xhc3M9ImFtb3VudCIgaWQ9InByb2R1Y3RQcmljZSIgaXRlbXByb3A9InByaWNlIj4yMDg8L3NwYW4+CiAgICAgICAgICA8L2xpPgogICAgICAgICAgPGxpPgogICAgICAgICAgICA8YnV0dG9uIGNsYXNzPSJidG4gYnRuLXByaW1hcnkgYnRuLWxnIiBpZD0ic3RhbmRhcmQtYnV5IiBkYXRhLWJzLXRvZ2dsZT0ibW9kYWwiIGRhdGEtYnMtdGFyZ2V0PSIjaXNvLW9wdG91dCIgb25jbGljaz0iamF2YXNjcmlwdDphZGRUb0Jhc2tldCgnMScsICdlbicsICdzdGQnKSI+CiAgICAgICAgICAgICAgPGkgY2xhc3M9ImJpLWNhcnQiPjwvaT4mbmJzcDtCdXk8L2J1dHRvbj4KICAgICAgICAgIDwvbGk+CiAgICAgICAgPC91bD4KICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KICA8L2Rpdj4KCiAgPCEtLSBTVEFSVCBPRiBNT0RBTCAoQnV5IElTTy5PUkcgd2l0aCBPUFRPVVQpIC0tPgogIDxkaXYgY2xhc3M9Im1vZGFsIGZhZGUiIHRhYmluZGV4PSItMSIgcm9sZT0iZGlhbG9nIiBpZD0iaXNvLW9wdG91dCIgYXJpYS1oaWRkZW49InRydWUiIGFyaWEtbGFiZWxsZWRieT0ibW9kYWxMYWJlbCI+CiAgICA8ZGl2IGNsYXNzPSJtb2RhbC1kaWFsb2cgbW9kYWwtZGlhbG9nLWNlbnRlcmVkIj4KICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtY29udGVudCI+CiAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtaGVhZGVyIj4KICAgICAgICAgIDxoNCBjbGFzcz0ibW9kYWwtdGl0bGUiIGlkPSJtb2RhbExhYmVsIj5CdXkmbmJzcDt0aGlzIHN0YW5kYXJkPC9oND4KICAgICAgICAgIDxidXR0b24gdHlwZT0iYnV0dG9uIiBjbGFzcz0iYnRuLWNsb3NlIiBkYXRhLWJzLWRpc21pc3M9Im1vZGFsIiBhcmlhLWxhYmVsPSJDbG9zZSI+PC9idXR0b24+CiAgICAgICAgPC9kaXY+CiAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtYm9keSI+CiAgICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1ib2R5IGNsZWFyZml4Ij4KICAgICAgICAgICAgPGRpdiBpZD0ibW9kYWxPcHRPdXQiPjwvZGl2PgogICAgICAgICAgICA8ZGl2IGlkPSJtb2RhbE5vT3B0T3V0Ij48L2Rpdj4KICAgICAgICAgICAgPHNwYW4gaWQ9InByb2NlZWRUb0NoZWNrb3V0IiBjbGFzcz0idmlzdWFsbHktaGlkZGVuIiBkYXRhLWxhYmVsPSJDaGVja291dCI+PC9zcGFuPgogICAgICAgICAgICA8c3BhbiBpZD0iY29udGludWVTaG9wcGluZyIgY2xhc3M9InZpc3VhbGx5LWhpZGRlbiIgZGF0YS1sYWJlbD0iQ29udGludWUgc2hvcHBpbmciPjwvc3Bhbj4KICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgICA8L2Rpdj4KICAgIDwvZGl2PgogIDwvZGl2PgogIDwhLS0gRU5EIE9GIE1PREFMIC0tPgo8L2Rpdj4KICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KICA8L3NlY3Rpb24+Cgo8L2Rpdj4gPHNlY3Rpb24gaWQ9ImxpZmVjeWNsZSI+CiAgPGRpdiBjbGFzcz0iY29udGFpbmVyIj4KICAgIDxkaXYgY2xhc3M9InJvdyI+CiAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC0xMiI+CiAgICAgICAgPGgzPkxpZmUgY3ljbGU8L2gzPgogICAgICAgIDxici8+CiAgICAgICAgPGRpdiBjbGFzcz0ibGlmZWN5Y2xlIj4KICAgICAgICAgIDx1bCBjbGFzcz0ic3RlcHMiPgogICAgICAgICAgICA8bGkgY2xhc3M9InRpbWUtc3RlcCI+CiAgICAgICAgICAgICAgICA8aDQgY2xhc3M9InRleHQtaGVscCI+UHJldmlvdXNseTwvaDQ+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzdGVwIHN0ZXAtZGFyayI+CiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InN0ZXAtaXRlbSI+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic2VjdGlvbi1oZWFkIj5XaXRoZHJhd248L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8aDU+PGEgaHJlZj0iL3N0YW5kYXJkLzY5MTE5Lmh0bWwiPklTTy9JRUMgMTA2NDY6MjAxNzwvYT48L2g1PgogICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InN0ZXAtaXRlbSI+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic2VjdGlvbi1oZWFkIj5XaXRoZHJhd248L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8aDU+PGEgaHJlZj0iL3N0YW5kYXJkLzcwNzY2Lmh0bWwiPklTTy9JRUMgMTA2NDY6MjAxNy9BbWQgMToyMDE5PC9hPjwvaDU+CiAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3RlcC1pdGVtIj4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzZWN0aW9uLWhlYWQiPldpdGhkcmF3bjwvZGl2PgogICAgICAgICAgICAgICAgICAgIDxoNT48YSBocmVmPSIvc3RhbmRhcmQvNzM3NzMuaHRtbCI+SVNPL0lFQyAxMDY0NjoyMDE3L0FtZCAyOjIwMTk8L2E+PC9oNT4KICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICA8bGkgY2xhc3M9InRpbWUtc3RlcCI+CiAgICAgICAgICAgICAgPGg0IGNsYXNzPSJ0ZXh0LWhlbHAiPk5vdzwvaDQ+CiAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3RlcCBzdGVwLXN1Y2Nlc3MgYWN0aXZlIj4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzZWN0aW9uLWhlYWQiPlB1Ymxpc2hlZDwvZGl2PgogICAgICAgICAgICAgICAgICAgIDxoNT5JU08vSUVDIDEwNjQ2OjIwMjA8L2g1PgogICAgICAgICAgICAgICAgICA8YSBkYXRhLWJzLXRvZ2dsZT0iY29sbGFwc2UiIHJvbGU9ImJ1dHRvbiIgYXJpYS1leHBhbmRlZD0iZmFsc2UiIGhyZWY9IiNzdGFnZXMiIGNsYXNzPSJkcm9wZG93bi10b2dnbGUgY3VycmVudC1zdGFnZSB0ZXh0LXNtIGNvbGxhcHNlZCI+U3RhZ2U6IDxzdHJvbmc+NjAuNjA8L3N0cm9uZz48L2E+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgIDx1bCBjbGFzcz0ic3RhZ2VzIGNvbGxhcHNlIiBpZD0ic3RhZ2VzIj4KICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZHJvcGRvd24gYWxlcnQtaW5mbyI+CgogICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApIiAgcm9sZT0iYnV0dG9uIiBhcmlhLWhhc3BvcHVwPSJ0cnVlIiBhcmlhLWV4cGFuZGVkPSJmYWxzZSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJzdGFnZS1jb2RlIj4wMDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3RhZ2UtdGl0bGUiPlByZWxpbWluYXJ5PC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICA8L2E+CgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJkcm9wZG93biBhbGVydC1pbmZvIj4KCiAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCkiIGNsYXNzPSJkcm9wZG93bi10b2dnbGUiIGRhdGEtYnMtZGlzcGxheT0ic3RhdGljIiBkYXRhLWJzLXRvZ2dsZT0iZHJvcGRvd24iIHJvbGU9ImJ1dHRvbiIgYXJpYS1oYXNwb3B1cD0idHJ1ZSIgYXJpYS1leHBhbmRlZD0iZmFsc2UiPgogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ic3RhZ2UtY29kZSI+MTA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InN0YWdlLXRpdGxlIj5Qcm9wb3NhbDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgPC9hPgoKICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZHJvcGRvd24tbWVudSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL3N0YWdlLWNvZGVzLmh0bWwjMTBfOTkiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ic3RhZ2UtY29kZSI+MTAuOTk8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJzdGFnZS1kYXRlIj4yMDE4LTA4LTAzPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzdGFnZS10aXRsZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTmV3IHByb2plY3QgYXBwcm92ZWQ8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPjwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImRyb3Bkb3duIGFsZXJ0LWluZm8iPgoKICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKSIgIHJvbGU9ImJ1dHRvbiIgYXJpYS1oYXNwb3B1cD0idHJ1ZSIgYXJpYS1leHBhbmRlZD0iZmFsc2UiPgogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ic3RhZ2UtY29kZSI+MjA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InN0YWdlLXRpdGxlIj5QcmVwYXJhdG9yeTwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgPC9hPgoKICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZHJvcGRvd24gYWxlcnQtaW5mbyI+CgogICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApIiBjbGFzcz0iZHJvcGRvd24tdG9nZ2xlIiBkYXRhLWJzLWRpc3BsYXk9InN0YXRpYyIgZGF0YS1icy10b2dnbGU9ImRyb3Bkb3duIiByb2xlPSJidXR0b24iIGFyaWEtaGFzcG9wdXA9InRydWUiIGFyaWEtZXhwYW5kZWQ9ImZhbHNlIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InN0YWdlLWNvZGUiPjMwPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzdGFnZS10aXRsZSI+Q29tbWl0dGVlPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICA8L2E+CgogICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJkcm9wZG93bi1tZW51Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvc3RhZ2UtY29kZXMuaHRtbCMzMF8wMCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJzdGFnZS1jb2RlIj4zMC4wMDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InN0YWdlLWRhdGUiPjIwMTgtMDktMjc8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InN0YWdlLXRpdGxlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBDb21taXR0ZWUgZHJhZnQgKENEKSByZWdpc3RlcmVkPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT48bGkgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL3N0YWdlLWNvZGVzLmh0bWwjMzBfMjAiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ic3RhZ2UtY29kZSI+MzAuMjA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJzdGFnZS1kYXRlIj4yMDE4LTA5LTI4PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzdGFnZS10aXRsZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQ0Qgc3R1ZHkgaW5pdGlhdGVkPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT48bGkgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL3N0YWdlLWNvZGVzLmh0bWwjMzBfNjAiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ic3RhZ2UtY29kZSI+MzAuNjA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJzdGFnZS1kYXRlIj4yMDE4LTEyLTIyPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzdGFnZS10aXRsZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQ2xvc2Ugb2YgY29tbWVudCBwZXJpb2Q8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPjxsaSA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvc3RhZ2UtY29kZXMuaHRtbCMzMF85MiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJzdGFnZS1jb2RlIj4zMC45Mjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InN0YWdlLWRhdGUiPjIwMTktMDItMTI8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InN0YWdlLXRpdGxlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBDRCByZWZlcnJlZCBiYWNrIHRvIFdvcmtpbmcgR3JvdXA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPjxsaSA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvc3RhZ2UtY29kZXMuaHRtbCMzMF8wMCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJzdGFnZS1jb2RlIj4zMC4wMDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InN0YWdlLWRhdGUiPjIwMTktMDItMTI8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InN0YWdlLXRpdGxlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBDb21taXR0ZWUgZHJhZnQgKENEKSByZWdpc3RlcmVkPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT48bGkgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL3N0YWdlLWNvZGVzLmh0bWwjMzBfMjAiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ic3RhZ2UtY29kZSI+MzAuMjA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJzdGFnZS1kYXRlIj4yMDE5LTAyLTEyPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzdGFnZS10aXRsZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQ0Qgc3R1ZHkgaW5pdGlhdGVkPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT48bGkgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL3N0YWdlLWNvZGVzLmh0bWwjMzBfNjAiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ic3RhZ2UtY29kZSI+MzAuNjA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJzdGFnZS1kYXRlIj4yMDE5LTA1LTA3PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzdGFnZS10aXRsZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQ2xvc2Ugb2YgY29tbWVudCBwZXJpb2Q8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPjxsaSA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvc3RhZ2UtY29kZXMuaHRtbCMzMF85MiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJzdGFnZS1jb2RlIj4zMC45Mjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InN0YWdlLWRhdGUiPjIwMTktMDgtMDY8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InN0YWdlLXRpdGxlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBDRCByZWZlcnJlZCBiYWNrIHRvIFdvcmtpbmcgR3JvdXA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPjxsaSA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvc3RhZ2UtY29kZXMuaHRtbCMzMF8wMCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJzdGFnZS1jb2RlIj4zMC4wMDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InN0YWdlLWRhdGUiPjIwMTktMDgtMDY8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InN0YWdlLXRpdGxlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBDb21taXR0ZWUgZHJhZnQgKENEKSByZWdpc3RlcmVkPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT48bGkgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL3N0YWdlLWNvZGVzLmh0bWwjMzBfMjAiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ic3RhZ2UtY29kZSI+MzAuMjA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJzdGFnZS1kYXRlIj4yMDE5LTA4LTA3PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzdGFnZS10aXRsZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQ0Qgc3R1ZHkgaW5pdGlhdGVkPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT48bGkgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL3N0YWdlLWNvZGVzLmh0bWwjMzBfNjAiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ic3RhZ2UtY29kZSI+MzAuNjA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJzdGFnZS1kYXRlIj4yMDE5LTEwLTMxPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzdGFnZS10aXRsZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQ2xvc2Ugb2YgY29tbWVudCBwZXJpb2Q8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPjxsaSA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvc3RhZ2UtY29kZXMuaHRtbCMzMF85OSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJzdGFnZS1jb2RlIj4zMC45OTwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InN0YWdlLWRhdGUiPjIwMTktMTItMTY8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InN0YWdlLXRpdGxlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBDRCBhcHByb3ZlZCBmb3IgcmVnaXN0cmF0aW9uIGFzIERJUzwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+PC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZHJvcGRvd24gYWxlcnQtaW5mbyI+CgogICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApIiBjbGFzcz0iZHJvcGRvd24tdG9nZ2xlIiBkYXRhLWJzLWRpc3BsYXk9InN0YXRpYyIgZGF0YS1icy10b2dnbGU9ImRyb3Bkb3duIiByb2xlPSJidXR0b24iIGFyaWEtaGFzcG9wdXA9InRydWUiIGFyaWEtZXhwYW5kZWQ9ImZhbHNlIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InN0YWdlLWNvZGUiPjQwPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzdGFnZS10aXRsZSI+RW5xdWlyeTwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgPC9hPgoKICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZHJvcGRvd24tbWVudSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL3N0YWdlLWNvZGVzLmh0bWwjNDBfMDAiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ic3RhZ2UtY29kZSI+NDAuMDA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJzdGFnZS1kYXRlIj4yMDE5LTEyLTE3PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzdGFnZS10aXRsZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRElTIHJlZ2lzdGVyZWQ8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPjxsaSA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvc3RhZ2UtY29kZXMuaHRtbCM0MF8yMCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJzdGFnZS1jb2RlIj40MC4yMDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InN0YWdlLWRhdGUiPjIwMjAtMDItMTg8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InN0YWdlLXRpdGxlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBESVMgYmFsbG90IGluaXRpYXRlZDogMTIgd2Vla3M8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPjxsaSA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvc3RhZ2UtY29kZXMuaHRtbCM0MF82MCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJzdGFnZS1jb2RlIj40MC42MDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InN0YWdlLWRhdGUiPjIwMjAtMDUtMTM8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InN0YWdlLXRpdGxlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBDbG9zZSBvZiB2b3Rpbmc8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPjxsaSA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvc3RhZ2UtY29kZXMuaHRtbCM0MF85OSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJzdGFnZS1jb2RlIj40MC45OTwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InN0YWdlLWRhdGUiPjIwMjAtMDctMTA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InN0YWdlLXRpdGxlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBGdWxsIHJlcG9ydCBjaXJjdWxhdGVkOiBESVMgYXBwcm92ZWQgZm9yIHJlZ2lzdHJhdGlvbiBhcyBGRElTPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT48L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJkcm9wZG93biBhbGVydC1pbmZvIj4KCiAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCkiIGNsYXNzPSJkcm9wZG93bi10b2dnbGUiIGRhdGEtYnMtZGlzcGxheT0ic3RhdGljIiBkYXRhLWJzLXRvZ2dsZT0iZHJvcGRvd24iIHJvbGU9ImJ1dHRvbiIgYXJpYS1oYXNwb3B1cD0idHJ1ZSIgYXJpYS1leHBhbmRlZD0iZmFsc2UiPgogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ic3RhZ2UtY29kZSI+NTA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InN0YWdlLXRpdGxlIj5BcHByb3ZhbDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgPC9hPgoKICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZHJvcGRvd24tbWVudSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL3N0YWdlLWNvZGVzLmh0bWwjNTBfMDAiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ic3RhZ2UtY29kZSI+NTAuMDA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJzdGFnZS1kYXRlIj4yMDIwLTA3LTE2PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzdGFnZS10aXRsZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRmluYWwgdGV4dCByZWNlaXZlZCBvciBGRElTIHJlZ2lzdGVyZWQgZm9yIGZvcm1hbCBhcHByb3ZhbDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+PGxpID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9zdGFnZS1jb2Rlcy5odG1sIzUwXzIwIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InN0YWdlLWNvZGUiPjUwLjIwPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ic3RhZ2UtZGF0ZSI+MjAyMC0xMC0wODwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3RhZ2UtdGl0bGUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFByb29mIHNlbnQgdG8gc2VjcmV0YXJpYXQgb3IgRkRJUyBiYWxsb3QgaW5pdGlhdGVkOiA4IHdlZWtzPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT48bGkgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL3N0YWdlLWNvZGVzLmh0bWwjNTBfNjAiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ic3RhZ2UtY29kZSI+NTAuNjA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJzdGFnZS1kYXRlIj4yMDIwLTEyLTA0PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzdGFnZS10aXRsZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQ2xvc2Ugb2Ygdm90aW5nLiBQcm9vZiByZXR1cm5lZCBieSBzZWNyZXRhcmlhdDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+PC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZHJvcGRvd24gYmctc3VjY2VzcyBhY3RpdmUiPgoKICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKSIgY2xhc3M9ImRyb3Bkb3duLXRvZ2dsZSIgZGF0YS1icy1kaXNwbGF5PSJzdGF0aWMiIGRhdGEtYnMtdG9nZ2xlPSJkcm9wZG93biIgcm9sZT0iYnV0dG9uIiBhcmlhLWhhc3BvcHVwPSJ0cnVlIiBhcmlhLWV4cGFuZGVkPSJmYWxzZSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJzdGFnZS1jb2RlIj42MDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3RhZ2UtdGl0bGUiPlB1YmxpY2F0aW9uPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICA8L2E+CgogICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJkcm9wZG93bi1tZW51Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvc3RhZ2UtY29kZXMuaHRtbCM2MF8wMCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJzdGFnZS1jb2RlIj42MC4wMDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InN0YWdlLWRhdGUiPjIwMjAtMTItMDQ8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InN0YWdlLXRpdGxlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBJbnRlcm5hdGlvbmFsIFN0YW5kYXJkIHVuZGVyIHB1YmxpY2F0aW9uPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT48bGkgY2xhc3M9ImFjdGl2ZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvc3RhZ2UtY29kZXMuaHRtbCM2MF82MCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJzdGFnZS1jb2RlIj42MC42MDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InN0YWdlLWRhdGUiPjIwMjAtMTItMjE8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InN0YWdlLXRpdGxlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBJbnRlcm5hdGlvbmFsIFN0YW5kYXJkIHB1Ymxpc2hlZDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+PC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZHJvcGRvd24gYWxlcnQtbXV0ZWQiPgoKICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKSIgY2xhc3M9ImRyb3Bkb3duLXRvZ2dsZSIgZGF0YS1icy1kaXNwbGF5PSJzdGF0aWMiIGRhdGEtYnMtdG9nZ2xlPSJkcm9wZG93biIgcm9sZT0iYnV0dG9uIiBhcmlhLWhhc3BvcHVwPSJ0cnVlIiBhcmlhLWV4cGFuZGVkPSJmYWxzZSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJzdGFnZS1jb2RlIj45MDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3RhZ2UtdGl0bGUiPlJldmlldzwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgPC9hPgoKICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZHJvcGRvd24tbWVudSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgIGNsYXNzPSdsaXN0LXNlcGFyYXRpb24nPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL3N0YWdlLWNvZGVzLmh0bWwjOTBfMjAiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ic3RhZ2UtY29kZSI+OTAuMjA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJzdGFnZS1kYXRlIj48L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InN0YWdlLXRpdGxlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBJbnRlcm5hdGlvbmFsIFN0YW5kYXJkIHVuZGVyIHN5c3RlbWF0aWMgcmV2aWV3PC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT48bGkgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL3N0YWdlLWNvZGVzLmh0bWwjOTBfNjAiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ic3RhZ2UtY29kZSI+OTAuNjA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJzdGFnZS1kYXRlIj48L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InN0YWdlLXRpdGxlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBDbG9zZSBvZiByZXZpZXc8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPjxsaSA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvc3RhZ2UtY29kZXMuaHRtbCM5MF85MiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJzdGFnZS1jb2RlIj45MC45Mjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InN0YWdlLWRhdGUiPjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3RhZ2UtdGl0bGUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEludGVybmF0aW9uYWwgU3RhbmRhcmQgdG8gYmUgcmV2aXNlZDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+PGxpID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9zdGFnZS1jb2Rlcy5odG1sIzkwXzkzIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InN0YWdlLWNvZGUiPjkwLjkzPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ic3RhZ2UtZGF0ZSI+PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzdGFnZS10aXRsZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgSW50ZXJuYXRpb25hbCBTdGFuZGFyZCBjb25maXJtZWQ8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPjxsaSA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvc3RhZ2UtY29kZXMuaHRtbCM5MF85OSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJzdGFnZS1jb2RlIj45MC45OTwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InN0YWdlLWRhdGUiPjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3RhZ2UtdGl0bGUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFdpdGhkcmF3YWwgb2YgSW50ZXJuYXRpb25hbCBTdGFuZGFyZCBwcm9wb3NlZCBieSBUQyBvciBTQzwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+PC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZHJvcGRvd24gYWxlcnQtbXV0ZWQiPgoKICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKSIgY2xhc3M9ImRyb3Bkb3duLXRvZ2dsZSIgZGF0YS1icy1kaXNwbGF5PSJzdGF0aWMiIGRhdGEtYnMtdG9nZ2xlPSJkcm9wZG93biIgcm9sZT0iYnV0dG9uIiBhcmlhLWhhc3BvcHVwPSJ0cnVlIiBhcmlhLWV4cGFuZGVkPSJmYWxzZSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJzdGFnZS1jb2RlIj45NTwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3RhZ2UtdGl0bGUiPldpdGhkcmF3YWw8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgIDwvYT4KCiAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImRyb3Bkb3duLW1lbnUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9zdGFnZS1jb2Rlcy5odG1sIzk1Xzk5Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InN0YWdlLWNvZGUiPjk1Ljk5PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ic3RhZ2UtZGF0ZSI+PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzdGFnZS10aXRsZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgV2l0aGRyYXdhbCBvZiBJbnRlcm5hdGlvbmFsIFN0YW5kYXJkPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT48L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgPC91bD4KCiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InN1Yi1zdGVwIj4KICAgICAgICAgICAgICAgIDxoNT5Db3JyaWdlbmRhIC8gQW1lbmRtZW50czwvaDU+CiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InN0ZXAgc3RlcC1pbmZvIj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InN0ZXAtaXRlbSI+CiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InNlY3Rpb24taGVhZCI+VW5kZXIgZGV2ZWxvcG1lbnQ8L2Rpdj4KICAgICAgICAgICAgICAgICAgPGg1PjxhIGhyZWY9Ii9zdGFuZGFyZC84MzM2Mi5odG1sIj5JU08vSUVDIDEwNjQ2OjIwMjAvRkRBbWQgMTwvYT48L2g1PgogICAgICAgICAgICAgICAgPC9kaXY+PGRpdiBjbGFzcz0ic3RlcC1pdGVtIj4KICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic2VjdGlvbi1oZWFkIj5VbmRlciBkZXZlbG9wbWVudDwvZGl2PgogICAgICAgICAgICAgICAgICA8aDU+PGEgaHJlZj0iL3N0YW5kYXJkLzg1Mjg3Lmh0bWwiPklTTy9JRUMgMTA2NDY6MjAyMC9DRCBBbWQgMjwvYT48L2g1PgogICAgICAgICAgICAgICAgPC9kaXY+PC9kaXY+PC9kaXY+PC9saT4KICAgICAgICAgICAgPC91bD4KICAgICAgICA8L2Rpdj4KICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KICA8L2Rpdj4KPC9zZWN0aW9uPgo8c2VjdGlvbiBjbGFzcz0iYmctbGlnaHRncmF5IiBpZD0iY29udGFjdCI+CiAgPGRpdiBjbGFzcz0iY29udGFpbmVyIj4KICAgIDxkaXYgY2xhc3M9InJvdyI+CiAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC00Ij4KICAgICAgICA8aDQ+R290IGEgcXVlc3Rpb24/PC9oND4KCjxwPkNoZWNrIG91dCBvdXIgPGEgaHJlZj0iL2ZyZXF1ZW50bHktYXNrZWQtcXVlc3Rpb25zLWZhcXMuaHRtbCIgdGl0bGU9IkZyZXF1ZW50bHkgQXNrZWQgUXVlc3Rpb25zIChGQVFzKSI+RkFRczwvYT48L3A+PC9kaXY+CiAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC00Ij4KICAgICAgICA8ZGl2IGNsYXNzPSJ2Y2FyZCBjb250YWN0IG5vLWZpZ3VyZSBjbGVhcmZpeCIgaXRlbXNjb3BlPSIiIGl0ZW10eXBlPSJodHRwOi8vc2NoZW1hLm9yZy9QZXJzb24iPgo8ZGl2IGNsYXNzPSJjb250ZW50LWJveCBuby1pbWFnZSI+CjxkaXYgY2xhc3M9ImZuIG4iPjxzcGFuIGNsYXNzPSJnaXZlbi1uYW1lIiBpdGVtcHJvcD0iZ2l2ZW5OYW1lIj5DdXN0b21lciBjYXJlPC9zcGFuPjwvZGl2PgoKPGRpdiBjbGFzcz0idGVsIiBpdGVtcHJvcD0idGVsZXBob25lIj4rNDEgMjIgNzQ5IDA4IDg4PC9kaXY+Cgo8ZGl2IGNsYXNzPSJlbWFpbCIgaXRlbXByb3A9ImVtYWlsIj48YSBocmVmPSJtYWlsdG86Y3VzdG9tZXJzZXJ2aWNlQGlzby5vcmciPmN1c3RvbWVyc2VydmljZUBpc28ub3JnPC9hPjwvZGl2PgoKPGhyIC8+CjxkaXYgY2xhc3M9Im5vdGUiPgo8cCBjbGFzcz0ic21hbGwiPk9wZW5pbmcgaG91cnM6PGJyIC8+Ck1vbmRheSB0byBGcmlkYXkgLSAwOTowMC0xMjowMCwgMTQ6MDAtMTc6MDAgKFVUQysxKTwvcD4KPC9kaXY+CjwvZGl2Pgo8L2Rpdj48L2Rpdj4KICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTQiPgogICAgICAgIDxkaXYgY2xhc3M9IndlbGwgdGV4dC1jZW50ZXIgY2xlYXJmaXgiPgogIDxoND5LZWVwIHVwIHRvIGRhdGUgd2l0aCBJU088L2g0PgoKPHA+U2lnbiB1cCB0byBvdXIgbmV3c2xldHRlciBmb3IgdGhlIGxhdGVzdCBuZXdzLCB2aWV3cyBhbmQgcHJvZHVjdCBpbmZvcm1hdGlvbi48L3A+PGRpdj48YSBjbGFzcz0iYnRuIGJ0bi1wcmltYXJ5IiBkYXRhLWZhbmN5Ym94PSIiIGRhdGEtdHlwZT0iaWZyYW1lIiBocmVmPSJodHRwczovL2NvbmZpcm1zdWJzY3JpcHRpb24uY29tL2gvZC8zNDEyREE3OTkzQUMzQjdDIj5TdWJzY3JpYmU8L2E+PC9kaXY+CjxzdHlsZSB0eXBlPSJ0ZXh0L2NzcyI+LmZhbmN5Ym94LXNsaWRlLS1pZnJhbWUgLmZhbmN5Ym94LWNvbnRlbnQgewogd2lkdGggIDogNTAwcHg7CiBoZWlnaHQgOiA2MDBweDsKIG1heC13aWR0aCAgOiA4MCU7CiBtYXgtaGVpZ2h0IDogODAlOwogbWFyZ2luOiAwOwp9Ci5mYW5jeWJveC1zbGlkZS0taWZyYW1lIC5mYW5jeWJveC1jb250ZW50IC5sLXBhZ2UtY29udGFpbmVyIHsKcGFkZGluZy10b3A6IDEuNXJlbSAhaW1wb3J0YW50Owp9Cjwvc3R5bGU+PC9kaXY+PC9kaXY+CiAgICA8L2Rpdj4KICA8L2Rpdj4KPC9zZWN0aW9uPjxkaXYgY2xhc3M9Im5hdi1icmVhZGNydW1iIHByaW50LWZvb3RlciBiZy1ibGFjayI+CiAgICAgICAgPGRpdiBjbGFzcz0iY29udGFpbmVyIj4KICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1zbS0xMCBzbWFsbCI+CiAgICAgICAgICAgICAgPCEtLSBCUkVBRENSVU1CIC0tPgogICAgICAgICAgICAgIDxvbCBjbGFzcz0iYnJlYWRjcnVtYiI+CiAgICA8bGkgY2xhc3M9ImJyZWFkY3J1bWItaXRlbSI+PGEgaHJlZj0iL2hvbWUuaHRtbCIgdGl0bGU9IkhvbWUgcGFnZSI+PGkgY2xhc3M9ImJpLWhvdXNlIiBhcmlhLWhpZGRlbj0idHJ1ZSI+PC9pPjwvYT48L2xpPgogICAgPGxpIGNsYXNzPSJicmVhZGNydW1iLWl0ZW0iPgogICAgICAgICAgPGEgaHJlZj0iL3N0b3JlLmh0bWwiPlN0b3JlPC9hPgogICAgICAgICAgICA8L2xpPgogICAgICA8bGkgY2xhc3M9ImJyZWFkY3J1bWItaXRlbSI+CiAgICAgICAgICA8YSBocmVmPSIvc3RhbmRhcmRzLWNhdGFsb2d1ZS9icm93c2UtYnktaWNzLmh0bWwiID5TdGFuZGFyZHMgY2F0YWxvZ3VlPC9hPgo8L2xpPgogICAgICA8bGkgY2xhc3M9ImJyZWFkY3J1bWItaXRlbSI+CiAgICAgICAgICA8YSBocmVmPSIvc3RhbmRhcmRzLWNhdGFsb2d1ZS9icm93c2UtYnktaWNzLmh0bWwiPklDUzwvYT4KICAgICAgICAgICAgPC9saT4KICAgICAgPGxpIGNsYXNzPSJicmVhZGNydW1iLWl0ZW0iPjxhIGhyZWY9Ii9lbi9pY3MvMzUuaHRtbCI+MzU8L2E+PC9saT4KICAgIDxsaSBjbGFzcz0iYnJlYWRjcnVtYi1pdGVtIj48YSBocmVmPSIvZW4vaWNzLzM1LjA0MC5odG1sIj4zNS4wNDA8L2E+PC9saT4KICAgIDxsaSBjbGFzcz0iYnJlYWRjcnVtYi1pdGVtIj48YSBocmVmPSIvZW4vaWNzLzM1LjA0MC4xMC5odG1sIj4zNS4wNDAuMTA8L2E+PC9saT48bGkgY2xhc3M9ImJyZWFkY3J1bWItaXRlbSI+SVNPL0lFQyAxMDY0NjoyMDIwPC9saT48L29sPjwvZGl2PgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtc20tMiBoaWRkZW4tcHJpbnQgdGV4dC1lbmQgc21hbGwgbXQtMyBtdC1zbS0wIj4KICAgICAgICAgICAgICA8YSByb2xlPSJidXR0b24iIGNsYXNzPSJkcm9wZG93bi10b2dnbGUgdGV4dC13aGl0ZSBjb2xsYXBzZWQiIGRhdGEtYnMtdG9nZ2xlPSJjb2xsYXBzZSIgaHJlZj0iI2NvbGxhcHNlU2l0ZW1hcCIgdGFyZ2V0PSJfc2VsZiIgYXJpYS1leHBhbmRlZD0iZmFsc2UiIGFyaWEtY29udHJvbHM9ImNvbGxhcHNlU2l0ZW1hcCI+U2l0ZW1hcDwvYT4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2xsYXBzZSBib3JkZXItdG9wIiBpZD0iY29sbGFwc2VTaXRlbWFwIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93Ij4KICAgICAgICAgICAgICA8IS0tIFNJVEVNQVAgLS0+CiAgICAgICAgICAgICAgPG5hdiByb2xlPSJuYXZpZ2F0aW9uIiBhcmlhLWxhYmVsPSJTaXRlbWFwIiBjbGFzcz0ic2l0ZW1hcC1mb290ZXIgY2xlYXJmaXggc21hbGwgIiBpZD0ibmF2LXNpdGVtYXAiPjx1bCByb2xlPSJtZW51YmFyIiBjbGFzcz0iIG5hdi1sZXZlbDEgbGlzdC1pbmxpbmUtNSBjbGVhcmZpeCI+PGxpIHJvbGU9Im5vbmUiIGNsYXNzPSJoYXNDaGlsZHJlbiBmaXJzdEluTGV2ZWwiPjxhIGNsYXNzPSJuYXYtbGluayAiIHJvbGU9Im1lbnVpdGVtIiBocmVmPSIvc3RhbmRhcmRzLmh0bWwiPlN0YW5kYXJkczwvYT48dWwgcm9sZT0ibWVudSIgY2xhc3M9IiBuYXYtbGV2ZWwyICBsaXN0LXVuc3R5bGVkIj48bGkgcm9sZT0ibm9uZSIgY2xhc3M9Im5vQ2hpbGRyZW4gZmlyc3RJbkxldmVsIj48YSBjbGFzcz0ibmF2LWxpbmsgIiByb2xlPSJtZW51aXRlbSIgaHJlZj0iL2JlbmVmaXRzLW9mLXN0YW5kYXJkcy5odG1sIj5CZW5lZml0czwvYT48L2xpPjxsaSByb2xlPSJub25lIiBjbGFzcz0ibm9DaGlsZHJlbiI+PGEgY2xhc3M9Im5hdi1saW5rICIgcm9sZT0ibWVudWl0ZW0iIGhyZWY9Ii9wb3B1bGFyLXN0YW5kYXJkcy5odG1sIj5Qb3B1bGFyIHN0YW5kYXJkczwvYT48L2xpPjxsaSByb2xlPSJub25lIiBjbGFzcz0ibm9DaGlsZHJlbiI+PGEgY2xhc3M9Im5hdi1saW5rICIgcm9sZT0ibWVudWl0ZW0iIGhyZWY9Ii9jb25mb3JtaXR5LWFzc2Vzc21lbnQuaHRtbCI+Q29uZm9ybWl0eSBhc3Nlc3NtZW50PC9hPjwvbGk+PGxpIHJvbGU9Im5vbmUiIGNsYXNzPSJub0NoaWxkcmVuIGxhc3RJbkxldmVsIj48YSBjbGFzcz0ibmF2LWxpbmsgIiByb2xlPSJtZW51aXRlbSIgaHJlZj0iL3NkZ3MuaHRtbCI+U0RHczwvYT48L2xpPjwvdWw+PCEtLSBjbG9zZSBvZiB1bCBsZXZlbCAtLT48L2xpPjxsaSByb2xlPSJub25lIiBjbGFzcz0iaGFzQ2hpbGRyZW4iPjxhIGNsYXNzPSJuYXYtbGluayAiIHJvbGU9Im1lbnVpdGVtIiBocmVmPSIvYWJvdXQtdXMuaHRtbCI+QWJvdXQgdXM8L2E+PHVsIHJvbGU9Im1lbnUiIGNsYXNzPSIgbmF2LWxldmVsMiAgbGlzdC11bnN0eWxlZCI+PGxpIHJvbGU9Im5vbmUiIGNsYXNzPSJub0NoaWxkcmVuIGZpcnN0SW5MZXZlbCI+PGEgY2xhc3M9Im5hdi1saW5rICIgcm9sZT0ibWVudWl0ZW0iIGhyZWY9Ii93aGF0LXdlLWRvLmh0bWwiPldoYXQgd2UgZG88L2E+PC9saT48bGkgcm9sZT0ibm9uZSIgY2xhc3M9Im5vQ2hpbGRyZW4iPjxhIGNsYXNzPSJuYXYtbGluayAiIHJvbGU9Im1lbnVpdGVtIiBocmVmPSIvc3RydWN0dXJlLmh0bWwiPlN0cnVjdHVyZTwvYT48L2xpPjxsaSByb2xlPSJub25lIiBjbGFzcz0ibm9DaGlsZHJlbiI+PGEgY2xhc3M9Im5hdi1saW5rICIgcm9sZT0ibWVudWl0ZW0iIGhyZWY9Ii9tZW1iZXJzLmh0bWwiPk1lbWJlcnM8L2E+PC9saT48bGkgcm9sZT0ibm9uZSIgY2xhc3M9Im5vQ2hpbGRyZW4gbGFzdEluTGV2ZWwiPjxhIGNsYXNzPSJuYXYtbGluayAiIHJvbGU9Im1lbnVpdGVtIiBocmVmPSIvc3RyYXRlZ3kyMDMwLmh0bWwiPlN0cmF0ZWd5PC9hPjwvbGk+PC91bD48IS0tIGNsb3NlIG9mIHVsIGxldmVsIC0tPjwvbGk+PGxpIHJvbGU9Im5vbmUiIGNsYXNzPSJoYXNDaGlsZHJlbiI+PGEgY2xhc3M9Im5hdi1saW5rICIgcm9sZT0ibWVudWl0ZW0iIGhyZWY9Ii9uZXdzLmh0bWwiPk5ld3M8L2E+PHVsIHJvbGU9Im1lbnUiIGNsYXNzPSIgbmF2LWxldmVsMiAgbGlzdC11bnN0eWxlZCI+PGxpIHJvbGU9Im5vbmUiIGNsYXNzPSJub0NoaWxkcmVuIj48YSBjbGFzcz0ibmF2LWxpbmsgIiByb2xlPSJtZW51aXRlbSIgaHJlZj0iL2V2ZW50cy5odG1sIj5FdmVudHM8L2E+PC9saT48bGkgcm9sZT0ibm9uZSIgY2xhc3M9Im5vQ2hpbGRyZW4iPjxhIGNsYXNzPSJuYXYtbGluayAiIHJvbGU9Im1lbnVpdGVtIiBocmVmPSIvbWVkaWEta2l0Lmh0bWwiPk1lZGlhIGtpdDwvYT48L2xpPjwvdWw+PCEtLSBjbG9zZSBvZiB1bCBsZXZlbCAtLT48L2xpPjxsaSByb2xlPSJub25lIiBjbGFzcz0iaGFzQ2hpbGRyZW4iPjxhIGNsYXNzPSJuYXYtbGluayAiIHJvbGU9Im1lbnVpdGVtIiBocmVmPSIvZGV2ZWxvcGluZy1zdGFuZGFyZHMuaHRtbCI+VGFraW5nIHBhcnQ8L2E+PHVsIHJvbGU9Im1lbnUiIGNsYXNzPSIgbmF2LWxldmVsMiAgbGlzdC11bnN0eWxlZCI+PGxpIHJvbGU9Im5vbmUiIGNsYXNzPSJub0NoaWxkcmVuIGZpcnN0SW5MZXZlbCI+PGEgY2xhc3M9Im5hdi1saW5rICIgcm9sZT0ibWVudWl0ZW0iIGhyZWY9Ii93aG8tZGV2ZWxvcHMtc3RhbmRhcmRzLmh0bWwiPldobyBkZXZlbG9wcyBzdGFuZGFyZHM8L2E+PC9saT48bGkgcm9sZT0ibm9uZSIgY2xhc3M9Im5vQ2hpbGRyZW4iPjxhIGNsYXNzPSJuYXYtbGluayAiIHJvbGU9Im1lbnVpdGVtIiBocmVmPSIvZGVsaXZlcmFibGVzLWFsbC5odG1sIj5EZWxpdmVyYWJsZXM8L2E+PC9saT48bGkgcm9sZT0ibm9uZSIgY2xhc3M9Im5vQ2hpbGRyZW4iPjxhIGNsYXNzPSJuYXYtbGluayAiIHJvbGU9Im1lbnVpdGVtIiBocmVmPSIvZ2V0LWludm9sdmVkLmh0bWwiPkdldCBpbnZvbHZlZDwvYT48L2xpPjxsaSByb2xlPSJub25lIiBjbGFzcz0ibm9DaGlsZHJlbiI+PGEgY2xhc3M9Im5hdi1saW5rICIgcm9sZT0ibWVudWl0ZW0iIGhyZWY9Ii9DbGltYXRlQWN0aW9uLmh0bWwiPkNsaW1hdGUgYWN0aW9uIGtpdDwvYT48L2xpPjxsaSByb2xlPSJub25lIiBjbGFzcz0ibm9DaGlsZHJlbiBsYXN0SW5MZXZlbCI+PGEgY2xhc3M9Im5hdi1saW5rICIgcm9sZT0ibWVudWl0ZW0iIGhyZWY9Ii9yZXNvdXJjZXMuaHRtbCI+UmVzb3VyY2VzPC9hPjwvbGk+PC91bD48IS0tIGNsb3NlIG9mIHVsIGxldmVsIC0tPjwvbGk+PGxpIHJvbGU9Im5vbmUiIGNsYXNzPSJoYXNDaGlsZHJlbiBpblBhdGggIGxhc3RJbkxldmVsIj48YSBjbGFzcz0ibmF2LWxpbmsgIiByb2xlPSJtZW51aXRlbSIgaHJlZj0iL3N0b3JlLmh0bWwiPlN0b3JlPC9hPjx1bCByb2xlPSJtZW51IiBjbGFzcz0iIG5hdi1sZXZlbDIgIGxpc3QtdW5zdHlsZWQiPjxsaSByb2xlPSJub25lIiBjbGFzcz0ibm9DaGlsZHJlbiBpblBhdGggIGFjdGl2ZSBmaXJzdEluTGV2ZWwiPjxhIHJvbGU9Im1lbnVpdGVtIiBocmVmPSIvc3RhbmRhcmRzLWNhdGFsb2d1ZS9icm93c2UtYnktaWNzLmh0bWwiICBjbGFzcz0ibmF2LWxpbmsgIj5TdGFuZGFyZHMgY2F0YWxvZ3VlPC9hPjwvbGk+PGxpIHJvbGU9Im5vbmUiIGNsYXNzPSJub0NoaWxkcmVuIj48YSBjbGFzcz0ibmF2LWxpbmsgIiByb2xlPSJtZW51aXRlbSIgaHJlZj0iL3B1YmxpY2F0aW9uLWxpc3QuaHRtbCI+UHVibGljYXRpb25zIGFuZCBwcm9kdWN0czwvYT48L2xpPjwvdWw+PCEtLSBjbG9zZSBvZiB1bCBsZXZlbCAtLT48L2xpPjwvdWw+PCEtLSBjbG9zZSBvZiB1bCBsZXZlbCAtLT48L25hdj48L2Rpdj4KICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgICA8L2Rpdj4KICAgIDwvbWFpbj4KICAgIDxmb290ZXIgcm9sZT0iY29udGVudGluZm8iIGFyaWEtbGFiZWw9IkZvb3RlciIgY2xhc3M9ImZvb3Rlci1pc28gZm9vdGVyLWRhcmsgYmctZGFya2VyZ3JheSI+CiAgICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lciI+CiAgICAgICAgPGRpdiBjbGFzcz0iZm9vdGVyLWxpbmtzIGNlbnRlci1ibG9jayI+CiAgICAgICAgICA8IS0tIEZPT1RFUiBMSU5LUyAtLT4KICAgICAgICAgIDxuYXYgcm9sZT0ibmF2aWdhdGlvbiIgYXJpYS1sYWJlbD0iSW5saW5lIE5hdmlnYXRpb24iIGNsYXNzPSIiIGlkPSIiPjx1bCByb2xlPSJtZW51YmFyIiBjbGFzcz0ibGlzdC1pbmxpbmUgY2xlYXJmaXggIG5hdi1sZXZlbDEgIj48bGkgcm9sZT0ibm9uZSIgY2xhc3M9Im5vQ2hpbGRyZW4gZmlyc3RJbkxldmVsIj48YSBjbGFzcz0ibmF2LWxpbmsgIiByb2xlPSJtZW51aXRlbSIgaHJlZj0iL2lzby1uYW1lLWFuZC1sb2dvLmh0bWwiPklTTyBuYW1lIGFuZCBsb2dvPC9hPjwvbGk+PGxpIHJvbGU9Im5vbmUiIGNsYXNzPSJub0NoaWxkcmVuIj48YSBjbGFzcz0ibmF2LWxpbmsgIiByb2xlPSJtZW51aXRlbSIgaHJlZj0iL3ByaXZhY3ktYW5kLWNvcHlyaWdodC5odG1sIj5Qcml2YWN5IGFuZCBjb3B5cmlnaHQ8L2E+PC9saT48bGkgcm9sZT0ibm9uZSIgY2xhc3M9Im5vQ2hpbGRyZW4iPjxhIGNsYXNzPSJuYXYtbGluayAiIHJvbGU9Im1lbnVpdGVtIiBocmVmPSIvY29va2llcy5odG1sIj5Db29raWUgcG9saWN5PC9hPjwvbGk+PGxpIHJvbGU9Im5vbmUiIGNsYXNzPSJub0NoaWxkcmVuIj48YSByb2xlPSJtZW51aXRlbSIgaHJlZj0iL3dvcmtpbmctd2l0aC1pc28uaHRtbCIgIGNsYXNzPSJuYXYtbGluayAiPkpvYnM8L2E+PC9saT48bGkgcm9sZT0ibm9uZSIgY2xhc3M9Im5vQ2hpbGRyZW4iPjxhIGNsYXNzPSJuYXYtbGluayAiIHJvbGU9Im1lbnVpdGVtIiBocmVmPSIvZnJlcXVlbnRseS1hc2tlZC1xdWVzdGlvbnMtZmFxcy5odG1sIj5GQVFzPC9hPjwvbGk+PGxpIHJvbGU9Im5vbmUiIGNsYXNzPSJub0NoaWxkcmVuIj48YSBjbGFzcz0ibmF2LWxpbmsgIiByb2xlPSJtZW51aXRlbSIgaHJlZj0iL2NvbnRhY3QtaXNvLmh0bWwiPkNvbnRhY3QgSVNPPC9hPjwvbGk+PC91bD48IS0tIGNsb3NlIG9mIHVsIGxldmVsIC0tPjwvbmF2PjwvZGl2PgogICAgICAgIDxkaXYgY2xhc3M9ImZvb3Rlci1zb2NpYWwgY2xlYXJmaXgiPgogICAgICAgICAgPHVsIGl0ZW1zY29wZSBpdGVtdHlwZT0iaHR0cHM6Ly9zY2hlbWEub3JnL09yZ2FuaXphdGlvbiI+CiAgICAgICAgICAgIDxsaW5rIGl0ZW1wcm9wPSJ1cmwiIGhyZWY9Imh0dHBzOi8vd3d3Lmlzby5vcmcvIj4KICAgICAgICAgICAgPGxpPjxhIGl0ZW1wcm9wPSJzYW1lQXMiIHRhcmdldD0iX2JsYW5rIiByZWw9Im5vb3BlbmVyIiBocmVmPSJodHRwczovL3d3dy5saW5rZWRpbi5jb20vY29tcGFueS9pc29zdGFuZGFyZHMiIHRpdGxlPSJMaW5rZWRpbiI+PGkgY2xhc3M9ImJpLWxpbmtlZGluIj48L2k+PC9hPjwvbGk+CiAgICAgICAgICAgIDxsaT48YSBpdGVtcHJvcD0ic2FtZUFzIiB0YXJnZXQ9Il9ibGFuayIgcmVsPSJub29wZW5lciIgaHJlZj0iaHR0cHM6Ly90d2l0dGVyLmNvbS9pc29zdGFuZGFyZHMiIHRpdGxlPSJUd2l0dGVyIj48aSBjbGFzcz0iYmktdHdpdHRlciI+PC9pPjwvYT48L2xpPgogICAgICAgICAgICA8bGk+PGEgaXRlbXByb3A9InNhbWVBcyIgdGFyZ2V0PSJfYmxhbmsiIHJlbD0ibm9vcGVuZXIiIGhyZWY9Imh0dHBzOi8vd3d3LmZhY2Vib29rLmNvbS9pc29zdGFuZGFyZHMiIHRpdGxlPSJGYWNlYm9vayI+PGkgY2xhc3M9ImJpLWZhY2Vib29rIj48L2k+PC9hPjwvbGk+CiAgICAgICAgICAgIDxsaT48YSBpdGVtcHJvcD0ic2FtZUFzIiB0YXJnZXQ9Il9ibGFuayIgcmVsPSJub29wZW5lciIgaHJlZj0iaHR0cHM6Ly93d3cueW91dHViZS5jb20vdXNlci9QbGFuZXRJU08iIHRpdGxlPSJZb3VUdWJlIj48aSBjbGFzcz0iYmkteW91dHViZSI+PC9pPjwvYT48L2xpPgogICAgICAgICAgICA8bGk+PGEgaXRlbXByb3A9InNhbWVBcyIgdGFyZ2V0PSJfYmxhbmsiIHJlbD0ibm9vcGVuZXIiIGhyZWY9Imh0dHBzOi8vd3d3Lmluc3RhZ3JhbS5jb20vaXNvc3RhbmRhcmRzIiB0aXRsZT0iSW5zdGFncmFtIj48aSBjbGFzcz0iYmktaW5zdGFncmFtIj48L2k+PC9hPjwvbGk+CiAgICAgICAgICA8L3VsPgogICAgICAgIDwvZGl2PgogICAgICAgIDxwIGNsYXNzPSJsZWFkIj5HcmVhdCB0aGluZ3MgaGFwcGVuIHdoZW4gdGhlIHdvcmxkIGFncmVlczwvcD4KICAgICAgICA8ZGl2IGNsYXNzPSJyb3ciPgogICAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTggY29sLW1kLW9mZnNldC0yIHB1bGwtbGVmdCI+CiAgICAgICAgICAgIDxwIGNsYXNzPSJ0ZXh0LXhzIj5XZSBhcmUgY29tbWl0dGVkIHRvIGVuc3VyaW5nIHRoYXQgb3VyIHdlYnNpdGUgaXMgYWNjZXNzaWJsZSB0byBldmVyeW9uZS4gSWYgeW91IGhhdmUgYW55IHF1ZXN0aW9ucyBvciBzdWdnZXN0aW9ucyByZWdhcmRpbmcgdGhlIGFjY2Vzc2liaWxpdHkgb2YgdGhpcyBzaXRlLCBwbGVhc2UgPGEgaHJlZj0ibWFpbHRvOndlYm1hc3RlckBpc28ub3JnP3N1YmplY3Q9QWNjZXNzaWJpbGl0eSIgc3R5bGU9IndoaXRlLXNwYWNlOiBub3dyYXAiPmNvbnRhY3QgdXM8L2E+LjwvcD4KICAgICAgICAgICAgPHAgY2xhc3M9InRleHQtc20iPjxhIGhyZWY9IiNjb3B5cmlnaHQiIHRhcmdldD0iX3NlbGYiIGRhdGEtYnMtdG9nZ2xlPSJjb2xsYXBzZSIgYXJpYS1leHBhbmRlZD0iZmFsc2UiIGFyaWEtY29udHJvbHM9ImNvcHlyaWdodCI+wqkgQWxsIFJpZ2h0cyBSZXNlcnZlZDwvYT4gPHNwYW4gaWQ9ImNvcHlyaWdodCIgY2xhc3M9ImNvbGxhcHNlIj5BbGwgSVNPIHB1YmxpY2F0aW9ucyBhbmQgbWF0ZXJpYWxzIGFyZSBwcm90ZWN0ZWQgYnkgY29weXJpZ2h0IGFuZCBhcmUgc3ViamVjdCB0byB0aGUgdXNlcuKAmXMgYWNjZXB0YW5jZSBvZiBJU0/igJlzIGNvbmRpdGlvbnMgb2YgY29weXJpZ2h0LiBBbnkgdXNlLCBpbmNsdWRpbmcgcmVwcm9kdWN0aW9uIHJlcXVpcmVzIG91ciB3cml0dGVuIHBlcm1pc3Npb24uIEFsbCBjb3B5cmlnaHQgcmVxdWVzdHMgc2hvdWxkIGJlIGFkZHJlc3NlZCB0byA8YSBocmVmPSJtYWlsdG86Y29weXJpZ2h0QGlzby5vcmciPmNvcHlyaWdodEBpc28ub3JnPC9hPi48L3NwYW4+PC9wPgogICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICAgIDwvZGl2PgogICAgICA8ZGl2IGNsYXNzPSJ0b3BiYXIiPgogICAgICAgIDxkaXYgY2xhc3M9InRvcGJhci1jb250ZW50Ij4KICAgICAgICAgIDxhIGNsYXNzPSJsb2dvIGlzb2xvZ28gbG9nby14cyB0aGVtZS1yZWQgcG93ZXJlZGJ5IHBhZ2Utc2Nyb2xsIGxvZ28tc2Nyb2xsVG9wIiBocmVmPSIjcGFnZS10b3AiIHRpdGxlPSJTY3JvbGwgdG8gdG9wIj48L2E+CiAgICAgICAgICA8ZGl2IGNsYXNzPSJwb3dlcmVkYnktdHh0Ij5Qb3dlcmVkIGJ5PC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICAgIDwvZGl2PgogICAgICA8ZGl2IGNsYXNzPSJydWJiZXIiPjwvZGl2PgogICAgPC9mb290ZXI+CgogICAgPC9ib2R5Pgo8L2h0bWw+
  recorded_at: Thu, 02 Feb 2023 16:15:42 GMT
- request:
    method: get
    uri: https://www.iso.org/fr/standard/76835.html
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - www.iso.org
  response:
    status:
      code: 200
      message: ''
    headers:
      Expires:
      - Wed, 09 May 1979 05:30:00 GMT
      Cache-Control:
      - no-cache, no-store, must-revalidate, proxy-revalidate, max-age=0
      Pragma:
      - no-cache
      Set-Cookie:
      - BIGipServerpool_prod_iso_www-jahia=713576842.36895.0000; path=/; Httponly;
        Secure
      - JSESSIONID=C5A24307DE024B89BFB21FCA362C4549; Path=/; Secure; HttpOnly
      Vary:
      - accept-encoding
      Content-Type:
      - text/html;charset=UTF-8
      Transfer-Encoding:
      - chunked
      Date:
      - Thu, 02 Feb 2023 16:15:44 GMT
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Thu, 02 Feb 2023 16:15:44 GMT
recorded_with: VCR 6.1.0
