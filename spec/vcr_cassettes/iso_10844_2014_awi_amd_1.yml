---
http_interactions:
- request:
    method: post
    uri: https://jcl49wv5ar-dsn.algolia.net/1/indexes/all_en/query
    body:
      encoding: UTF-8
      string: '{"query":"ISO 10844:2014/AWI Amd 1","hitsPerPage":100,"filters":"category:standard"}'
    headers:
      User-Agent:
      - Algolia for Ruby (2.3.4), Ruby (3.2.0)
      X-Algolia-Api-Key:
      - dd1b9e1ab383f4d4817d29cd5e96d3f0
      X-Algolia-Application-Id:
      - JCL49WV5AR
      Content-Type:
      - application/json; charset=utf-8
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      Connection:
      - keep-alive
      Keep-Alive:
      - '30'
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx
      Date:
      - Sun, 07 Jan 2024 16:06:02 GMT
      Content-Type:
      - application/json; charset=UTF-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      X-Alg-Pt:
      - '1'
      Accept-Encoding:
      - deflate, gzip
      Cache-Control:
      - no-store
      Access-Control-Allow-Origin:
      - "*"
      Timing-Allow-Origin:
      - "*"
      X-Content-Type-Options:
      - nosniff
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      Content-Disposition:
      - inline; filename=a.txt
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        eyJoaXRzIjpbeyJjYXRlZ29yeSI6InN0YW5kYXJkIiwicGF0aCI6Ii9zaXRlcy9pc29vcmcvY29udGVudHMvZGF0YS9zdGFuZGFyZC8wNy83My83NzM3NCIsInV1aWQiOiI3ODA3ZDVkMy1mYjQwLTQyZDktOTdhYi02NDZhOGI5N2VhYTEiLCJ0aXRsZSI6IklTTyAxMDg0NDoyMDE0L0FXSSBBbWQgMSBBY291c3RpY3Mg4oCUIFNwZWNpZmljYXRpb24gb2YgdGVzdCB0cmFja3MgZm9yIG1lYXN1cmluZyBub2lzZSBlbWl0dGVkIGJ5IHJvYWQgdmVoaWNsZXMgYW5kIHRoZWlyIHR5cmVzIOKAlCBBbWVuZG1lbnQgMSIsInN0YXR1cyI6IkRlbGV0ZWQiLCJ5ZWFyIjoyMDE5LCJvcmRlciI6MTAwLCJvYmplY3RJRCI6Ijc3Mzc0XzAiLCJfaGlnaGxpZ2h0UmVzdWx0Ijp7InRpdGxlIjp7InZhbHVlIjoiPGVtPklTTzwvZW0+IDxlbT4xMDg0NDoyMDE0PC9lbT4vPGVtPkFXSTwvZW0+IDxlbT5BbWQ8L2VtPiA8ZW0+MTwvZW0+IEFjb3VzdGljcyDigJQgU3BlY2lmaWNhdGlvbiBvZiB0ZXN0IHRyYWNrcyBmb3IgbWVhc3VyaW5nIG5vaXNlIGVtaXR0ZWQgYnkgcm9hZCB2ZWhpY2xlcyBhbmQgdGhlaXIgdHlyZXMg4oCUIEFtZW5kbWVudCA8ZW0+MTwvZW0+IiwibWF0Y2hMZXZlbCI6ImZ1bGwiLCJmdWxseUhpZ2hsaWdodGVkIjpmYWxzZSwibWF0Y2hlZFdvcmRzIjpbImlzbyIsIjEwODQ0IiwiOiIsIjIwMTQiLCJhd2kiLCJhbWQiLCIxIl19fX1dLCJuYkhpdHMiOjEsInBhZ2UiOjAsIm5iUGFnZXMiOjEsImhpdHNQZXJQYWdlIjoxMDAsImV4aGF1c3RpdmVOYkhpdHMiOnRydWUsImV4aGF1c3RpdmVUeXBvIjp0cnVlLCJleGhhdXN0aXZlIjp7Im5iSGl0cyI6dHJ1ZSwidHlwbyI6dHJ1ZX0sInF1ZXJ5IjoiSVNPIDEwODQ0OjIwMTQvQVdJIEFtZCAxIiwicGFyYW1zIjoicXVlcnk9SVNPKzEwODQ0JTNBMjAxNCUyRkFXSStBbWQrMSZoaXRzUGVyUGFnZT0xMDAmZmlsdGVycz1jYXRlZ29yeSUzQXN0YW5kYXJkIiwicXVlcnlJRCI6ImY2MjUyNmZlYzI3MzcxZjY0YmRmYWU5MzI0NmJiY2VjIiwiX2F1dG9tYXRpY0luc2lnaHRzIjp0cnVlLCJyZW5kZXJpbmdDb250ZW50Ijp7fSwicHJvY2Vzc2luZ1RpbWVNUyI6MSwicHJvY2Vzc2luZ1RpbWluZ3NNUyI6eyJfcmVxdWVzdCI6eyJyb3VuZFRyaXAiOjE0MH19LCJzZXJ2ZXJUaW1lTVMiOjF9
  recorded_at: Sun, 07 Jan 2024 16:06:03 GMT
- request:
    method: get
    uri: https://www.iso.org/contents/data/standard/07/73/77374.html
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - www.iso.org
  response:
    status:
      code: 301
      message: ''
    headers:
      Expires:
      - Wed, 09 May 1979 05:30:00 GMT
      Cache-Control:
      - no-cache, no-store, must-revalidate, proxy-revalidate, max-age=0
      Pragma:
      - no-cache
      Set-Cookie:
      - BIGipServerpool_prod_iso_www-jahia=713576842.36895.0000; path=/; Httponly;
        Secure
      - JSESSIONID=A50C30A107053B3C0B53351E10F1B8D5; Path=/; Secure; HttpOnly
      Location:
      - "/standard/77374.html"
      Content-Length:
      - '0'
      Date:
      - Sun, 07 Jan 2024 16:06:03 GMT
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains
    body:
      encoding: UTF-8
      string: ''
  recorded_at: Sun, 07 Jan 2024 16:06:03 GMT
- request:
    method: get
    uri: https://www.iso.org/standard/77374.html
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - www.iso.org
  response:
    status:
      code: 200
      message: ''
    headers:
      Expires:
      - Wed, 09 May 1979 05:30:00 GMT
      Cache-Control:
      - no-cache, no-store, must-revalidate, proxy-revalidate, max-age=0
      Pragma:
      - no-cache
      Set-Cookie:
      - BIGipServerpool_prod_iso_www-jahia=730354058.36895.0000; path=/; Httponly;
        Secure
      - JSESSIONID=3EBA736CB03BF289A83E503D1BC9E8C7; Path=/; Secure; HttpOnly
      Vary:
      - accept-encoding
      Content-Type:
      - text/html;charset=UTF-8
      Transfer-Encoding:
      - chunked
      Date:
      - Sun, 07 Jan 2024 16:06:03 GMT
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Sun, 07 Jan 2024 16:06:04 GMT
- request:
    method: get
    uri: https://www.iso.org/fr/standard/77374.html
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - www.iso.org
  response:
    status:
      code: 200
      message: ''
    headers:
      Expires:
      - Wed, 09 May 1979 05:30:00 GMT
      Cache-Control:
      - no-cache, no-store, must-revalidate, proxy-revalidate, max-age=0
      Pragma:
      - no-cache
      Set-Cookie:
      - BIGipServerpool_prod_iso_www-jahia=747131274.36895.0000; path=/; Httponly;
        Secure
      - JSESSIONID=14A534E42DF4EE6AC05C37C4F2C79C43; Path=/; Secure; HttpOnly
      Vary:
      - accept-encoding
      Content-Type:
      - text/html;charset=UTF-8
      Transfer-Encoding:
      - chunked
      Date:
      - Sun, 07 Jan 2024 16:06:05 GMT
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Sun, 07 Jan 2024 16:06:05 GMT
recorded_with: VCR 6.2.0
