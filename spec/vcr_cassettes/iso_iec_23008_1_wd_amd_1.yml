---
http_interactions:
- request:
    method: post
    uri: https://jcl49wv5ar-dsn.algolia.net/1/indexes/all_en/query
    body:
      encoding: UTF-8
      string: '{"query":"ISO/IEC 23008-1/WD Amd 1","hitsPerPage":100,"filters":"category:standard"}'
    headers:
      User-Agent:
      - Algolia for Ruby (2.3.1), Ruby (3.0.0)
      X-Algolia-Api-Key:
      - dd1b9e1ab383f4d4817d29cd5e96d3f0
      X-Algolia-Application-Id:
      - JCL49WV5AR
      Content-Type:
      - application/json; charset=utf-8
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      Connection:
      - keep-alive
      Keep-Alive:
      - '30'
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx
      Date:
      - Thu, 02 Feb 2023 16:14:30 GMT
      Content-Type:
      - application/json; charset=UTF-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      X-Alg-Pt:
      - '1'
      Accept-Encoding:
      - deflate, gzip
      Cache-Control:
      - no-store
      Access-Control-Allow-Origin:
      - "*"
      Timing-Allow-Origin:
      - "*"
      X-Content-Type-Options:
      - nosniff
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      Content-Disposition:
      - inline; filename=a.txt
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        eyJoaXRzIjpbeyJjYXRlZ29yeSI6InN0YW5kYXJkIiwicGF0aCI6Ii9zaXRlcy9pc29vcmcvY29udGVudHMvZGF0YS9zdGFuZGFyZC8wOC8yNy84MjcyNyIsInV1aWQiOiIwOTMxNWYzZC1hNDcwLTQ3NzctOTcwMy05N2NmN2IzMTdlYWIiLCJ0aXRsZSI6IklTTy9JRUMgMjMwMDgtMToyMDIzL1dEIEFtZCAxIEluZm9ybWF0aW9uIHRlY2hub2xvZ3kg4oCUIEhpZ2ggZWZmaWNpZW5jeSBjb2RpbmcgYW5kIG1lZGlhIGRlbGl2ZXJ5IGluIGhldGVyb2dlbmVvdXMgZW52aXJvbm1lbnRzIOKAlCBQYXJ0IDE6IE1QRUcgbWVkaWEgdHJhbnNwb3J0IChNTVQpIOKAlCBBbWVuZG1lbnQgMTogSW1wcm92ZW1lbnQgb2YgTU1UIG1lc3NhZ2UgdHJhbnNhY3Rpb24iLCJzdGF0dXMiOiJVbmRlciBkZXZlbG9wbWVudCIsInllYXIiOjIwMjEsIm9yZGVyIjoxMiwib2JqZWN0SUQiOiI4MjcyN18wIiwiX2hpZ2hsaWdodFJlc3VsdCI6eyJ0aXRsZSI6eyJ2YWx1ZSI6IjxlbT5JU088L2VtPi88ZW0+SUVDPC9lbT4gPGVtPjIzMDA4LTE8L2VtPjoyMDIzLzxlbT5XRDwvZW0+IDxlbT5BbWQ8L2VtPiA8ZW0+MTwvZW0+IEluZm9ybWF0aW9uIHRlY2hub2xvZ3kg4oCUIEhpZ2ggZWZmaWNpZW5jeSBjb2RpbmcgYW5kIG1lZGlhIGRlbGl2ZXJ5IGluIGhldGVyb2dlbmVvdXMgZW52aXJvbm1lbnRzIOKAlCBQYXJ0IDxlbT4xPC9lbT46IE1QRUcgbWVkaWEgdHJhbnNwb3J0IChNTVQpIOKAlCBBbWVuZG1lbnQgPGVtPjE8L2VtPjogSW1wcm92ZW1lbnQgb2YgTU1UIG1lc3NhZ2UgdHJhbnNhY3Rpb24iLCJtYXRjaExldmVsIjoiZnVsbCIsImZ1bGx5SGlnaGxpZ2h0ZWQiOmZhbHNlLCJtYXRjaGVkV29yZHMiOlsiaXNvIiwiaWVjIiwiMjMwMDgiLCIxIiwid2QiLCJhbWQiLCIxIl19fX1dLCJuYkhpdHMiOjEsInBhZ2UiOjAsIm5iUGFnZXMiOjEsImhpdHNQZXJQYWdlIjoxMDAsImV4aGF1c3RpdmVOYkhpdHMiOnRydWUsImV4aGF1c3RpdmVUeXBvIjp0cnVlLCJleGhhdXN0aXZlIjp7Im5iSGl0cyI6dHJ1ZSwidHlwbyI6dHJ1ZX0sInF1ZXJ5IjoiSVNPL0lFQyAyMzAwOC0xL1dEIEFtZCAxIiwicGFyYW1zIjoicXVlcnk9SVNPJTJGSUVDKzIzMDA4LTElMkZXRCtBbWQrMSZoaXRzUGVyUGFnZT0xMDAmZmlsdGVycz1jYXRlZ29yeSUzQXN0YW5kYXJkIiwicHJvY2Vzc2luZ1RpbWVNUyI6MSwicHJvY2Vzc2luZ1RpbWluZ3NNUyI6eyJyZXF1ZXN0Ijp7InJvdW5kVHJpcCI6MjA0fX19
  recorded_at: Thu, 02 Feb 2023 16:14:30 GMT
- request:
    method: get
    uri: https://www.iso.org/contents/data/standard/08/27/82727.html
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - www.iso.org
  response:
    status:
      code: 301
      message: ''
    headers:
      Expires:
      - Wed, 09 May 1979 05:30:00 GMT
      Cache-Control:
      - no-cache, no-store, must-revalidate, proxy-revalidate, max-age=0
      Pragma:
      - no-cache
      Set-Cookie:
      - BIGipServerpool_prod_iso_www-jahia=747131274.36895.0000; path=/; Httponly;
        Secure
      - JSESSIONID=B9B0C0B7FFE6D641A432AF50370003C5; Path=/; Secure; HttpOnly
      Location:
      - "/standard/82727.html"
      Content-Length:
      - '0'
      Date:
      - Thu, 02 Feb 2023 16:14:31 GMT
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains
    body:
      encoding: UTF-8
      string: ''
  recorded_at: Thu, 02 Feb 2023 16:14:31 GMT
- request:
    method: get
    uri: https://www.iso.org/standard/82727.html
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - www.iso.org
  response:
    status:
      code: 200
      message: ''
    headers:
      Expires:
      - Wed, 09 May 1979 05:30:00 GMT
      Cache-Control:
      - no-cache, no-store, must-revalidate, proxy-revalidate, max-age=0
      Pragma:
      - no-cache
      Set-Cookie:
      - BIGipServerpool_prod_iso_www-jahia=747131274.36895.0000; path=/; Httponly;
        Secure
      - JSESSIONID=5262EA52349C79900A64035C0969C8B6; Path=/; Secure; HttpOnly
      Vary:
      - accept-encoding
      Content-Type:
      - text/html;charset=UTF-8
      Transfer-Encoding:
      - chunked
      Date:
      - Thu, 02 Feb 2023 16:14:32 GMT
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Thu, 02 Feb 2023 16:14:33 GMT
- request:
    method: get
    uri: https://www.iso.org/fr/standard/82727.html
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - www.iso.org
  response:
    status:
      code: 200
      message: ''
    headers:
      Expires:
      - Wed, 09 May 1979 05:30:00 GMT
      Cache-Control:
      - no-cache, no-store, must-revalidate, proxy-revalidate, max-age=0
      Pragma:
      - no-cache
      Set-Cookie:
      - BIGipServerpool_prod_iso_www-jahia=713576842.36895.0000; path=/; Httponly;
        Secure
      - JSESSIONID=7682A764B1787A63CE6A6FC795CED1A0; Path=/; Secure; HttpOnly
      Vary:
      - accept-encoding
      Content-Type:
      - text/html;charset=UTF-8
      Transfer-Encoding:
      - chunked
      Date:
      - Thu, 02 Feb 2023 16:14:34 GMT
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Thu, 02 Feb 2023 16:14:34 GMT
recorded_with: VCR 6.1.0
