---
http_interactions:
- request:
    method: post
    uri: https://jcl49wv5ar-dsn.algolia.net/1/indexes/all_en/query
    body:
      encoding: UTF-8
      string: '{"query":"ISO/IEC 23008-1/WD Amd 1","hitsPerPage":100,"filters":"category:standard"}'
    headers:
      User-Agent:
      - Algolia for Ruby (2.3.1), Ruby (3.0.0)
      X-Algolia-Api-Key:
      - dd1b9e1ab383f4d4817d29cd5e96d3f0
      X-Algolia-Application-Id:
      - JCL49WV5AR
      Content-Type:
      - application/json; charset=utf-8
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      Connection:
      - keep-alive
      Keep-Alive:
      - '30'
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx
      Date:
      - Tue, 13 Dec 2022 14:56:53 GMT
      Content-Type:
      - application/json; charset=UTF-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      X-Alg-Pt:
      - '1'
      Accept-Encoding:
      - deflate, gzip
      Cache-Control:
      - no-store
      Access-Control-Allow-Origin:
      - "*"
      Timing-Allow-Origin:
      - "*"
      X-Content-Type-Options:
      - nosniff
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      Content-Disposition:
      - inline; filename=a.txt
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        eyJoaXRzIjpbeyJjYXRlZ29yeSI6InN0YW5kYXJkIiwicGF0aCI6Ii9zaXRlcy9pc29vcmcvY29udGVudHMvZGF0YS9zdGFuZGFyZC8wOC8yNy84MjcyNyIsInV1aWQiOiIwOTMxNWYzZC1hNDcwLTQ3NzctOTcwMy05N2NmN2IzMTdlYWIiLCJ0aXRsZSI6IklTTy9JRUMgMjMwMDgtMS9XRCBBbWQgMSBJbmZvcm1hdGlvbiB0ZWNobm9sb2d5IOKAlCBIaWdoIGVmZmljaWVuY3kgY29kaW5nIGFuZCBtZWRpYSBkZWxpdmVyeSBpbiBoZXRlcm9nZW5lb3VzIGVudmlyb25tZW50cyDigJQgUGFydCAxOiBNUEVHIG1lZGlhIHRyYW5zcG9ydCAoTU1UKSDigJQgQW1lbmRtZW50IDE6IEltcHJvdmVtZW50IG9mIE1NVCBtZXNzYWdlIHRyYW5zYWN0aW9uIiwic3RhdHVzIjoiVW5kZXIgZGV2ZWxvcG1lbnQiLCJ5ZWFyIjoyMDIxLCJvcmRlciI6MTIsIm9iamVjdElEIjoiODI3MjdfMCIsIl9oaWdobGlnaHRSZXN1bHQiOnsidGl0bGUiOnsidmFsdWUiOiI8ZW0+SVNPPC9lbT4vPGVtPklFQzwvZW0+IDxlbT4yMzAwOC0xPC9lbT4vPGVtPldEPC9lbT4gPGVtPkFtZDwvZW0+IDxlbT4xPC9lbT4gSW5mb3JtYXRpb24gdGVjaG5vbG9neSDigJQgSGlnaCBlZmZpY2llbmN5IGNvZGluZyBhbmQgbWVkaWEgZGVsaXZlcnkgaW4gaGV0ZXJvZ2VuZW91cyBlbnZpcm9ubWVudHMg4oCUIFBhcnQgPGVtPjE8L2VtPjogTVBFRyBtZWRpYSB0cmFuc3BvcnQgKE1NVCkg4oCUIEFtZW5kbWVudCA8ZW0+MTwvZW0+OiBJbXByb3ZlbWVudCBvZiBNTVQgbWVzc2FnZSB0cmFuc2FjdGlvbiIsIm1hdGNoTGV2ZWwiOiJmdWxsIiwiZnVsbHlIaWdobGlnaHRlZCI6ZmFsc2UsIm1hdGNoZWRXb3JkcyI6WyJpc28iLCJpZWMiLCIyMzAwOCIsIjEiLCJ3ZCIsImFtZCIsIjEiXX19fV0sIm5iSGl0cyI6MSwicGFnZSI6MCwibmJQYWdlcyI6MSwiaGl0c1BlclBhZ2UiOjEwMCwiZXhoYXVzdGl2ZU5iSGl0cyI6dHJ1ZSwiZXhoYXVzdGl2ZVR5cG8iOnRydWUsImV4aGF1c3RpdmUiOnsibmJIaXRzIjp0cnVlLCJ0eXBvIjp0cnVlfSwicXVlcnkiOiJJU08vSUVDIDIzMDA4LTEvV0QgQW1kIDEiLCJwYXJhbXMiOiJxdWVyeT1JU08lMkZJRUMrMjMwMDgtMSUyRldEK0FtZCsxJmhpdHNQZXJQYWdlPTEwMCZmaWx0ZXJzPWNhdGVnb3J5JTNBc3RhbmRhcmQiLCJwcm9jZXNzaW5nVGltZU1TIjoxfQ==
  recorded_at: Tue, 13 Dec 2022 14:56:53 GMT
- request:
    method: get
    uri: https://www.iso.org/contents/data/standard/08/27/82727.html
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - www.iso.org
  response:
    status:
      code: 301
      message: ''
    headers:
      Expires:
      - Wed, 09 May 1979 05:30:00 GMT
      Cache-Control:
      - no-cache, no-store, must-revalidate, proxy-revalidate, max-age=0
      Pragma:
      - no-cache
      Set-Cookie:
      - BIGipServerpool_prod_iso_www-jahia=747131274.36895.0000; path=/; Httponly;
        Secure
      - JSESSIONID=3089FBBBB15F2E49B690139B17A683B2; Path=/; Secure; HttpOnly
      Location:
      - "/standard/82727.html"
      Content-Length:
      - '0'
      Date:
      - Tue, 13 Dec 2022 14:56:54 GMT
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains
    body:
      encoding: UTF-8
      string: ''
  recorded_at: Tue, 13 Dec 2022 14:56:54 GMT
- request:
    method: get
    uri: https://www.iso.org/standard/82727.html
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - www.iso.org
  response:
    status:
      code: 200
      message: ''
    headers:
      Expires:
      - Wed, 09 May 1979 05:30:00 GMT
      Cache-Control:
      - no-cache, no-store, must-revalidate, proxy-revalidate, max-age=0
      Pragma:
      - no-cache
      Set-Cookie:
      - BIGipServerpool_prod_iso_www-jahia=747131274.36895.0000; path=/; Httponly;
        Secure
      - JSESSIONID=F3EC200581799E0E8C1B4609348EC0CD; Path=/; Secure; HttpOnly
      Vary:
      - accept-encoding
      Content-Type:
      - text/html;charset=UTF-8
      Transfer-Encoding:
      - chunked
      Date:
      - Tue, 13 Dec 2022 14:56:55 GMT
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Tue, 13 Dec 2022 14:56:55 GMT
- request:
    method: get
    uri: https://www.iso.org/fr/standard/82727.html
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - www.iso.org
  response:
    status:
      code: 200
      message: ''
    headers:
      Expires:
      - Wed, 09 May 1979 05:30:00 GMT
      Cache-Control:
      - no-cache, no-store, must-revalidate, proxy-revalidate, max-age=0
      Pragma:
      - no-cache
      Set-Cookie:
      - BIGipServerpool_prod_iso_www-jahia=747131274.36895.0000; path=/; Httponly;
        Secure
      - JSESSIONID=5EE91DD3621DA8362BF5D2321AAFF566; Path=/; Secure; HttpOnly
      Vary:
      - accept-encoding
      Content-Type:
      - text/html;charset=UTF-8
      Transfer-Encoding:
      - chunked
      Date:
      - Tue, 13 Dec 2022 14:56:56 GMT
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Tue, 13 Dec 2022 14:56:56 GMT
recorded_with: VCR 6.1.0
